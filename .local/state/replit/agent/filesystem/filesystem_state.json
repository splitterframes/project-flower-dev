{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack gaming application built with React, Express, and PostgreSQL. The application features a modern web-based game interface with 3D graphics capabilities, user authentication, and a credit-based gaming system. It includes a dashboard for user management, game interaction, and real-time audio feedback.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## CRITICAL: Storage Architecture Rule\n🚨 **PostgreSQL ONLY** - Never implement dual storage systems (PostgreSQL + Memory) again!\n- Memory storage was removed Sept 4, 2025 due to bugs, complexity, and sync issues\n- Only use `postgresStorage.ts` - never create alternative storage implementations\n- This prevents \"function not found\" bugs and maintains system reliability\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development practices\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Styling**: Tailwind CSS with custom component library using Radix UI primitives\n- **3D Graphics**: React Three Fiber (@react-three/fiber) with Drei helpers for 3D game rendering\n- **State Management**: Zustand stores for client-side state (auth, credits, game, audio)\n- **UI Components**: Comprehensive shadcn/ui component library with dark theme support\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules for consistency with frontend\n- **API Pattern**: RESTful endpoints with structured error handling\n- **Development**: Hot reload via Vite integration for seamless full-stack development\n- **Storage Strategy**: PostgreSQL-only architecture using Drizzle ORM (Memory storage removed permanently)\n\n## Data Storage\n- **Database**: PostgreSQL configured via Drizzle ORM\n- **Schema Management**: Drizzle Kit for migrations and schema synchronization\n- **Connection**: Neon Database serverless connection for scalable PostgreSQL hosting\n- **Production & Development**: Single PostgreSQL storage system for all environments\n\n## Authentication & Authorization\n- **Authentication**: Simple username/password authentication with session-based state\n- **User Management**: User registration, login, and profile management\n- **Credit System**: Integrated credit-based economy for game transactions\n- **Session Handling**: Client-side state management with Zustand persistence\n\n## Game System\n- **Game Engine**: Custom 3D game implementation using React Three Fiber\n- **Audio System**: HTML5 Audio API with background music and sound effects\n- **Game States**: Phase-based game management (ready, playing, ended)\n- **Input Handling**: Keyboard controls with WASD movement and spacebar actions\n- **UI Integration**: Game interface overlays with mute controls and restart functionality\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database queries and schema management\n- **Drizzle Kit**: Database migration and schema synchronization tools\n\n## Frontend Libraries\n- **Radix UI**: Unstyled, accessible UI primitives for component foundation\n- **React Three Fiber**: React renderer for Three.js 3D graphics\n- **React Three Drei**: Useful helpers and abstractions for 3D scenes\n- **React Query**: Server state management and API caching (TanStack Query)\n- **Zustand**: Lightweight state management for client-side stores\n\n## Development Tools\n- **Vite**: Frontend build tool with hot module replacement\n- **TypeScript**: Static type checking for both frontend and backend\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n## Audio Assets\n- **Background Music**: Looping ambient game music (MP3 format)\n- **Sound Effects**: Hit sounds and success notifications for game feedback\n- **Font Assets**: Inter font family for consistent typography\n\n## Utility Libraries\n- **Zod**: Runtime type validation for API requests and responses\n- **Class Variance Authority**: Type-safe CSS class generation\n- **Date-fns**: Date manipulation and formatting utilities\n- **Lucide React**: Consistent icon library for UI elements\n\n# Game Asset Distribution\n\n## 7-Tier Rarity System\nThe game uses a weighted distribution system for flowers and butterflies across 7 rarity tiers:\n\n## Strategic Pond Feeding System (Sept 4, 2025)\n**🎯 FIXED: Strategic Caterpillar-to-Fish Feeding**\n- Each caterpillar's rarity is tracked when fed to pond fields\n- Fish spawning uses AVERAGE rarity of all 3 fed caterpillars\n- Enables strategic gameplay: feed 3 high-rarity caterpillars = high-rarity fish\n- Example: feed common(0) + legendary(5) + rare(2) → average = 2.33 ≈ rare fish\n- In-memory tracking system prevents data persistence issues\n- Fish spawn field-sized with bounce animations upon collection\n\n### Rarity Tiers with Colors\n- **Common** (gelb/yellow): 45% - Most frequent, basic varieties\n- **Uncommon** (grün/green): 30% - Slightly rarer, colorful varieties  \n- **Rare** (blau/blue): 15% - Beautiful, harder to find species\n- **Super-rare** (türkis/turquoise): 7% - Exotic, stunning varieties\n- **Epic** (lila/purple): 2.5% - Magnificent, powerful species\n- **Legendary** (orange): 0.4% - Mythic, awe-inspiring varieties\n- **Mythical** (rot/red): 0.1% - Ultimate, legendary species\n\n### Updated Asset Distribution (August 2025)\n\n#### 200 Flower Images (/Blumen folder)\n- **Common**: 55 flowers - Images 1-55\n- **Uncommon**: 45 flowers - Images 56-100  \n- **Rare**: 35 flowers - Images 101-135\n- **Super-rare**: 25 flowers - Images 136-160\n- **Epic**: 20 flowers - Images 161-180\n- **Legendary**: 15 flowers - Images 181-195\n- **Mythical**: 5 flowers - Images 196-200\n\n#### 1000 Butterfly Images (/Schmetterlinge folder)\n- **Common**: 443 butterflies - Images 001-443\n- **Uncommon**: 300 butterflies - Images 444-743\n- **Rare**: 100 butterflies - Images 744-843  \n- **Super-rare**: 75 butterflies - Images 844-918\n- **Epic**: 45 butterflies - Images 919-963\n- **Legendary**: 25 butterflies - Images 964-988\n- **Mythical**: 12 butterflies - Images 989-1000\n\n## Visual System\n- Seeds use the universal seed image (0.jpg) with rarity-colored borders\n- Flowers use their specific numbered images (1-200.jpg) with rarity borders\n- All images appear smaller than field size with prominent rarity borders\n- Fallback icons (Flower/Sparkles) for missing images\n- Latin-sounding names generated dynamically for flowers and butterflies\n\n## Planting & Growth System\n- Growth times: Common 75s → Mythical 600s (10min)\n- Random flower generation based on seed rarity when planted\n- Real-time countdown timers with hover display\n- Visual progression: Seed image → Grown flower image\n- Click to plant seeds, click grown flowers to harvest","size_bytes":6861},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser()); // Enable cookie parsing for JWT authentication\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    \n    // Start butterfly spawning system\n    import('./butterflySpawner').then(({ butterflySpawner }) => {\n      butterflySpawner.start();\n      log('🦋 Butterfly spawning system initialized');\n    });\n\n    // Start sun spawning system\n    import('./sunSpawner').then(({ sunSpawner }) => {\n      sunSpawner.start();\n      log('☀️ Sun spawning system initialized');\n    });\n\n    // Start passive income processing system\n    import('./passiveIncomeProcessor').then(({ passiveIncomeProcessor }) => {\n      passiveIncomeProcessor.start();\n      log('💰 Passive income processing system initialized');\n    });\n\n    // Start weekly challenge management system\n    import('./challengeManager').then(({ challengeManager }) => {\n      challengeManager.start();\n    });\n\n  });\n})();\n","size_bytes":2759},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { postgresStorage as storage } from \"./postgresStorage\";\nimport { insertUserSchema, loginSchema, createMarketListingSchema, buyListingSchema, plantSeedSchema, harvestFieldSchema, createBouquetSchema, placeBouquetSchema, unlockFieldSchema, collectSunSchema, placeButterflyOnFieldSchema, placeFlowerOnFieldSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { createDonationCheckoutSession, getDonationStatus, handleStripeWebhook } from \"./stripe\";\nimport rateLimit from \"express-rate-limit\";\nimport { generateToken, requireAuth, requireAuthenticatedUser, optionalAuth, type AuthenticatedRequest } from \"./auth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // 🔒 SECURITY: Rate limiter for batch endpoints to prevent abuse\n  const batchApiLimiter = rateLimit({\n    windowMs: 60 * 1000, // 1 minute\n    max: 60, // Max 60 batch requests per minute per IP\n    message: { error: \"Too many batch requests, please try again later\" },\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n  \n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(userData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const user = await storage.createUser(userData);\n      \n      // Generate JWT token\n      const token = generateToken({ id: user.id, username: user.username });\n      \n      // Set secure HTTP-only cookie\n      res.cookie('authToken', token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'strict',\n        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n        path: '/'\n      });\n      \n      console.log(`🔐 User registered and authenticated: ${user.username} (ID: ${user.id})`);\n      \n      res.json({ \n        user: { \n          id: user.id, \n          username: user.username, \n          credits: user.credits \n        },\n        message: \"Registration successful\"\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error('Registration error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const loginData = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByUsername(loginData.username);\n      if (!user || user.password !== loginData.password) {\n        return res.status(401).json({ message: \"Invalid username or password\" });\n      }\n\n      // Generate JWT token\n      const token = generateToken({ id: user.id, username: user.username });\n      \n      // Set secure HTTP-only cookie\n      res.cookie('authToken', token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'strict',\n        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n        path: '/'\n      });\n      \n      console.log(`🔐 User logged in: ${user.username} (ID: ${user.id})`);\n\n      res.json({ \n        user: { \n          id: user.id, \n          username: user.username, \n          credits: user.credits \n        },\n        message: \"Login successful\"\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error('Login error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/auth/logout\", (req, res) => {\n    res.clearCookie('authToken', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      path: '/'\n    });\n    \n    console.log(`🔐 User logged out`);\n    res.json({ message: \"Logged out successfully\" });\n  });\n\n  // Get current user endpoint (validates JWT)\n  app.get(\"/api/auth/me\", requireAuth, (req: AuthenticatedRequest, res) => {\n    if (!req.user) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    \n    res.json({\n      user: {\n        id: req.user.userId,\n        username: req.user.username\n      }\n    });\n  });\n\n  // 💳 Stripe Donation Routes\n  app.post(\"/api/stripe/create-donation-session\", createDonationCheckoutSession);\n  app.get(\"/api/stripe/donation-status/:sessionId\", getDonationStatus);\n  app.post(\"/api/stripe/webhook\", handleStripeWebhook);\n\n  // Credits routes\n  app.get(\"/api/user/:id/credits\", requireAuthenticatedUser, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.validatedUserId!; // Use validated user ID from middleware\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Prevent caching to ensure fresh data\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n      res.json({ credits: user.credits });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/user/:id/credits\", requireAuthenticatedUser, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.validatedUserId!; // Use validated user ID from middleware\n      const { amount } = req.body;\n      \n      if (typeof amount !== 'number') {\n        return res.status(400).json({ message: \"Amount must be a number\" });\n      }\n\n      const user = await storage.updateUserCredits(userId, amount);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ credits: user.credits });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Hearts routes\n  app.get(\"/api/user/:id/hearts\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ hearts: user.hearts || 0 });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/user/:id/hearts\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { amount } = req.body;\n      \n      if (typeof amount !== 'number') {\n        return res.status(400).json({ message: \"Amount must be a number\" });\n      }\n\n      const newHearts = await storage.updateUserHearts(userId, amount);\n      res.json({ hearts: newHearts });\n    } catch (error) {\n      console.error('Failed to update hearts:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Suns routes\n  app.get(\"/api/user/:id/suns\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Prevent caching to ensure fresh data\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n      res.json({ suns: user.suns || 100 });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/user/:id/suns\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { amount } = req.body;\n      \n      if (typeof amount !== 'number') {\n        return res.status(400).json({ message: \"Amount must be a number\" });\n      }\n\n      const user = await storage.updateUserSuns(userId, amount);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ suns: user.suns });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // DNA routes\n  app.get(\"/api/user/:id/dna\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Prevent caching to ensure fresh data\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n      res.json({ dna: user.dna || 0 });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/user/:id/dna\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { amount } = req.body;\n      \n      if (typeof amount !== 'number') {\n        return res.status(400).json({ message: \"Amount must be a number\" });\n      }\n\n      const user = await storage.updateUserDna(userId, amount);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ dna: user.dna });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Tickets routes\n  app.get(\"/api/user/:id/tickets\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Prevent caching to ensure fresh data\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n      res.json({ tickets: user.tickets || 0 });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/user/:id/tickets\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { amount } = req.body;\n      \n      if (typeof amount !== 'number') {\n        return res.status(400).json({ message: \"Amount must be a number\" });\n      }\n\n      const user = await storage.updateUserTickets(userId, amount);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ tickets: user.tickets });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Hearts routes\n  app.get(\"/api/user/:id/hearts\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ hearts: user.hearts || 0 });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/user/:id/hearts\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { amount } = req.body;\n      \n      if (typeof amount !== 'number') {\n        return res.status(400).json({ message: \"Amount must be a number\" });\n      }\n\n      const user = await storage.updateUserHearts(userId, amount);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ hearts: user.hearts });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Balloon collection endpoint with validation and anti-cheat\n  const collectedBalloons = new Set<string>(); // In-memory store for collected balloon IDs\n\n  app.post(\"/api/balloon/collect\", requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { balloonId, lootType, amount } = req.body;\n      const userId = req.user!.userId; // Use authenticated user ID instead of header\n\n      console.log(`🎈 Balloon Collection: User ${userId} collecting balloon ${balloonId} for ${amount} ${lootType}`);\n\n      // Validation 1: Check required fields\n      if (!balloonId || !lootType || typeof amount !== 'number' || amount <= 0) {\n        return res.status(400).json({ \n          success: false, \n          message: \"Invalid balloon collection request - missing or invalid fields\" \n        });\n      }\n\n      // Validation 2: Check if loot type is valid\n      const validLootTypes = ['credit', 'sun', 'dna', 'ticket'];\n      if (!validLootTypes.includes(lootType)) {\n        return res.status(400).json({ \n          success: false, \n          message: \"Invalid loot type\" \n        });\n      }\n\n      // Validation 3: Check balloon ID format (should be: balloon-timestamp-random-index)\n      const balloonIdPattern = /^balloon-\\d+-[\\d.]+(-\\d+)?$/;\n      if (!balloonIdPattern.test(balloonId)) {\n        console.warn(`🚨 Invalid balloon ID format: ${balloonId}`);\n        return res.status(400).json({ \n          success: false, \n          message: \"Invalid balloon ID format\" \n        });\n      }\n\n      // Validation 4: Extract timestamp and validate it's recent (within 10 minutes)\n      const timestampMatch = balloonId.match(/balloon-(\\d+)/);\n      if (!timestampMatch) {\n        return res.status(400).json({ \n          success: false, \n          message: \"Cannot parse balloon timestamp\" \n        });\n      }\n\n      const balloonTimestamp = parseInt(timestampMatch[1]);\n      const currentTime = Date.now();\n      const maxAge = 10 * 60 * 1000; // 10 minutes in milliseconds\n      \n      if (currentTime - balloonTimestamp > maxAge) {\n        console.warn(`🚨 Expired balloon collection attempt: ${balloonId} (${Math.round((currentTime - balloonTimestamp) / 1000)}s old)`);\n        return res.status(400).json({ \n          success: false, \n          message: \"Balloon has expired\" \n        });\n      }\n\n      // Validation 5: Check if balloon was already collected (prevent double collection)\n      if (collectedBalloons.has(balloonId)) {\n        console.warn(`🚨 Double collection attempt for balloon: ${balloonId} by user ${userId}`);\n        return res.status(400).json({ \n          success: false, \n          message: \"Balloon already collected\" \n        });\n      }\n\n      // Validation 6: Rate limiting - check user exists\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ \n          success: false, \n          message: \"User not found\" \n        });\n      }\n\n      // Validation 7: Reasonable amount limits to prevent abuse\n      const maxAmount = lootType === 'credit' ? 5 : lootType === 'dna' ? 3 : 10;\n      if (amount > maxAmount) {\n        console.warn(`🚨 Suspicious balloon amount: ${amount} ${lootType} from balloon ${balloonId}`);\n        return res.status(400).json({ \n          success: false, \n          message: `Amount too high for ${lootType}` \n        });\n      }\n\n      // Mark balloon as collected BEFORE awarding (prevent race conditions)\n      collectedBalloons.add(balloonId);\n\n      // Auto-cleanup old collected balloons (keep last 1000)\n      if (collectedBalloons.size > 1000) {\n        const balloonArray = Array.from(collectedBalloons);\n        balloonArray.slice(0, balloonArray.length - 1000).forEach(id => collectedBalloons.delete(id));\n      }\n\n      try {\n        // Award the loot using existing storage methods\n        let updatedUser;\n        switch (lootType) {\n          case 'credit':\n            updatedUser = await storage.updateUserCredits(userId, amount);\n            break;\n          case 'sun':\n            updatedUser = await storage.updateUserSuns(userId, amount);\n            break;\n          case 'dna':\n            updatedUser = await storage.updateUserDna(userId, amount);\n            break;\n          case 'ticket':\n            updatedUser = await storage.updateUserTickets(userId, amount);\n            break;\n        }\n\n        if (!updatedUser) {\n          // Remove from collected balloons if award failed\n          collectedBalloons.delete(balloonId);\n          return res.status(500).json({ \n            success: false, \n            message: \"Failed to award loot\" \n          });\n        }\n\n        console.log(`🎈 SUCCESS: User ${userId} collected balloon ${balloonId} and received ${amount} ${lootType}`);\n        \n        // Return success with updated resource value\n        const response: any = { \n          success: true, \n          message: `Collected ${amount} ${lootType}${amount > 1 ? 's' : ''} from balloon!`,\n          balloonId,\n          lootType,\n          amount\n        };\n\n        // Add current resource value to response\n        switch (lootType) {\n          case 'credit':\n            response.credits = updatedUser.credits;\n            break;\n          case 'sun':\n            response.suns = updatedUser.suns;\n            break;\n          case 'dna':\n            response.dna = updatedUser.dna;\n            break;\n          case 'ticket':\n            response.tickets = updatedUser.tickets;\n            break;\n        }\n\n        res.json(response);\n\n      } catch (awardError) {\n        // Remove from collected balloons if award failed\n        collectedBalloons.delete(balloonId);\n        console.error(`Error awarding balloon loot:`, awardError);\n        return res.status(500).json({ \n          success: false, \n          message: \"Failed to process balloon reward\" \n        });\n      }\n\n    } catch (error) {\n      console.error('Balloon collection error:', error);\n      res.status(500).json({ \n        success: false, \n        message: \"Internal server error\" \n      });\n    }\n  });\n\n  // Redeem tickets for prizes (removed duplicate - using the one later in file)\n\n  // DNA Sequencing endpoint (consumes items)\n  app.post(\"/api/user/:id/dna/sequence\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { items, dnaAmount } = req.body;\n      \n      if (!items || !Array.isArray(items) || !dnaAmount) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n      \n      // Consume all items from the sequencer grid\n      for (const item of items) {\n        try {\n          if (item.type === 'caterpillar') {\n            const caterpillarData = await storage.getUserCaterpillars(userId);\n            const caterpillar = caterpillarData.find(c => c.id === item.id);\n            if (caterpillar) {\n              await storage.removeCaterpillarFromUser(userId, caterpillar.caterpillarId, 1);\n            }\n          } else if (item.type === 'fish') {\n            // Use quantity-aware fish consumption instead of deleteFishEntry\n            await storage.consumeFish(userId, item.id);\n          } else if (item.type === 'butterfly') {\n            await storage.consumeButterfly(userId, item.id);\n          } else if (item.type === 'seed') {\n            await storage.consumeSeed(userId, item.id);\n          } else if (item.type === 'flower') {\n            await storage.consumeFlower(userId, item.id);\n          }\n        } catch (itemError) {\n          console.error(`Error consuming item ${item.id} of type ${item.type}:`, itemError);\n          // Continue with other items even if one fails\n        }\n      }\n      \n      // Award DNA to user\n      const updatedUser = await storage.updateUserDna(userId, dnaAmount);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ \n        success: true,\n        dna: updatedUser.dna,\n        itemsConsumed: items.length\n      });\n      \n    } catch (error) {\n      console.error('Error processing DNA sequence:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Item upgrade endpoint\n  app.post(\"/api/user/:id/items/upgrade\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { itemId, itemType, targetRarity, dnaCost } = req.body;\n      \n      if (!itemId || !itemType || !targetRarity || !dnaCost) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n      \n      // Check if user has enough DNA\n      const user = await storage.getUser(userId);\n      if (!user || user.dna < dnaCost) {\n        return res.status(400).json({ message: \"Insufficient DNA\" });\n      }\n      \n      try {\n        // 1. Deduct DNA\n        await storage.updateUserDna(userId, -dnaCost);\n        \n        // 2. Remove old item and add upgraded item based on type\n        let upgradedItem = null;\n        \n        if (itemType === 'caterpillar') {\n          // Remove old caterpillar and add new upgraded caterpillar with target rarity\n          const caterpillarData = await storage.getUserCaterpillars(userId);\n          const caterpillar = caterpillarData.find(c => c.id === itemId);\n          if (caterpillar) {\n            await storage.removeCaterpillarFromUser(userId, caterpillar.caterpillarId, 1);\n            const { generateRandomCaterpillar } = await import('./creatures');\n            const newCaterpillarData = await generateRandomCaterpillar(targetRarity);\n            upgradedItem = await storage.addCaterpillarToUser(\n              userId, newCaterpillarData.id\n            );\n          }\n        } else if (itemType === 'fish') {\n          // Remove old fish and add new upgraded fish with target rarity\n          await storage.deleteFishEntry(itemId);\n          const { generateRandomFish } = await import('./creatures');\n          const fishData = await generateRandomFish(targetRarity);\n          upgradedItem = await storage.addFishToInventoryWithQuantity(\n            userId, fishData.id, fishData.name, targetRarity, fishData.imageUrl, 1\n          );\n        } else {\n          // For seeds, flowers, butterflies - remove old item first, then add upgraded one\n          if (itemType === 'seed') {\n            // Remove old seed first using consume function\n            await storage.consumeSeed(userId, itemId);\n            upgradedItem = await storage.addSeedToInventory(userId, targetRarity, 1);\n          } else if (itemType === 'flower') {\n            // Remove old flower first using consume function\n            await storage.consumeFlower(userId, itemId);\n            const flowerId = Math.floor(Math.random() * 200) + 1;\n            const { generateRandomFlower } = await import('./creatures');\n            const flowerData = await generateRandomFlower(targetRarity);\n            upgradedItem = await storage.addFlowerToInventoryWithQuantity(\n              userId, flowerId, flowerData.name, targetRarity, flowerData.imageUrl, 1\n            );\n          } else if (itemType === 'butterfly') {\n            // Remove old butterfly first using consume function\n            await storage.consumeButterfly(userId, itemId);\n            upgradedItem = await storage.addButterflyToInventory(userId, targetRarity, 1);\n          }\n        }\n        \n        res.json({ \n          success: true, \n          upgradedItem,\n          remainingDna: user.dna - dnaCost\n        });\n        \n      } catch (upgradeError) {\n        // Rollback DNA if upgrade failed\n        await storage.updateUserDna(userId, dnaCost);\n        throw upgradeError;\n      }\n      \n    } catch (error) {\n      console.error('Error upgrading item:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Market routes\n  app.get(\"/api/market/listings\", async (req, res) => {\n    try {\n      console.log(\"🛒 Getting market listings...\");\n      const listings = await storage.getMarketListings();\n      console.log(\"🛒 Market listings retrieved:\", listings.length);\n      res.json({ listings });\n    } catch (error) {\n      console.log(\"🛒 Market listings error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/market/create-listing\", async (req, res) => {\n    try {\n      console.log(\"🛒 Creating listing with data:\", JSON.stringify(req.body, null, 2));\n      const listingData = createMarketListingSchema.parse(req.body);\n      const sellerId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      const listing = await storage.createMarketListing(sellerId, listingData);\n      res.json({ listing });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.log(\"🛒 Zod validation errors:\", JSON.stringify(error.errors, null, 2));\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.log(\"🛒 Create listing error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/market/buy\", async (req, res) => {\n    try {\n      console.log('🛒 Route handler: Received buy request', req.body);\n      const buyData = buyListingSchema.parse(req.body);\n      const buyerId = parseInt(req.headers['x-user-id'] as string) || 1;\n      console.log('🛒 Route handler: Parsed data', { buyData, buyerId });\n      \n      const result = await storage.buyMarketListing(buyerId, buyData);\n      console.log('🛒 Route handler: Buy result', result);\n      if (result.success) {\n        res.json({ message: \"Purchase successful\" });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Server Shop routes\n  app.get(\"/api/market/server-shop\", async (req, res) => {\n    try {\n      // Server offers - Credits\n      const creditOffers = [\n        {\n          id: \"server-common-seeds-credits\",\n          seedId: 1, // Common seed ID\n          seedName: \"Gewöhnliche Samen\",\n          seedRarity: \"common\",\n          pricePerUnit: 50,\n          currency: \"credits\",\n          quantity: 999, // Unlimited\n          seller: \"🏪 Mariposa Shop\",\n          description: \"Hochwertige Samen vom offiziellen Mariposa-Händler\"\n        }\n      ];\n      \n      // Server offers - Sonnen\n      const sunOffers = [\n        {\n          id: \"server-common-seeds-suns\",\n          seedId: 1, // Common seed ID\n          seedName: \"Gewöhnliche Samen\",\n          seedRarity: \"common\",\n          pricePerUnit: 20,\n          currency: \"suns\",\n          quantity: 999, // Unlimited\n          seller: \"☀️ Sonnen-Shop\",\n          description: \"Gewöhnliche Samen für Sonnen\"\n        },\n        {\n          id: \"server-uncommon-seeds-suns\",\n          seedId: 2, // Uncommon seed ID\n          seedName: \"Ungewöhnliche Samen\",\n          seedRarity: \"uncommon\",\n          pricePerUnit: 30,\n          currency: \"suns\",\n          quantity: 999, // Unlimited\n          seller: \"☀️ Sonnen-Shop\",\n          description: \"Ungewöhnliche Samen für Sonnen\"\n        },\n        {\n          id: \"server-rare-seeds-suns\",\n          seedId: 3, // Rare seed ID\n          seedName: \"Seltene Samen\",\n          seedRarity: \"rare\",\n          pricePerUnit: 50,\n          currency: \"suns\",\n          quantity: 999, // Unlimited\n          seller: \"☀️ Sonnen-Shop\",\n          description: \"Seltene Samen für Sonnen\"\n        },\n        {\n          id: \"server-superrare-seeds-suns\",\n          seedId: 4, // Super-rare seed ID\n          seedName: \"Super-seltene Samen\",\n          seedRarity: \"super-rare\",\n          pricePerUnit: 100,\n          currency: \"suns\",\n          quantity: 999, // Unlimited\n          seller: \"☀️ Sonnen-Shop\",\n          description: \"Super-seltene Samen für Sonnen\"\n        }\n      ];\n      \n      res.json({ creditOffers, sunOffers });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/market/buy-from-server\", async (req, res) => {\n    try {\n      const { seedId, quantity } = req.body;\n      const buyerId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      if (seedId !== 1) {\n        return res.status(400).json({ message: \"Server verkauft nur gewöhnliche Samen für Credits\" });\n      }\n      \n      if (quantity <= 0 || quantity > 100) {\n        return res.status(400).json({ message: \"Ungültige Menge (1-100)\" });\n      }\n      \n      const totalCost = quantity * 50; // 50 credits per common seed\n      \n      const user = await storage.getUser(buyerId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      if (user.credits < totalCost) {\n        return res.status(400).json({ message: `Du brauchst ${totalCost} Credits für ${quantity} Samen` });\n      }\n      \n      // Deduct credits and give seeds\n      await storage.updateUserCredits(buyerId, -totalCost);\n      await storage.giveUserSeed(buyerId, 1, quantity); // Give common seeds\n      \n      res.json({ \n        success: true, \n        message: `Erfolgreich ${quantity} gewöhnliche Samen für ${totalCost} Credits gekauft!` \n      });\n    } catch (error) {\n      console.error('Server shop purchase error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Sonnen-Shop route\n  app.post(\"/api/market/buy-from-server-suns\", async (req, res) => {\n    try {\n      const { seedId, quantity } = req.body;\n      const buyerId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      // Define valid seeds and their prices in Sonnen\n      const sunPrices: Record<number, { name: string; price: number }> = {\n        1: { name: \"gewöhnliche\", price: 20 },    // Common\n        2: { name: \"ungewöhnliche\", price: 30 },  // Uncommon  \n        3: { name: \"seltene\", price: 50 },        // Rare\n        4: { name: \"super-seltene\", price: 100 }  // Super-rare\n      };\n      \n      if (!sunPrices[seedId]) {\n        return res.status(400).json({ message: \"Ungültige Samen-ID für Sonnen-Shop\" });\n      }\n      \n      if (quantity <= 0 || quantity > 100) {\n        return res.status(400).json({ message: \"Ungültige Menge (1-100)\" });\n      }\n      \n      const seedInfo = sunPrices[seedId];\n      const totalCost = quantity * seedInfo.price;\n      \n      const user = await storage.getUser(buyerId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      if (user.suns < totalCost) {\n        return res.status(400).json({ message: `Du brauchst ${totalCost} Sonnen für ${quantity} ${seedInfo.name} Samen` });\n      }\n      \n      // Deduct suns and give seeds\n      await storage.updateUserSuns(buyerId, -totalCost);\n      await storage.giveUserSeed(buyerId, seedId, quantity);\n      \n      res.json({ \n        success: true, \n        message: `Erfolgreich ${quantity} ${seedInfo.name} Samen für ${totalCost} Sonnen gekauft!` \n      });\n    } catch (error) {\n      console.error('Suns shop purchase error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Emergency starter seeds route\n  app.post(\"/api/user/:id/emergency-seeds\", async (req, res) => {\n    console.log(`🚨 Emergency Seeds Request reached for user ${req.params.id}`);\n    try {\n      const userId = parseInt(req.params.id);\n      console.log(`🚨 Parsed userId: ${userId}`);\n      \n      // Get user first\n      const user = await storage.getUser(userId);\n      if (!user) {\n        console.log(`❌ User ${userId} not found`);\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      console.log(`🔍 SOS Debug: User ${userId} credits: ${user.credits}`);\n      \n      // 🆘 SOS SYSTEM: Check if user has extremely negative credits (≤ -100) - override ALL restrictions\n      const isSOSCase = user.credits <= -100;\n      console.log(`🔍 SOS Debug: isSOSCase = ${isSOSCase}`);\n      \n      if (isSOSCase) {\n        console.log(`🆘 SOS ACTIVATED: User ${userId} has extreme negative credits (${user.credits}), providing emergency help`);\n        \n        // Give emergency help: 50 credits + 3 seeds\n        const creditDelta = 50 - user.credits; // Calculate delta to reach 50 credits\n        await storage.updateUserCredits(userId, creditDelta);\n        await storage.giveUserSeed(userId, 1, 3);\n        \n        console.log(`🆘 SOS SUCCESS: User ${userId} credits: ${user.credits} -> 50, +3 seeds`);\n        \n        return res.json({ \n          success: true, \n          message: \"🆘 Notfall-Hilfe erhalten! Du hast 50 Credits und 3 Samen bekommen.\",\n          credits: 50,\n          seeds: 3,\n          sosActivated: true\n        });\n      }\n      \n      console.log(`📋 Normal Emergency Seeds check for user ${userId}`);\n      // Check if user qualifies for emergency seeds (normal case)\n      const qualifies = await storage.checkEmergencyQualification(userId);\n      console.log(`📋 Emergency qualification result:`, qualifies);\n      \n      if (!qualifies.eligible) {\n        console.log(`❌ User ${userId} not eligible: ${qualifies.reason}`);\n        return res.status(400).json({ \n          message: qualifies.reason || \"Du bist nicht berechtigt für Notfall-Samen\" \n        });\n      }\n      \n      console.log(`✅ Giving user ${userId} emergency seeds`);\n      // Give 3 common seeds\n      await storage.giveUserSeed(userId, 1, 3);\n      \n      res.json({ \n        success: true, \n        message: \"Du hast 3 gewöhnliche Notfall-Samen erhalten! 🌱\",\n        seeds: 3\n      });\n    } catch (error) {\n      console.error('Emergency seeds error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/user/:id/seeds\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const seeds = await storage.getUserSeeds(userId);\n      res.json({ seeds });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Garden routes\n  app.post(\"/api/garden/plant\", async (req, res) => {\n    try {\n      const plantData = plantSeedSchema.parse(req.body);\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      const result = await storage.plantSeed(userId, plantData);\n      if (result.success) {\n        res.json({ message: \"Samen erfolgreich gepflanzt\" });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // In-memory storage for caterpillar rarity tracking (per user/field)\n  const fedCaterpillarRarities: Map<string, string[]> = new Map();\n\n  // Helper function to create key for tracking\n  function getFedCaterpillarsKey(userId: number, fieldIndex: number): string {\n    return `${userId}-${fieldIndex}`;\n  }\n\n  // Helper function to calculate average rarity from fed caterpillars\n  function calculateAverageRarity(rarities: string[]): string {\n    const rarityValues: Record<string, number> = {\n      'common': 0,\n      'uncommon': 1, \n      'rare': 2,\n      'super-rare': 3,\n      'epic': 4,\n      'legendary': 5,\n      'mythical': 6\n    };\n    \n    const valueToRarity: string[] = [\n      'common',\n      'uncommon', \n      'rare',\n      'super-rare',\n      'epic',\n      'legendary',\n      'mythical'\n    ];\n    \n    // Calculate average numeric value\n    const totalValue = rarities.reduce((sum, rarity) => {\n      return sum + (rarityValues[rarity] || 0);\n    }, 0);\n    \n    const averageValue = Math.round(totalValue / rarities.length);\n    const clampedValue = Math.max(0, Math.min(6, averageValue));\n    \n    return valueToRarity[clampedValue];\n  }\n\n  // Feed fish with caterpillar endpoint\n  // Uses storage's strategic tracking system\n\n  app.post('/api/garden/feed-fish', async (req, res) => {\n    let userId: number | undefined, caterpillarId: number | undefined, fieldIndex: number | undefined;\n    try {\n      ({ userId, caterpillarId, fieldIndex } = req.body);\n\n      if (!userId || caterpillarId === undefined || caterpillarId === null || fieldIndex === undefined) {\n        return res.status(400).json({ message: 'Missing required parameters' });\n      }\n\n      console.log('🐛 Feeding fish on field', fieldIndex, 'with caterpillar', caterpillarId);\n\n      // Get user's caterpillar to verify they have it and get its rarity\n      const userCaterpillars = await storage.getUserCaterpillars(userId);\n      const caterpillarToUse = userCaterpillars.find(c => c.caterpillarId === caterpillarId);\n      \n      if (!caterpillarToUse || caterpillarToUse.quantity <= 0) {\n        return res.status(400).json({ message: 'Du hast keine Raupen dieses Typs im Inventar.' });\n      }\n\n      // Remove one caterpillar from inventory\n      const removed = await storage.removeCaterpillarFromUser(userId, caterpillarId, 1);\n      \n      if (!removed) {\n        return res.status(400).json({ message: 'Fehler beim Entfernen der Raupe aus dem Inventar.' });\n      }\n\n      // CRITICAL FIX: Store caterpillar rarity in fed_caterpillars for ALL feedings (1st, 2nd, 3rd)\n      // This ensures feedFishWithCaterpillar can always find all 3 caterpillars\n      await storage.addFedCaterpillar(userId, fieldIndex, caterpillarToUse.caterpillarRarity);\n      \n      // Update pond progress normally  \n      const result = await storage.updatePondFeedingProgress(userId, fieldIndex);\n      console.log('🐟 Fish feeding result:', { fieldIndex, feedingCount: result, fishCreated: result >= 3, caterpillarRarity: caterpillarToUse.caterpillarRarity });\n\n      if (result >= 3) {\n        console.log('🐟 THIRD FEEDING: Fish will be created by storage method');\n        \n        // CRITICAL FIX: feedFishWithCaterpillar expects the 3rd rarity to already be in storage\n        // But updatePondFeedingProgressWithTracking already added it! So we're good.\n        const feedingResult = await storage.feedFishWithCaterpillar(userId, fieldIndex, caterpillarToUse.caterpillarRarity);\n        \n        return res.json(feedingResult);\n      } else {\n        // SHOW current average rarity so player can plan strategically!\n        const currentAverageRarity = await storage.getCurrentFeedingAverageRarity(userId, fieldIndex);\n        console.log(`🐟 Feeding progress: ${result}/3 caterpillars → current average: ${currentAverageRarity}`);\n        \n        return res.json({\n          feedingCount: result,\n          fishCreated: false,\n          fishName: `Fisch ${Math.floor(Math.random() * 15) + 1}`,\n          fishRarity: currentAverageRarity // Show current AVERAGE for strategic planning\n        });\n      }\n\n    } catch (error) {\n      console.error('🐟 CRITICAL ERROR in feed-fish:', error);\n      console.error('🐟 Error details:', {\n        stack: error instanceof Error ? error.stack : 'No stack trace',\n        message: error instanceof Error ? error.message : error,\n        userId,\n        caterpillarId,\n        fieldIndex\n      });\n      res.status(500).json({ message: 'Fehler beim Füttern der Fische.' });\n    }\n  });\n\n\n  // Get pond feeding progress for all fields\n  app.get('/api/user/:userId/pond-progress', async (req, res) => {\n    const { userId } = req.params;\n    \n    try {\n      const userProgress = await storage.getUserPondProgress(parseInt(userId));\n      res.json({ pondProgress: userProgress });\n    } catch (error) {\n      console.error('Get pond progress error:', error);\n      res.status(500).json({ message: 'Fehler beim Laden des Fütterungs-Fortschritts.' });\n    }\n  });\n\n  // Get field fish for user (fish spawned on pond fields)\n  app.get('/api/user/:userId/field-fish', async (req, res) => {\n    const { userId } = req.params;\n    \n    try {\n      const fieldFish = await storage.getFieldFish(parseInt(userId));\n      res.json({ fieldFish });\n    } catch (error) {\n      console.error('Get field fish error:', error);\n      res.status(500).json({ message: 'Fehler beim Laden der Teich-Fische.' });\n    }\n  });\n\n  // Collect field fish (move from field to inventory)\n  app.post('/api/garden/collect-field-fish', async (req, res) => {\n    try {\n      const { userId, fieldFishId } = req.body;\n      \n      if (!userId || !fieldFishId) {\n        return res.status(400).json({ message: 'User ID und Field Fish ID sind erforderlich.' });\n      }\n\n      const result = await storage.collectFieldFish(userId, fieldFishId);\n      \n      if (result.success) {\n        res.json({ message: 'Fisch erfolgreich gesammelt!' });\n      } else {\n        res.status(400).json({ message: result.message || 'Fehler beim Sammeln des Fisches.' });\n      }\n    } catch (error) {\n      console.error('Collect field fish error:', error);\n      res.status(500).json({ message: 'Fehler beim Sammeln des Fisches.' });\n    }\n  });\n\n  // Get current average rarity for a specific pond field\n  app.get('/api/user/:userId/pond-field/:fieldIndex/average-rarity', requireAuthenticatedUser, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.validatedUserId!; // Use validated user ID from middleware\n      const fieldIndex = parseInt(req.params.fieldIndex);\n      \n      if (isNaN(fieldIndex)) {\n        return res.status(400).json({ message: 'Invalid field index' });\n      }\n\n      // Check pond feeding progress from database first\n      const pondProgress = await storage.getUserPondProgress(userId);\n      const feedingCount = pondProgress[fieldIndex] || 0;\n      \n      // Get average rarity from feeding data\n      const averageRarity = await storage.getCurrentFeedingAverageRarity(userId, fieldIndex);\n      \n      console.log(`🎯 Field ${fieldIndex}: feedingCount=${feedingCount}, averageRarity=${averageRarity}`);\n      \n      // If we have feeding progress but no rarity data (lost memory), show default\n      if (feedingCount > 0 && averageRarity === null) {\n        // Default to 'uncommon' for lost feeding data \n        res.json({ \n          averageRarity: 1, // uncommon (green)\n          caterpillarCount: feedingCount,\n          note: \"Fütterungsdaten vorhanden, Rarität-Info verloren\"\n        });\n      } else if (averageRarity !== null) {\n        res.json({ \n          averageRarity, \n          caterpillarCount: feedingCount\n        });\n      } else {\n        res.json({ \n          averageRarity: null, \n          caterpillarCount: 0 \n        });\n      }\n    } catch (error) {\n      console.error('Get pond field average rarity error:', error);\n      res.status(500).json({ message: 'Fehler beim Laden der Durchschnittsrarität.' });\n    }\n  });\n\n  app.get(\"/api/garden/fields/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const fields = await storage.getPlantedFields(userId);\n      res.json({ fields });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/garden/harvest\", async (req, res) => {\n    try {\n      const harvestData = harvestFieldSchema.parse(req.body);\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      const result = await storage.harvestField(userId, harvestData);\n      if (result.success) {\n        res.json({ message: \"Blume erfolgreich geerntet\" });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/garden/collect-sun\", async (req, res) => {\n    try {\n      const collectData = collectSunSchema.parse(req.body);\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      const result = await storage.collectSun(collectData.fieldIndex);\n      if (result.success) {\n        // Update user's suns\n        await storage.updateUserSuns(userId, result.sunAmount);\n        res.json({ \n          message: result.message,\n          sunAmount: result.sunAmount \n        });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/garden/sun-spawns\", async (req, res) => {\n    try {\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      const activeSuns = await storage.getActiveSunSpawnsForUser(userId);\n      res.json({ sunSpawns: activeSuns });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Flower inventory routes\n  app.get(\"/api/user/:id/flowers\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const flowers = await storage.getUserFlowers(userId);\n      res.json({ flowers });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/flower/:id\", async (req, res) => {\n    try {\n      const flowerId = parseInt(req.params.id);\n      const { generateLatinFlowerName, getFlowerRarityById } = await import('../shared/rarity');\n      \n      const flower = {\n        id: flowerId,\n        name: generateLatinFlowerName(flowerId), // Use flowerId as seed for consistent naming\n        rarity: getFlowerRarityById(flowerId),\n        imageUrl: `/Blumen/${flowerId}.jpg`\n      };\n      \n      res.json(flower);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Bouquet routes\n  app.post(\"/api/bouquets/generate-name\", async (req, res) => {\n    try {\n      const { rarity } = req.body;\n      if (!rarity) {\n        return res.status(400).json({ message: \"Rarity is required\" });\n      }\n      \n      const { generateBouquetName } = await import('./bouquet');\n      const name = await generateBouquetName(rarity);\n      \n      res.json({ name });\n    } catch (error) {\n      console.error('Error generating bouquet name:', error);\n      res.status(500).json({ message: \"Failed to generate name\" });\n    }\n  });\n\n  // Check if bouquet name already exists\n  app.post(\"/api/bouquets/check-name\", async (req, res) => {\n    try {\n      const { name } = req.body;\n      if (!name) {\n        return res.status(400).json({ message: \"Name is required\" });\n      }\n      \n      const isTaken = await storage.isBouquetNameTaken(name);\n      res.json({ isTaken, available: !isTaken });\n    } catch (error) {\n      console.error('Error checking bouquet name:', error);\n      res.status(500).json({ message: \"Failed to check name\" });\n    }\n  });\n\n  app.post(\"/api/bouquets/create\", async (req, res) => {\n    try {\n      const bouquetData = createBouquetSchema.parse(req.body);\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      // SOS-System: Check if user needs emergency credits for bouquet creation\n      const user = await storage.getUser(userId);\n      if (user && user.credits <= 0) {\n        console.log(`🆘 SOS Check: User ${userId} has ${user.credits} credits, checking for available flowers...`);\n        \n        // Check if user has the required flowers for the bouquet\n        const userFlowers = await storage.getUserFlowers(userId);\n        const flower1 = userFlowers.find(f => f.flowerId === bouquetData.flowerId1);\n        const flower2 = userFlowers.find(f => f.flowerId === bouquetData.flowerId2);\n        const flower3 = userFlowers.find(f => f.flowerId === bouquetData.flowerId3);\n        \n        if (flower1 && flower2 && flower3) {\n          console.log(`🆘 SOS Activated: User ${userId} has required flowers but no credits, granting 30 credits`);\n          const creditDelta = 30 - user.credits; // Calculate delta to reach 30 credits\n          await storage.updateUserCredits(userId, creditDelta);\n          console.log(`🆘 SOS Complete: User ${userId} credits updated from ${user.credits} to 30 (delta: ${creditDelta})`);\n        }\n      }\n      \n      const result = await storage.createBouquet(userId, bouquetData);\n      if (result.success) {\n        res.json({ \n          message: \"Bouquet erfolgreich erstellt\", \n          bouquet: result.bouquet \n        });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error('Failed to create bouquet:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Recreate bouquet from recipe (free, no credit cost)\n  app.post(\"/api/bouquets/recreate\", async (req, res) => {\n    try {\n      const bouquetData = createBouquetSchema.parse(req.body);\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      console.log(`🔄 User ${userId} recreating bouquet with recipe (no credit cost)`);\n      \n      const result = await storage.createBouquet(userId, bouquetData, true); // true = skip credit deduction\n      if (result.success) {\n        res.json({ \n          message: \"Bouquet erfolgreich nachgesteckt!\", \n          bouquet: result.bouquet \n        });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error('Failed to recreate bouquet:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/user/:id/bouquets\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const bouquets = await storage.getUserBouquets(userId);\n      res.json({ bouquets });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/bouquet/:id/recipe\", async (req, res) => {\n    try {\n      const bouquetId = parseInt(req.params.id);\n      const recipe = await storage.getBouquetRecipe(bouquetId);\n      if (!recipe) {\n        return res.status(404).json({ message: \"Recipe not found\" });\n      }\n      res.json({ recipe });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/bouquets/recipes\", async (req, res) => {\n    try {\n      const recipes = await storage.getBouquetRecipes();\n      res.json({ recipes });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get bouquet recipes created by specific user (for \"Meine Bouquets\")\n  app.get(\"/api/user/:id/created-bouquet-recipes\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const userRecipes = await storage.getUserCreatedBouquetRecipes(userId);\n      res.json({ recipes: userRecipes });\n    } catch (error) {\n      console.error('Error getting user created recipes:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/user/:id/butterflies\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      console.log('🦋 Getting butterflies for user:', userId);\n      const butterflies = await storage.getUserButterflies(userId);\n      console.log('🦋 Found butterflies:', butterflies.length);\n      res.json({ butterflies });\n    } catch (error) {\n      console.error('🦋 Error getting butterflies:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Collection stats endpoint for encyclopedia\n  app.get(\"/api/user/:id/collection-stats\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const requestedType = req.query.type as string; // Accept both singular and plural forms\n      \n      // Normalize type: singular → plural (for storage compatibility)\n      const typeMapping: Record<string, string> = {\n        'flower': 'flowers',\n        'butterfly': 'butterflies', \n        'caterpillar': 'caterpillars',\n        'fish': 'fish',\n        'flowers': 'flowers',\n        'butterflies': 'butterflies',\n        'caterpillars': 'caterpillars'\n      };\n      \n      const normalizedType = requestedType ? typeMapping[requestedType] : undefined;\n      \n      // Validate type if provided\n      if (requestedType && !normalizedType) {\n        return res.status(400).json({ \n          message: \"Invalid item type\", \n          validTypes: ['flower', 'butterfly', 'caterpillar', 'fish', 'flowers', 'butterflies', 'caterpillars'] \n        });\n      }\n      \n      console.log(`📊 Getting collection stats for user ${userId}, type: ${normalizedType || 'all'}`);\n      const stats = await storage.getUserCollectionStats(userId, normalizedType);\n      console.log(`📊 Found ${stats.length} collection stats`);\n      res.json({ collectionStats: stats });\n    } catch (error) {\n      console.error('📊 Error getting collection stats:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Backfill collection stats for all existing users (Admin only - requires authentication)\n  app.post(\"/api/admin/backfill-collection-stats\", async (req, res) => {\n    try {\n      // Security: Check for admin authentication\n      const adminSecret = process.env.ADMIN_SECRET;\n      const providedToken = req.headers.authorization?.replace('Bearer ', '') || req.headers['x-admin-token'];\n      \n      if (!adminSecret) {\n        console.error('🔒 ADMIN_SECRET environment variable not configured');\n        return res.status(500).json({ \n          message: \"Server configuration error: Admin authentication not configured\" \n        });\n      }\n      \n      if (!providedToken || providedToken !== adminSecret) {\n        console.warn('🔒 Unauthorized admin endpoint access attempt');\n        return res.status(401).json({ \n          message: \"Unauthorized: Valid admin token required\" \n        });\n      }\n      \n      console.log('📊 Admin triggered collection stats backfill (authenticated)...');\n      const result = await storage.backfillCollectionStats();\n      \n      if (result.success) {\n        console.log('📊 Backfill completed successfully:', result.stats);\n        res.json({ \n          message: \"Collection stats backfill completed successfully\",\n          ...result.stats\n        });\n      } else {\n        console.error('📊 Backfill failed:', result.stats.error);\n        res.status(500).json({ \n          message: \"Collection stats backfill failed\",\n          error: result.stats.error\n        });\n      }\n    } catch (error) {\n      console.error('📊 Error in backfill endpoint:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Add butterflies to user inventory (for testing/admin purposes)\n  app.post(\"/api/user/:id/add-butterfly\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { rarity = 'common', quantity = 1 } = req.body;\n      \n      // Validate rarity\n      const validRarities = ['common', 'uncommon', 'rare', 'super-rare', 'epic', 'legendary', 'mythical'];\n      if (!validRarities.includes(rarity)) {\n        return res.status(400).json({ \n          message: \"Invalid rarity\", \n          validRarities \n        });\n      }\n\n      // Validate quantity\n      if (typeof quantity !== 'number' || quantity < 1 || quantity > 10) {\n        return res.status(400).json({ \n          message: \"Quantity must be a number between 1 and 10\" \n        });\n      }\n\n      console.log(`🦋 Adding ${quantity} ${rarity} butterfly(s) to user ${userId}`);\n      const result = await storage.addButterflyToInventory(userId, rarity as any, quantity);\n      \n      if (result.success) {\n        res.json({ \n          success: true, \n          message: `${quantity} ${rarity} Schmetterling(e) hinzugefügt!`,\n          butterfly: result.butterfly\n        });\n      } else {\n        res.status(500).json({ \n          success: false, \n          message: \"Fehler beim Hinzufügen des Schmetterlings\" \n        });\n      }\n    } catch (error) {\n      console.error('🦋 Error adding butterfly to inventory:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Fish collection endpoints\n  app.get(\"/api/user/:id/fish\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      console.log('🐟 Getting fish for user:', userId);\n      const fish = await storage.getUserFish(userId);\n      console.log('🐟 Found fish:', fish.length);\n      res.json({ fish });\n    } catch (error) {\n      console.error('🐟 Error getting fish:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Caterpillar collection endpoints\n  app.get(\"/api/user/:id/caterpillars\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      console.log('🐛 Getting caterpillars for user:', userId);\n      const caterpillars = await storage.getUserCaterpillars(userId);\n      console.log('🐛 Found caterpillars:', caterpillars.length);\n      res.json({ caterpillars });\n    } catch (error) {\n      console.error('🐛 Error getting caterpillars:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get butterflies on garden fields\n  app.get(\"/api/user/:id/field-butterflies\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      console.log('🦋 Getting field butterflies for user:', userId);\n      const fieldButterflies = await storage.getFieldButterflies(userId);\n      console.log('🦋 Found field butterflies:', fieldButterflies.length);\n      res.json({ fieldButterflies });\n    } catch (error) {\n      console.error('🦋 Error getting field butterflies:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Field caterpillars endpoints\n  app.get(\"/api/user/:id/field-caterpillars\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      console.log('🐛 Getting field caterpillars for user:', userId);\n      const fieldCaterpillars = await storage.getFieldCaterpillars(userId);\n      console.log('🐛 Found field caterpillars:', fieldCaterpillars.length);\n      res.json({ fieldCaterpillars });\n    } catch (error) {\n      console.error('🐛 Error getting field caterpillars:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Collect field caterpillar endpoint\n  app.post(\"/api/user/:id/collect-field-caterpillar\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { fieldIndex } = req.body;\n      console.log(`🐛 Collecting field caterpillar for user ${userId} on field ${fieldIndex}`);\n      const result = await storage.collectFieldCaterpillar(userId, fieldIndex);\n      \n      if (result.success) {\n        res.json({ message: 'Raupe erfolgreich eingesammelt!', caterpillar: result.caterpillar });\n      } else {\n        res.status(404).json({ message: 'Keine Raupe auf diesem Feld gefunden.' });\n      }\n    } catch (error) {\n      console.error('🐛 Error collecting field caterpillar:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get unlocked fields for a user\n  app.get(\"/api/user/:id/unlocked-fields\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const unlockedFields = await storage.getUnlockedFields(userId);\n      res.json({ unlockedFields });\n    } catch (error) {\n      console.error('Error getting unlocked fields:', error);\n      res.status(500).json({ error: \"Failed to get unlocked fields\" });\n    }\n  });\n\n  // Unlock a field for a user\n  app.post(\"/api/user/:id/unlock-field\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const data = unlockFieldSchema.parse(req.body);\n      \n      // Calculate unlock cost (this matches frontend logic)\n      const userUnlockedFields = await storage.getUnlockedFields(userId);\n      const starterFields = [0, 1, 10, 11]; // Convert field IDs 1,2,11,12 to indices 0,1,10,11\n      const unlockedCount = userUnlockedFields.filter(f => !starterFields.includes(f.fieldIndex)).length;\n      const cost = Math.round(1000 * Math.pow(1.35, unlockedCount));\n      \n      const result = await storage.unlockField(userId, data, cost);\n      \n      if (result.success) {\n        res.json({ success: true });\n      } else {\n        res.status(400).json({ error: result.message });\n      }\n    } catch (error) {\n      console.error('Error unlocking field:', error);\n      res.status(500).json({ error: \"Failed to unlock field\" });\n    }\n  });\n\n  // Place butterfly on field\n  app.post(\"/api/garden/place-butterfly\", async (req, res) => {\n    try {\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      const data = placeButterflyOnFieldSchema.parse(req.body);\n      \n      console.log(`🦋 Processing butterfly animation for butterfly ${data.butterflyId} on field ${data.fieldIndex} for user ${userId}`);\n\n      // Check if user has this butterfly and reduce quantity\n      const butterfly = await storage.getUserButterfly(userId, data.butterflyId);\n      \n      if (!butterfly) {\n        return res.status(400).json({ message: \"Schmetterling nicht gefunden\" });\n      }\n\n      if (butterfly.quantity <= 0) {\n        return res.status(400).json({ message: \"Nicht genügend Schmetterlinge im Inventar\" });\n      }\n\n      // Reduce butterfly quantity (consume the butterfly for animation)\n      const consumeResult = await storage.consumeButterfly(userId, data.butterflyId);\n      \n      if (consumeResult.success) {\n        console.log(`🦋 Butterfly consumed successfully - animation will start on frontend`);\n        res.json({ message: 'Schmetterling-Animation gestartet!', butterfly: butterfly });\n      } else {\n        res.status(400).json({ message: consumeResult.message });\n      }\n    } catch (error) {\n      console.error('🦋 Error processing butterfly animation:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Remove butterfly from field (for automatic lifecycle)\n  app.post(\"/api/garden/remove-butterfly\", async (req, res) => {\n    try {\n      const { fieldIndex } = req.body;\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      console.log(`🦋 Removing butterfly from field ${fieldIndex} for user ${userId}`);\n      \n      if (fieldIndex === undefined) {\n        return res.status(400).json({ message: 'Missing fieldIndex' });\n      }\n\n      const result = await storage.removeFieldButterfly(userId, fieldIndex);\n      \n      if (result.success) {\n        res.json({ message: 'Butterfly removed successfully' });\n      } else {\n        res.status(404).json({ message: 'No butterfly found on field' });\n      }\n    } catch (error) {\n      console.error('🦋 Error removing butterfly:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ========== FLOWER ON FIELD SYSTEM (for Teich/Pond caterpillar spawning) ==========\n  \n  // Place flower on pond grass field (for caterpillar spawning)\n  app.post(\"/api/garden/place-flower-on-field\", async (req, res) => {\n    try {\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      const data = placeFlowerOnFieldSchema.parse(req.body);\n      \n      console.log(`🌸 Processing flower placement for flower ${data.flowerId} on field ${data.fieldIndex} for user ${userId}`);\n\n      // Check if user has this flower and reduce quantity\n      const flower = await storage.getUserFlower(userId, data.flowerId);\n      \n      if (!flower) {\n        return res.status(400).json({ message: \"Blume nicht gefunden\" });\n      }\n\n      if (flower.quantity <= 0) {\n        return res.status(400).json({ message: \"Nicht genügend Blumen im Inventar\" });\n      }\n\n      // Check if field is a valid pond grass field (not water, not regular garden)\n      const row = Math.floor(data.fieldIndex / 10);\n      const col = data.fieldIndex % 10;\n      const isPondWater = row >= 1 && row <= 3 && col >= 1 && col <= 8;\n      \n      if (isPondWater) {\n        return res.status(400).json({ message: \"Blumen können nicht auf Wasserfelden platziert werden\" });\n      }\n\n      // Check if field already has a flower\n      const existingFlower = await storage.getFieldFlower(userId, data.fieldIndex);\n      if (existingFlower) {\n        return res.status(400).json({ message: \"Auf diesem Feld ist bereits eine Blume platziert\" });\n      }\n\n      // Place flower on field and consume from inventory\n      const result = await storage.placeFlowerOnField(userId, data.fieldIndex, data.flowerId);\n      \n      if (result.success) {\n        console.log(`🌸 Flower placed successfully on field ${data.fieldIndex}`);\n        res.json({ message: 'Blume erfolgreich platziert!', flower: flower });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      console.error('🌸 Error placing flower:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get all field flowers for a user\n  app.get(\"/api/user/:userId/field-flowers\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      \n      if (isNaN(userId)) {\n        return res.status(400).json({ error: 'Invalid user ID' });\n      }\n      \n      const fieldFlowers = await storage.getFieldFlowers(userId);\n      res.json({ fieldFlowers });\n    } catch (error) {\n      console.error('🌸 Error getting field flowers:', error);\n      res.status(500).json({ error: \"Failed to get field flowers\" });\n    }\n  });\n\n  // Remove flower from field (for cleanup after caterpillar spawn)\n  app.post(\"/api/garden/remove-field-flower\", async (req, res) => {\n    try {\n      const { fieldIndex } = req.body;\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      console.log(`🌸 Removing flower from field ${fieldIndex} for user ${userId}`);\n      \n      if (fieldIndex === undefined) {\n        return res.status(400).json({ message: 'Missing fieldIndex' });\n      }\n\n      const result = await storage.removeFieldFlower(userId, fieldIndex);\n      \n      if (result.success) {\n        res.json({ message: 'Flower removed successfully' });\n      } else {\n        res.status(404).json({ message: 'No flower found on field' });\n      }\n    } catch (error) {\n      console.error('🌸 Error removing flower:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Spawn caterpillar with rarity inheritance (legacy butterfly system)\n  app.post(\"/api/garden/spawn-caterpillar\", async (req, res) => {\n    try {\n      const { fieldIndex, parentRarity } = req.body;\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      console.log(`🐛 Spawning caterpillar on field ${fieldIndex} with parent rarity ${parentRarity}`);\n      \n      if (fieldIndex === undefined || !parentRarity) {\n        return res.status(400).json({ message: 'Missing fieldIndex or parentRarity' });\n      }\n\n      const result = await storage.spawnCaterpillarOnField(userId, fieldIndex, parentRarity);\n      \n      if (result.success) {\n        res.json({ message: 'Caterpillar spawned successfully', caterpillar: result.caterpillar });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      console.error('🐛 Error spawning caterpillar:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Spawn caterpillar from flower (new pond system)\n  app.post(\"/api/garden/spawn-caterpillar-from-flower\", async (req, res) => {\n    try {\n      const { fieldIndex } = req.body;\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      console.log(`🌸 Spawning caterpillar from flower on field ${fieldIndex} for user ${userId}`);\n      \n      if (fieldIndex === undefined) {\n        return res.status(400).json({ message: 'Missing fieldIndex' });\n      }\n\n      // Check if there's a flower on this field\n      const fieldFlower = await storage.getFieldFlower(userId, fieldIndex);\n      if (!fieldFlower) {\n        return res.status(400).json({ message: 'Keine Blume auf diesem Feld gefunden' });\n      }\n\n      // Spawn caterpillar with flower's rarity\n      const result = await storage.spawnCaterpillarOnField(userId, fieldIndex, fieldFlower.flowerRarity);\n      \n      if (result.success) {\n        // Remove the flower after spawning caterpillar\n        await storage.removeFieldFlower(userId, fieldIndex);\n        console.log(`🌸 Flower consumed after caterpillar spawn on field ${fieldIndex}`);\n        \n        res.json({ \n          message: 'Caterpillar spawned from flower successfully', \n          caterpillar: result.caterpillar,\n          consumedFlower: fieldFlower \n        });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      console.error('🌸 Error spawning caterpillar from flower:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ✅ NEW: Combined endpoint - place flower and spawn caterpillar atomically\n  app.post(\"/api/garden/place-flower-and-spawn-caterpillar\", async (req, res) => {\n    try {\n      const { fieldIndex, flowerId } = req.body;\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      console.log(`🌸🐛 ATOMIC: Placing flower ${flowerId} and spawning caterpillar on field ${fieldIndex} for user ${userId}`);\n      \n      if (fieldIndex === undefined || flowerId === undefined) {\n        return res.status(400).json({ message: 'Missing fieldIndex or flowerId' });\n      }\n\n      // Step 1: Get flower info before placing\n      const flower = await storage.getUserFlower(userId, flowerId);\n      if (!flower) {\n        return res.status(400).json({ message: \"Blume nicht gefunden\" });\n      }\n\n      if (flower.quantity <= 0) {\n        return res.status(400).json({ message: \"Nicht genügend Blumen im Inventar\" });\n      }\n\n      // Step 2: Place flower on field (consumes from inventory)\n      console.log(`🌸 ATOMIC: Step 1 - Placing flower on field`);\n      const placeResult = await storage.placeFlowerOnField(userId, fieldIndex, flowerId);\n      \n      if (!placeResult.success) {\n        return res.status(400).json({ message: placeResult.message });\n      }\n\n      // Step 3: Spawn caterpillar with flower's rarity\n      console.log(`🐛 ATOMIC: Step 2 - Spawning caterpillar with rarity ${flower.flowerRarity}`);\n      const caterpillarResult = await storage.spawnCaterpillarOnField(userId, fieldIndex, flower.flowerRarity);\n      \n      if (!caterpillarResult.success) {\n        // If caterpillar spawn fails, we should remove the flower to keep consistency\n        await storage.removeFieldFlower(userId, fieldIndex);\n        return res.status(400).json({ message: caterpillarResult.message });\n      }\n\n      // Step 4: Remove flower from field (it's consumed)\n      console.log(`🌸 ATOMIC: Step 3 - Removing flower from field after spawn`);\n      await storage.removeFieldFlower(userId, fieldIndex);\n      \n      console.log(`🌸🐛 ATOMIC SUCCESS: Flower placed, caterpillar spawned, and flower consumed ✅`);\n      res.json({ \n        message: 'Blume platziert und Raupe gespawnt!', \n        caterpillar: caterpillarResult.caterpillar \n      });\n    } catch (error) {\n      console.error('🌸🐛 ATOMIC ERROR:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Collect butterfly from field\n  app.post(\"/api/garden/collect-butterfly\", async (req, res) => {\n    try {\n      const { fieldIndex } = req.body;\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      console.log(`🦋 Attempting to collect butterfly on field ${fieldIndex}`);\n      \n      if (fieldIndex === undefined) {\n        return res.status(400).json({ message: 'Missing fieldIndex' });\n      }\n\n      const result = await storage.collectFieldButterfly(userId, fieldIndex);\n      \n      if (result.success) {\n        res.json({ message: 'Schmetterling erfolgreich gesammelt!', butterfly: result.butterfly });\n      } else {\n        res.status(404).json({ message: 'Kein Schmetterling auf diesem Feld gefunden' });\n      }\n    } catch (error) {\n      console.error('🦋 Error collecting butterfly:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/bouquets/place\", async (req, res) => {\n    try {\n      const placeData = placeBouquetSchema.parse(req.body);\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      const result = await storage.placeBouquet(userId, placeData);\n      if (result.success) {\n        res.json({ message: \"Bouquet erfolgreich platziert\" });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/bouquets/collect-expired\", async (req, res) => {\n    try {\n      const { fieldIndex } = req.body;\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      if (fieldIndex === undefined) {\n        return res.status(400).json({ message: 'Missing fieldIndex' });\n      }\n\n      const result = await storage.collectExpiredBouquet(userId, fieldIndex);\n      \n      if (result.success) {\n        res.json({ \n          message: `Verwelktes Bouquet gesammelt! Erhalten: ${result.seedDrop?.quantity || 0}x ${result.seedDrop?.rarity || 'common'} Samen`,\n          seedDrop: result.seedDrop \n        });\n      } else {\n        res.status(404).json({ message: 'Kein verwelktes Bouquet auf diesem Feld gefunden' });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/user/:id/placed-bouquets\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const placedBouquets = await storage.getPlacedBouquets(userId);\n      res.json({ placedBouquets });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Exhibition routes\n  app.get(\"/api/user/:id/exhibition-frames\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const frames = await storage.getExhibitionFrames(userId);\n      res.json({ frames });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get item rarity mappings for encyclopedia\n  app.get('/api/encyclopedia/rarities', async (req, res) => {\n    try {\n      const creaturesModule = await import('./creatures');\n      const bouquetModule = await import('./bouquet');\n      const { getFlowerRarityById } = await import('../shared/rarity');\n      \n      // Create rarity mappings for all item types\n      const rarities = {\n        flowers: {} as Record<number, string>,\n        butterflies: {} as Record<number, string>, \n        caterpillars: {} as Record<number, string>,\n        fish: {} as Record<number, string>\n      };\n      \n      // Flowers use fixed ranges\n      for (let i = 1; i <= 241; i++) {\n        rarities.flowers[i] = getFlowerRarityById(i);\n      }\n      \n      // Dynamic rarities from server Maps (with null checks)\n      if (bouquetModule.BUTTERFLY_RARITY_MAP) {\n        bouquetModule.BUTTERFLY_RARITY_MAP.forEach((rarity, id) => {\n          rarities.butterflies[id] = rarity;\n        });\n      }\n      \n      if (creaturesModule.CATERPILLAR_RARITY_MAP) {\n        creaturesModule.CATERPILLAR_RARITY_MAP.forEach((rarity, id) => {\n          rarities.caterpillars[id] = rarity;\n        });\n      }\n      \n      if (creaturesModule.FISH_RARITY_MAP) {\n        creaturesModule.FISH_RARITY_MAP.forEach((rarity, id) => {\n          rarities.fish[id] = rarity;\n        });\n      }\n      \n      res.json(rarities);\n    } catch (error) {\n      console.error('📚 Error getting encyclopedia rarities:', error);\n      res.status(500).json({ error: 'Failed to get rarities' });\n    }\n  });\n\n  app.get(\"/api/user/:id/exhibition-butterflies\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const butterflies = await storage.getExhibitionButterflies(userId);\n      res.json({ butterflies });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/exhibition/purchase-frame\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: 'Missing userId' });\n      }\n\n      const result = await storage.purchaseExhibitionFrame(userId);\n      \n      if (result.success) {\n        res.json({ \n          message: 'Rahmen erfolgreich gekauft!',\n          newCredits: result.newCredits,\n          frame: result.frame\n        });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/exhibition/place-butterfly\", async (req, res) => {\n    try {\n      const { userId, frameId, slotIndex, butterflyId } = req.body;\n      \n      if (!userId || !frameId || slotIndex === undefined || !butterflyId) {\n        return res.status(400).json({ message: 'Missing required parameters' });\n      }\n\n      const result = await storage.placeExhibitionButterfly(userId, frameId, slotIndex, butterflyId);\n      \n      if (result.success) {\n        res.json({ message: 'Schmetterling erfolgreich platziert!' });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/exhibition/remove-butterfly\", async (req, res) => {\n    try {\n      const { userId, frameId, slotIndex } = req.body;\n      \n      if (!userId || !frameId || slotIndex === undefined) {\n        return res.status(400).json({ message: 'Missing required parameters' });\n      }\n\n      const result = await storage.removeExhibitionButterfly(userId, frameId, slotIndex);\n      \n      if (result.success) {\n        res.json({ message: 'Schmetterling erfolgreich entfernt!' });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get butterfly sell status (countdown info with like reduction)\n  app.get(\"/api/exhibition/butterfly/:id/sell-status\", async (req, res) => {\n    try {\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      const exhibitionButterflyId = parseInt(req.params.id);\n\n      // 🚀 PERFORMANCE: Get single butterfly instead of loading all\n      const exhibitionButterfly = await storage.getExhibitionButterflyById(userId, exhibitionButterflyId);\n      \n      if (!exhibitionButterfly) {\n        return res.status(404).json({ error: \"Schmetterling nicht gefunden\" });\n      }\n\n      const canSell = await storage.canSellButterfly(userId, exhibitionButterflyId);\n      const timeRemaining = await storage.getTimeUntilSellable(userId, exhibitionButterflyId);\n      \n      // Get likes count for specific frame only\n      const likesCount = await storage.getFrameLikesCount(exhibitionButterfly.frameId);\n\n      res.json({\n        canSell,\n        timeRemainingMs: timeRemaining,\n        likesCount,\n        frameId: exhibitionButterfly.frameId\n      });\n    } catch (error) {\n      console.error('Failed to get butterfly sell status:', error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get VIP butterfly sell status (countdown info with like reduction)\n  app.get(\"/api/exhibition/vip-butterfly/:id/sell-status\", async (req, res) => {\n    try {\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      const exhibitionVipButterflyId = parseInt(req.params.id);\n\n      // 🚀 PERFORMANCE: Get single VIP butterfly instead of loading all\n      const vipExhibitionButterfly = await storage.getExhibitionVipButterflyById(userId, exhibitionVipButterflyId);\n      \n      if (!vipExhibitionButterfly) {\n        return res.status(404).json({ error: \"VIP-Schmetterling nicht gefunden\" });\n      }\n\n      const canSell = await storage.canSellVipButterfly(userId, exhibitionVipButterflyId);\n      const timeRemaining = await storage.getTimeUntilVipSellable(userId, exhibitionVipButterflyId);\n      \n      // Get likes count for specific frame only\n      const likesCount = await storage.getFrameLikesCount(vipExhibitionButterfly.frameId);\n\n      res.json({\n        canSell,\n        timeRemainingMs: timeRemaining,\n        likesCount,\n        frameId: vipExhibitionButterfly.frameId\n      });\n    } catch (error) {\n      console.error('Failed to get VIP butterfly sell status:', error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n\n  // 🔒 SECURED: Batch sell-status endpoint with rate limiting and array size guards\n  app.post(\"/api/exhibition/sell-status-batch\", batchApiLimiter, async (req, res) => {\n    try {\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      const { butterflyIds = [], vipButterflyIds = [] } = req.body;\n\n      // 🔒 SECURITY: Validate input arrays\n      if (!Array.isArray(butterflyIds) || !Array.isArray(vipButterflyIds)) {\n        return res.status(400).json({ error: \"butterflyIds and vipButterflyIds must be arrays\" });\n      }\n\n      // 🔒 SECURITY: Prevent pathological inArray attacks - limit array sizes\n      const MAX_ARRAY_SIZE = 100;\n      if (butterflyIds.length > MAX_ARRAY_SIZE) {\n        return res.status(400).json({ \n          error: `Too many butterfly IDs - maximum ${MAX_ARRAY_SIZE} allowed per request` \n        });\n      }\n      \n      if (vipButterflyIds.length > MAX_ARRAY_SIZE) {\n        return res.status(400).json({ \n          error: `Too many VIP butterfly IDs - maximum ${MAX_ARRAY_SIZE} allowed per request` \n        });\n      }\n\n      // Convert to numbers and filter valid IDs\n      const validButterflyIds = butterflyIds\n        .map((id: any) => parseInt(id))\n        .filter((id: number) => !isNaN(id) && id > 0);\n      \n      const validVipButterflyIds = vipButterflyIds\n        .map((id: any) => parseInt(id))\n        .filter((id: number) => !isNaN(id) && id > 0);\n\n      // Use optimized batch method\n      const batchResult = await storage.getBatchSellStatus(userId, validButterflyIds, validVipButterflyIds);\n\n      // Transform result to match expected frontend format\n      const result: { [key: string]: { canSell: boolean, timeRemainingMs: number, likesCount: number } } = {};\n\n      // Add normal butterflies to result\n      for (const butterfly of batchResult.normal) {\n        result[`normal-${butterfly.id}`] = {\n          canSell: butterfly.canSell,\n          timeRemainingMs: butterfly.timeRemainingMs,\n          likesCount: butterfly.likesCount\n        };\n      }\n\n      // Add VIP butterflies to result\n      for (const vipButterfly of batchResult.vip) {\n        result[`vip-${vipButterfly.id}`] = {\n          canSell: vipButterfly.canSell,\n          timeRemainingMs: vipButterfly.timeRemainingMs,\n          likesCount: vipButterfly.likesCount\n        };\n      }\n\n      res.json(result);\n\n    } catch (error) {\n      console.error('Failed to get batch sell status:', error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/exhibition/sell-butterfly\", async (req, res) => {\n    try {\n      const { userId, exhibitionButterflyId } = req.body;\n      \n      if (!userId || !exhibitionButterflyId) {\n        return res.status(400).json({ message: 'Missing required parameters' });\n      }\n\n      const result = await storage.sellExhibitionButterfly(userId, exhibitionButterflyId);\n      \n      if (result.success) {\n        res.json({ \n          message: 'Butterfly sold successfully', \n          success: true,\n          creditsEarned: result.creditsEarned \n        });\n      } else {\n        res.status(400).json({ message: result.message || 'Failed to sell butterfly' });\n      }\n    } catch (error) {\n      console.error('Failed to sell exhibition butterfly:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Sell VIP butterfly from exhibition\n  app.post(\"/api/exhibition/sell-vip-butterfly\", async (req, res) => {\n    try {\n      const { userId, exhibitionVipButterflyId } = req.body;\n      \n      if (!userId || !exhibitionVipButterflyId) {\n        return res.status(400).json({ message: 'Missing required parameters' });\n      }\n\n      const result = await storage.sellExhibitionVipButterfly(userId, exhibitionVipButterflyId);\n      \n      if (result.success) {\n        res.json({ \n          message: 'VIP Butterfly sold successfully', \n          success: true,\n          creditsEarned: result.creditsEarned \n        });\n      } else {\n        res.status(400).json({ message: result.message || 'Failed to sell VIP butterfly' });\n      }\n    } catch (error) {\n      console.error('Failed to sell exhibition VIP butterfly:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Sell butterfly from inventory for suns\n  app.post(\"/api/inventory/sell-butterfly-for-suns\", async (req, res) => {\n    try {\n      const { userId, butterflyId } = req.body;\n      \n      if (!userId || !butterflyId) {\n        return res.status(400).json({ message: 'Missing required parameters' });\n      }\n\n      const result = await storage.sellButterflyForSuns(userId, butterflyId);\n      \n      if (result.success) {\n        res.json({ \n          message: `${result.sunsEarned} Sonnen erhalten!`, \n          success: true,\n          sunsEarned: result.sunsEarned \n        });\n      } else {\n        res.status(400).json({ message: result.message || 'Failed to sell butterfly' });\n      }\n    } catch (error) {\n      console.error('Failed to sell butterfly for suns:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Sonnen-Boost for butterfly countdown (10 Sonnen = 1 minute reduction)\n  app.post(\"/api/exhibition/butterfly-sun-boost\", async (req, res) => {\n    try {\n      const { exhibitionButterflyId, minutes } = req.body;\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      if (!exhibitionButterflyId || !minutes || minutes <= 0 || minutes > 720) {\n        return res.status(400).json({ message: 'Ungültige Parameter (1-720 Minuten erlaubt)' });\n      }\n\n      const sunsCost = minutes * 10; // 10 Sonnen pro Minute\n      \n      // Check if user has enough suns\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      if (user.suns < sunsCost) {\n        return res.status(400).json({ message: `Du brauchst ${sunsCost} Sonnen für ${minutes} Minuten Boost` });\n      }\n\n      // Apply the boost\n      const result = await storage.applyButterflyTimeBoost(userId, exhibitionButterflyId, minutes);\n      \n      if (result.success) {\n        // Deduct suns\n        await storage.updateUserSuns(userId, -sunsCost);\n        \n        res.json({ \n          success: true,\n          message: `Countdown um ${minutes} Minuten für ${sunsCost} Sonnen verkürzt!`,\n          minutesReduced: minutes,\n          sunsCost\n        });\n      } else {\n        res.status(400).json({ message: result.message || 'Boost fehlgeschlagen' });\n      }\n    } catch (error) {\n      console.error('Sun boost error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ================================\n  // VIP BUTTERFLY ROUTES\n  // ================================\n\n  // Get user's VIP butterflies (animated collection)\n  app.get(\"/api/user/:id/vip-butterflies\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      console.log('✨ Getting VIP butterflies for user:', userId);\n      const vipButterflies = await storage.getUserVipButterflies(userId);\n      console.log('✨ Found VIP butterflies:', vipButterflies.length);\n      res.json({ vipButterflies });\n    } catch (error) {\n      console.error('✨ Error getting VIP butterflies:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get VIP butterflies placed in exhibition frames\n  app.get(\"/api/user/:id/exhibition-vip-butterflies\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const vipButterflies = await storage.getExhibitionVipButterflies(userId);\n      res.json({ vipButterflies });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Place VIP butterfly in exhibition frame\n  app.post(\"/api/exhibition/place-vip-butterfly\", async (req, res) => {\n    try {\n      const { userId, frameId, slotIndex, vipButterflyId } = req.body;\n      \n      if (!userId || !frameId || slotIndex === undefined || !vipButterflyId) {\n        return res.status(400).json({ message: 'Missing required parameters' });\n      }\n\n      const result = await storage.placeVipButterflyInExhibition(userId, frameId, slotIndex, vipButterflyId);\n      \n      if (result.success) {\n        res.json({ message: 'VIP-Schmetterling erfolgreich platziert!' });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      console.error('✨ Error placing VIP butterfly:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Remove VIP butterfly from exhibition frame\n  app.post(\"/api/exhibition/remove-vip-butterfly\", async (req, res) => {\n    try {\n      const { userId, frameId, slotIndex } = req.body;\n      \n      if (!userId || !frameId || slotIndex === undefined) {\n        return res.status(400).json({ message: 'Missing required parameters' });\n      }\n\n      const result = await storage.removeVipButterflyFromExhibition(userId, frameId, slotIndex);\n      \n      if (result.success) {\n        res.json({ message: 'VIP-Schmetterling erfolgreich entfernt!' });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      console.error('✨ Error removing VIP butterfly:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/exhibition/process-income\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: 'Missing userId' });\n      }\n\n      const result = await storage.processPassiveIncome(userId);\n      \n      if (result.success) {\n        res.json({ \n          message: `${result.creditsEarned || 0} Credits aus der Ausstellung erhalten!`,\n          creditsEarned: result.creditsEarned\n        });\n      } else {\n        res.status(400).json({ message: 'Fehler beim Verarbeiten des passiven Einkommens' });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get all users with their online status and exhibition butterflies count\n  app.get(\"/api/users/list\", async (req, res) => {\n    try {\n      const currentUserId = parseInt(req.headers['x-user-id'] as string);\n      \n      if (!currentUserId) {\n        return res.status(400).json({ message: \"User ID required\" });\n      }\n      \n      // Update current user's last activity timestamp\n      await storage.updateUserActivity(currentUserId);\n      \n      // Get user list excluding the current user  \n      const users = await storage.getAllUsersWithStatus(currentUserId);\n      res.json({ users });\n    } catch (error) {\n      console.error('Error fetching user list:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Like system routes\n  app.post('/api/exhibition/like', async (req, res) => {\n    try {\n      const { likerId, frameOwnerId, frameId } = req.body;\n      \n      if (!likerId || !frameOwnerId || !frameId) {\n        return res.status(400).json({ error: 'Missing required fields' });\n      }\n      \n      const result = await storage.likeExhibitionFrame(likerId, frameOwnerId, frameId);\n      \n      if (result.success) {\n        res.json({ success: true });\n      } else {\n        res.status(400).json({ error: result.message });\n      }\n    } catch (error) {\n      console.error('Failed to like frame:', error);\n      res.status(500).json({ error: 'Failed to like frame' });\n    }\n  });\n\n  app.delete('/api/exhibition/like', async (req, res) => {\n    try {\n      const { likerId, frameOwnerId, frameId } = req.body;\n      \n      if (!likerId || !frameOwnerId || !frameId) {\n        return res.status(400).json({ error: 'Missing required fields' });\n      }\n      \n      const result = await storage.unlikeExhibitionFrame(likerId, frameOwnerId, frameId);\n      \n      if (result.success) {\n        res.json({ success: true });\n      } else {\n        res.status(400).json({ error: result.message });\n      }\n    } catch (error) {\n      console.error('Failed to unlike frame:', error);\n      res.status(500).json({ error: 'Failed to unlike frame' });\n    }\n  });\n\n  app.get('/api/user/:userId/exhibition/:frameOwnerId/likes', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const frameOwnerId = parseInt(req.params.frameOwnerId);\n      \n      if (isNaN(userId) || isNaN(frameOwnerId)) {\n        return res.status(400).json({ error: 'Invalid user IDs' });\n      }\n      \n      const likes = await storage.getFrameLikesForUser(userId, frameOwnerId);\n      res.json({ likes });\n    } catch (error) {\n      console.error('Failed to get frame likes:', error);\n      res.status(500).json({ error: 'Failed to get frame likes' });\n    }\n  });\n\n  app.get('/api/user/:ownerId/foreign-exhibition', async (req, res) => {\n    try {\n      const ownerId = parseInt(req.params.ownerId);\n      \n      if (isNaN(ownerId)) {\n        return res.status(400).json({ error: 'Invalid owner ID' });\n      }\n      \n      const butterflies = await storage.getForeignExhibitionButterflies(ownerId);\n      const vipButterflies = await storage.getForeignExhibitionVipButterflies(ownerId);\n      const frames = await storage.getForeignExhibitionFrames(ownerId);\n      res.json({ butterflies, vipButterflies, frames });\n    } catch (error) {\n      console.error('Failed to get foreign exhibition:', error);\n      res.status(500).json({ error: 'Failed to get foreign exhibition' });\n    }\n  });\n\n  app.get('/api/user/:ownerId/foreign-aquarium', async (req, res) => {\n    try {\n      const ownerId = parseInt(req.params.ownerId);\n      \n      if (isNaN(ownerId)) {\n        return res.status(400).json({ error: 'Invalid owner ID' });\n      }\n      \n      const fish = await storage.getForeignAquariumFish(ownerId);\n      const tanks = await storage.getForeignAquariumTanks(ownerId);\n      res.json({ fish, tanks });\n    } catch (error) {\n      console.error('Failed to get foreign aquarium:', error);\n      res.status(500).json({ error: 'Failed to get foreign aquarium' });\n    }\n  });\n\n  // Debug route to show rarity distribution\n  app.get(\"/api/debug/rarity-distribution\", async (req, res) => {\n    try {\n      const { getRarityDistribution } = await import('./bouquet');\n      const distribution = getRarityDistribution();\n      \n      let total = Object.values(distribution).reduce((sum, count) => sum + count, 0);\n      const formattedDistribution = Object.entries(distribution).map(([rarity, count]) => {\n        return {\n          rarity,\n          count,\n          percentage: ((count / total) * 100).toFixed(1)\n        };\n      });\n      \n      res.json({\n        distribution: formattedDistribution,\n        total,\n        message: `Schmetterlings-Rarität Verteilung für ${total} verfügbare Bilder`\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Error loading rarity distribution\" });\n    }\n  });\n\n  // ========== WEEKLY CHALLENGE SYSTEM ==========\n  \n  // Get current active weekly challenge\n  app.get(\"/api/weekly-challenge/current\", async (req, res) => {\n    try {\n      const currentChallenge = await storage.getCurrentWeeklyChallenge();\n      \n      if (!currentChallenge) {\n        return res.status(404).json({ message: \"No active weekly challenge\" });\n      }\n\n      // Check if challenge period is valid (Sunday 18:00 - Monday 0:00 is inactive)\n      const now = new Date();\n      const dayOfWeek = now.getDay(); // 0 = Sunday\n      const hour = now.getHours();\n      \n      const isInactiveTime = (dayOfWeek === 0 && hour >= 18) || \n                            (dayOfWeek === 1 && hour === 0 && now.getMinutes() === 0);\n\n      res.json({\n        challenge: currentChallenge,\n        isActive: !isInactiveTime\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Error loading weekly challenge\" });\n    }\n  });\n\n  // Create new weekly challenge (for Monday 0:00)\n  app.post(\"/api/weekly-challenge/create\", async (req, res) => {\n    try {\n      const challenge = await storage.createWeeklyChallenge();\n      res.json({ challenge });\n    } catch (error) {\n      res.status(500).json({ message: \"Error creating weekly challenge\" });\n    }\n  });\n\n  // Donate flowers to weekly challenge\n  app.post(\"/api/weekly-challenge/donate\", async (req, res) => {\n    try {\n      const { donateChallengeFlowerSchema } = await import(\"@shared/schema\");\n      const donationData = donateChallengeFlowerSchema.parse(req.body);\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      const result = await storage.donateFlowerToChallenge(userId, donationData);\n      \n      if (result.success) {\n        res.json({ \n          message: result.message,\n          seedsReceived: result.seedsReceived \n        });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Error processing donation\" });\n    }\n  });\n\n  // Get challenge leaderboard\n  app.get(\"/api/weekly-challenge/:challengeId/leaderboard\", async (req, res) => {\n    try {\n      const challengeId = parseInt(req.params.challengeId);\n      const leaderboard = await storage.getChallengeLeaderboard(challengeId);\n      \n      res.json({ leaderboard });\n    } catch (error) {\n      res.status(500).json({ message: \"Error loading leaderboard\" });\n    }\n  });\n\n  // Process challenge rewards (for Sunday 18:00)\n  app.post(\"/api/weekly-challenge/:challengeId/process-rewards\", async (req, res) => {\n    try {\n      const challengeId = parseInt(req.params.challengeId);\n      await storage.processChallengeRewards(challengeId);\n      \n      res.json({ message: \"Rewards processed successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error processing rewards\" });\n    }\n  });\n\n  // Test endpoint for debugging passive income\n  app.post('/api/test/passive-income/:userId', async (req, res) => {\n    const userId = parseInt(req.params.userId);\n    \n    try {\n      console.log(`🔧 DEBUG: Testing passive income for user ${userId}`);\n      \n      // Get user data\n      const user = await storage.getUser(userId);\n      console.log(`🔧 DEBUG: User data:`, { \n        id: user?.id, \n        credits: user?.credits, \n        lastPassiveIncomeAt: user?.lastPassiveIncomeAt \n      });\n      \n      // Get butterflies\n      const normalButterflies = await storage.getExhibitionButterflies(userId);\n      const vipButterflies = await storage.getExhibitionVipButterflies(userId);\n      console.log(`🔧 DEBUG: Butterflies - Normal: ${normalButterflies.length}, VIP: ${vipButterflies.length}`);\n      \n      // Process passive income\n      const result = await storage.processPassiveIncome(userId);\n      console.log(`🔧 DEBUG: Passive income result:`, result);\n      \n      // Get updated user data\n      const updatedUser = await storage.getUser(userId);\n      console.log(`🔧 DEBUG: Updated user data:`, { \n        id: updatedUser?.id, \n        credits: updatedUser?.credits, \n        lastPassiveIncomeAt: updatedUser?.lastPassiveIncomeAt \n      });\n      \n      res.json({\n        success: true,\n        beforeCredits: user?.credits || 0,\n        afterCredits: updatedUser?.credits || 0,\n        creditsEarned: result.creditsEarned || 0,\n        normalButterflies: normalButterflies.length,\n        vipButterflies: vipButterflies.length\n      });\n    } catch (error) {\n      console.error('Failed to test passive income:', error);\n      res.status(500).json({ error: 'Failed to test passive income' });\n    }\n  });\n\n  // 🔧 ADMIN: Fix passive income time bug\n  app.get(\"/api/admin/fix-passive-income/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      \n      // Get user before fix\n      const userBefore = await storage.getUser(userId);\n      console.log(`🔧 Fixing passive income for user ${userId}, before:`, userBefore?.lastPassiveIncomeAt);\n      \n      // Create a method to fix the user's passive income time\n      if ('fixPassiveIncomeTime' in storage) {\n        await (storage as any).fixPassiveIncomeTime(userId);\n      } else {\n        // Fallback: direct SQL update via storage\n        throw new Error('fixPassiveIncomeTime method not implemented');\n      }\n      \n      res.json({ \n        success: true, \n        message: `✅ Passive income time reset for user ${userId}`,\n        beforeTime: userBefore?.lastPassiveIncomeAt || 'NULL',\n        afterTime: 'NULL (will use current time)',\n        instructions: \"🎉 Passive income should now work correctly! The negative time bug is fixed.\"\n      });\n    } catch (error) {\n      console.error('Admin fix error:', error);\n      res.status(500).json({ \n        success: false, \n        message: \"❌ Error fixing passive income\", \n        error: (error as Error).message \n      });\n    }\n  });\n\n  // 🔍 DEBUG: Deep dive into user exhibition data\n  app.get(\"/api/debug/user/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      \n      // Get user data\n      const user = await storage.getUser(userId);\n      \n      // Get exhibition butterflies with more details\n      const normalButterflies = await storage.getExhibitionButterflies(userId);\n      const vipButterflies = await storage.getExhibitionVipButterflies(userId);\n      \n      // Get raw database data for deeper inspection\n      let rawExhibitionData = [];\n      let rawVipExhibitionData = [];\n      let allUsers = [];\n      \n      try {\n        // Direct database queries to see what's really there\n        if ('db' in storage) {\n          const db = (storage as any).db;\n          rawExhibitionData = await db.select().from((storage as any).exhibitionButterflies).where((storage as any).eq((storage as any).exhibitionButterflies.userId, userId));\n          rawVipExhibitionData = await db.select().from((storage as any).exhibitionVipButterflies).where((storage as any).eq((storage as any).exhibitionVipButterflies.userId, userId));\n          allUsers = await db.select().from((storage as any).users);\n        }\n      } catch (dbError) {\n        console.error('Direct DB query failed:', dbError);\n      }\n      \n      // Get current time info\n      const now = new Date();\n      const lastTime = user?.lastPassiveIncomeAt;\n      const minutesElapsed = lastTime ? Math.floor((now.getTime() - new Date(lastTime).getTime()) / (1000 * 60)) : 'NULL';\n      \n      res.json({\n        userId: userId,\n        userName: user?.username || 'Unknown',\n        credits: user?.credits || 0,\n        lastPassiveIncomeAt: lastTime || 'NULL',\n        minutesElapsed: minutesElapsed,\n        normalButterflies: normalButterflies.length,\n        vipButterflies: vipButterflies.length,\n        totalCreditsPerHour: (normalButterflies.length * 30) + (vipButterflies.length * 61),\n        debugTime: now.toISOString(),\n        normalButterflyList: normalButterflies.map(b => ({ id: b.id, name: b.butterflyName, rarity: b.butterflyRarity, frameId: b.frameId })),\n        vipButterflyList: vipButterflies.map(b => ({ id: b.id, name: b.vipButterflyName, frameId: b.frameId })),\n        rawExhibitionCount: rawExhibitionData.length,\n        rawVipExhibitionCount: rawVipExhibitionData.length,\n        rawExhibitionData: rawExhibitionData,\n        rawVipExhibitionData: rawVipExhibitionData,\n        allUsersCount: allUsers.length,\n        allUserIds: allUsers.map((u: any) => ({ id: u.id, username: u.username }))\n      });\n    } catch (error) {\n      console.error('Debug error:', error);\n      res.status(500).json({ error: 'Debug failed', message: (error as Error).message });\n    }\n  });\n\n  // 🗑️ ADMIN: Reset all user data and start fresh\n  app.get(\"/api/admin/reset-all-data\", async (req, res) => {\n    try {\n      console.log('🗑️ ADMIN: Resetting all user data...');\n      \n      // Use storage methods to safely delete data\n      if ('db' in storage) {\n        const db = (storage as any).db;\n        \n        // Import the schema tables directly\n        const {\n          exhibitionVipButterflies,\n          exhibitionButterflies,\n          fieldButterflies,\n          userButterflies,\n          userVipButterflies,\n          placedBouquets,\n          userBouquets,\n          userFlowers,\n          plantedFields,\n          userSeeds,\n          marketListings,\n          passiveIncomeLog,\n          challengeDonations,\n          challengeRewards,\n          exhibitionFrameLikes,\n          exhibitionFrames,\n          users\n        } = await import('@shared/schema');\n        \n        // Delete all user-related data in correct order (foreign keys)\n        await db.delete(exhibitionVipButterflies);\n        await db.delete(exhibitionButterflies);\n        await db.delete(fieldButterflies);\n        await db.delete(userButterflies);\n        await db.delete(userVipButterflies);\n        await db.delete(placedBouquets);\n        await db.delete(userBouquets);\n        await db.delete(userFlowers);\n        await db.delete(plantedFields);\n        await db.delete(userSeeds);\n        await db.delete(marketListings);\n        await db.delete(passiveIncomeLog);\n        await db.delete(challengeDonations);\n        await db.delete(challengeRewards);\n        await db.delete(exhibitionFrameLikes);\n        await db.delete(exhibitionFrames); // ← Diese Tabelle fehlte!\n        await db.delete(users);\n        \n        console.log('✅ All user data deleted successfully');\n        \n        res.json({\n          success: true,\n          message: \"🎉 All data reset! You can now register a fresh account and passive income will work perfectly!\",\n          instructions: \"Go to your app and register again - everything will work normally now!\"\n        });\n      } else {\n        throw new Error('Database not accessible');\n      }\n    } catch (error) {\n      console.error('Reset error:', error);\n      res.status(500).json({\n        success: false,\n        message: \"❌ Error resetting data\",\n        error: (error as Error).message\n      });\n    }\n  });\n\n  // ======================================\n  // AQUARIUM SYSTEM ROUTES\n  // ======================================\n\n  // Get user's aquarium tanks\n  app.get(\"/api/user/:id/aquarium-tanks\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const tanks = await storage.getAquariumTanks(userId);\n      res.json({ tanks });\n    } catch (error) {\n      console.error('Failed to get aquarium tanks:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get user's aquarium fish\n  app.get(\"/api/user/:id/aquarium-fish\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const fish = await storage.getAquariumFish(userId);\n      res.json({ fish });\n    } catch (error) {\n      console.error('Failed to get aquarium fish:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Purchase aquarium tank\n  app.post(\"/api/aquarium/purchase-tank\", async (req, res) => {\n    try {\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      const { tankNumber } = req.body;\n\n      if (!tankNumber || tankNumber < 1 || tankNumber > 10) {\n        return res.status(400).json({ message: \"Ungültige Tank-Nummer\" });\n      }\n\n      const result = await storage.purchaseAquariumTank(userId, tankNumber);\n      \n      if (result.success) {\n        res.json({ message: \"Aquarium gekauft!\", tank: result.tank });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      console.error('Failed to purchase aquarium tank:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Place fish in aquarium\n  app.post(\"/api/aquarium/place-fish\", async (req, res) => {\n    try {\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      const { tankNumber, slotIndex, fishId } = req.body;\n\n      if (tankNumber === undefined || slotIndex === undefined || !fishId) {\n        return res.status(400).json({ message: \"Fehlende Parameter\" });\n      }\n\n      if (slotIndex < 0 || slotIndex >= 24) {\n        return res.status(400).json({ message: \"Ungültiger Slot-Index\" });\n      }\n\n      const result = await storage.placeAquariumFish(userId, tankNumber, slotIndex, fishId);\n      \n      if (result.success) {\n        res.json({ message: \"Fisch im Aquarium platziert!\" });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      console.error('Failed to place aquarium fish:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Remove fish from aquarium\n  app.delete(\"/api/aquarium/remove-fish\", async (req, res) => {\n    try {\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      const { aquariumFishId } = req.body;\n\n      if (!aquariumFishId) {\n        return res.status(400).json({ message: \"Fisch-ID fehlt\" });\n      }\n\n      const result = await storage.removeAquariumFish(userId, aquariumFishId);\n      \n      if (result.success) {\n        res.json({ message: \"Fisch aus Aquarium entfernt!\" });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      console.error('Failed to remove aquarium fish:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get fish sell status (24h countdown)\n  app.get(\"/api/aquarium/fish/:fishId/sell-status\", async (req, res) => {\n    try {\n      const fishId = parseInt(req.params.fishId);\n      const sellStatus = await storage.canSellAquariumFish(fishId);\n      \n      res.json({\n        canSell: sellStatus.canSell,\n        timeRemainingMs: sellStatus.timeRemainingMs\n      });\n    } catch (error) {\n      console.error('Failed to get fish sell status:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Sell aquarium fish\n  app.post(\"/api/aquarium/sell-fish\", async (req, res) => {\n    try {\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      const { aquariumFishId } = req.body;\n\n      if (!aquariumFishId) {\n        return res.status(400).json({ message: \"Fisch-ID fehlt\" });\n      }\n\n      const result = await storage.sellAquariumFish(userId, aquariumFishId);\n      \n      if (result.success) {\n        res.json({ \n          message: \"Fisch verkauft!\",\n          creditsEarned: result.creditsEarned\n        });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      console.error('Failed to sell aquarium fish:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Apply sun boost to fish (reduce wait time)\n  app.post(\"/api/aquarium/sun-boost\", async (req, res) => {\n    try {\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      const { aquariumFishId, minutes } = req.body;\n\n      if (!aquariumFishId || !minutes) {\n        return res.status(400).json({ message: \"Fehlende Parameter\" });\n      }\n\n      if (minutes < 1 || minutes > 1440) { // Max 24 hours\n        return res.status(400).json({ message: \"Ungültige Minuten (1-1440)\" });\n      }\n\n      const result = await storage.applyAquariumSunBoost(userId, aquariumFishId, minutes);\n      \n      if (result.success) {\n        res.json({ message: `${minutes} Minuten abgezogen!` });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      console.error('Failed to apply sun boost:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get caterpillar sell status (immediately sellable for regular caterpillars)\n  app.get(\"/api/caterpillars/:caterpillarId/sell-status\", async (req, res) => {\n    try {\n      const caterpillarId = parseInt(req.params.caterpillarId);\n      const sellStatus = await storage.canSellCaterpillar(caterpillarId);\n      \n      res.json({\n        canSell: sellStatus.canSell,\n        timeRemainingMs: sellStatus.timeRemainingMs\n      });\n    } catch (error) {\n      console.error('Failed to get caterpillar sell status:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Sell caterpillar\n  app.post(\"/api/caterpillars/sell\", async (req, res) => {\n    try {\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      const { caterpillarId } = req.body;\n\n      if (!caterpillarId) {\n        return res.status(400).json({ message: \"Raupen-ID fehlt\" });\n      }\n\n      const result = await storage.sellCaterpillar(userId, caterpillarId);\n      \n      if (result.success) {\n        res.json({ \n          message: \"Raupe verkauft!\",\n          creditsEarned: result.creditsEarned\n        });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      console.error('Failed to sell caterpillar:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Fish inventory cleanup endpoint\n  app.get('/api/admin/cleanup-fish-duplicates', async (req, res) => {\n    try {\n      console.log('🧹 Starting fish inventory cleanup...');\n      \n      // Get all users with fish\n      const allUsers = await storage.getAllUsers();\n      let totalMerged = 0;\n      \n      for (const user of allUsers) {\n        const userFish = await storage.getUserFish(user.id);\n        \n        // Group fish by fishId\n        const fishGroups = new Map<number, any[]>();\n        userFish.forEach(fish => {\n          if (!fishGroups.has(fish.fishId)) {\n            fishGroups.set(fish.fishId, []);\n          }\n          fishGroups.get(fish.fishId)!.push(fish);\n        });\n        \n        // Process groups with duplicates\n        for (const [fishId, duplicates] of Array.from(fishGroups)) {\n          if (duplicates.length > 1) {\n            console.log(`🐟 User ${user.username}: Found ${duplicates.length} duplicates of fish ${fishId}`);\n            \n            // Calculate total quantity\n            const totalQuantity = duplicates.reduce((sum: number, fish: any) => sum + fish.quantity, 0);\n            \n            // Keep the first entry and delete others\n            const keepFish = duplicates[0];\n            const deleteFish = duplicates.slice(1);\n            \n            // Update the kept fish with total quantity\n            await storage.updateFishQuantity(keepFish.id, totalQuantity);\n            \n            // Delete the duplicates\n            for (const duplicate of deleteFish) {\n              await storage.deleteFishEntry(duplicate.id);\n            }\n            \n            console.log(`🐟 Merged ${duplicates.length} entries into 1 with quantity ${totalQuantity}`);\n            totalMerged += duplicates.length - 1;\n          }\n        }\n      }\n      \n      console.log(`🎉 Fish cleanup complete! Merged ${totalMerged} duplicate entries.`);\n      res.json({ \n        success: true, \n        message: `Successfully merged ${totalMerged} duplicate fish entries.`,\n        mergedCount: totalMerged\n      });\n    } catch (error) {\n      console.error('Failed to cleanup fish duplicates:', error);\n      res.status(500).json({ error: 'Failed to cleanup fish duplicates' });\n    }\n  });\n\n  // Marie Posa trading system routes\n  // Check if Marie Posa is available for trading (every 3 hours)\n  app.get(\"/api/user/:userId/marie-posa-status\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n\n      const lastTradeResult = await storage.getMariePosaLastTrade(userId);\n      const now = new Date();\n      const threeHoursAgo = new Date(now.getTime() - (3 * 60 * 60 * 1000));\n      \n      let isAvailable = false;\n      if (!lastTradeResult.lastTradeAt || lastTradeResult.lastTradeAt < threeHoursAgo) {\n        isAvailable = true;\n      }\n\n      const nextAvailableAt = lastTradeResult.lastTradeAt ? \n        new Date(lastTradeResult.lastTradeAt.getTime() + (3 * 60 * 60 * 1000)) : \n        now;\n\n      res.json({ \n        isAvailable,\n        nextAvailableAt: nextAvailableAt.toISOString(),\n        lastTradeAt: lastTradeResult.lastTradeAt?.toISOString() || null\n      });\n    } catch (error) {\n      console.error('Error checking Marie Posa status:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Marie Posa selling endpoint\n  app.post(\"/api/user/:userId/marie-posa-sell\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const { items } = req.body;\n      \n      if (!userId || !items || !Array.isArray(items) || items.length === 0) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      if (items.length > 4) {\n        return res.status(400).json({ message: \"Marie Posa kauft maximal 4 Items pro Besuch!\" });\n      }\n\n      // Check if Marie Posa is available\n      const lastTradeResult = await storage.getMariePosaLastTrade(userId);\n      const now = new Date();\n      const threeHoursAgo = new Date(now.getTime() - (3 * 60 * 60 * 1000));\n      \n      if (lastTradeResult.lastTradeAt && lastTradeResult.lastTradeAt >= threeHoursAgo) {\n        const nextAvailableAt = new Date(lastTradeResult.lastTradeAt.getTime() + (3 * 60 * 60 * 1000));\n        return res.status(400).json({ \n          message: `Marie Posa ist erst wieder ${nextAvailableAt.toLocaleTimeString('de-DE')} verfügbar!` \n        });\n      }\n\n      // Process the sale\n      const result = await storage.processMariePosaSale(userId, items);\n      \n      if (result.success) {\n        res.json({ \n          message: `Marie Posa hat deine Items für ${result.totalEarned} Credits gekauft!`,\n          totalEarned: result.totalEarned,\n          itemsSold: result.itemsSold\n        });\n      } else {\n        res.status(400).json({ message: result.message || 'Verkauf fehlgeschlagen' });\n      }\n    } catch (error) {\n      console.error('Error processing Marie Posa sale:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Marie-Slot machine endpoint\n  app.post(\"/api/user/:userId/marie-slot-play\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n\n      // Check if user has enough suns (5 suns to play)\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.suns < 5) {\n        return res.status(400).json({ message: \"Nicht genügend Sonnen! Du brauchst 5 Sonnen zum Spielen.\" });\n      }\n\n      // Deduct 5 suns\n      await storage.updateUserSuns(userId, -5);\n      console.log(`🎰 User ${userId} spent 5 suns on Marie-Slot`);\n\n      // Generate slot machine result (5 reels with 3 symbols each) - Payline system\n      const symbols = ['caterpillar', 'flower', 'butterfly', 'fish', 'sun'];\n      const reels: string[][] = [];\n      const paylineSymbols: string[] = []; // Only middle symbols count for wins\n      \n      for (let i = 0; i < 5; i++) {\n        const reelSymbols: string[] = [];\n        for (let j = 0; j < 3; j++) {\n          const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];\n          reelSymbols.push(randomSymbol);\n          // Middle symbol (index 1) goes to payline\n          if (j === 1) {\n            paylineSymbols.push(randomSymbol);\n          }\n        }\n        reels.push(reelSymbols);\n      }\n\n      console.log(`🎰 Slot result (all): ${reels.map(reel => reel.join('|')).join(' - ')}`);\n      console.log(`🎰 Payline (middle): ${paylineSymbols.join(' - ')}`);\n\n      // Check for wins on payline (middle symbols only) - FIXED!\n      const symbolCounts = new Map<string, number>();\n      paylineSymbols.forEach(symbol => {\n        symbolCounts.set(symbol, (symbolCounts.get(symbol) || 0) + 1);\n      });\n      \n      console.log(`🎰 Symbol counts on payline:`, Object.fromEntries(symbolCounts));\n\n      let maxCount = 0;\n      let winningSymbol = '';\n      for (const [symbol, count] of Array.from(symbolCounts)) {\n        if (count > maxCount) {\n          maxCount = count;\n          winningSymbol = symbol;\n        }\n      }\n\n      let reward: any = null;\n      let message = \"Leider kein Gewinn! Probier's nochmal!\";\n\n      // Determine reward based on matching symbols\n      if (maxCount >= 2) {\n        console.log(`🎰 Win detected: ${maxCount} matching ${winningSymbol} symbols`);\n        \n        if (maxCount === 2) {\n          // 2 matching = 3 suns\n          await storage.updateUserSuns(userId, 3);\n          reward = { type: 'suns', amount: 3 };\n          message = \"🌞 2 gleiche Symbole! Du gewinnst 3 Sonnen!\";\n          console.log(`🎰 Rewarded 3 suns to user ${userId}`);\n        } else if (maxCount === 3) {\n          // 3 matching = different rewards based on symbol type\n          if (winningSymbol === 'sun') {\n            // 3 suns = 50 credits (special sun bonus)\n            await storage.updateUserCredits(userId, 50);\n            reward = { type: 'credits', amount: 50 };\n            message = \"☀️ 3 Sonnen! Du gewinnst 50 Credits!\";\n            console.log(`🎰 Rewarded 50 credits for 3 suns to user ${userId}`);\n          } else {\n            // 3 other symbols = 1 rare seed\n            await storage.addSeedToInventory(userId, 'rare', 1);\n            reward = { type: 'seeds', rarity: 'rare', amount: 1 };\n            message = \"🌱 3 gleiche Symbole! Du gewinnst 1 rare Samen!\";\n            console.log(`🎰 Rewarded 1 rare seed for 3 ${winningSymbol} to user ${userId}`);\n          }\n        } else if (maxCount === 4) {\n          // 4 matching = epic butterfly\n          const butterflyResult = await storage.addButterflyToInventory(userId, 'epic', 1);\n          reward = { type: 'butterfly', rarity: 'epic', amount: 1 };\n          message = \"🦋 4 gleiche Symbole! Du gewinnst einen epischen Schmetterling!\";\n          console.log(`🎰 Rewarded 1 epic butterfly to user ${userId}`);\n        } else if (maxCount === 5) {\n          // 5 matching = 1000 credits (jackpot!)\n          await storage.updateUserCredits(userId, 1000);\n          reward = { type: 'credits', amount: 1000 };\n          message = \"💰 JACKPOT! 5 gleiche Symbole! Du gewinnst 1000 Credits!\";\n          console.log(`🎰 JACKPOT! Rewarded 1000 credits to user ${userId}`);\n        }\n      }\n\n      res.json({\n        success: true,\n        reels: reels.flat(), // Send all 15 symbols (3 per reel) to frontend\n        payline: paylineSymbols, // The 5 middle symbols that count for wins\n        matchCount: maxCount,\n        winningSymbol: maxCount >= 2 ? winningSymbol : null,\n        reward,\n        message\n      });\n\n    } catch (error) {\n      console.error('🎰 Error in Marie-Slot play:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Marie-Slot machine endpoint (Credits version)\n  app.post(\"/api/user/:userId/marie-slot-play-credits\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n\n      // Check if user has enough credits (10 credits to play)\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.credits < 10) {\n        return res.status(400).json({ message: \"Nicht genügend Credits! Du brauchst 10 Credits zum Spielen.\" });\n      }\n\n      // Deduct 10 credits\n      await storage.updateUserCredits(userId, -10);\n      console.log(`🎰 User ${userId} spent 10 credits on Marie-Slot`);\n\n      // Generate slot machine result (5 reels with 3 symbols each) - Payline system\n      const symbols = ['caterpillar', 'flower', 'butterfly', 'fish', 'sun'];\n      const reels: string[][] = [];\n      const paylineSymbols: string[] = []; // Only middle symbols count for wins\n      \n      for (let i = 0; i < 5; i++) {\n        const reelSymbols: string[] = [];\n        for (let j = 0; j < 3; j++) {\n          const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];\n          reelSymbols.push(randomSymbol);\n          // Middle symbol (index 1) goes to payline\n          if (j === 1) {\n            paylineSymbols.push(randomSymbol);\n          }\n        }\n        reels.push(reelSymbols);\n      }\n\n      console.log(`🎰 Credit-Slot result (all): ${reels.map(reel => reel.join('|')).join(' - ')}`);\n      console.log(`🎰 Credit-Slot Payline (middle): ${paylineSymbols.join(' - ')}`);\n\n      // Check for wins on payline (middle symbols only) - FIXED!\n      const symbolCounts = new Map<string, number>();\n      paylineSymbols.forEach(symbol => {\n        symbolCounts.set(symbol, (symbolCounts.get(symbol) || 0) + 1);\n      });\n      \n      console.log(`🎰 Credit-Slot Symbol counts on payline:`, Object.fromEntries(symbolCounts));\n\n      let maxCount = 0;\n      let winningSymbol = '';\n      for (const [symbol, count] of Array.from(symbolCounts)) {\n        if (count > maxCount) {\n          maxCount = count;\n          winningSymbol = symbol;\n        }\n      }\n\n      let reward: any = null;\n      let message = \"Leider kein Gewinn! Probier's nochmal!\";\n\n      // Determine reward based on matching symbols\n      if (maxCount >= 2) {\n        console.log(`🎰 Credit-Slot Win detected: ${maxCount} matching ${winningSymbol} symbols`);\n        \n        if (maxCount === 2) {\n          // 2 matching = 3 suns\n          await storage.updateUserSuns(userId, 3);\n          reward = { type: 'suns', amount: 3 };\n          message = \"🌞 2 gleiche Symbole! Du gewinnst 3 Sonnen!\";\n          console.log(`🎰 Credit-Slot Rewarded 3 suns to user ${userId}`);\n        } else if (maxCount === 3) {\n          // 3 matching = different rewards based on symbol type\n          if (winningSymbol === 'sun') {\n            // 3 suns = 50 credits (special sun bonus)\n            await storage.updateUserCredits(userId, 50);\n            reward = { type: 'credits', amount: 50 };\n            message = \"☀️ 3 Sonnen! Du gewinnst 50 Credits!\";\n            console.log(`🎰 Credit-Slot Rewarded 50 credits for 3 suns to user ${userId}`);\n          } else {\n            // 3 other symbols = 1 rare seed\n            await storage.addSeedToInventory(userId, 'rare', 1);\n            reward = { type: 'seeds', rarity: 'rare', amount: 1 };\n            message = \"🌱 3 gleiche Symbole! Du gewinnst 1 rare Samen!\";\n            console.log(`🎰 Credit-Slot Rewarded 1 rare seed for 3 ${winningSymbol} to user ${userId}`);\n          }\n        } else if (maxCount === 4) {\n          // 4 matching = epic butterfly\n          const butterflyResult = await storage.addButterflyToInventory(userId, 'epic', 1);\n          reward = { type: 'butterfly', rarity: 'epic', amount: 1 };\n          message = \"🦋 4 gleiche Symbole! Du gewinnst einen epischen Schmetterling!\";\n          console.log(`🎰 Credit-Slot Rewarded 1 epic butterfly to user ${userId}`);\n        } else if (maxCount === 5) {\n          // 5 matching = 1000 credits (jackpot!)\n          await storage.updateUserCredits(userId, 1000);\n          reward = { type: 'credits', amount: 1000 };\n          message = \"💰 JACKPOT! 5 gleiche Symbole! Du gewinnst 1000 Credits!\";\n          console.log(`🎰 Credit-Slot JACKPOT! Rewarded 1000 credits to user ${userId}`);\n        }\n      }\n\n      res.json({\n        success: true,\n        reels: reels.flat(), // Send all 15 symbols (3 per reel) to frontend\n        payline: paylineSymbols, // The 5 middle symbols that count for wins\n        matchCount: maxCount,\n        winningSymbol: maxCount >= 2 ? winningSymbol : null,\n        reward,\n        message\n      });\n\n    } catch (error) {\n      console.error('🎰 Error in Marie-Slot credit play:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ========== TOP 100 RANKINGS SYSTEM ==========\n  \n  app.get(\"/api/rankings/top100/:category\", async (req, res) => {\n    try {\n      const category = req.params.category;\n      const userId = parseInt(req.headers['x-user-id'] as string) || 1;\n      \n      console.log(`🏆 Loading Top 100 rankings for category: ${category}`);\n      \n      let players = [];\n      \n      switch (category) {\n        case 'credits':\n          players = await storage.getTop100ByCredits(userId);\n          break;\n        case 'passive-income':\n          players = await storage.getTop100ByPassiveIncome(userId);\n          break;\n        case 'suns':\n          players = await storage.getTop100BySuns(userId);\n          break;\n        case 'likes':\n          players = await storage.getTop100ByLikes(userId);\n          break;\n        case 'dna':\n          players = await storage.getTop100ByDna(userId);\n          break;\n        case 'seeds':\n          players = await storage.getTop100BySeeds(userId);\n          break;\n        case 'flowers':\n          players = await storage.getTop100ByFlowers(userId);\n          break;\n        case 'hearts':\n          players = await storage.getTop100ByHearts(userId);\n          break;\n        case 'butterflies':\n          players = await storage.getTop100ByButterflies(userId);\n          break;\n        case 'caterpillars':\n          players = await storage.getTop100ByCaterpillars(userId);\n          break;\n        case 'fish':\n          players = await storage.getTop100ByFish(userId);\n          break;\n        case 'exhibition-butterflies':\n          players = await storage.getTop100ByExhibitionButterflies(userId);\n          break;\n        case 'exhibition-fish':\n          players = await storage.getTop100ByExhibitionFish(userId);\n          break;\n        case 'bouquet-recipes':\n          players = await storage.getTop100ByBouquetRecipes(userId);\n          break;\n        default:\n          return res.status(400).json({ message: \"Invalid ranking category\" });\n      }\n      \n      console.log(`🏆 Found ${players.length} players for ${category} rankings`);\n      res.json({ players });\n    } catch (error) {\n      console.error('🏆 Error loading Top 100 rankings:', error);\n      res.status(500).json({ message: \"Error loading rankings\" });\n    }\n  });\n\n  // Daily Items API\n  app.get(\"/api/daily-items\", async (req, res) => {\n    try {\n      const dailyItems = await storage.getDailyItems();\n      res.json(dailyItems);\n    } catch (error) {\n      console.error('Failed to get daily items:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Daily Items with Redemption Status API\n  app.get(\"/api/user/:id/daily-items\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const dailyItems = await storage.getDailyItemsWithRedemptions(userId);\n      res.json(dailyItems);\n    } catch (error) {\n      console.error('Failed to get daily items with redemptions:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Redeem Tickets API\n  app.post(\"/api/user/:id/redeem-tickets\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { prizeType, cost } = req.body;\n\n      if (!prizeType || !cost || typeof cost !== 'number') {\n        return res.status(400).json({ message: \"Invalid prize type or cost\" });\n      }\n\n      const result = await storage.redeemTickets(userId, prizeType, cost);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: result.message });\n      }\n\n      res.json({ \n        success: result.success, \n        message: result.message\n      });\n    } catch (error) {\n      console.error('Failed to redeem tickets:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ========== CASTLE GARDEN SYSTEM ==========\n  \n  // Get available castle parts files from Castle folder\n  app.get(\"/api/castle/available-parts\", async (req, res) => {\n    try {\n      const fs = await import('fs');\n      const path = await import('path');\n      \n      const castleDir = path.join(process.cwd(), 'client', 'public', 'Castle');\n      \n      // Check if Castle directory exists\n      if (!fs.existsSync(castleDir)) {\n        return res.json({ files: [] });\n      }\n      \n      // Read all files from Castle directory\n      const files = fs.readdirSync(castleDir)\n        .filter(file => file.endsWith('.jpg') || file.endsWith('.jpeg') || file.endsWith('.png'))\n        .filter(file => file.includes('_')) // Only files with Name_Price format\n        .sort();\n        \n      console.log(`🏰 Found ${files.length} castle part files:`, files);\n      res.json({ files });\n    } catch (error) {\n      console.error('Failed to scan castle parts:', error);\n      res.status(500).json({ error: 'Failed to scan castle parts' });\n    }\n  });\n\n  // Get unlocked castle parts for a user\n  app.get(\"/api/user/:id/castle-unlocked-parts\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const unlockedParts = await storage.getCastleUnlockedParts(userId);\n      res.json({ unlockedParts });\n    } catch (error) {\n      console.error('Failed to get castle unlocked parts:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Unlock a castle part\n  app.post(\"/api/user/:id/castle-unlock-part\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { partName, price } = req.body;\n\n      if (!partName || typeof price !== 'number') {\n        return res.status(400).json({ message: \"Invalid part name or price\" });\n      }\n\n      const result = await storage.unlockCastlePart(userId, partName, price);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: result.message });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Failed to unlock castle part:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get castle grid state for a user\n  app.get(\"/api/user/:id/castle-grid-state\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const gridState = await storage.getCastleGridState(userId);\n      res.json({ gridState });\n    } catch (error) {\n      console.error('Failed to get castle grid state:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Place a castle part on the grid\n  app.post(\"/api/user/:id/castle-place-part\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { gridX, gridY, partName } = req.body;\n\n      if (typeof gridX !== 'number' || typeof gridY !== 'number' || !partName) {\n        return res.status(400).json({ message: \"Invalid grid position or part name\" });\n      }\n\n      const result = await storage.placeCastlePart(userId, gridX, gridY, partName);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: result.message });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Failed to place castle part:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Remove a castle part from the grid\n  app.delete(\"/api/user/:id/castle-remove-part\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { gridX, gridY } = req.body;\n\n      if (typeof gridX !== 'number' || typeof gridY !== 'number') {\n        return res.status(400).json({ message: \"Invalid grid position\" });\n      }\n\n      const result = await storage.removeCastlePart(userId, gridX, gridY);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: result.message });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Failed to remove castle part:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Feature unlocking endpoints\n  app.get('/api/user/:userId/unlocked-features', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const unlockedFeatures = await storage.getUnlockedFeatures(userId);\n      console.log(`🔓 User ${userId} unlocked features: ${unlockedFeatures.join(', ')}`);\n      res.json({ unlockedFeatures });\n    } catch (error) {\n      console.error('Failed to get unlocked features:', error);\n      res.status(500).json({ error: 'Failed to get unlocked features' });\n    }\n  });\n\n  app.post('/api/user/:userId/unlock-feature', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const { featureName } = req.body;\n\n      // Define feature costs\n      const featureCosts: { [key: string]: number } = {\n        'marie-slot': 1000,\n        'dna': 3500,\n        'schlossgarten': 8000\n      };\n\n      const creditsRequired = featureCosts[featureName];\n      if (!creditsRequired) {\n        return res.status(400).json({ error: 'Invalid feature name' });\n      }\n\n      const result = await storage.unlockFeature(userId, featureName, creditsRequired);\n      console.log(`🔓 User ${userId} unlocked feature: ${featureName} for ${creditsRequired} credits`);\n      \n      res.json({ \n        message: `Feature ${featureName} unlocked successfully!`,\n        creditsSpent: creditsRequired,\n        newCredits: result.newCredits\n      });\n    } catch (error: any) {\n      console.error('Failed to unlock feature:', error);\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Activity tracking heartbeat endpoint\n  app.post('/api/user/:userId/heartbeat', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      \n      if (isNaN(userId)) {\n        return res.status(400).json({ error: 'Invalid user ID' });\n      }\n\n      await storage.updateUserLastActive(userId);\n      res.json({ message: 'Heartbeat recorded successfully' });\n    } catch (error) {\n      console.error('❌ Failed to record heartbeat:', error);\n      res.status(500).json({ error: 'Failed to record heartbeat' });\n    }\n  });\n\n  // User Notifications Routes\n  app.get('/api/user/:userId/notifications', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      \n      const notifications = await storage.getUserNotifications(userId);\n      \n      res.json({ notifications });\n    } catch (error) {\n      console.error('🔴 Error getting user notifications:', error);\n      res.status(500).json({ error: 'Failed to get notifications' });\n    }\n  });\n\n  app.post('/api/user/:userId/notifications/:notificationId/read', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const notificationId = parseInt(req.params.notificationId);\n      \n      await storage.markNotificationAsRead(notificationId, userId);\n      \n      res.json({ message: 'Notification marked as read' });\n    } catch (error) {\n      console.error('🔴 Error marking notification as read:', error);\n      res.status(500).json({ error: 'Failed to mark notification as read' });\n    }\n  });\n\n  app.post('/api/user/:userId/notifications/read-all', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      \n      await storage.markAllNotificationsAsRead(userId);\n      \n      res.json({ message: 'All notifications marked as read' });\n    } catch (error) {\n      console.error('🔴 Error marking all notifications as read:', error);\n      res.status(500).json({ error: 'Failed to mark all notifications as read' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":141728},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2409},"shared/rarity.ts":{"content":"// Rarity system utilities for Mariposa game\n\nexport type RarityTier = 'common' | 'uncommon' | 'rare' | 'super-rare' | 'epic' | 'legendary' | 'mythical' | 'vip';\n\n// German rarity names for display\nexport const RARITY_NAMES_DE: Record<string, string> = {\n  common: 'Häufig',\n  uncommon: 'Ungewöhnlich', \n  rare: 'Selten',\n  'super-rare': 'Super-selten',\n  epic: 'Episch',\n  legendary: 'Legendär',\n  mythical: 'Mythisch'\n};\n\n// Calculate expected average fish rarity based on distribution\nexport function getExpectedFishRarity(): { name: string; percentage: number } {\n  // Fish rarity distribution percentages from creatures.ts\n  const fishDistribution = {\n    common: 44.3,      // 44.3%\n    uncommon: 30.0,    // 30.0%\n    rare: 12.2,        // 12.2%\n    'super-rare': 7.8, // 7.8%\n    epic: 4.7,         // 4.7%\n    legendary: 2.6,    // 2.6%\n    mythical: 1.3      // 1.3%\n  };\n  \n  // Calculate weighted average based on rarity tier values\n  const rarityValues = {\n    common: 1,\n    uncommon: 2, \n    rare: 3,\n    'super-rare': 4,\n    epic: 5,\n    legendary: 6,\n    mythical: 7\n  };\n  \n  let totalWeight = 0;\n  let weightedSum = 0;\n  \n  for (const [tier, percentage] of Object.entries(fishDistribution)) {\n    const tierValue = rarityValues[tier as keyof typeof rarityValues];\n    totalWeight += percentage;\n    weightedSum += tierValue * percentage;\n  }\n  \n  const averageValue = weightedSum / totalWeight;\n  \n  // Map average value back to closest rarity tier and percentage\n  const tiers = Object.keys(rarityValues) as Array<keyof typeof rarityValues>;\n  let closestTier = tiers[0];\n  let smallestDiff = Math.abs(rarityValues[tiers[0]] - averageValue);\n  \n  for (const tier of tiers) {\n    const diff = Math.abs(rarityValues[tier] - averageValue);\n    if (diff < smallestDiff) {\n      smallestDiff = diff;\n      closestTier = tier;\n    }\n  }\n  \n  return {\n    name: RARITY_NAMES_DE[closestTier as keyof typeof RARITY_NAMES_DE],\n    percentage: Math.round(fishDistribution[closestTier] * 10) / 10\n  };\n}\n\nexport interface RarityConfig {\n  tier: RarityTier;\n  weight: number;\n  flowerRange: [number, number] | null;\n  butterflyRange: [number, number] | null;\n  growthTimeSeconds: number;\n}\n\n// Weighted distribution configuration - NEW DISTRIBUTION  \nexport const RARITY_CONFIG: RarityConfig[] = [\n  {\n    tier: 'common',\n    weight: 45,\n    flowerRange: [1, 55],          // 55 flowers\n    butterflyRange: [1, 443],      // 443 butterflies\n    growthTimeSeconds: 75 // 1:15 min\n  },\n  {\n    tier: 'uncommon', \n    weight: 30,\n    flowerRange: [56, 100],        // 45 flowers  \n    butterflyRange: [444, 743],    // 300 butterflies\n    growthTimeSeconds: 150 // 2:30 min\n  },\n  {\n    tier: 'rare',\n    weight: 15,\n    flowerRange: [101, 135],       // 35 flowers\n    butterflyRange: [744, 843],    // 100 butterflies\n    growthTimeSeconds: 240 // 4:00 min\n  },\n  {\n    tier: 'super-rare',\n    weight: 7,\n    flowerRange: [136, 160],       // 25 flowers\n    butterflyRange: [844, 918],    // 75 butterflies\n    growthTimeSeconds: 330 // 5:30 min\n  },\n  {\n    tier: 'epic',\n    weight: 2.5,\n    flowerRange: [161, 180],       // 20 flowers\n    butterflyRange: [919, 963],    // 45 butterflies\n    growthTimeSeconds: 420 // 7:00 min\n  },\n  {\n    tier: 'legendary',\n    weight: 0.4,\n    flowerRange: [181, 195],       // 15 flowers\n    butterflyRange: [964, 988],    // 25 butterflies\n    growthTimeSeconds: 510 // 8:30 min\n  },\n  {\n    tier: 'mythical',\n    weight: 0.1,\n    flowerRange: [196, 200],       // 5 flowers\n    butterflyRange: [989, 1000],   // 12 butterflies\n    growthTimeSeconds: 600 // 10:00 min\n  }\n];\n\n/**\n * Get a random rarity tier based on weighted distribution\n */\nexport function getRandomRarity(): RarityTier {\n  const totalWeight = RARITY_CONFIG.reduce((sum, config) => sum + config.weight, 0);\n  const random = Math.random() * totalWeight;\n  \n  let currentWeight = 0;\n  for (const config of RARITY_CONFIG) {\n    currentWeight += config.weight;\n    if (random <= currentWeight) {\n      return config.tier;\n    }\n  }\n  \n  return 'common'; // Fallback\n}\n\n/**\n * Get a random asset ID for a specific rarity and type\n */\nexport function getRandomAssetId(rarity: RarityTier, type: 'flower' | 'butterfly'): number | null {\n  const config = RARITY_CONFIG.find(c => c.tier === rarity);\n  if (!config) return null;\n  \n  const range = type === 'flower' ? config.flowerRange : config.butterflyRange;\n  if (!range) return null;\n  \n  const [min, max] = range;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get asset path for given type and ID\n */\nexport function getAssetPath(type: 'flower' | 'butterfly', id: number): string {\n  if (type === 'flower') {\n    return `/Blumen/${id.toString().padStart(2, '0')}.png`;\n  } else {\n    return `/Schmetterlinge/${id.toString().padStart(3, '0')}.png`;\n  }\n}\n\n/**\n * Get rarity tier from asset ID\n */\nexport function getRarityFromAssetId(type: 'flower' | 'butterfly', id: number): RarityTier {\n  for (const config of RARITY_CONFIG) {\n    const range = type === 'flower' ? config.flowerRange : config.butterflyRange;\n    if (range && id >= range[0] && id <= range[1]) {\n      return config.tier;\n    }\n  }\n  return 'common'; // Fallback\n}\n\n/**\n * Get all available asset IDs for a specific rarity and type\n */\nexport function getAssetIdsForRarity(rarity: RarityTier, type: 'flower' | 'butterfly'): number[] {\n  const config = RARITY_CONFIG.find(c => c.tier === rarity);\n  if (!config) return [];\n  \n  const range = type === 'flower' ? config.flowerRange : config.butterflyRange;\n  if (!range) return [];\n  \n  const [min, max] = range;\n  const ids: number[] = [];\n  for (let i = min; i <= max; i++) {\n    ids.push(i);\n  }\n  return ids;\n}\n\n/**\n * Get rarity color for UI display\n */\nexport function getRarityColor(rarity: RarityTier): string {\n  switch (rarity) {\n    case 'common': return 'text-yellow-400';\n    case 'uncommon': return 'text-green-400';\n    case 'rare': return 'text-blue-400';\n    case 'super-rare': return 'text-cyan-400';\n    case 'epic': return 'text-purple-400';\n    case 'legendary': return 'text-orange-400';\n    case 'mythical': return 'text-red-400';\n    case 'vip': return 'text-pink-400 bg-gradient-to-r from-pink-600 to-purple-600 bg-clip-text text-transparent font-bold';\n    default: return 'text-gray-400';\n  }\n}\n\n/**\n * Get CSS hex color for rarity (for inline styles)\n */\nexport function getRarityCssColor(rarity: RarityTier): string {\n  switch (rarity) {\n    case 'common': return '#facc15';      // yellow-400\n    case 'uncommon': return '#4ade80';    // green-400\n    case 'rare': return '#60a5fa';        // blue-400\n    case 'super-rare': return '#22d3ee';  // cyan-400\n    case 'epic': return '#a78bfa';        // purple-400\n    case 'legendary': return '#fb923c';   // orange-400\n    case 'mythical': return '#f87171';    // red-400\n    case 'vip': return '#f472b6';         // pink-400\n    default: return '#9ca3af';            // gray-400\n  }\n}\n\n/**\n * Convert hex color to rgba with alpha\n */\nexport function toRgba(hex: string, alpha: number): string {\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n}\n\n/**\n * Get rarity badge styling with background and text colors\n */\nexport function getRarityBadgeStyle(rarity: RarityTier): string {\n  switch (rarity) {\n    case 'common': return 'bg-yellow-500/20 text-yellow-300 border-yellow-400/50';\n    case 'uncommon': return 'bg-green-500/20 text-green-300 border-green-400/50';\n    case 'rare': return 'bg-blue-500/20 text-blue-300 border-blue-400/50';\n    case 'super-rare': return 'bg-cyan-500/20 text-cyan-300 border-cyan-400/50';\n    case 'epic': return 'bg-purple-500/20 text-purple-300 border-purple-400/50';\n    case 'legendary': return 'bg-orange-500/20 text-orange-300 border-orange-400/50';\n    case 'mythical': return 'bg-red-500/20 text-red-300 border-red-400/50';\n    case 'vip': return 'bg-gradient-to-r from-pink-500/20 to-purple-500/20 text-pink-300 border-pink-400/50 shadow-lg shadow-pink-500/25';\n    default: return 'bg-gray-500/20 text-gray-300 border-gray-400/50';\n  }\n}\n\n/**\n * Get rarity border color for UI display\n */\nexport function getRarityBorder(rarity: RarityTier): string {\n  switch (rarity) {\n    case 'common': return 'border-yellow-400';\n    case 'uncommon': return 'border-green-400';\n    case 'rare': return 'border-blue-400';\n    case 'super-rare': return 'border-cyan-400';\n    case 'epic': return 'border-purple-400';\n    case 'legendary': return 'border-orange-400';\n    case 'mythical': return 'border-red-400';\n    case 'vip': return 'border-pink-500 shadow-lg shadow-pink-500/50';\n    default: return 'border-gray-400';\n  }\n}\n\n/**\n * Get growth time in seconds for a rarity tier\n */\nexport function getGrowthTime(rarity: RarityTier): number {\n  const config = RARITY_CONFIG.find(c => c.tier === rarity);\n  return config?.growthTimeSeconds || 75;\n}\n\n/**\n * Format time in seconds to MM:SS display\n */\nexport function formatTime(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n}\n\n/**\n * Get German display name for rarity tier\n */\nexport function getRarityDisplayName(rarity: RarityTier): string {\n  switch (rarity) {\n    case 'common': return 'Gewöhnlich';\n    case 'uncommon': return 'Ungewöhnlich';\n    case 'rare': return 'Selten';\n    case 'super-rare': return 'Super-Rare';\n    case 'epic': return 'Episch';\n    case 'legendary': return 'Legendär';\n    case 'mythical': return 'Mythisch';\n    case 'vip': return '✨ VIP Premium 👑';\n    default: return 'Unbekannt';\n  }\n}\n\n/**\n * Generate a random flower from a specific rarity tier\n */\nexport function generateRandomFlower(rarity: RarityTier): { id: number; name: string; imageUrl: string } | null {\n  const config = RARITY_CONFIG.find(c => c.tier === rarity);\n  if (!config || !config.flowerRange) {\n    return null;\n  }\n  \n  const [min, max] = config.flowerRange;\n  const flowerId = Math.floor(Math.random() * (max - min + 1)) + min;\n  \n  return {\n    id: flowerId,\n    name: generateLatinFlowerName(flowerId), // Use flowerId as seed for consistent naming\n    imageUrl: `/Blumen/${flowerId}.jpg`\n  };\n}\n\n/**\n * Generate a random butterfly from a specific rarity tier  \n */\nexport function generateRandomButterfly(rarity: RarityTier): { id: number; name: string; imageUrl: string } | null {\n  const config = RARITY_CONFIG.find(c => c.tier === rarity);\n  if (!config || !config.butterflyRange) {\n    return null;\n  }\n  \n  const [min, max] = config.butterflyRange;\n  const butterflyId = Math.floor(Math.random() * (max - min + 1)) + min;\n  \n  return {\n    id: butterflyId,\n    name: generateGermanButterflyName(butterflyId), // Use butterflyId as seed for consistent naming\n    imageUrl: `/Schmetterlinge/${butterflyId.toString().padStart(3, '0')}.jpg`\n  };\n}\n\n/**\n * Create a seeded random number generator for consistent results\n */\nfunction createSeededRandom(seed: number) {\n  return function() {\n    const x = Math.sin(seed++) * 10000;\n    return x - Math.floor(x);\n  };\n}\n\n/**\n * Generate Latin-sounding flower names (2 words)\n * @param seed - Optional seed for consistent naming based on ID\n */\nexport function generateLatinFlowerName(seed?: number): string {\n  const prefixes = [\n    'Rosa', 'Flos', 'Petala', 'Corona', 'Stella', 'Luna', 'Aurora', 'Viola', 'Iris', 'Bella',\n    'Magna', 'Alba', 'Rubra', 'Purpura', 'Aurea', 'Celeste', 'Divina', 'Mystica', 'Splendida', 'Elegans'\n  ];\n  \n  const suffixes = [\n    'magnificus', 'splendidus', 'elegantia', 'celestis', 'mysticus', 'divinus', 'imperialis', 'regalis',\n    'luminous', 'radiatus', 'gloriosus', 'mirabilis', 'spectabilis', 'nobilis', 'perfectus', 'eternus',\n    'crystallinus', 'argenteus', 'aureus', 'diamanteus'\n  ];\n  \n  if (seed !== undefined) {\n    // Use seeded random for consistent names\n    const seededRandom = createSeededRandom(seed * 31);\n    const prefix = prefixes[Math.floor(seededRandom() * prefixes.length)];\n    const suffix = suffixes[Math.floor(seededRandom() * suffixes.length)];\n    return `${prefix} ${suffix}`;\n  } else {\n    // Fallback to regular random for backwards compatibility\n    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\n    const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];\n    return `${prefix} ${suffix}`;\n  }\n}\n\n/**\n * Generate German butterfly names - Erweiterte Liste für 2000+ eindeutige Namen\n * @param seed - Optional seed for consistent naming based on ID\n */\nexport function generateGermanButterflyName(seed?: number): string {\n  // Erweiterte deutsche Adjektive und Präfixes (45 Stück für 2000+ Kombinationen)\n  const adjectives = [\n    'Großer', 'Kleiner', 'Roter', 'Blauer', 'Goldener', 'Silberner', 'Weißer', 'Schwarzer',\n    'Grüner', 'Gelber', 'Violetter', 'Oranger', 'Brauner', 'Rosa', 'Türkiser', 'Purpurner',\n    'Dunkler', 'Heller', 'Bunter', 'Schillernder', 'Glänzender', 'Matter', 'Gestreifter', 'Gepunkteter',\n    'Königlicher', 'Kaiser', 'Fürsten', 'Herzog', 'Graf', 'Baron', 'Edler', 'Stolzer', \n    'Majestätischer', 'Prächtiger', 'Eleganter', 'Zarter', 'Wilder', 'Seltener', 'Mystischer', 'Magischer',\n    'Tropischer', 'Exotischer', 'Nordischer', 'Südlicher', 'Östlicher', 'Westlicher', 'Alpiner'\n  ];\n  \n  // Deutsche Schmetterlings-Grundnamen (45 Stück)\n  const baseNames = [\n    'Falter', 'Fuchs', 'Bläuling', 'Weißling', 'Perlmuttfalter', 'Scheckenfalter', 'Mohrenfalter', 'Zipfelfalter',\n    'Augenfalter', 'Edelfalter', 'Ritterfalter', 'Tagfalter', 'Schwärmer', 'Segelfalter', 'Apollofalter', 'Schillerfalter',\n    'Glasflügler', 'Spanner', 'Eulenfalter', 'Bärenspinner', 'Widderchen', 'Zünsler', 'Wickler', 'Miniermotte',\n    'Schwalbenschwanz', 'Admiral', 'Distelfalter', 'Trauerfalter', 'Landkärtchen', 'C-Falter', 'Tagpfauenauge', 'Zitronenfalter',\n    'Kohlweißling', 'Aurorafalter', 'Hauhechelbläuling', 'Feuervogel', 'Kupferglanz', 'Himmelblau', 'Waldportier', 'Ochsenauge',\n    'Wiesenvögelchen', 'Mohrenfalter', 'Schachbrettfalter', 'Gelbwürfel', 'Rotfleck'\n  ];\n  \n  if (seed !== undefined) {\n    // Use seeded random for consistent names\n    const seededRandom = createSeededRandom(seed * 37); // Same multiplier as before for consistency\n    const adjective = adjectives[Math.floor(seededRandom() * adjectives.length)];\n    const baseName = baseNames[Math.floor(seededRandom() * baseNames.length)];\n    \n    // 10% Chance für \"Deluxe\", \"Premium\", \"Spezial\" etc. Suffix für mehr Variationen\n    const suffixChance = seededRandom();\n    if (suffixChance < 0.1) {\n      const specialSuffixes = ['Deluxe', 'Premium', 'Spezial', 'Royal', 'Imperial', 'Grand', 'Super'];\n      const suffix = specialSuffixes[Math.floor(seededRandom() * specialSuffixes.length)];\n      return `${adjective} ${baseName} ${suffix}`;\n    }\n    \n    return `${adjective} ${baseName}`;\n  } else {\n    // Fallback to regular random for backwards compatibility\n    const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n    const baseName = baseNames[Math.floor(Math.random() * baseNames.length)];\n    \n    if (Math.random() < 0.1) {\n      const specialSuffixes = ['Deluxe', 'Premium', 'Spezial', 'Royal', 'Imperial', 'Grand', 'Super'];\n      const suffix = specialSuffixes[Math.floor(Math.random() * specialSuffixes.length)];\n      return `${adjective} ${baseName} ${suffix}`;\n    }\n    \n    return `${adjective} ${baseName}`;\n  }\n}\n\n/**\n * Generate Latin-sounding butterfly names (2 words) - DEPRECATED, use German names\n * @param seed - Optional seed for consistent naming based on ID\n * @deprecated Use generateGermanButterflyName instead\n */\nexport function generateLatinButterflyName(seed?: number): string {\n  // Redirect to German names for consistency\n  return generateGermanButterflyName(seed);\n}\n\n/**\n * Generate Latin-sounding fish names (2 words)\n * @param seed - Optional seed for consistent naming based on ID\n */\nexport function generateLatinFishName(seed?: number): string {\n  const prefixes = [\n    'Aquaticus', 'Ichthys', 'Piscis', 'Oceanus', 'Marinus', 'Fluvialis',\n    'Lacustris', 'Cyprinius', 'Salmo', 'Thunnus', 'Gadus', 'Pleuronectes',\n    'Hippocampus', 'Syngnathus', 'Acanthurus', 'Pomacanthus', 'Chaetodon',\n    'Balistes', 'Monacanthus', 'Tetradon', 'Diodon', 'Antennarius',\n    'Scorpaena', 'Pterois', 'Sebastes', 'Epinephelus', 'Mycteroperca'\n  ];\n  \n  const suffixes = [\n    'aquatilis', 'marinus', 'profundus', 'crystallinus', 'argenteus',\n    'aureus', 'splendidus', 'magnificus', 'elegans', 'gracilis',\n    'velocis', 'agilis', 'natans', 'fluctuans', 'undulans',\n    'iridescens', 'scintillans', 'brillans', 'lucidus', 'clarus',\n    'tropicalis', 'exoticus', 'rarus', 'preciosus', 'mirabilis'\n  ];\n  \n  if (seed !== undefined) {\n    // Use seeded random for consistent names\n    const seededRandom = createSeededRandom(seed * 43); // Different multiplier for fish\n    const prefix = prefixes[Math.floor(seededRandom() * prefixes.length)];\n    const suffix = suffixes[Math.floor(seededRandom() * suffixes.length)];\n    return `${prefix} ${suffix}`;\n  } else {\n    // Fallback to regular random\n    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\n    const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];\n    return `${prefix} ${suffix}`;\n  }\n}\n\n/**\n * Generate Latin-sounding caterpillar names (2 words)\n * @param seed - Optional seed for consistent naming based on ID\n */\nexport function generateLatinCaterpillarName(seed?: number): string {\n  const prefixes = [\n    'Larva', 'Chenille', 'Eruca', 'Vermis', 'Bruca', 'Manduca',\n    'Sphinx', 'Laothoe', 'Smerinthus', 'Paonias', 'Ceratomia',\n    'Dolba', 'Lapara', 'Pachysphinx', 'Amphion', 'Hemaris',\n    'Proserpinus', 'Euproserpinus', 'Aellopos', 'Cautethia',\n    'Kloneus', 'Nyceryx', 'Perigonia', 'Pseudosphinx', 'Isognathus'\n  ];\n  \n  const suffixes = [\n    'viridis', 'maculatus', 'striatus', 'fasciatus', 'punctatus',\n    'lineatus', 'variegatus', 'coloratus', 'ornatus', 'decoratus',\n    'elegans', 'gracilis', 'robustus', 'magnus', 'minor',\n    'terrestris', 'foliaceus', 'herbivorus', 'vorax', 'rapidus',\n    'lentus', 'hibernicus', 'aestivalis', 'vernalis', 'autumnalis',\n    'nocturnus', 'diurnus', 'crepuscularis', 'silvanus', 'campestris'\n  ];\n  \n  if (seed !== undefined) {\n    // Use seeded random for consistent names\n    const seededRandom = createSeededRandom(seed * 47); // Different multiplier for caterpillars\n    const prefix = prefixes[Math.floor(seededRandom() * prefixes.length)];\n    const suffix = suffixes[Math.floor(seededRandom() * suffixes.length)];\n    return `${prefix} ${suffix}`;\n  } else {\n    // Fallback to regular random\n    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\n    const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];\n    return `${prefix} ${suffix}`;\n  }\n}\n\n/**\n * Get numeric index for rarity tier (useful for calculations)\n */\nexport function getRarityTierIndex(rarity: RarityTier): number {\n  switch (rarity) {\n    case 'common': return 0;\n    case 'uncommon': return 1;\n    case 'rare': return 2;\n    case 'super-rare': return 3;\n    case 'epic': return 4;\n    case 'legendary': return 5;\n    case 'mythical': return 6;\n    case 'vip': return 7;\n    default: return 0;\n  }\n}\n\n/**\n * Get flower rarity based on flower ID (maps to the same distribution as image ranges)\n */\nexport function getFlowerRarityById(flowerId: number): RarityTier {\n  if (flowerId >= 1 && flowerId <= 55) return 'common';\n  if (flowerId >= 56 && flowerId <= 100) return 'uncommon';\n  if (flowerId >= 101 && flowerId <= 135) return 'rare';\n  if (flowerId >= 136 && flowerId <= 160) return 'super-rare';\n  if (flowerId >= 161 && flowerId <= 180) return 'epic';\n  if (flowerId >= 181 && flowerId <= 195) return 'legendary';\n  if (flowerId >= 196 && flowerId <= 200) return 'mythical';\n  \n  // Fallback for IDs outside the normal range\n  return 'common';\n}\n\n/**\n * Caterpillar rarity inheritance from butterfly\n * 50% same rarity, 30% worse rarity, 20% better rarity\n */\nexport function calculateCaterpillarRarity(butterflyRarity: RarityTier): RarityTier {\n  const rarityOrder: RarityTier[] = ['common', 'uncommon', 'rare', 'super-rare', 'epic', 'legendary', 'mythical'];\n  const currentIndex = rarityOrder.indexOf(butterflyRarity);\n  \n  const random = Math.random();\n  \n  if (random < 0.5) {\n    // 50% chance: Same rarity\n    return butterflyRarity;\n  } else if (random < 0.8) {\n    // 30% chance: Worse rarity (lower tier)\n    const worseIndex = Math.max(0, currentIndex - 1);\n    return rarityOrder[worseIndex];\n  } else {\n    // 20% chance: Better rarity (higher tier)\n    const betterIndex = Math.min(rarityOrder.length - 1, currentIndex + 1);\n    return rarityOrder[betterIndex];\n  }\n}","size_bytes":20933},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, unique, uniqueIndex, varchar, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  credits: integer(\"credits\").notNull().default(1000),\n  suns: integer(\"suns\").notNull().default(100),\n  dna: integer(\"dna\").notNull().default(0),\n  hearts: integer(\"hearts\").notNull().default(0),\n  lastPassiveIncomeAt: timestamp(\"last_passive_income_at\"),\n  // ✅ REMOVED: lastActiveAt - column doesn't exist in database\n  tickets: integer(\"tickets\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const userUnlockedFeatures = pgTable(\"user_unlocked_features\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  featureName: text(\"feature_name\").notNull(), // 'dna', 'marie-slot', 'schlossgarten'\n  unlockedAt: timestamp(\"unlocked_at\").notNull().defaultNow(),\n  creditsSpent: integer(\"credits_spent\").notNull(),\n}, (table) => ({\n  uniqueUserFeature: unique().on(table.userId, table.featureName)\n}));\n\nexport const seeds = pgTable(\"seeds\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  rarity: text(\"rarity\").notNull(), // common, uncommon, rare, legendary\n  price: integer(\"price\").notNull(),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const userSeeds = pgTable(\"user_seeds\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  seedId: integer(\"seed_id\").notNull().references(() => seeds.id),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const marketListings = pgTable(\"market_listings\", {\n  id: serial(\"id\").primaryKey(),\n  sellerId: integer(\"seller_id\").notNull().references(() => users.id),\n  itemType: varchar(\"item_type\", { length: 20 }).notNull().default(\"seed\"), // \"seed\" | \"caterpillar\" | \"flower\" | \"butterfly\" | \"fish\"\n  quantity: integer(\"quantity\").notNull(),\n  pricePerUnit: integer(\"price_per_unit\").notNull(),\n  totalPrice: integer(\"total_price\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  \n  // Seeds - reference to static seeds table\n  seedId: integer(\"seed_id\").references(() => seeds.id),\n  seedName: text(\"seed_name\"),\n  seedRarity: text(\"seed_rarity\"),\n  \n  // Caterpillars - copy data from user inventory\n  caterpillarId: integer(\"caterpillar_id\"), // Reference to user_caterpillars.id\n  caterpillarName: text(\"caterpillar_name\"),\n  caterpillarRarity: text(\"caterpillar_rarity\"), \n  caterpillarImageUrl: text(\"caterpillar_image_url\"),\n  caterpillarIdOriginal: integer(\"caterpillar_id_original\"), // Original caterpillar game ID\n  \n  // Flowers - copy data from user inventory\n  flowerId: integer(\"flower_id\"), // Reference to user_flowers.id\n  flowerName: text(\"flower_name\"),\n  flowerRarity: text(\"flower_rarity\"),\n  flowerImageUrl: text(\"flower_image_url\"), \n  flowerIdOriginal: integer(\"flower_id_original\"), // Original flower game ID\n  \n  // Butterflies - copy data from user inventory\n  butterflyId: integer(\"butterfly_id\"), // Reference to user_butterflies.id\n  butterflyName: text(\"butterfly_name\"),\n  butterflyRarity: text(\"butterfly_rarity\"),\n  butterflyImageUrl: text(\"butterfly_image_url\"),\n  butterflyIdOriginal: integer(\"butterfly_id_original\"), // Original butterfly game ID\n  \n  // Fish - copy data from user inventory\n  fishId: integer(\"fish_id\"), // Reference to user_fish.id\n  fishName: text(\"fish_name\"),\n  fishRarity: text(\"fish_rarity\"),\n  fishImageUrl: text(\"fish_image_url\"),\n  fishIdOriginal: integer(\"fish_id_original\"), // Original fish game ID\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const createMarketListingSchema = z.object({\n  itemType: z.enum([\"seed\", \"caterpillar\", \"flower\", \"butterfly\", \"fish\"]).default(\"seed\"),\n  seedId: z.number().min(1).optional(), // For seed listings\n  caterpillarId: z.number().min(1).optional(), // For caterpillar listings\n  flowerId: z.number().min(1).optional(), // For flower listings\n  butterflyId: z.number().min(1).optional(), // For butterfly listings\n  fishId: z.number().min(1).optional(), // For fish listings\n  quantity: z.number().min(1),\n  pricePerUnit: z.number().min(1),\n}).refine(data => {\n  // Ensure the correct ID is provided based on itemType\n  if (data.itemType === \"seed\") return data.seedId !== undefined;\n  if (data.itemType === \"caterpillar\") return data.caterpillarId !== undefined;\n  if (data.itemType === \"flower\") return data.flowerId !== undefined;\n  if (data.itemType === \"butterfly\") return data.butterflyId !== undefined;\n  if (data.itemType === \"fish\") return data.fishId !== undefined;\n  return false;\n}, {\n  message: \"Corresponding ID is required for each item type\"\n});\n\nexport const buyListingSchema = z.object({\n  listingId: z.number().min(1),\n  quantity: z.number().min(1),\n});\n\n// Garden field schema\nexport const plantedFields = pgTable(\"planted_fields\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  fieldIndex: integer(\"field_index\").notNull(),\n  seedId: integer(\"seed_id\").notNull().references(() => seeds.id),\n  seedRarity: text(\"seed_rarity\").notNull(),\n  plantedAt: timestamp(\"planted_at\").notNull().defaultNow(),\n  isGrown: boolean(\"is_grown\").notNull().default(false),\n  flowerId: integer(\"flower_id\"),\n  flowerName: text(\"flower_name\"),\n  flowerImageUrl: text(\"flower_image_url\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const plantSeedSchema = z.object({\n  fieldIndex: z.number().min(0).max(49),\n  seedId: z.number(),\n  userSeedId: z.number()\n});\n\nexport const harvestFieldSchema = z.object({\n  fieldIndex: z.number().min(0).max(49)\n});\n\nexport const collectSunSchema = z.object({\n  fieldIndex: z.number().min(0).max(49)\n});\n\n// Garden Field Unlocking System\nexport const unlockedFields = pgTable(\"unlocked_fields\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  fieldIndex: integer(\"field_index\").notNull(), // 0-49 for 50 fields\n  cost: integer(\"cost\").notNull().default(0), // 0 for starter fields\n  unlockedAt: timestamp(\"unlocked_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const unlockFieldSchema = z.object({\n  fieldIndex: z.number().min(0).max(49),\n});\n\nexport const placeButterflyOnFieldSchema = z.object({\n  fieldIndex: z.number().min(0).max(49),\n  butterflyId: z.number().min(1)\n});\n\nexport const placeFlowerOnFieldSchema = z.object({\n  fieldIndex: z.number().min(0).max(49),\n  flowerId: z.number().min(1)\n});\n\n// Sun spawns on garden fields\nexport const sunSpawns = pgTable(\"sun_spawns\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id), // Which user owns this sun spawn\n  fieldIndex: integer(\"field_index\").notNull(), // 0-49 for 50 fields\n  spawnedAt: timestamp(\"spawned_at\").notNull().defaultNow(),\n  expiresAt: timestamp(\"expires_at\").notNull(), // spawned + 30 seconds\n  sunAmount: integer(\"sun_amount\").notNull(), // 1-3 suns\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n\n// User flowers inventory\nexport const userFlowers = pgTable(\"user_flowers\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  flowerId: integer(\"flower_id\").notNull(),\n  rarity: integer(\"rarity\").notNull(), // Integer rarity for constraint compliance\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  flowerName: text(\"flower_name\"), // Nullable as per PostgreSQL\n  flowerRarity: text(\"flower_rarity\"), // Nullable as per PostgreSQL\n  flowerImageUrl: text(\"flower_image_url\"), // Nullable as per PostgreSQL\n});\n\n// Bouquet system\nexport const bouquets = pgTable(\"bouquets\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull().unique(),\n  rarity: text(\"rarity\").notNull(), // Average rarity of the 3 flowers\n  imageUrl: text(\"image_url\").notNull().default(\"/Blumen/bouquet.jpg\"),\n  createdByUserId: integer(\"created_by_user_id\").notNull().references(() => users.id), // Track creator\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const bouquetRecipes = pgTable(\"bouquet_recipes\", {\n  id: serial(\"id\").primaryKey(),\n  bouquetId: integer(\"bouquet_id\").notNull().references(() => bouquets.id),\n  flowerId1: integer(\"flower_id_1\").notNull(),\n  flowerId2: integer(\"flower_id_2\").notNull(),\n  flowerId3: integer(\"flower_id_3\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const userBouquets = pgTable(\"user_bouquets\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  bouquetId: integer(\"bouquet_id\").notNull().references(() => bouquets.id),\n  quantity: integer(\"quantity\").notNull().default(1),\n  bouquetName: text(\"bouquet_name\").notNull(),\n  bouquetRarity: text(\"bouquet_rarity\").notNull(),\n  bouquetImageUrl: text(\"bouquet_image_url\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const placedBouquets = pgTable(\"placed_bouquets\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  bouquetId: integer(\"bouquet_id\").notNull().references(() => bouquets.id),\n  fieldIndex: integer(\"field_index\").notNull(),\n  placedAt: timestamp(\"placed_at\").notNull().defaultNow(),\n  expiresAt: timestamp(\"expires_at\").notNull(), // 21 minutes after placement\n  nextSpawnAt: timestamp(\"next_spawn_at\").notNull(), // Current slot spawn time\n  currentSpawnSlot: integer(\"current_spawn_slot\").notNull().default(1), // Which slot (1-4)\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const userButterflies = pgTable(\"user_butterflies\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  butterflyId: integer(\"butterfly_id\").notNull(),\n  butterflyName: text(\"butterfly_name\").notNull(),\n  butterflyRarity: text(\"butterfly_rarity\").notNull(),\n  butterflyImageUrl: text(\"butterfly_image_url\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Exhibition frames for butterfly displays\nexport const exhibitionFrames = pgTable(\"exhibition_frames\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  frameNumber: integer(\"frame_number\").notNull(), // 1, 2, 3, etc.\n  purchasedAt: timestamp(\"purchased_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Butterflies placed in exhibition frames\nexport const exhibitionButterflies = pgTable(\"exhibition_butterflies\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  frameId: integer(\"frame_id\").notNull().references(() => exhibitionFrames.id),\n  slotIndex: integer(\"slot_index\").notNull(), // 0-5 for 3x2 grid\n  butterflyId: integer(\"butterfly_id\").notNull(),\n  butterflyName: text(\"butterfly_name\").notNull(),\n  butterflyRarity: text(\"butterfly_rarity\").notNull(),\n  butterflyImageUrl: text(\"butterfly_image_url\").notNull(),\n  placedAt: timestamp(\"placed_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Passive income tracking\nexport const passiveIncomeLog = pgTable(\"passive_income_log\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  amount: integer(\"amount\").notNull(), // credits earned\n  sourceType: text(\"source_type\").notNull(), // 'exhibition'\n  sourceDetails: text(\"source_details\").notNull(), // frame and butterfly info\n  earnedAt: timestamp(\"earned_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Exhibition frame likes table\nexport const exhibitionFrameLikes = pgTable(\"exhibition_frame_likes\", {\n  id: serial(\"id\").primaryKey(),\n  frameOwnerId: integer(\"frame_owner_id\").notNull().references(() => users.id), // Owner of the exhibition frame\n  likerId: integer(\"liker_id\").notNull().references(() => users.id), // User who liked the frame\n  frameId: integer(\"frame_id\").notNull().references(() => exhibitionFrames.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => {\n  return {\n    uniqueFrameLike: unique(\"unique_frame_like\").on(table.frameOwnerId, table.likerId, table.frameId)\n  };\n});\n\n// Butterflies spawned on garden fields (waiting to be collected)\nexport const fieldButterflies = pgTable(\"field_butterflies\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  fieldIndex: integer(\"field_index\").notNull(), // 0-49 for the 50 garden fields\n  butterflyId: integer(\"butterfly_id\").notNull(),\n  butterflyName: text(\"butterfly_name\").notNull(),\n  butterflyRarity: text(\"butterfly_rarity\").notNull(),\n  butterflyImageUrl: text(\"butterfly_image_url\").notNull(),\n  bouquetId: integer(\"bouquet_id\").notNull().references(() => bouquets.id),\n  spawnedAt: timestamp(\"spawned_at\").notNull().defaultNow(),\n  isShrinking: boolean(\"is_shrinking\").notNull().default(false), // Backend managed shrinking state\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Flowers placed on pond fields (for caterpillar spawning)\nexport const fieldFlowers = pgTable(\"field_flowers\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  fieldIndex: integer(\"field_index\").notNull(), // 0-49 for the 50 garden fields, specifically pond fields\n  flowerId: integer(\"flower_id\").notNull(),\n  flowerName: text(\"flower_name\").notNull(),\n  flowerRarity: text(\"flower_rarity\").notNull(),\n  flowerImageUrl: text(\"flower_image_url\").notNull(),\n  placedAt: timestamp(\"placed_at\").notNull().defaultNow(),\n  isShrinking: boolean(\"is_shrinking\").notNull().default(false), // Backend managed shrinking state for animation\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// VIP Butterflies - Premium animated butterflies (GIF format)\nexport const userVipButterflies = pgTable(\"user_vip_butterflies\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  vipButterflyId: integer(\"vip_butterfly_id\").notNull(),\n  vipButterflyName: text(\"vip_butterfly_name\").notNull(),\n  vipButterflyImageUrl: text(\"vip_butterfly_image_url\").notNull(), // Path to .gif file\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Aquarium tanks for fish displays (24 slots each)\nexport const aquariumTanks = pgTable(\"aquarium_tanks\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  tankNumber: integer(\"tank_number\").notNull(), // 1, 2, 3, etc.\n  purchasedAt: timestamp(\"purchased_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Fish placed in aquarium tanks (24 slots: 6x4 grid)\nexport const aquariumFish = pgTable(\"aquarium_fish\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  tankId: integer(\"tank_id\").notNull().references(() => aquariumTanks.id),\n  slotIndex: integer(\"slot_index\").notNull(), // 0-23 for 6x4 grid\n  fishId: integer(\"fish_id\").notNull(),\n  fishName: text(\"fish_name\").notNull(),\n  fishRarity: text(\"fish_rarity\").notNull(),\n  fishImageUrl: text(\"fish_image_url\").notNull(),\n  placedAt: timestamp(\"placed_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Fish collection system\nexport const userFish = pgTable(\"user_fish\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  fishId: integer(\"fish_id\").notNull(),\n  fishName: text(\"fish_name\").notNull(),\n  fishRarity: text(\"fish_rarity\").notNull(),\n  fishImageUrl: text(\"fish_image_url\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Pond feeding progress system\nexport const pondFeedingProgressTable = pgTable(\"pond_feeding_progress\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  fieldIndex: integer(\"field_index\").notNull(),\n  feedingCount: integer(\"feeding_count\").notNull().default(1),\n  lastFedAt: timestamp(\"last_fed_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  // Unique constraint: one progress entry per user-field combination\n  uniqueUserField: uniqueIndex(\"unique_user_field_feeding\").on(table.userId, table.fieldIndex)\n}));\n\n// Field Fish system - fish spawn on pond fields first, then can be collected\nexport const fieldFish = pgTable(\"field_fish\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  fieldIndex: integer(\"field_index\").notNull(), // Pond field index (11-38)\n  fishId: integer(\"fish_id\").notNull(),\n  fishName: text(\"fish_name\").notNull(),\n  fishRarity: text(\"fish_rarity\").notNull(),\n  fishImageUrl: text(\"fish_image_url\").notNull(),\n  spawnedAt: timestamp(\"spawned_at\").notNull().defaultNow(),\n  isShrinking: boolean(\"is_shrinking\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Caterpillar collection system  \nexport const userCaterpillars = pgTable(\"user_caterpillars\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  caterpillarId: integer(\"caterpillar_id\").notNull(),\n  caterpillarName: text(\"caterpillar_name\").notNull(),\n  caterpillarRarity: text(\"caterpillar_rarity\").notNull(),\n  caterpillarImageUrl: text(\"caterpillar_image_url\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Caterpillars spawned on garden fields (from butterfly lifecycle)\nexport const fieldCaterpillars = pgTable(\"field_caterpillars\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  fieldIndex: integer(\"field_index\").notNull(), // 0-49 for the 50 garden fields\n  caterpillarId: integer(\"caterpillar_id\").notNull(),\n  caterpillarName: text(\"caterpillar_name\").notNull(),\n  caterpillarRarity: text(\"caterpillar_rarity\").notNull(),\n  caterpillarImageUrl: text(\"caterpillar_image_url\").notNull(),\n  spawnedAt: timestamp(\"spawned_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Pond feeding progress tracking table\nexport const pondFeedingProgress = pgTable(\"pond_feeding_progress\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  fieldIndex: integer(\"field_index\").notNull(), // Pond field index (11-38)\n  feedingCount: integer(\"feeding_count\").default(0).notNull(), // 0-3 (3 creates fish)\n  lastFedAt: timestamp(\"last_fed_at\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull()\n}, (table) => {\n  return {\n    userFieldIdx: uniqueIndex(\"user_field_feeding_idx\").on(table.userId, table.fieldIndex)\n  };\n});\n\n// Fed caterpillars history for average rarity calculation  \nexport const fedCaterpillars = pgTable(\"fed_caterpillars\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  fieldIndex: integer(\"field_index\").notNull(), // Pond field index (11-38)\n  caterpillarId: integer(\"caterpillar_id\").notNull(),\n  caterpillarRarity: text(\"caterpillar_rarity\").notNull(),\n  fedAt: timestamp(\"fed_at\").notNull().defaultNow(),\n});\n\n// VIP Butterflies placed in exhibition frames  \nexport const exhibitionVipButterflies = pgTable(\"exhibition_vip_butterflies\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  frameId: integer(\"frame_id\").notNull().references(() => exhibitionFrames.id),\n  slotIndex: integer(\"slot_index\").notNull(), // 0-5 for 3x2 grid\n  vipButterflyId: integer(\"vip_butterfly_id\").notNull(),\n  vipButterflyName: text(\"vip_butterfly_name\").notNull(),\n  vipButterflyImageUrl: text(\"vip_butterfly_image_url\").notNull(), // Path to .gif file\n  placedAt: timestamp(\"placed_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const createBouquetSchema = z.object({\n  flowerId1: z.number().min(1),\n  flowerId2: z.number().min(1),\n  flowerId3: z.number().min(1),\n  name: z.string().min(1).max(50).optional(),\n  generateName: z.boolean().optional(),\n});\n\nexport const placeBouquetSchema = z.object({\n  bouquetId: z.number().min(1),\n  fieldIndex: z.number().min(0).max(49),\n});\n\n// Weekly Challenge System\nexport const weeklyChallenges = pgTable(\"weekly_challenges\", {\n  id: serial(\"id\").primaryKey(),\n  weekNumber: integer(\"week_number\").notNull().unique(), // YYYY-WW format\n  year: integer(\"year\").notNull(),\n  startTime: timestamp(\"start_time\").notNull(), // Monday 00:00\n  endTime: timestamp(\"end_time\").notNull(),   // Sunday 18:00\n  isActive: boolean(\"is_active\").notNull().default(true),\n  // Required flowers (6 total: 2 uncommon, 2 rare, 2 super-rare)\n  flowerId1: integer(\"flower_id_1\").notNull(), // uncommon\n  flowerId2: integer(\"flower_id_2\").notNull(), // uncommon  \n  flowerId3: integer(\"flower_id_3\").notNull(), // rare\n  flowerId4: integer(\"flower_id_4\").notNull(), // rare\n  flowerId5: integer(\"flower_id_5\").notNull(), // super-rare\n  flowerId6: integer(\"flower_id_6\").notNull(), // super-rare\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Weekly Challenge Progress - tracks user progress in challenges\nexport const weeklyChallengeProgress = pgTable(\"weekly_challenge_progress\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  challengeId: integer(\"challenge_id\").notNull().references(() => weeklyChallenges.id),\n  score: integer(\"score\").notNull().default(0), // Number of qualifying flower donations\n  setsCompleted: integer(\"sets_completed\").notNull().default(0), // Number of complete sets\n  totalDonations: integer(\"total_donations\").notNull().default(0), // Total donations to this challenge\n  firstCompletedAt: timestamp(\"first_completed_at\"), // When first set was completed (null if not completed)\n  lastUpdatedAt: timestamp(\"last_updated_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  // Unique constraint: one progress entry per user-challenge combination  \n  uniqueUserChallenge: uniqueIndex(\"uq_user_challenge\").on(table.userId, table.challengeId),\n  // Index for leaderboard queries\n  idxLeaderboard: index(\"idx_challenge_score\").on(table.challengeId, table.score)\n}));\n\nexport const challengeDonations = pgTable(\"challenge_donations\", {\n  id: serial(\"id\").primaryKey(),\n  challengeId: integer(\"challenge_id\").notNull().references(() => weeklyChallenges.id),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  flowerId: integer(\"flower_id\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  donatedAt: timestamp(\"donated_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const challengeRewards = pgTable(\"challenge_rewards\", {\n  id: serial(\"id\").primaryKey(),\n  challengeId: integer(\"challenge_id\").notNull().references(() => weeklyChallenges.id),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  rank: integer(\"rank\").notNull(), // 1-10\n  totalDonations: integer(\"total_donations\").notNull(),\n  butterflyId: integer(\"butterfly_id\").notNull(),\n  butterflyName: text(\"butterfly_name\").notNull(),\n  butterflyRarity: text(\"butterfly_rarity\").notNull(),\n  butterflyImageUrl: text(\"butterfly_image_url\").notNull(),\n  isAnimated: boolean(\"is_animated\").notNull().default(false), // true for rank 1\n  passiveIncome: integer(\"passive_income\").notNull().default(0), // 60 for animated\n  rewardedAt: timestamp(\"rewarded_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const donateChallengeFlowerSchema = z.object({\n  challengeId: z.number().min(1),\n  flowerId: z.number().min(1),\n  quantity: z.number().min(1).max(999),\n});\n\n// All type exports\nexport type User = typeof users.$inferSelect;\nexport type Seed = typeof seeds.$inferSelect;\nexport type UserSeed = typeof userSeeds.$inferSelect;\nexport type MarketListing = typeof marketListings.$inferSelect;\nexport type CreateMarketListingRequest = z.infer<typeof createMarketListingSchema>;\nexport type BuyListingRequest = z.infer<typeof buyListingSchema>;\nexport type PlantedField = typeof plantedFields.$inferSelect;\nexport type PlantSeedRequest = z.infer<typeof plantSeedSchema>;\nexport type HarvestFieldRequest = z.infer<typeof harvestFieldSchema>;\nexport type UserFlower = typeof userFlowers.$inferSelect;\nexport type Bouquet = typeof bouquets.$inferSelect;\nexport type BouquetRecipe = typeof bouquetRecipes.$inferSelect;\nexport type UserBouquet = typeof userBouquets.$inferSelect;\nexport type PlacedBouquet = typeof placedBouquets.$inferSelect;\nexport type UserButterfly = typeof userButterflies.$inferSelect;\nexport type FieldButterfly = typeof fieldButterflies.$inferSelect;\nexport type FieldFlower = typeof fieldFlowers.$inferSelect;\nexport type UserVipButterfly = typeof userVipButterflies.$inferSelect;\nexport type UserFish = typeof userFish.$inferSelect;\nexport type UserCaterpillar = typeof userCaterpillars.$inferSelect;\nexport type ExhibitionFrame = typeof exhibitionFrames.$inferSelect;\nexport type ExhibitionButterfly = typeof exhibitionButterflies.$inferSelect;\nexport type ExhibitionVipButterfly = typeof exhibitionVipButterflies.$inferSelect;\nexport type PassiveIncomeLog = typeof passiveIncomeLog.$inferSelect;\nexport type CreateBouquetRequest = z.infer<typeof createBouquetSchema>;\nexport type PlaceBouquetRequest = z.infer<typeof placeBouquetSchema>;\nexport type UnlockedField = typeof unlockedFields.$inferSelect;\nexport type UnlockFieldRequest = z.infer<typeof unlockFieldSchema>;\nexport type WeeklyChallenge = typeof weeklyChallenges.$inferSelect;\nexport type WeeklyChallengeProgress = typeof weeklyChallengeProgress.$inferSelect;\nexport type ChallengeDonation = typeof challengeDonations.$inferSelect;\nexport type ChallengeReward = typeof challengeRewards.$inferSelect;\nexport type UserNotification = typeof userNotifications.$inferSelect;\nexport type DonateChallengeFlowerRequest = z.infer<typeof donateChallengeFlowerSchema>;\nexport type PlaceButterflyOnFieldRequest = z.infer<typeof placeButterflyOnFieldSchema>;\nexport type PlaceFlowerOnFieldRequest = z.infer<typeof placeFlowerOnFieldSchema>;\nexport type PondFeedingProgress = typeof pondFeedingProgress.$inferSelect;\nexport type FieldFish = typeof fieldFish.$inferSelect;\n\n// Marie Posa trading tracker\nexport const mariePosaTracker = pgTable(\"marie_posa_tracker\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  lastTradeAt: timestamp(\"last_trade_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  uniqueUserMariePosa: uniqueIndex(\"unique_user_marie_posa\").on(table.userId),\n}));\n\n// Daily Items for Ticket Redemption\nexport const dailyItems = pgTable(\"daily_items\", {\n  id: serial(\"id\").primaryKey(),\n  date: varchar(\"date\", { length: 10 }).notNull(), // YYYY-MM-DD format\n  \n  // Daily rare items with rarity 2+ for ticket redemption\n  flowerId: integer(\"flower_id\").notNull(),\n  flowerRarity: integer(\"flower_rarity\").notNull(),\n  butterflyId: integer(\"butterfly_id\").notNull(),\n  butterflyRarity: integer(\"butterfly_rarity\").notNull(),\n  caterpillarId: integer(\"caterpillar_id\").notNull(),\n  caterpillarRarity: integer(\"caterpillar_rarity\").notNull(),\n  fishId: integer(\"fish_id\").notNull(),\n  fishRarity: integer(\"fish_rarity\").notNull(),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  dateUnique: unique().on(table.date),\n}));\n\n// Track daily prize redemptions per user\nexport const dailyRedemptions = pgTable(\"daily_redemptions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  date: varchar(\"date\", { length: 10 }).notNull(), // YYYY-MM-DD format\n  prizeType: varchar(\"prize_type\", { length: 50 }).notNull(), // daily-flower, daily-butterfly, etc.\n  redeemedAt: timestamp(\"redeemed_at\").defaultNow(),\n}, (table) => ({\n  userDatePrizeUnique: unique().on(table.userId, table.date, table.prizeType),\n}));\n\n// User Notifications - for login notifications about rewards\nexport const userNotifications = pgTable(\"user_notifications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  type: varchar(\"type\", { length: 50 }).notNull(), // 'challenge_reward', 'achievement', 'system'\n  title: text(\"title\").notNull(), // \"🏆 Challenge Gewonnen!\"\n  message: text(\"message\").notNull(), // Detailed message about the reward\n  isRead: boolean(\"is_read\").notNull().default(false),\n  // Optional reward details\n  rewardType: varchar(\"reward_type\", { length: 50 }), // 'butterfly', 'credits', 'vip_butterfly'\n  rewardItemId: integer(\"reward_item_id\"), // Butterfly ID, item ID etc\n  rewardItemName: text(\"reward_item_name\"), // Butterfly name, item name\n  rewardItemRarity: text(\"reward_item_rarity\"), // 'legendary', 'mythical'\n  rewardAmount: integer(\"reward_amount\"), // Credits amount or quantity\n  // Challenge specific info\n  challengeId: integer(\"challenge_id\").references(() => weeklyChallenges.id),\n  challengeRank: integer(\"challenge_rank\"), // 1, 2, 3...\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  readAt: timestamp(\"read_at\"), // When user acknowledged the notification\n}, (table) => ({\n  userNotReadIdx: index(\"idx_user_notif_unread\").on(table.userId, table.isRead),\n}));\n\n// Castle Garden Tables\nexport const castleUnlockedParts = pgTable(\"castle_unlocked_parts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  partName: text(\"part_name\").notNull(), // z.B. \"SteinBauteil\"\n  price: integer(\"price\").notNull(), // Preis in Credits\n  unlockedAt: timestamp(\"unlocked_at\").notNull().defaultNow(),\n}, (table) => ({\n  userPartUnique: unique().on(table.userId, table.partName),\n}));\n\nexport const castleGridState = pgTable(\"castle_grid_state\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  gridX: integer(\"grid_x\").notNull(), // 0-24 (25 Spalten)\n  gridY: integer(\"grid_y\").notNull(), // 0-14 (15 Reihen)\n  partName: text(\"part_name\").notNull(), // Welches Bauteil liegt hier\n  placedAt: timestamp(\"placed_at\").notNull().defaultNow(),\n}, (table) => ({\n  userPositionUnique: unique().on(table.userId, table.gridX, table.gridY),\n}));\n\n// Aquarium types\nexport type AquariumTank = typeof aquariumTanks.$inferSelect;\nexport type NewAquariumTank = typeof aquariumTanks.$inferInsert;\nexport type AquariumFish = typeof aquariumFish.$inferSelect;\nexport type NewAquariumFish = typeof aquariumFish.$inferInsert;\n\n// Marie Posa types  \nexport type MariePosaTracker = typeof mariePosaTracker.$inferSelect;\nexport type NewMariePosaTracker = typeof mariePosaTracker.$inferInsert;\n\n// Daily Items types\nexport type DailyItems = typeof dailyItems.$inferSelect;\nexport type NewDailyItems = typeof dailyItems.$inferInsert;\n\n// Daily Redemptions types\nexport type DailyRedemption = typeof dailyRedemptions.$inferSelect;\nexport type NewDailyRedemption = typeof dailyRedemptions.$inferInsert;\n\n// Collection Statistics for Encyclopedia - tracks lifetime item acquisition\nexport const collectionStats = pgTable(\"collection_stats\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  itemType: varchar(\"item_type\", { length: 20 }).notNull(), // 'flowers', 'butterflies', 'caterpillars', 'fish'\n  itemId: integer(\"item_id\").notNull(), // Game item ID (e.g., flower 1-200, butterfly 1-1000)\n  totalObtained: integer(\"total_obtained\").notNull().default(1), // Lifetime count\n  firstObtainedAt: timestamp(\"first_obtained_at\").notNull().defaultNow(),\n  lastObtainedAt: timestamp(\"last_obtained_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  // Unique constraint: one stats entry per user-itemType-itemId combination\n  uniqueUserItemStats: unique().on(table.userId, table.itemType, table.itemId)\n}));\n\n// Castle Garden types\nexport type CastleUnlockedPart = typeof castleUnlockedParts.$inferSelect;\nexport type NewCastleUnlockedPart = typeof castleUnlockedParts.$inferInsert;\nexport type CastleGridState = typeof castleGridState.$inferSelect;\nexport type NewCastleGridState = typeof castleGridState.$inferInsert;\n\n// Collection Stats types\nexport type CollectionStats = typeof collectionStats.$inferSelect;\nexport type NewCollectionStats = typeof collectionStats.$inferInsert;\n","size_bytes":34013},"client/src/App.tsx":{"content":"import React, { useEffect } from \"react\";\nimport { Layout } from \"./components/Layout\";\nimport { Toaster } from \"./components/ui/sonner\";\nimport { NotificationDialog } from \"./components/ui/NotificationDialog\";\nimport { useAudio } from \"./lib/stores/useAudio\";\nimport { useNotification } from \"./hooks/useNotification\";\nimport \"@fontsource/inter\";\n\nfunction App() {\n  const { setBackgroundMusic, setHitSound, setSuccessSound } = useAudio();\n  const { isOpen, message, type, title, closeNotification } = useNotification();\n\n  // Initialize audio assets\n  useEffect(() => {\n    // Load background music\n    const bgMusic = new Audio(\"/sounds/background.mp3\");\n    bgMusic.loop = true;\n    bgMusic.volume = 0.3;\n    setBackgroundMusic(bgMusic);\n\n    // Load sound effects\n    const hitSfx = new Audio(\"/sounds/hit.mp3\");\n    hitSfx.volume = 0.5;\n    setHitSound(hitSfx);\n\n    const successSfx = new Audio(\"/sounds/success.mp3\");\n    successSfx.volume = 0.6;\n    setSuccessSound(successSfx);\n  }, [setBackgroundMusic, setHitSound, setSuccessSound]);\n\n  return (\n    <>\n      <Layout />\n      <Toaster />\n      <NotificationDialog\n        isOpen={isOpen}\n        onClose={closeNotification}\n        message={message}\n        type={type}\n        title={title}\n      />\n    </>\n  );\n}\n\nexport default App;\n","size_bytes":1299},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom animations for slot machine */\n@keyframes spin-slow {\n  from {\n    transform: translateY(0);\n  }\n  to {\n    transform: translateY(-100px);\n  }\n}\n\n@keyframes spin-fast {\n  from {\n    transform: translateY(0);\n  }\n  to {\n    transform: translateY(-200px);\n  }\n}\n\n@keyframes recoil {\n  0% { transform: translateY(0px); }\n  30% { transform: translateY(-8px); }\n  70% { transform: translateY(4px); }\n  100% { transform: translateY(0px); }\n}\n\n/* Golden glow animation for vase frames */\n@keyframes gold-glow-random {\n  0% { \n    border-color: rgb(100, 116, 139); /* slate-500 */\n    box-shadow: 0 0 0px rgba(251, 191, 36, 0); /* transparent gold */\n  }\n  25% { \n    border-color: rgb(217, 119, 6); /* amber-600 */\n    box-shadow: 0 0 8px rgba(251, 191, 36, 0.3); /* soft gold glow */\n  }\n  50% { \n    border-color: rgb(245, 158, 11); /* amber-500 */\n    box-shadow: 0 0 16px rgba(251, 191, 36, 0.6), 0 0 32px rgba(251, 191, 36, 0.2); /* stronger gold glow */\n  }\n  75% { \n    border-color: rgb(217, 119, 6); /* amber-600 */\n    box-shadow: 0 0 8px rgba(251, 191, 36, 0.3); /* soft gold glow */\n  }\n  100% { \n    border-color: rgb(100, 116, 139); /* slate-500 */\n    box-shadow: 0 0 0px rgba(251, 191, 36, 0); /* transparent gold */\n  }\n}\n\n/* Field 3x Spin Animation - for planting flowers/butterflies */\n@keyframes field-spin-3x {\n  0% { transform: rotate(0deg); }\n  33.33% { transform: rotate(360deg); }\n  66.66% { transform: rotate(720deg); }\n  100% { transform: rotate(1080deg); }\n}\n\n.animate-spin-slow {\n  animation: spin-slow 0.1s linear infinite;\n}\n\n.animate-spin-fast {\n  animation: spin-fast 0.05s linear infinite;\n}\n\n.animate-field-spin {\n  animation: field-spin-3x 2.1s ease-in-out;\n}\n\n.animate-gold-glow-random {\n  animation: gold-glow-random infinite ease-in-out;\n}\n\n/* Pause animation on hover to prevent flickering */\n.animate-gold-glow-random:hover {\n  animation-play-state: paused;\n}\n\n@layer base {\n  :root {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 24 95% 53%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 24 95% 53%;\n    --radius: 0.5rem;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -webkit-tap-highlight-color: transparent;\n  }\n\n  /* Custom scrollbar styles */\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    @apply bg-slate-900;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    @apply bg-slate-700 rounded-md;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    @apply bg-slate-600;\n  }\n}\n\n/* Caterpillar Bounce Spawn Animation */\n@keyframes bounce-spawn {\n  0% {\n    transform: scale(0) translateY(-20px);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1.3) translateY(-5px);\n    opacity: 0.8;\n  }\n  75% {\n    transform: scale(0.9) translateY(2px);\n    opacity: 1;\n  }\n  100% {\n    transform: scale(1) translateY(0px);\n    opacity: 1;\n  }\n}\n\n/* Flower Shimmer Animation - waiting to spawn caterpillar */\n@keyframes shimmer {\n  0% {\n    transform: scale(1) rotate(0deg);\n    filter: brightness(1) drop-shadow(0 0 5px rgba(255, 255, 255, 0.3));\n  }\n  25% {\n    transform: scale(1.05) rotate(1deg);\n    filter: brightness(1.2) drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));\n  }\n  50% {\n    transform: scale(1.1) rotate(0deg);\n    filter: brightness(1.4) drop-shadow(0 0 15px rgba(255, 255, 255, 0.7));\n  }\n  75% {\n    transform: scale(1.05) rotate(-1deg);\n    filter: brightness(1.2) drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));\n  }\n  100% {\n    transform: scale(1) rotate(0deg);\n    filter: brightness(1) drop-shadow(0 0 5px rgba(255, 255, 255, 0.3));\n  }\n}\n\n/* Flower Dissolve Animation - fading away after spawning caterpillar */\n@keyframes dissolve {\n  0% {\n    transform: scale(1);\n    opacity: 1;\n    filter: brightness(1);\n  }\n  30% {\n    transform: scale(0.95);\n    opacity: 0.8;\n    filter: brightness(1.1);\n  }\n  70% {\n    transform: scale(0.8);\n    opacity: 0.4;\n    filter: brightness(0.7);\n  }\n  100% {\n    transform: scale(0.6);\n    opacity: 0;\n    filter: brightness(0.3);\n  }\n}\n\n.animate-shimmer {\n  animation: shimmer 2s ease-in-out infinite;\n}\n\n.animate-dissolve {\n  animation: dissolve 1.5s ease-out forwards;\n}\n\n/* Pond field wobble animation */\n@keyframes pond-wobble {\n  0% { transform: rotate(0deg); }\n  25% { transform: rotate(30deg); }\n  50% { transform: rotate(0deg); }\n  75% { transform: rotate(-30deg); }\n  100% { transform: rotate(0deg); }\n}\n\n/* Butterfly wiggle animation */\n@keyframes wiggle {\n  0% { transform: translateX(-2px) translateY(0px); }\n  25% { transform: translateX(2px) translateY(-1px); }\n  50% { transform: translateX(-1px) translateY(1px); }\n  75% { transform: translateX(1px) translateY(-2px); }\n  100% { transform: translateX(-2px) translateY(0px); }\n}\n\n.animate-wiggle {\n  animation: wiggle 0.3s ease-in-out infinite;\n}\n\n/* Burst animation - scale up and fade out */\n@keyframes burst {\n  0% { \n    transform: scale(1);\n    opacity: 1;\n  }\n  50% { \n    transform: scale(1.5);\n    opacity: 0.8;\n  }\n  100% { \n    transform: scale(2);\n    opacity: 0;\n  }\n}\n\n.animate-burst {\n  animation: burst 0.6s ease-out forwards;\n}\n\n\n/* Sanftes Einblenden der permanenten Raupe */\n@keyframes fade-in {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n.animate-fade-in {\n  animation: fade-in 0.5s ease-in forwards;\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}\n\n/* Game-specific styles */\n.game-ui {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  z-index: 10;\n}\n\n.game-ui > * {\n  pointer-events: auto;\n}\n\n/* Animation utilities */\n@keyframes glow {\n  0%, 100% {\n    text-shadow: 0 0 5px rgba(249, 115, 22, 0.5);\n  }\n  50% {\n    text-shadow: 0 0 20px rgba(249, 115, 22, 0.8), 0 0 30px rgba(249, 115, 22, 0.6);\n  }\n}\n\n.glow-orange {\n  animation: glow 2s ease-in-out infinite;\n}\n\n/* Custom button variants */\n.btn-game {\n  @apply bg-gradient-to-r from-orange-600 to-orange-700 hover:from-orange-700 hover:to-orange-800 text-white font-semibold px-6 py-3 rounded-lg shadow-lg transition-all duration-200;\n}\n\n.btn-game:hover {\n  @apply transform scale-105;\n}\n\n/* Card hover effects */\n.card-hover {\n  @apply transition-all duration-300 hover:shadow-xl hover:shadow-orange-500/20;\n}\n\n.card-hover:hover {\n  @apply transform scale-[1.02] border-orange-500/50;\n}\n\n/* Glass effect utilities */\n.glass {\n  backdrop-filter: blur(10px);\n  background: rgba(15, 23, 42, 0.8);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n/* Game status indicators */\n.status-ready {\n  @apply text-green-400;\n}\n\n.status-playing {\n  @apply text-orange-400;\n}\n\n.status-ended {\n  @apply text-red-400;\n}\n\n/* Layout fixes for fixed footer */\n.layout-container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  overflow: hidden;\n}\n\n.layout-main {\n  flex: 1;\n  overflow-y: auto;\n  min-height: 0;\n}\n\n.layout-footer {\n  flex-shrink: 0;\n  padding-bottom: env(safe-area-inset-bottom, 0);\n}\n\n/* Mobile responsive adjustments */\n@media (max-width: 768px) {\n  .mobile-hidden {\n    display: none;\n  }\n  \n  .mobile-stack {\n    @apply flex-col space-x-0 space-y-2;\n  }\n\n  /* Smaller countdown timers on mobile */\n  .countdown-mobile {\n    @apply text-xs px-1 py-0.5 mt-1;\n  }\n\n  /* Touch-friendly buttons */\n  .touch-target {\n    min-height: 44px;\n    min-width: 44px;\n  }\n\n  /* Disable text selection on touch devices */\n  .no-select {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n  }\n\n  /* Mobile garden grid */\n  .garden-grid-mobile {\n    grid-template-columns: repeat(5, 1fr);\n    gap: 0.25rem; /* 4px */\n  }\n\n  .garden-grid-desktop {\n    grid-template-columns: repeat(10, 1fr);\n    gap: 0.5rem; /* 8px */\n  }\n\n  /* Responsive field content */\n  .field-content {\n    @apply w-full h-full flex flex-col items-center justify-center p-1;\n  }\n  \n  .field-image {\n    @apply w-full h-full object-contain;\n  }\n\n  /* Safe area support for modern phones */\n  .safe-area-bottom {\n    padding-bottom: max(1rem, env(safe-area-inset-bottom));\n  }\n\n  .safe-area-top {\n    padding-top: max(0.5rem, env(safe-area-inset-top));\n  }\n\n  /* Field Spinning Animation for Harvesting - 1x 360° Drehung */\n  @keyframes field-spin-animation {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  .animate-field-spin {\n    animation: field-spin-animation 0.8s ease-in-out;\n  }\n\n  /* Langsamere Pulse-Animation für DONATE Button */\n  @keyframes slow-pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.8; }\n  }\n\n  .animate-slow-pulse {\n    animation: slow-pulse 4s ease-in-out infinite;\n  }\n}\n","size_bytes":9774},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AuthModal.tsx":{"content":"import React, { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const AuthModal: React.FC<AuthModalProps> = ({ isOpen, onClose }) => {\n  const { login, register, isLoading, error, clearError } = useAuth();\n  const { setCredits } = useCredits();\n  \n  const [loginForm, setLoginForm] = useState({ username: \"\", password: \"\" });\n  const [registerForm, setRegisterForm] = useState({ username: \"\", password: \"\", confirmPassword: \"\" });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await login(loginForm.username, loginForm.password);\n    // Check if login was successful\n    const currentState = useAuth.getState();\n    if (currentState.user && !currentState.error) {\n      setCredits(currentState.user.credits); // Use actual user credits\n      onClose();\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (registerForm.password !== registerForm.confirmPassword) {\n      return;\n    }\n    await register(registerForm.username, registerForm.password);\n    // Check if registration was successful\n    const currentState = useAuth.getState();\n    if (currentState.user && !currentState.error) {\n      setCredits(currentState.user.credits); // Use actual user credits\n      onClose();\n    }\n  };\n\n  const handleOpenChange = (open: boolean) => {\n    if (!open) {\n      clearError();\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleOpenChange}>\n      <DialogContent \n        className=\"bg-slate-900 border-slate-700 text-white max-w-md\"\n        aria-describedby=\"auth-description\"\n      >\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-2xl\">Welcome to Mariposa</DialogTitle>\n          <div id=\"auth-description\" className=\"sr-only\">\n            Anmelde- und Registrierungsdialog für Mariposa\n          </div>\n        </DialogHeader>\n        \n        <Tabs defaultValue=\"login\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 bg-slate-800\">\n            <TabsTrigger value=\"login\" className=\"data-[state=active]:bg-orange-600\">\n              Login\n            </TabsTrigger>\n            <TabsTrigger value=\"register\" className=\"data-[state=active]:bg-orange-600\">\n              Register\n            </TabsTrigger>\n          </TabsList>\n          \n          {error && (\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          <TabsContent value=\"login\">\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"login-username\">Username</Label>\n                <Input\n                  id=\"login-username\"\n                  type=\"text\"\n                  value={loginForm.username}\n                  onChange={(e) => setLoginForm({ ...loginForm, username: e.target.value })}\n                  className=\"bg-slate-800 border-slate-600 text-white\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"login-password\">Password</Label>\n                <Input\n                  id=\"login-password\"\n                  type=\"password\"\n                  value={loginForm.password}\n                  onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                  className=\"bg-slate-800 border-slate-600 text-white\"\n                  required\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-orange-600 hover:bg-orange-700\"\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Logging in...\n                  </>\n                ) : (\n                  \"Login\"\n                )}\n              </Button>\n            </form>\n          </TabsContent>\n          \n          <TabsContent value=\"register\">\n            <form onSubmit={handleRegister} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"register-username\">Username</Label>\n                <Input\n                  id=\"register-username\"\n                  type=\"text\"\n                  value={registerForm.username}\n                  onChange={(e) => setRegisterForm({ ...registerForm, username: e.target.value })}\n                  className=\"bg-slate-800 border-slate-600 text-white\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"register-password\">Password</Label>\n                <Input\n                  id=\"register-password\"\n                  type=\"password\"\n                  value={registerForm.password}\n                  onChange={(e) => setRegisterForm({ ...registerForm, password: e.target.value })}\n                  className=\"bg-slate-800 border-slate-600 text-white\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                <Input\n                  id=\"confirm-password\"\n                  type=\"password\"\n                  value={registerForm.confirmPassword}\n                  onChange={(e) => setRegisterForm({ ...registerForm, confirmPassword: e.target.value })}\n                  className=\"bg-slate-800 border-slate-600 text-white\"\n                  required\n                />\n              </div>\n              {registerForm.password !== registerForm.confirmPassword && registerForm.confirmPassword && (\n                <p className=\"text-red-400 text-sm\">Passwords do not match</p>\n              )}\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-orange-600 hover:bg-orange-700\"\n                disabled={isLoading || registerForm.password !== registerForm.confirmPassword}\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Creating account...\n                  </>\n                ) : (\n                  \"Create Account\"\n                )}\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n        \n        <div className=\"text-center text-sm text-slate-400 mt-4\">\n          New users start with 1000 Cr\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","size_bytes":7080},"client/src/components/BouquetsView.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { toast } from \"sonner\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { Flower2, Star, Heart, Gift, Plus, Sparkles, Palette } from \"lucide-react\";\nimport { HelpButton } from './HelpButton';\nimport { BouquetCreationModal } from \"./BouquetCreationModal\";\nimport { BouquetRecipeDialog } from \"./BouquetRecipeDialog\";\nimport { RarityImage } from \"./RarityImage\";\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\nimport type { UserFlower, UserBouquet, PlacedBouquet, BouquetRecipe } from \"@shared/schema\";\n\nexport const BouquetsView: React.FC = () => {\n  const { user } = useAuth();\n  const { credits, updateCredits } = useCredits();\n  const [myFlowers, setMyFlowers] = useState<UserFlower[]>([]);\n  const [myBouquets, setMyBouquets] = useState<UserBouquet[]>([]);\n  const [myCreatedRecipes, setMyCreatedRecipes] = useState<any[]>([]); // Persistent user recipes\n  const [placedBouquets, setPlacedBouquets] = useState<PlacedBouquet[]>([]);\n  const [showBouquetCreation, setShowBouquetCreation] = useState(false);\n  const [bouquetRecipes, setBouquetRecipes] = useState<Record<number, BouquetRecipe>>({});\n  const [selectedRecipeDialog, setSelectedRecipeDialog] = useState<{\n    bouquetId: number;\n    bouquetName?: string;\n    bouquetRarity?: RarityTier;\n    recipe?: BouquetRecipe;\n  } | null>(null);\n\n  useEffect(() => {\n    if (user) {\n      fetchMyFlowers();\n      fetchMyBouquets();\n      fetchMyCreatedRecipes(); // Fetch persistent user recipes\n      fetchPlacedBouquets();\n      fetchBouquetRecipes();\n    }\n  }, [user]);\n\n  const fetchMyFlowers = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/flowers`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyFlowers(data.flowers || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my flowers:', error);\n    }\n  };\n\n  const fetchMyBouquets = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/bouquets`);\n      if (response.ok) {\n        const data = await response.json();\n        // Show all bouquets regardless of quantity for recipe viewing\n        setMyBouquets(data.bouquets || []);\n        console.log('Bouquets loaded:', data.bouquets);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my bouquets:', error);\n    }\n  };\n\n  const fetchMyCreatedRecipes = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/created-bouquet-recipes`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyCreatedRecipes(data.recipes || []);\n        console.log('User created recipes loaded:', data.recipes);\n      }\n    } catch (error) {\n      console.error('Failed to fetch user created recipes:', error);\n    }\n  };\n\n\n  const fetchPlacedBouquets = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/placed-bouquets`);\n      if (response.ok) {\n        const data = await response.json();\n        setPlacedBouquets(data.placedBouquets || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch placed bouquets:', error);\n    }\n  };\n\n  const fetchBouquetRecipes = async () => {\n    try {\n      const response = await fetch('/api/bouquets/recipes');\n      if (response.ok) {\n        const data = await response.json();\n        const recipeMap: Record<number, BouquetRecipe> = {};\n        data.recipes.forEach((recipe: BouquetRecipe) => {\n          recipeMap[recipe.bouquetId] = recipe;\n        });\n        setBouquetRecipes(recipeMap);\n      }\n    } catch (error) {\n      console.error('Failed to fetch bouquet recipes:', error);\n    }\n  };\n\n  const [ingredientsCache, setIngredientsCache] = useState<Record<number, any[]>>({});\n\n  const fetchBouquetIngredients = async (bouquetId: number): Promise<any[]> => {\n    if (ingredientsCache[bouquetId]) return ingredientsCache[bouquetId];\n    \n    const recipe = bouquetRecipes[bouquetId];\n    if (!recipe) return [];\n    \n    try {\n      const flowerIds = [recipe.flowerId1, recipe.flowerId2, recipe.flowerId3];\n      const ingredients: any[] = [];\n      \n      // Get flower details for each ingredient\n      for (const flowerId of flowerIds) {\n        const flowerResponse = await fetch(`/api/flower/${flowerId}`);\n        if (flowerResponse.ok) {\n          const flower = await flowerResponse.json();\n          ingredients.push(flower);\n        }\n      }\n      \n      setIngredientsCache(prev => ({ ...prev, [bouquetId]: ingredients }));\n      return ingredients;\n    } catch (error) {\n      console.error('Failed to fetch flower ingredients:', error);\n      return [];\n    }\n  };\n\n  const handleRecreateBouquet = async (flowerId1: number, flowerId2: number, flowerId3: number, name?: string) => {\n    try {\n      const response = await fetch('/api/bouquets/recreate', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({\n          flowerId1,\n          flowerId2,\n          flowerId3,\n          name,\n          generateName: false // Never generate new name for recreation\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        \n        // Show beautiful success toast\n        if (result.bouquet) {\n          const rarityName = getRarityDisplayName(result.bouquet.rarity as RarityTier);\n          \n          toast.success(\"Bouquet erfolgreich nachgesteckt!\", {\n            description: `\"${result.bouquet.name}\" (${rarityName}) wurde kostenlos nachgesteckt! 💐`,\n            duration: 4000,\n            className: \"border-l-4 \" + getRarityColor(result.bouquet.rarity as RarityTier).replace('text-', 'border-l-'),\n          });\n        } else {\n          toast.success(\"Bouquet erfolgreich nachgesteckt!\", {\n            description: \"Dein nachgestecktes Bouquet steht bereit! 💐\",\n            duration: 4000,\n          });\n        }\n        \n        // Refresh all data\n        await fetchMyFlowers();\n        await fetchMyBouquets();\n        await fetchBouquetRecipes();\n        await fetchMyCreatedRecipes();\n        // Note: No need to update credits since recreation is free\n        setSelectedRecipeDialog(null); // Close dialog\n      } else {\n        const error = await response.json();\n        \n        // Show user-friendly error messages\n        if (error.message && error.message.includes('nicht gefunden')) {\n          toast.error(\"🌸 Blumen nicht gefunden\", {\n            description: \"Eine der benötigten Blumen ist nicht mehr in deinem Inventar.\",\n            duration: 4000,\n            className: \"border-l-4 border-l-yellow-500\",\n          });\n        } else {\n          toast.error(\"❌ Fehler beim Nachstecken\", {\n            description: error.message || 'Bouquet konnte nicht nachgesteckt werden. Bitte versuche es erneut.',\n            duration: 4000,\n            className: \"border-l-4 border-l-red-500\",\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error recreating bouquet:', error);\n      toast.error(\"Verbindungsfehler\", {\n        description: 'Bouquet konnte nicht nachgesteckt werden',\n        duration: 4000,\n      });\n    }\n  };\n\n  const handleCreateBouquet = async (flowerId1: number, flowerId2: number, flowerId3: number, name?: string, generateName?: boolean) => {\n    try {\n      // Show loading toast when generating name with AI\n      let loadingToast: any;\n      if (generateName) {\n        loadingToast = toast.loading(\"🧠 KI generiert Bouquet-Namen...\", {\n          description: \"Dies kann einen Moment dauern.\",\n          duration: 0, // Don't auto-dismiss\n        });\n      }\n\n      const response = await fetch('/api/bouquets/create', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({\n          flowerId1,\n          flowerId2,\n          flowerId3,\n          name,\n          generateName\n        })\n      });\n\n      // Dismiss loading toast\n      if (loadingToast) {\n        toast.dismiss(loadingToast);\n      }\n\n      if (response.ok) {\n        const result = await response.json();\n        \n        // Show beautiful success toast\n        if (result.bouquet) {\n          const rarityName = getRarityDisplayName(result.bouquet.rarity as RarityTier);\n          \n          toast.success(\"Bouquet erfolgreich erstellt!\", {\n            description: `\"${result.bouquet.name}\" (${rarityName}) wurde erstellt! 💐`,\n            duration: 4000,\n            className: \"border-l-4 \" + getRarityColor(result.bouquet.rarity as RarityTier).replace('text-', 'border-l-'),\n          });\n        } else {\n          toast.success(\"Bouquet erfolgreich erstellt!\", {\n            description: \"Dein neues Bouquet steht bereit! 💐\",\n            duration: 4000,\n          });\n        }\n        \n        // Refresh all data\n        await fetchMyFlowers();\n        await fetchMyBouquets();\n        await fetchBouquetRecipes();\n        await fetchMyCreatedRecipes();\n        // Fetch updated credits from server after deduction\n        if (user) {\n          const creditsResponse = await fetch(`/api/user/${user.id}/credits`);\n          if (creditsResponse.ok) {\n            const creditsData = await creditsResponse.json();\n            // Update credits display with current value from server\n            const { setCredits } = useCredits.getState();\n            setCredits(creditsData.credits);\n          }\n        }\n        setShowBouquetCreation(false);\n      } else {\n        const error = await response.json();\n        \n        // Show user-friendly error messages based on error type\n        if (error.message && error.message.includes('existiert bereits')) {\n          toast.error(\"❌ Name bereits vergeben\", {\n            description: \"Die KI hat einen Namen gewählt, der schon existiert. Versuche es nochmal!\",\n            duration: 5000,\n            className: \"border-l-4 border-l-red-500\",\n          });\n        } else if (error.message && error.message.includes('nicht genügend')) {\n          toast.error(\"💰 Nicht genügend Credits\", {\n            description: \"Du benötigst 30 Credits um ein Bouquet zu erstellen.\",\n            duration: 4000,\n            className: \"border-l-4 border-l-orange-500\",\n          });\n        } else if (error.message && error.message.includes('nicht gefunden')) {\n          toast.error(\"🌸 Blumen nicht gefunden\", {\n            description: \"Eine der ausgewählten Blumen ist nicht mehr in deinem Inventar.\",\n            duration: 4000,\n            className: \"border-l-4 border-l-yellow-500\",\n          });\n        } else {\n          toast.error(\"❌ Fehler beim Erstellen\", {\n            description: error.message || 'Bouquet konnte nicht erstellt werden. Bitte versuche es erneut.',\n            duration: 4000,\n            className: \"border-l-4 border-l-red-500\",\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error creating bouquet:', error);\n      toast.error(\"Verbindungsfehler\", {\n        description: 'Bouquet konnte nicht erstellt werden',\n        duration: 4000,\n      });\n    }\n  };\n\n  const getBorderColor = (rarity: RarityTier): string => {\n    switch (rarity) {\n      case 'common': return '#fbbf24';      // yellow-400\n      case 'uncommon': return '#4ade80';    // green-400  \n      case 'rare': return '#3b82f6';        // blue-400\n      case 'super-rare': return '#06b6d4';  // cyan-400\n      case 'epic': return '#a855f7';        // purple-400\n      case 'legendary': return '#f97316';   // orange-400\n      case 'mythical': return '#ef4444';    // red-400\n      default: return '#9ca3af';            // gray-400\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Card className=\"bg-slate-800 border-slate-700 text-white\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-slate-400\">Bitte melde dich an, um Bouquets zu erstellen</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-8 bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 min-h-full\">\n      {/* Compact Bouquets Header */}\n      <div className=\"bg-slate-800/60 p-4 rounded-lg border border-pink-500/30\">\n        <div className=\"relative mb-3\">\n          {/* HelpButton in absoluter Position rechts oben */}\n          <div className=\"absolute top-0 right-0\">\n            <HelpButton helpText=\"Hier erstellst du wunderschöne Bouquets aus deinen Blumen! Bouquets lockern Schmetterlinge an und können im Garten platziert werden. Je seltener die Blumen, desto wertvoller das Bouquet!\" viewType=\"bouquets\" />\n          </div>\n          \n          {/* Zentrierter Content */}\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-pink-300 mb-1\">\n              Bouquet Kollektion\n            </h1>\n            <p className=\"text-slate-400 text-sm mb-3\">Erstelle Blumensträuße aus deinen Blumen</p>\n            <div className=\"flex justify-center gap-6 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <Flower2 className=\"h-4 w-4 text-blue-400\" />\n                <span className=\"text-white font-semibold\">{myFlowers.length}</span>\n                <span className=\"text-slate-400\">Blumen</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Gift className=\"h-4 w-4 text-pink-400\" />\n                <span className=\"text-white font-semibold\">{myCreatedRecipes.length}</span>\n                <span className=\"text-slate-400\">Rezepte</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Clean Bouquet Workshop - Moved to TOP for better UX */}\n      <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border border-orange-500/30 shadow-lg\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-white text-center\">\n            <div className=\"flex items-center justify-center\">\n              <Palette className=\"h-6 w-6 mr-2 text-orange-400\" />\n              <span className=\"text-xl font-bold text-orange-300\">\n                Bouquet Werkstatt\n              </span>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {myFlowers.length < 3 ? (\n            <div className=\"text-center py-16\">\n              <div className=\"w-24 h-24 mx-auto bg-gradient-to-br from-red-500/20 to-orange-500/20 rounded-full flex items-center justify-center mb-6 border-2 border-red-400/30\">\n                <Heart className=\"h-12 w-12 text-red-400\" />\n              </div>\n              <p className=\"text-slate-300 mb-4 text-xl font-semibold\">Du benötigst mindestens 3 Blumen für ein Bouquet</p>\n              <div className=\"bg-slate-800/50 rounded-xl p-6 border border-slate-600 inline-block\">\n                <div className=\"text-slate-400 text-lg\">\n                  Du hast derzeit <Badge className=\"bg-rose-500/20 text-rose-400 border border-rose-400/30 px-3 py-1 font-bold\">{myFlowers.length}</Badge> Blumen\n                </div>\n                <p className=\"text-slate-500 mt-3\">Züchte mehr Blumen in deinem Garten! 🌱</p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-4\">\n              {/* Großer prominenter Erstellen-Button */}\n              <div className=\"mb-4\">\n                <Button\n                  onClick={() => setShowBouquetCreation(true)}\n                  className=\"bg-gradient-to-r from-orange-600 via-pink-600 to-red-600 hover:from-orange-700 hover:via-pink-700 hover:to-red-700 text-white font-bold text-xl px-8 py-4 rounded-xl shadow-2xl transform hover:scale-105 transition-all duration-300 border-2 border-orange-400/50 hover:border-orange-300\"\n                  size=\"lg\"\n                >\n                  <Heart className=\"h-6 w-6 mr-2 animate-pulse\" />\n                  BOUQUET ERSTELLEN\n                  <Sparkles className=\"h-6 w-6 ml-2 animate-pulse\" />\n                </Button>\n              </div>\n              \n              <div className=\"bg-gradient-to-br from-purple-800/40 to-pink-800/40 rounded-lg p-4 border border-purple-400/30 max-w-md mx-auto\">\n                <div className=\"flex items-center mb-3\">\n                  <Heart className=\"h-5 w-5 text-purple-400 mr-2\" />\n                  <h4 className=\"text-white font-semibold text-sm\">Erstellung</h4>\n                </div>\n                <ul className=\"text-slate-300 space-y-1 text-sm\">\n                  <li className=\"flex items-center\">\n                    <Star className=\"h-3 w-3 mr-2 text-yellow-400\" />\n                    3 Blumen auswählen\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Star className=\"h-3 w-3 mr-2 text-yellow-400\" />\n                    30 Credits Kosten\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Star className=\"h-3 w-3 mr-2 text-yellow-400\" />\n                    AI Namen + Ins Inventar\n                  </li>\n                </ul>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* My Bouquets Collection - Moved to BOTTOM for better UX */}\n      <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border border-purple-500/30 shadow-lg\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-white flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Gift className=\"h-5 w-5 mr-2 text-purple-400\" />\n              <span className=\"text-lg font-semibold text-purple-300\">\n                Meine Bouquet-Rezepte\n              </span>\n            </div>\n            <Badge className=\"bg-purple-600 text-white px-2 py-1 text-sm\">\n              {myCreatedRecipes.length}\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {myCreatedRecipes.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-slate-400\">Noch keine Bouquet-Rezepte erstellt</p>\n              <p className=\"text-slate-500 text-sm mt-2\">Erstelle dein erstes Bouquet in der Werkstatt oben</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-2 gap-3 max-h-96 overflow-y-auto pr-2\">\n              {myCreatedRecipes\n                .sort((a, b) => {\n                  // Sortiere nach Kompatibilität: Rezepte mit den meisten verfügbaren Blumen zuerst\n                  const getCompatibilityScore = (recipe: any) => {\n                    const hasFlower1 = myFlowers.some(f => f.flowerId === recipe.flowerId1);\n                    const hasFlower2 = myFlowers.some(f => f.flowerId === recipe.flowerId2);  \n                    const hasFlower3 = myFlowers.some(f => f.flowerId === recipe.flowerId3);\n                    return [hasFlower1, hasFlower2, hasFlower3].filter(Boolean).length;\n                  };\n                  \n                  const scoreA = getCompatibilityScore(a);\n                  const scoreB = getCompatibilityScore(b);\n                  \n                  // Zuerst nach Kompatibilität sortieren (höchste zuerst), dann nach Seltenheit\n                  if (scoreA !== scoreB) {\n                    return scoreB - scoreA;\n                  }\n                  \n                  // Bei gleicher Kompatibilität nach Seltenheit sortieren\n                  const rarityOrder = ['mythical', 'legendary', 'epic', 'super-rare', 'rare', 'uncommon', 'common'];\n                  const rarityA = rarityOrder.indexOf(a.bouquetRarity || 'common');\n                  const rarityB = rarityOrder.indexOf(b.bouquetRarity || 'common');\n                  return rarityA - rarityB;\n                })\n                .map((recipe) => (\n                <Card \n                  key={recipe.bouquetId}\n                  className=\"bg-gradient-to-br from-slate-900 to-slate-950 border border-purple-400/30 hover:border-purple-400/50 transition-all duration-300\"\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <RarityImage \n                        src=\"/Blumen/Bouquet.jpg\"\n                        alt=\"Bouquet\"\n                        rarity={(recipe.bouquetRarity || \"common\") as RarityTier}\n                        size=\"medium\"\n                        className=\"w-16 h-16 flex-shrink-0\"\n                      />\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-bold text-white text-lg mb-1 truncate\">\n                          {recipe.bouquetName || `Bouquet #${recipe.bouquetId}`}\n                        </h4>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-3\">\n                            <Badge \n                              variant=\"secondary\"\n                              className={`px-2 py-1 text-sm ${getRarityColor((recipe.bouquetRarity || \"common\") as RarityTier)}`}\n                            >\n                              <Star className=\"h-3 w-3 mr-1\" />\n                              {getRarityDisplayName((recipe.bouquetRarity || \"common\") as RarityTier)}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            {/* Kompatibilitäts-Anzeige */}\n                            {(() => {\n                              const hasFlower1 = myFlowers.some(f => f.flowerId === recipe.flowerId1);\n                              const hasFlower2 = myFlowers.some(f => f.flowerId === recipe.flowerId2);  \n                              const hasFlower3 = myFlowers.some(f => f.flowerId === recipe.flowerId3);\n                              const compatibleCount = [hasFlower1, hasFlower2, hasFlower3].filter(Boolean).length;\n                              \n                              if (compatibleCount === 3) {\n                                return (\n                                  <Badge className=\"bg-green-500/20 text-green-400 border border-green-400/40 px-2 py-1 text-xs font-semibold\">\n                                    <Heart className=\"h-3 w-3 mr-1\" />\n                                    ✓ Alle Blumen verfügbar\n                                  </Badge>\n                                );\n                              } else if (compatibleCount > 0) {\n                                return (\n                                  <Badge className=\"bg-yellow-500/20 text-yellow-400 border border-yellow-400/40 px-2 py-1 text-xs\">\n                                    <Star className=\"h-3 w-3 mr-1\" />\n                                    {compatibleCount}/3 verfügbar\n                                  </Badge>\n                                );\n                              } else {\n                                return (\n                                  <Badge className=\"bg-red-500/20 text-red-400 border border-red-400/40 px-2 py-1 text-xs\">\n                                    <Flower2 className=\"h-3 w-3 mr-1\" />\n                                    Blumen fehlen\n                                  </Badge>\n                                );\n                              }\n                            })()}\n                            \n                            <Button\n                              onClick={() => {\n                                setSelectedRecipeDialog({\n                                  bouquetId: recipe.bouquetId,\n                                  bouquetName: recipe.bouquetName,\n                                  bouquetRarity: (recipe.bouquetRarity || \"common\") as RarityTier,\n                                  recipe: {\n                                    id: 0,\n                                    bouquetId: recipe.bouquetId,\n                                    flowerId1: recipe.flowerId1,\n                                    flowerId2: recipe.flowerId2,\n                                    flowerId3: recipe.flowerId3,\n                                    createdAt: new Date()\n                                  }\n                                });\n                              }}\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"text-purple-300 border-purple-400/30 hover:bg-purple-500/10\"\n                            >\n                              Rezept anzeigen\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Bouquet Creation Modal */}\n      <BouquetCreationModal\n        isOpen={showBouquetCreation}\n        onClose={() => setShowBouquetCreation(false)}\n        userFlowers={myFlowers}\n        onCreateBouquet={handleCreateBouquet}\n        credits={credits}\n      />\n\n      {/* Bouquet Recipe Dialog */}\n      <BouquetRecipeDialog\n        isOpen={!!selectedRecipeDialog}\n        onClose={() => setSelectedRecipeDialog(null)}\n        bouquetId={selectedRecipeDialog?.bouquetId || 0}\n        bouquetName={selectedRecipeDialog?.bouquetName}\n        bouquetRarity={selectedRecipeDialog?.bouquetRarity}\n        recipe={selectedRecipeDialog?.recipe}\n        userFlowers={myFlowers}\n        onRecreate={async (flowerId1, flowerId2, flowerId3) => {\n          if (selectedRecipeDialog?.bouquetName) {\n            await handleRecreateBouquet(flowerId1, flowerId2, flowerId3, selectedRecipeDialog.bouquetName);\n          }\n        }}\n      />\n    </div>\n  );\n};","size_bytes":26358},"client/src/components/Dashboard.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { \n  Gamepad2, \n  Trophy, \n  Coins, \n  TrendingUp, \n  Clock,\n  Star \n} from \"lucide-react\";\n\ninterface DashboardProps {\n  onViewChange: (view: string) => void;\n}\n\nexport const Dashboard: React.FC<DashboardProps> = ({ onViewChange }) => {\n  const { user } = useAuth();\n  const { credits } = useCredits();\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Card className=\"bg-slate-800 border-slate-700 text-white\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-slate-400\">Please log in to access the dashboard</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-8 bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 min-h-full\">\n      {/* Enhanced Welcome Section */}\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/10 via-indigo-500/10 to-purple-500/10 rounded-2xl blur-xl\"></div>\n        <div className=\"relative bg-gradient-to-r from-slate-800/80 to-slate-900/80 p-8 rounded-2xl border border-blue-500/30 text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"relative\">\n              <Star className=\"h-12 w-12 mr-4 text-blue-400 animate-pulse\" />\n              <div className=\"absolute inset-0 h-12 w-12 mr-4 text-blue-400 animate-ping opacity-20\"></div>\n            </div>\n            <div>\n              <h1 className=\"text-5xl font-bold bg-gradient-to-r from-blue-300 via-indigo-300 to-purple-300 bg-clip-text text-transparent\">\n                Willkommen zurück, {user.username}! 🎆\n              </h1>\n            </div>\n          </div>\n          <p className=\"text-slate-300 text-xl\">Bereit für ein neues Garten-Abenteuer?</p>\n        </div>\n      </div>\n\n      {/* Enhanced Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"bg-gradient-to-br from-orange-800/40 to-yellow-800/40 border-2 border-orange-500/30 hover:border-orange-400/50 transition-all duration-300 hover:scale-105 shadow-xl group\">\n          <CardHeader className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-orange-500/10 to-yellow-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n            <div className=\"relative flex flex-row items-center justify-between space-y-0 pb-2 z-10\">\n              <CardTitle className=\"text-lg font-bold text-orange-300\">\n                Total Credits\n              </CardTitle>\n              <div className=\"relative\">\n                <Coins className=\"h-8 w-8 text-orange-400 group-hover:animate-pulse\" />\n                <div className=\"absolute inset-0 h-8 w-8 text-orange-400 animate-ping opacity-20\"></div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-4xl font-bold text-orange-400 mb-2\">{credits} Cr</div>\n            <div className=\"text-slate-400 text-sm\">💰 Spielgeld</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-blue-800/40 to-indigo-800/40 border-2 border-blue-500/30 hover:border-blue-400/50 transition-all duration-300 hover:scale-105 shadow-xl group\">\n          <CardHeader className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/10 to-indigo-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n            <div className=\"relative flex flex-row items-center justify-between space-y-0 pb-2 z-10\">\n              <CardTitle className=\"text-lg font-bold text-blue-300\">\n                Spiele gespielt\n              </CardTitle>\n              <div className=\"relative\">\n                <Gamepad2 className=\"h-8 w-8 text-blue-400 group-hover:animate-pulse\" />\n                <div className=\"absolute inset-0 h-8 w-8 text-blue-400 animate-ping opacity-20\"></div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-4xl font-bold text-blue-400 mb-2\">0</div>\n            <div className=\"text-slate-400 text-sm\">🎮 Starte dein erstes Spiel!</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-yellow-800/40 to-amber-800/40 border-2 border-yellow-500/30 hover:border-yellow-400/50 transition-all duration-300 hover:scale-105 shadow-xl group\">\n          <CardHeader className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-500/10 to-amber-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n            <div className=\"relative flex flex-row items-center justify-between space-y-0 pb-2 z-10\">\n              <CardTitle className=\"text-lg font-bold text-yellow-300\">\n                Bester Score\n              </CardTitle>\n              <div className=\"relative\">\n                <Trophy className=\"h-8 w-8 text-yellow-400 group-hover:animate-pulse\" />\n                <div className=\"absolute inset-0 h-8 w-8 text-yellow-400 animate-ping opacity-20\"></div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-4xl font-bold text-yellow-400 mb-2\">--</div>\n            <div className=\"text-slate-400 text-sm\">🏆 Noch keine Spiele gespielt</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Enhanced Quick Actions */}\n      <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-purple-500/30 shadow-2xl\">\n        <CardHeader className=\"relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n          <CardTitle className=\"text-white flex items-center relative z-10\">\n            <div className=\"relative\">\n              <Star className=\"h-8 w-8 mr-3 text-purple-400 animate-pulse\" />\n              <div className=\"absolute inset-0 h-8 w-8 mr-3 text-purple-400 animate-ping opacity-30\"></div>\n            </div>\n            <span className=\"text-3xl font-bold bg-gradient-to-r from-purple-300 to-pink-300 bg-clip-text text-transparent\">\n              Schnelle Aktionen ⚡\n            </span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n            <Button\n              onClick={() => onViewChange('garten')}\n              className=\"bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white h-20 text-xl font-bold transition-all duration-300 hover:scale-110 shadow-lg\"\n            >\n              <div className=\"flex flex-col items-center\">\n                <Gamepad2 className=\"h-8 w-8 mb-2\" />\n                <span>🌱 Garten besuchen</span>\n              </div>\n            </Button>\n            \n            <Button\n              onClick={() => onViewChange('ausstellung')}\n              className=\"bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 text-white h-20 text-xl font-bold transition-all duration-300 hover:scale-110 shadow-lg\"\n            >\n              <div className=\"flex flex-col items-center\">\n                <Trophy className=\"h-8 w-8 mb-2\" />\n                <span>🦋 Ausstellung</span>\n              </div>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Enhanced Recent Activity */}\n      <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-cyan-500/30 shadow-2xl\">\n        <CardHeader className=\"relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n          <CardTitle className=\"text-white flex items-center relative z-10\">\n            <div className=\"relative\">\n              <Clock className=\"h-8 w-8 mr-3 text-cyan-400 animate-pulse\" />\n              <div className=\"absolute inset-0 h-8 w-8 mr-3 text-cyan-400 animate-ping opacity-30\"></div>\n            </div>\n            <span className=\"text-3xl font-bold bg-gradient-to-r from-cyan-300 to-blue-300 bg-clip-text text-transparent\">\n              Letzte Aktivität 🕰️\n            </span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-12 relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/5 to-blue-500/5 rounded-lg\"></div>\n            <div className=\"relative z-10\">\n              <div className=\"relative mb-6\">\n                <Clock className=\"h-16 w-16 text-cyan-400 mx-auto animate-spin\" style={{animationDuration: '20s'}} />\n                <div className=\"absolute inset-0 h-16 w-16 mx-auto text-cyan-400 animate-ping opacity-30\"></div>\n              </div>\n              <p className=\"text-slate-300 text-xl mb-3\">🌱 Keine Aktivität vorhanden</p>\n              <p className=\"text-slate-400 text-lg\">Beginne mit dem Gärtnern um deine Geschichte hier zu sehen</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","size_bytes":9327},"client/src/components/ExhibitionView.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { ButterflyHoverPreview } from \"./ButterflyHoverPreview\";\nimport { ButterflyDetailModal } from \"./ButterflyDetailModal\";\nimport { RarityImage } from \"./RarityImage\";\nimport { Trophy, Plus, DollarSign, Clock, Star, Info, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { HelpButton } from './HelpButton';\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\nimport type { ExhibitionFrame, ExhibitionButterfly, UserButterfly, UserVipButterfly } from \"@shared/schema\";\n\n\ninterface FrameLike {\n  frameId: number;\n  totalLikes: number;\n  isLiked: boolean;\n}\n\nexport const ExhibitionView: React.FC = () => {\n  const { user } = useAuth();\n  const { credits, setCredits } = useCredits();\n  const [frames, setFrames] = useState<ExhibitionFrame[]>([]);\n  const [exhibitionButterflies, setExhibitionButterflies] = useState<ExhibitionButterfly[]>([]);\n  const [exhibitionVipButterflies, setExhibitionVipButterflies] = useState<any[]>([]);\n  const [userButterflies, setUserButterflies] = useState<UserButterfly[]>([]);\n  const [userVipButterflies, setUserVipButterflies] = useState<UserVipButterfly[]>([]);\n  const [frameLikes, setFrameLikes] = useState<FrameLike[]>([]);\n  const [sellStatuses, setSellStatuses] = useState<{[key: string]: {canSell: boolean, timeRemainingMs: number}}>({});\n  const [selectedButterfly, setSelectedButterfly] = useState<ExhibitionButterfly | null>(null);\n  const [showButterflyDialog, setShowButterflyDialog] = useState(false);\n  const [currentButterflyIndex, setCurrentButterflyIndex] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedSlot, setSelectedSlot] = useState<{frameId: number, slotIndex: number} | null>(null);\n  const [showInventoryDialog, setShowInventoryDialog] = useState(false);\n  const [showVipInventoryDialog, setShowVipInventoryDialog] = useState(false);\n  const [currentFrameIndex, setCurrentFrameIndex] = useState(0);\n\n  // Helper function to save current frame to localStorage\n  const saveLastViewedFrame = (frameIndex: number) => {\n    if (user) {\n      localStorage.setItem(`exhibition_last_frame_user_${user.id}`, frameIndex.toString());\n    }\n  };\n\n  // Helper function to get last viewed frame from localStorage\n  const getLastViewedFrame = (): number | null => {\n    if (user) {\n      const saved = localStorage.getItem(`exhibition_last_frame_user_${user.id}`);\n      return saved ? parseInt(saved, 10) : null;\n    }\n    return null;\n  };\n\n  const loadSellStatuses = async () => {\n    if (!user) return;\n    \n    try {\n      // OPTIMIZED: Single batch API call instead of N individual calls\n      const butterflyIds = exhibitionButterflies.map(b => b.id);\n      const vipButterflyIds = exhibitionVipButterflies.map(b => b.id);\n      \n      if (butterflyIds.length === 0 && vipButterflyIds.length === 0) {\n        setSellStatuses({});\n        return;\n      }\n\n      const response = await fetch('/api/exhibition/sell-status-batch', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-user-id': user.id.toString()\n        },\n        body: JSON.stringify({\n          butterflyIds,\n          vipButterflyIds\n        })\n      });\n\n      if (response.ok) {\n        const batchData = await response.json();\n        setSellStatuses(batchData);\n      } else {\n        console.error('Batch sell-status failed, using fallback calculations');\n        \n        // Fallback: Calculate locally for all butterflies\n        const statuses: {[key: string]: {canSell: boolean, timeRemainingMs: number}} = {};\n        \n        // Normal butterflies fallback\n        exhibitionButterflies.forEach((butterfly) => {\n          const placedTime = new Date(butterfly.placedAt).getTime();\n          const timeRemainingMs = Math.max(0, placedTime + (72 * 60 * 60 * 1000) - Date.now());\n          statuses[`normal-${butterfly.id}`] = {\n            canSell: timeRemainingMs <= 0,\n            timeRemainingMs: timeRemainingMs\n          };\n        });\n        \n        // VIP butterflies fallback\n        exhibitionVipButterflies.forEach((vipButterfly) => {\n          const placedTime = new Date(vipButterfly.placedAt).getTime();\n          const timeRemainingMs = Math.max(0, placedTime + (72 * 60 * 60 * 1000) - Date.now());\n          statuses[`vip-${vipButterfly.id}`] = {\n            canSell: timeRemainingMs <= 0,\n            timeRemainingMs: timeRemainingMs\n          };\n        });\n        \n        setSellStatuses(statuses);\n      }\n    } catch (error) {\n      console.error('Failed to load sell statuses:', error);\n      \n      // Emergency fallback: Calculate locally for all butterflies\n      const statuses: {[key: string]: {canSell: boolean, timeRemainingMs: number}} = {};\n      \n      exhibitionButterflies.forEach((butterfly) => {\n        const placedTime = new Date(butterfly.placedAt).getTime();\n        const timeRemainingMs = Math.max(0, placedTime + (72 * 60 * 60 * 1000) - Date.now());\n        statuses[`normal-${butterfly.id}`] = {\n          canSell: timeRemainingMs <= 0,\n          timeRemainingMs: timeRemainingMs\n        };\n      });\n      \n      exhibitionVipButterflies.forEach((vipButterfly) => {\n        const placedTime = new Date(vipButterfly.placedAt).getTime();\n        const timeRemainingMs = Math.max(0, placedTime + (72 * 60 * 60 * 1000) - Date.now());\n        statuses[`vip-${vipButterfly.id}`] = {\n          canSell: timeRemainingMs <= 0,\n          timeRemainingMs: timeRemainingMs\n        };\n      });\n      \n      setSellStatuses(statuses);\n    }\n  };\n\n  useEffect(() => {\n    if (user) {\n      fetchExhibitionData();\n      fetchUserButterflies();\n      fetchUserVipButterflies();\n      loadFrameLikes();\n      // No need to manually process passive income anymore - it's automatic\n    }\n  }, [user]);\n  \n  useEffect(() => {\n    if (exhibitionButterflies.length > 0 || exhibitionVipButterflies.length > 0) {\n      loadSellStatuses();\n      // OPTIMIZED: Refresh sell statuses every 60 seconds (reduced from 30s)\n      const interval = setInterval(loadSellStatuses, 60000);\n      return () => clearInterval(interval);\n    }\n  }, [exhibitionButterflies, exhibitionVipButterflies]);\n\n  // Initialize to saved frame preference or fallback to newest frame with butterflies\n  useEffect(() => {\n    if (frames.length > 0) {\n      const savedFrameIndex = getLastViewedFrame();\n      let targetIndex = 0;\n      \n      // Check if saved index is valid\n      if (savedFrameIndex !== null && savedFrameIndex >= 0 && savedFrameIndex < frames.length) {\n        targetIndex = savedFrameIndex;\n      } else if (exhibitionButterflies.length > 0 || exhibitionVipButterflies.length > 0) {\n        // Find the last frame that has butterflies (fallback behavior)\n        let lastFrameWithButterflies = -1;\n        \n        for (let i = frames.length - 1; i >= 0; i--) {\n          const frameId = frames[i].id;\n          const hasNormalButterflies = exhibitionButterflies.some(b => b.frameId === frameId);\n          const hasVipButterflies = exhibitionVipButterflies.some(b => b.frameId === frameId);\n          \n          if (hasNormalButterflies || hasVipButterflies) {\n            lastFrameWithButterflies = i;\n            break;\n          }\n        }\n        \n        targetIndex = lastFrameWithButterflies >= 0 ? lastFrameWithButterflies : frames.length - 1;\n      } else {\n        // If no butterflies yet, just go to the last frame\n        targetIndex = frames.length - 1;\n      }\n      \n      // Only set if current index is invalid or this is the initial load\n      if (currentFrameIndex === 0 || currentFrameIndex >= frames.length) {\n        setCurrentFrameIndex(targetIndex);\n        saveLastViewedFrame(targetIndex);\n      }\n    }\n  }, [frames.length, exhibitionButterflies.length, exhibitionVipButterflies.length]);\n\n  const fetchExhibitionData = async () => {\n    if (!user) return;\n    try {\n      const [framesRes, butterfliesRes, vipButterfliesRes] = await Promise.all([\n        fetch(`/api/user/${user.id}/exhibition-frames`),\n        fetch(`/api/user/${user.id}/exhibition-butterflies`),\n        fetch(`/api/user/${user.id}/exhibition-vip-butterflies`)\n      ]);\n      \n      if (framesRes.ok && butterfliesRes.ok && vipButterfliesRes.ok) {\n        const framesData = await framesRes.json();\n        const butterfliesData = await butterfliesRes.json();\n        const vipButterfliesData = await vipButterfliesRes.json();\n        setFrames(framesData.frames || []);\n        setExhibitionButterflies(butterfliesData.butterflies || []);\n        setExhibitionVipButterflies(vipButterfliesData.vipButterflies || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch exhibition data:', error);\n    }\n  };\n\n  const fetchUserButterflies = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/butterflies`);\n      if (response.ok) {\n        const data = await response.json();\n        setUserButterflies(data.butterflies || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch user butterflies:', error);\n    }\n  };\n\n  const fetchUserVipButterflies = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/vip-butterflies`);\n      if (response.ok) {\n        const data = await response.json();\n        setUserVipButterflies(data.vipButterflies || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch user VIP butterflies:', error);\n    }\n  };\n\n  const loadFrameLikes = async () => {\n    if (!user) return;\n    \n    try {\n      const response = await fetch(`/api/user/${user.id}/exhibition/${user.id}/likes`);\n      if (response.ok) {\n        const data = await response.json();\n        setFrameLikes(data.likes || []);\n      }\n    } catch (error) {\n      console.error('Failed to load frame likes:', error);\n    }\n  };\n\n  const processPassiveIncome = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch('/api/exhibition/process-income', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({ userId: user.id })\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        if (data.creditsEarned && data.creditsEarned > 0) {\n          // Update credits in store\n          const currentUser = await fetch(`/api/user/${user.id}/credits`);\n          if (currentUser.ok) {\n            const creditsData = await currentUser.json();\n            setCredits(creditsData.credits);\n          }\n          \n          // Show notification about earned credits\n          console.log(`💰 ${data.creditsEarned} Credits aus der Ausstellung erhalten!`);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to process passive income:', error);\n    }\n  };\n\n  const purchaseFrame = async () => {\n    if (!user || isLoading) return;\n    \n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/exhibition/purchase-frame', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({ userId: user.id })\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setCredits(data.newCredits);\n        await fetchExhibitionData();\n      } else {\n        const error = await response.json();\n        alert(error.message || 'Fehler beim Kauf des Rahmens');\n      }\n    } catch (error) {\n      console.error('Failed to purchase frame:', error);\n      alert('Fehler beim Kauf des Rahmens');\n    }\n    setIsLoading(false);\n  };\n\n  const getFrameCost = (): number => {\n    const frameCount = frames.length;\n    if (frameCount === 0) return 0; // First frame is free\n    return Math.round(500 * Math.pow(1.6, frameCount - 1));\n  };\n\n  // Calculate current Cr/h based on degradation over 72 hours with like bonus\n  const getCurrentCrPerHour = (rarity: string, isVip?: boolean, placedAt?: string, frameId?: number): number => {\n    let baseValue: number;\n    \n    if (isVip || rarity === 'vip') {\n      // VIP butterflies: 60 Cr/h → 6 Cr/h over 72 hours\n      const startValue = 60;\n      const minValue = 6;\n      baseValue = calculateDegradedValue(startValue, minValue, placedAt);\n    } else {\n      const rarityValues = {\n        'common': { start: 1, min: 1 },       // No degradation for Common\n        'uncommon': { start: 2, min: 1 },     // 2 → 1 Cr/h\n        'rare': { start: 5, min: 1 },         // 5 → 1 Cr/h  \n        'super-rare': { start: 10, min: 1 },  // 10 → 1 Cr/h\n        'epic': { start: 20, min: 2 },        // 20 → 2 Cr/h\n        'legendary': { start: 50, min: 5 },   // 50 → 5 Cr/h\n        'mythical': { start: 100, min: 10 }   // 100 → 10 Cr/h\n      };\n\n      const values = rarityValues[rarity as keyof typeof rarityValues] || { start: 1, min: 1 };\n      baseValue = calculateDegradedValue(values.start, values.min, placedAt);\n    }\n    \n    // Apply like bonus: 2% per like for 72 hours\n    if (frameId && frameLikes) {\n      const frameWithLikes = frameLikes.find(f => f.frameId === frameId);\n      const likesCount = frameWithLikes ? frameWithLikes.totalLikes : 0;\n      const likeBonus = 1 + (likesCount * 0.02); // 2% per like\n      baseValue = Math.round(baseValue * likeBonus);\n    }\n    \n    return baseValue;\n  };\n\n  // Calculate degraded value over 72 hours\n  const calculateDegradedValue = (startValue: number, minValue: number, placedAt?: string): number => {\n    if (!placedAt) return startValue;\n\n    const placedTime = new Date(placedAt).getTime();\n    const now = new Date().getTime();\n    const timeSincePlacement = now - placedTime;\n    const SEVENTY_TWO_HOURS = 72 * 60 * 60 * 1000;\n\n    // If less than 72 hours have passed, calculate degradation\n    if (timeSincePlacement < SEVENTY_TWO_HOURS) {\n      const degradationProgress = timeSincePlacement / SEVENTY_TWO_HOURS; // 0 to 1\n      const valueRange = startValue - minValue;\n      const currentValue = startValue - (valueRange * degradationProgress);\n      return Math.max(Math.round(currentValue), minValue);\n    }\n\n    // After 72 hours, return minimum value\n    return minValue;\n  };\n\n  const getFrameHourlyIncome = (frameId: number): number => {\n    // Income from normal butterflies in this frame with time-based degradation and like bonus\n    const frameButterflies = exhibitionButterflies.filter(b => b.frameId === frameId);\n    const normalIncome = frameButterflies.reduce((total, butterfly) => {\n      return total + getCurrentCrPerHour(butterfly.butterflyRarity, false, butterfly.placedAt, butterfly.frameId);\n    }, 0);\n    \n    // Income from VIP butterflies in this frame with time-based degradation and like bonus\n    const frameVipButterflies = exhibitionVipButterflies.filter(b => b.frameId === frameId);\n    const vipIncome = frameVipButterflies.reduce((total, vipButterfly) => {\n      return total + getCurrentCrPerHour('vip', true, vipButterfly.placedAt, vipButterfly.frameId);\n    }, 0);\n    \n    return normalIncome + vipIncome;\n  };\n\n  const getTotalHourlyIncome = (): number => {\n    // Calculate income from normal butterflies with time-based degradation and like bonus\n    const normalIncome = exhibitionButterflies.reduce((total, butterfly) => {\n      return total + getCurrentCrPerHour(butterfly.butterflyRarity, false, butterfly.placedAt, butterfly.frameId);\n    }, 0);\n    \n    // Add income from VIP butterflies with time-based degradation and like bonus\n    const vipIncome = exhibitionVipButterflies.reduce((total, vipButterfly) => {\n      return total + getCurrentCrPerHour('vip', true, vipButterfly.placedAt, vipButterfly.frameId);\n    }, 0);\n    \n    return normalIncome + vipIncome;\n  };\n\n  // Navigation helpers\n  const getAllButterflies = () => {\n    // Combine normal and VIP butterflies for navigation\n    const normalButterflies = exhibitionButterflies.map(b => ({ ...b, isVip: false }));\n    const vipButterflies = exhibitionVipButterflies.map(vip => ({ \n      id: vip.id,\n      userId: vip.userId,\n      frameId: vip.frameId,\n      slotIndex: vip.slotIndex,\n      butterflyId: vip.vipButterflyId,\n      butterflyName: vip.vipButterflyName,\n      butterflyRarity: 'vip' as const,\n      butterflyImageUrl: vip.vipButterflyImageUrl,\n      placedAt: vip.placedAt,\n      createdAt: vip.createdAt,\n      isVip: true\n    }));\n    return [...normalButterflies, ...vipButterflies];\n  };\n\n  const navigateToNextButterfly = () => {\n    const allButterflies = getAllButterflies();\n    if (allButterflies.length <= 1) return;\n    \n    const nextIndex = (currentButterflyIndex + 1) % allButterflies.length;\n    const nextButterfly = allButterflies[nextIndex];\n    setCurrentButterflyIndex(nextIndex);\n    setSelectedButterfly(nextButterfly);\n  };\n\n  const navigateToPreviousButterfly = () => {\n    const allButterflies = getAllButterflies();\n    if (allButterflies.length <= 1) return;\n    \n    const prevIndex = currentButterflyIndex === 0 ? allButterflies.length - 1 : currentButterflyIndex - 1;\n    const prevButterfly = allButterflies[prevIndex];\n    setCurrentButterflyIndex(prevIndex);\n    setSelectedButterfly(prevButterfly);\n  };\n\n  const handleButterflyClick = (butterfly: ExhibitionButterfly) => {\n    // Add frameId to the butterfly data for the modal\n    const butterflyWithFrame = {\n      ...butterfly,\n      frameId: butterfly.frameId\n    };\n    \n    // Find the index of this butterfly in the combined list\n    const allButterflies = getAllButterflies();\n    const butterflyIndex = allButterflies.findIndex(b => b.id === butterfly.id && !b.isVip);\n    \n    setCurrentButterflyIndex(butterflyIndex >= 0 ? butterflyIndex : 0);\n    setSelectedButterfly(butterflyWithFrame);\n    setShowButterflyDialog(true);\n  };\n\n  const handleVipButterflyClick = (vipButterfly: any) => {\n    // Convert VIP butterfly to normal butterfly format for the modal\n    const butterflyForModal = {\n      id: vipButterfly.id,\n      userId: vipButterfly.userId,\n      frameId: vipButterfly.frameId,\n      slotIndex: vipButterfly.slotIndex,\n      butterflyId: vipButterfly.vipButterflyId,\n      butterflyName: vipButterfly.vipButterflyName,\n      butterflyRarity: 'vip',\n      butterflyImageUrl: vipButterfly.vipButterflyImageUrl,\n      placedAt: vipButterfly.placedAt,\n      createdAt: vipButterfly.createdAt,\n      isVip: true\n    };\n    \n    // Find the index of this VIP butterfly in the combined list\n    const allButterflies = getAllButterflies();\n    const butterflyIndex = allButterflies.findIndex(b => b.id === vipButterfly.id && b.isVip);\n    \n    setCurrentButterflyIndex(butterflyIndex >= 0 ? butterflyIndex : 0);\n    setSelectedButterfly(butterflyForModal);\n    setShowButterflyDialog(true);\n  };\n\n  const handleEmptySlotClick = (frameId: number, slotIndex: number) => {\n    setSelectedSlot({ frameId, slotIndex });\n    \n    // Show appropriate inventory dialog based on available butterflies\n    if (userVipButterflies.length > 0 && userButterflies.length > 0) {\n      // Ask user which type they want to place\n      const choice = window.confirm(\"VIP-Schmetterling verwenden? \\n\\nOK = VIP-Schmetterling\\nAbbrechen = Normaler Schmetterling\");\n      if (choice) {\n        setShowVipInventoryDialog(true);\n      } else {\n        setShowInventoryDialog(true);\n      }\n    } else if (userVipButterflies.length > 0) {\n      setShowVipInventoryDialog(true);\n    } else {\n      setShowInventoryDialog(true);\n    }\n  };\n\n  const placeButterflyInSlot = async (butterflyId: number) => {\n    if (!selectedSlot || !user) return;\n    \n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/exhibition/place-butterfly', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({ \n          userId: user.id, \n          frameId: selectedSlot.frameId, \n          slotIndex: selectedSlot.slotIndex, \n          butterflyId \n        })\n      });\n      \n      if (response.ok) {\n        await fetchExhibitionData();\n        await fetchUserButterflies();\n        await fetchUserVipButterflies();\n        await loadFrameLikes();\n        setShowInventoryDialog(false);\n        setSelectedSlot(null);\n      } else {\n        const error = await response.json();\n        alert(error.message || 'Fehler beim Platzieren des Schmetterlings');\n      }\n    } catch (error) {\n      console.error('Failed to place butterfly:', error);\n      alert('Fehler beim Platzieren des Schmetterlings');\n    }\n    setIsLoading(false);\n  };\n\n  const placeVipButterflyInSlot = async (vipButterflyId: number) => {\n    if (!selectedSlot || !user) return;\n    \n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/exhibition/place-vip-butterfly', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({ \n          userId: user.id, \n          frameId: selectedSlot.frameId, \n          slotIndex: selectedSlot.slotIndex, \n          vipButterflyId \n        })\n      });\n      \n      if (response.ok) {\n        await fetchExhibitionData();\n        await fetchUserButterflies();\n        await fetchUserVipButterflies();\n        await loadFrameLikes();\n        setShowVipInventoryDialog(false);\n        setSelectedSlot(null);\n      } else {\n        const error = await response.json();\n        alert(error.message || 'Fehler beim Platzieren des VIP-Schmetterlings');\n      }\n    } catch (error) {\n      console.error('Failed to place VIP butterfly:', error);\n      alert('Fehler beim Platzieren des VIP-Schmetterlings');\n    }\n    setIsLoading(false);\n  };\n\n  const renderFrame = (frame: ExhibitionFrame, index: number) => {\n    const frameButterflies = exhibitionButterflies.filter(b => b.frameId === frame.id);\n    const frameVipButterflies = exhibitionVipButterflies.filter(b => b.frameId === frame.id);\n    const totalButterflies = frameButterflies.length + frameVipButterflies.length;\n    const isFullFrame = totalButterflies === 10;\n    const frameLike = frameLikes.find(fl => fl.frameId === frame.id);\n    \n    return (\n      <Card key={frame.id} className=\"bg-gradient-to-br from-amber-900 to-amber-800 border-amber-700 shadow-2xl\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"text-amber-100 text-center flex items-center justify-between text-xl\">\n            <div className=\"flex items-center\">\n              <Trophy className=\"h-6 w-6 mr-3 text-amber-300\" />\n              <span>Rahmen #{frame.frameNumber} ({getFrameHourlyIncome(frame.id)} cr/h)</span>\n              {isFullFrame && (\n                <span className=\"ml-3 text-sm bg-green-600 text-white px-3 py-1 rounded-full animate-pulse shadow-lg\">\n                  ✨ Vollständig\n                </span>\n              )}\n              {!isFullFrame && (\n                <span className=\"ml-3 text-sm bg-amber-600 text-amber-100 px-3 py-1 rounded-full\">\n                  {totalButterflies}/6\n                </span>\n              )}\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              {/* Likes Display */}\n              {(frameLike?.totalLikes || 0) > 0 && (\n                <div className=\"flex items-center text-pink-300\">\n                  <Star className=\"h-5 w-5 mr-2 fill-pink-300\" />\n                  <span className=\"text-base\">{frameLike?.totalLikes}</span>\n                  {isFullFrame && (\n                    <span className=\"ml-2 text-sm text-green-300\">(+{frameLike?.totalLikes * 2}% Einkommen)</span>\n                  )}\n                </div>\n              )}\n              \n              {/* Navigation Controls */}\n              {frames.length > 1 && (\n                <div className=\"flex items-center space-x-3 bg-amber-800/60 rounded-lg px-3 py-2 border border-amber-600\">\n                  <Button\n                    onClick={() => {\n                      const newIndex = Math.max(0, currentFrameIndex - 1);\n                      setCurrentFrameIndex(newIndex);\n                      saveLastViewedFrame(newIndex);\n                    }}\n                    disabled={currentFrameIndex === 0}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"bg-amber-700 border-amber-500 hover:bg-amber-600 text-amber-100 disabled:opacity-50 h-8 w-8 p-0\"\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  \n                  <div className=\"text-base font-semibold text-amber-100 px-3\">\n                    #{frame.frameNumber} / {frames.length}\n                  </div>\n                  \n                  <Button\n                    onClick={() => {\n                      const newIndex = Math.min(frames.length - 1, currentFrameIndex + 1);\n                      setCurrentFrameIndex(newIndex);\n                      saveLastViewedFrame(newIndex);\n                    }}\n                    disabled={currentFrameIndex >= frames.length - 1}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"bg-amber-700 border-amber-500 hover:bg-amber-600 text-amber-100 disabled:opacity-50 h-8 w-8 p-0\"\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              )}\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Wood frame effect */}\n          <div className=\"bg-gradient-to-br from-amber-700 to-amber-900 p-8 rounded-lg border-4 border-amber-600 shadow-inner\">\n            <div className=\"bg-slate-100 p-7 rounded grid grid-cols-3 grid-rows-2 gap-3 h-[800px] place-items-center\">\n              {Array.from({ length: 6 }, (_, slotIndex) => {\n                const butterfly = frameButterflies.find(b => b.slotIndex === slotIndex);\n                const vipButterfly = frameVipButterflies.find(b => b.slotIndex === slotIndex);\n                const hasContent = butterfly || vipButterfly;\n                \n                return (\n                  <div \n                    key={slotIndex}\n                    className=\"aspect-square bg-white border border-slate-300 rounded flex items-center justify-center overflow-hidden shadow-md hover:shadow-lg transition-shadow min-h-0\"\n                  >\n                    {hasContent ? (\n                      vipButterfly ? (\n                        // VIP Butterfly Display\n                        <ButterflyHoverPreview\n                          butterflyImageUrl={vipButterfly.vipButterflyImageUrl}\n                          butterflyName={vipButterfly.vipButterflyName}\n                          rarity=\"vip\" as any\n                          placedAt={vipButterfly.placedAt}\n                          canSell={sellStatuses[`vip-${vipButterfly.id}`]?.canSell}\n                          timeRemainingMs={sellStatuses[`vip-${vipButterfly.id}`]?.timeRemainingMs}\n                        >\n                          <div \n                            className=\"w-full h-full cursor-pointer relative group bg-gradient-to-br from-pink-800/50 to-purple-800/50 rounded border-2 border-pink-500\"\n                            onClick={() => handleVipButterflyClick(vipButterfly)}\n                          >\n                            {/* Animated sparkle overlay */}\n                            <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/10 to-purple-500/10 rounded animate-pulse\"></div>\n                            \n                            <img\n                              src={vipButterfly.vipButterflyImageUrl}\n                              alt={vipButterfly.vipButterflyName}\n                              className=\"w-full h-full object-cover rounded transition-transform group-hover:scale-105 relative z-10\"\n                              onError={(e) => {\n                                e.currentTarget.style.display = 'none';\n                              }}\n                            />\n                            \n                            {/* VIP Crown Icon */}\n                            <div className=\"absolute top-1 right-1 bg-yellow-400 rounded-full p-1 z-20\">\n                              <Star className=\"w-3 h-3 text-yellow-900\" fill=\"currentColor\" />\n                            </div>\n                            \n                            <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-opacity rounded flex items-center justify-center z-20\">\n                              <Info className=\"h-6 w-6 text-white opacity-0 group-hover:opacity-100 transition-opacity\" />\n                            </div>\n                          </div>\n                        </ButterflyHoverPreview>\n                      ) : (\n                        // Normal Butterfly Display\n                        <ButterflyHoverPreview\n                          butterflyImageUrl={butterfly.butterflyImageUrl}\n                          butterflyName={butterfly.butterflyName}\n                          rarity={butterfly.butterflyRarity as RarityTier}\n                          placedAt={butterfly.placedAt}\n                          canSell={sellStatuses[`normal-${butterfly.id}`]?.canSell}\n                          timeRemainingMs={sellStatuses[`normal-${butterfly.id}`]?.timeRemainingMs}\n                        >\n                          <div \n                            className=\"w-full h-full cursor-pointer relative group\"\n                            onClick={() => handleButterflyClick(butterfly)}\n                          >\n                            <RarityImage\n                              src={butterfly.butterflyImageUrl}\n                              alt={butterfly.butterflyName}\n                              rarity={butterfly.butterflyRarity as RarityTier}\n                              size=\"medium\"\n                              className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n                            />\n                            <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-opacity rounded flex items-center justify-center\">\n                              <Info className=\"h-6 w-6 text-white opacity-0 group-hover:opacity-100 transition-opacity\" />\n                            </div>\n                          </div>\n                        </ButterflyHoverPreview>\n                      )\n                    ) : (\n                      <div \n                        className=\"w-full h-full flex items-center justify-center cursor-pointer hover:bg-slate-50 transition-colors\"\n                        onClick={() => handleEmptySlotClick(frame.id, slotIndex)}\n                      >\n                        <div className=\"text-slate-400 text-4xl hover:text-slate-600\">+</div>\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Card className=\"bg-slate-800 border-slate-700 text-white\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-slate-400\">Bitte melde dich an, um die Ausstellung zu besuchen</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-8 bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 min-h-full\">\n      {/* Exhibition Header with Stats */}\n      <div className=\"bg-slate-800/60 p-6 rounded-lg border border-purple-500/30\">\n        {/* Title Section */}\n        <div className=\"relative mb-4\">\n          {/* HelpButton in absoluter Position rechts oben */}\n          <div className=\"absolute top-0 right-0\">\n            <HelpButton helpText=\"In der Ausstellung präsentierst du deine schönsten Schmetterlinge in Rahmen! Du verdienst passiv Credits pro Stunde basierend auf der Rarität deiner ausgestellten Schmetterlinge. VIP-Schmetterlinge bringen noch mehr Credits!\" viewType=\"exhibition\" />\n          </div>\n          \n          {/* Zentrierter Content */}\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-purple-300 mb-1\">\n              Schmetterlingsausstellung 🦋\n            </h1>\n            <p className=\"text-slate-400 text-sm\">Stelle deine Schmetterlinge aus</p>\n          </div>\n        </div>\n        \n        {/* Compact Stats */}\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"bg-gradient-to-br from-green-800/40 to-emerald-800/40 border border-green-500/30 rounded-lg p-3 text-center\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <DollarSign className=\"h-3 w-3 text-green-400 mr-1\" />\n              <span className=\"text-xs font-semibold text-green-300\">Einkommen</span>\n            </div>\n            <div className=\"text-lg font-bold text-green-400\">{getTotalHourlyIncome()} Cr/h</div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-blue-800/40 to-indigo-800/40 border border-blue-500/30 rounded-lg p-3 text-center\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <Star className=\"h-3 w-3 text-blue-400 mr-1\" />\n              <span className=\"text-xs font-semibold text-blue-300\">Schmetterlinge</span>\n            </div>\n            <div className=\"text-lg font-bold text-blue-400\">{exhibitionButterflies.length}</div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-amber-800/40 to-orange-800/40 border border-amber-500/30 rounded-lg p-3 text-center\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <Trophy className=\"h-3 w-3 text-amber-400 mr-1\" />\n              <span className=\"text-xs font-semibold text-amber-300\">Rahmen</span>\n            </div>\n            <div className=\"text-lg font-bold text-amber-400\">{frames.length}</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Frame Display */}\n      {frames.length > 0 && (\n        <div className=\"max-w-7xl mx-auto\">\n          {frames[currentFrameIndex] && renderFrame(frames[currentFrameIndex], currentFrameIndex)}\n        </div>\n      )}\n      \n      {/* Compact Purchase New Frame Button */}\n      <Card className=\"bg-gradient-to-br from-purple-800/40 to-indigo-800/40 border border-purple-500/30 border-dashed shadow-lg\">\n        <CardContent className=\"p-4\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-3 mb-3\">\n              <Trophy className=\"h-6 w-6 text-amber-400\" />\n              <h3 className=\"text-lg font-semibold text-white\">\n                {frames.length === 0 ? 'Erster Rahmen kostenlos!' : `Neuer Rahmen - ${getFrameCost()} Cr`}\n              </h3>\n            </div>\n            <Button \n              onClick={purchaseFrame}\n              disabled={isLoading || (frames.length > 0 && credits < getFrameCost())}\n              className=\"bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white font-semibold py-2 px-6 rounded-lg transition-all duration-300\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {frames.length === 0 ? 'Kostenlosen Rahmen holen' : `Rahmen kaufen (${getFrameCost()} Cr)`}\n            </Button>\n            {frames.length > 0 && credits < getFrameCost() && (\n              <p className=\"text-red-400 text-sm mt-2\">⚠️ Nicht genügend Credits</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Butterfly Detail Modal */}\n      <ButterflyDetailModal\n        butterfly={selectedButterfly ? {\n          id: selectedButterfly.id,\n          butterflyName: selectedButterfly.butterflyName,\n          butterflyRarity: selectedButterfly.butterflyRarity,\n          butterflyImageUrl: selectedButterfly.butterflyImageUrl,\n          placedAt: typeof selectedButterfly.placedAt === 'string' ? selectedButterfly.placedAt : selectedButterfly.placedAt.toISOString(),\n          userId: selectedButterfly.userId\n        } : null}\n        isOpen={showButterflyDialog}\n        onClose={() => setShowButterflyDialog(false)}\n        onSold={() => {\n          fetchExhibitionData();\n          fetchUserButterflies();\n          fetchUserVipButterflies();\n        }}\n        currentIndex={currentButterflyIndex}\n        totalCount={getAllButterflies().length}\n        onNext={navigateToNextButterfly}\n        onPrevious={navigateToPreviousButterfly}\n      />\n\n      {/* Butterfly Inventory Dialog */}\n      <Dialog open={showInventoryDialog} onOpenChange={setShowInventoryDialog}>\n        <DialogContent className=\"bg-slate-900 border-slate-600 text-white max-w-4xl max-h-[80vh]\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center text-xl font-bold\">\n              Schmetterling auswählen\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"max-h-96 overflow-y-auto\">\n            {userButterflies.length === 0 ? (\n              <div className=\"text-center py-8 text-slate-400\">\n                Keine Schmetterlinge im Inventar\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {userButterflies\n                  .filter((butterfly) => {\n                    // Filter out butterflies that are already in this frame\n                    if (!selectedSlot) return true;\n                    const butterfliesInFrame = exhibitionButterflies.filter(eb => eb.frameId === selectedSlot.frameId);\n                    return !butterfliesInFrame.some(eb => eb.butterflyId === butterfly.butterflyId);\n                  })\n                  .map((butterfly) => (\n                  <Card\n                    key={butterfly.id}\n                    className=\"bg-slate-800 border-slate-600 cursor-pointer hover:bg-slate-700 transition-colors\"\n                    onClick={() => placeButterflyInSlot(butterfly.butterflyId)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <ButterflyHoverPreview\n                        butterflyImageUrl={butterfly.butterflyImageUrl}\n                        butterflyName={butterfly.butterflyName}\n                        rarity={butterfly.butterflyRarity as RarityTier}\n                      >\n                        <div className=\"text-center\">\n                          <RarityImage \n                            src={butterfly.butterflyImageUrl}\n                            alt={butterfly.butterflyName}\n                            rarity={butterfly.butterflyRarity as RarityTier}\n                            size=\"large\"\n                            className=\"w-16 h-16 mx-auto mb-2\"\n                          />\n                          <div className=\"text-sm font-semibold text-white mb-1\">\n                            {butterfly.butterflyName}\n                          </div>\n                          <div className={`text-xs ${getRarityColor(butterfly.butterflyRarity as RarityTier)} mb-1`}>\n                            {getRarityDisplayName(butterfly.butterflyRarity as RarityTier)}\n                          </div>\n                          <div className=\"text-xs text-slate-400\">\n                            Anzahl: {butterfly.quantity}\n                          </div>\n                        </div>\n                      </ButterflyHoverPreview>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* VIP Butterfly Inventory Dialog */}\n      <Dialog open={showVipInventoryDialog} onOpenChange={setShowVipInventoryDialog}>\n        <DialogContent className=\"bg-gradient-to-br from-pink-900 to-purple-900 border-pink-500 text-white max-w-4xl max-h-[80vh]\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center text-xl font-bold text-pink-200 flex items-center justify-center gap-2\">\n              <Star className=\"h-6 w-6 text-pink-400\" fill=\"currentColor\" />\n              VIP-Schmetterling auswählen ✨👑\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"max-h-96 overflow-y-auto\">\n            {userVipButterflies.length === 0 ? (\n              <div className=\"text-center py-8 text-pink-300\">\n                Keine VIP-Schmetterlinge im Inventar\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {userVipButterflies.map((vipButterfly) => (\n                  <Card\n                    key={vipButterfly.id}\n                    className=\"bg-gradient-to-r from-pink-800/50 to-purple-800/50 border-pink-500 cursor-pointer hover:from-pink-700/60 hover:to-purple-700/60 transition-colors relative\"\n                    onClick={() => placeVipButterflyInSlot(vipButterfly.vipButterflyId)}\n                  >\n                    {/* Animated sparkle overlay */}\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/10 to-purple-500/10 rounded-lg animate-pulse\"></div>\n                    \n                    <CardContent className=\"p-4 relative z-10\">\n                      <div className=\"text-center\">\n                        {/* VIP GIF Display */}\n                        <div className=\"relative mb-2\">\n                          <img\n                            src={vipButterfly.vipButterflyImageUrl}\n                            alt={vipButterfly.vipButterflyName}\n                            className=\"w-16 h-16 mx-auto rounded-lg object-cover\"\n                            onError={(e) => {\n                              e.currentTarget.style.display = 'none';\n                            }}\n                          />\n                          {/* VIP Crown Icon */}\n                          <div className=\"absolute -top-1 -right-1 bg-yellow-400 rounded-full p-1\">\n                            <Star className=\"w-3 h-3 text-yellow-900\" fill=\"currentColor\" />\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-sm font-semibold text-pink-200 mb-1 flex items-center justify-center gap-1\">\n                          {vipButterfly.vipButterflyName}\n                          <span className=\"text-yellow-400\">👑</span>\n                        </div>\n                        <div className=\"text-xs text-pink-300 font-semibold mb-1\">\n                          ✨ VIP Premium\n                        </div>\n                        <div className=\"text-xs text-pink-400\">\n                          Anzahl: {vipButterfly.quantity}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};","size_bytes":43597},"client/src/components/Footer.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Flower,\n  Package,\n  Flower2,\n  Trophy,\n  Store,\n  Zap,\n  Waves,\n  Fish,\n  Coins,\n  Dna,\n  Castle,\n  Lock,\n  Crown\n} from \"lucide-react\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\ninterface FooterProps {\n  activeView: string;\n  onViewChange: (view: string) => void;\n}\n\nexport const Footer: React.FC<FooterProps> = ({ activeView, onViewChange }) => {\n  const { user } = useAuth();\n  const [unlockedFeatures, setUnlockedFeatures] = useState<string[]>([]);\n  const [userCredits, setUserCredits] = useState(0);\n  const [userHearts, setUserHearts] = useState(0);\n\n  // Feature costs\n  const featureCosts: { [key: string]: number } = {\n    'marie-slot': 1000,\n    'dna': 3500,\n    'schlossgarten': 8000\n  };\n\n  // Get unlocked features, user credits and hearts\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!user?.id) return;\n\n      try {\n        // Get unlocked features\n        const unlockedResponse = await fetch(`/api/user/${user.id}/unlocked-features`);\n        if (unlockedResponse.ok) {\n          const { unlockedFeatures: features } = await unlockedResponse.json();\n          setUnlockedFeatures(features);\n        }\n\n        // Get user credits\n        const creditsResponse = await fetch(`/api/user/${user.id}/credits`);\n        if (creditsResponse.ok) {\n          const { credits } = await creditsResponse.json();\n          setUserCredits(credits);\n        }\n\n        // Get user hearts\n        const heartsResponse = await fetch(`/api/user/${user.id}/hearts`);\n        if (heartsResponse.ok) {\n          const { hearts } = await heartsResponse.json();\n          setUserHearts(hearts);\n        }\n      } catch (error) {\n        console.error('Failed to fetch user data:', error);\n      }\n    };\n\n    fetchData();\n    \n    // Refresh every 5 seconds to keep hearts up to date\n    const interval = setInterval(fetchData, 5000);\n    return () => clearInterval(interval);\n  }, [user?.id]);\n\n  const unlockFeature = async (featureName: string) => {\n    if (!user?.id) return;\n\n    try {\n      const response = await fetch(`/api/user/${user.id}/unlock-feature`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ featureName })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        setUnlockedFeatures(prev => [...prev, featureName]);\n        setUserCredits(result.newCredits);\n        console.log(`🔓 Feature ${featureName} unlocked!`);\n      } else {\n        const error = await response.json();\n        console.error('Failed to unlock feature:', error.error);\n      }\n    } catch (error) {\n      console.error('Failed to unlock feature:', error);\n    }\n  };\n\n  const isFeatureLocked = (featureId: string) => {\n    return featureCosts[featureId] && !unlockedFeatures.includes(featureId);\n  };\n\n  const canAffordFeature = (featureId: string) => {\n    const cost = featureCosts[featureId];\n    return cost && userCredits >= cost;\n  };\n\n  const handleItemClick = (item: any) => {\n    if (isFeatureLocked(item.id)) {\n      return; // Don't navigate, show unlock dialog instead\n    }\n    onViewChange(item.id);\n  };\n\n  // Check if vasen is unlocked (requires >1000 hearts)\n  const isVasenUnlocked = userHearts > 1000;\n\n  const navigationItems = [\n    { id: \"garten\", label: \"Garten\", icon: Flower },\n    { id: \"teich\", label: \"Teich\", icon: Waves },\n    { id: \"markt\", label: \"Markt\", icon: Store },\n    { id: \"inventar\", label: \"Inventar\", icon: Package },\n    { id: \"dna\", label: \"DNA\", icon: Dna, lockable: true },\n    { id: \"bouquets\", label: \"Bouquets\", icon: Flower2 },\n    { id: \"flowerpower\", label: \"Flowerpower\", icon: Zap },\n    { id: \"ausstellung\", label: \"Ausstellung\", icon: Trophy },\n    { id: \"aquarium\", label: \"Aquarium\", icon: Fish },\n    ...(isVasenUnlocked ? [{ id: \"vasen\", label: \"Vasen\", icon: Crown }] : []),\n    { id: \"marie-slot\", label: \"Marie-Slot\", icon: Coins, lockable: true },\n    { id: \"schlossgarten\", label: \"Schlossgarten\", icon: Castle, lockable: true },\n  ];\n\n  return (\n    <footer className=\"bg-slate-900 border-t border-slate-700 px-2 sm:px-6 py-2 sm:py-4 flex-shrink-0 safe-area-bottom\">\n      <div className=\"flex justify-center\">\n        <div className=\"flex space-x-1 sm:space-x-2 w-full max-w-md justify-between sm:justify-center\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = activeView === item.id;\n            const locked = isFeatureLocked(item.id);\n            const canAfford = canAffordFeature(item.id);\n            const cost = featureCosts[item.id];\n            \n            // Special case for vasen - different unlock requirement\n            if (item.id === \"vasen\" && !isVasenUnlocked) {\n              return (\n                <TooltipProvider key={item.id}>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div className=\"flex flex-col items-center flex-1 sm:flex-none\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"flex flex-col sm:flex-row items-center space-y-1 sm:space-y-0 sm:space-x-2 px-2 sm:px-4 py-3 sm:py-2 touch-target min-h-[44px] text-slate-500 hover:text-slate-400 hover:bg-slate-800 relative w-full\"\n                        >\n                          <Lock className=\"h-3 w-3 absolute -top-1 -right-1\" />\n                          <Icon className=\"h-4 w-4 opacity-50\" />\n                          <span className=\"text-xs sm:text-sm opacity-50\">{item.label}</span>\n                        </Button>\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <div className=\"flex items-center gap-1\">\n                        <Lock className=\"h-3 w-3\" />\n                        <span>Benötigt über 1.000 💖 Schlosspark-Herzen</span>\n                      </div>\n                    </TooltipContent>\n                  </Tooltip>\n                </TooltipProvider>\n              );\n            }\n            \n            if (locked) {\n              return (\n                <AlertDialog key={item.id}>\n                  <TooltipProvider>\n                    <Tooltip>\n                      <TooltipTrigger asChild>\n                        <AlertDialogTrigger asChild>\n                          <div className=\"flex flex-col items-center flex-1 sm:flex-none\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"flex flex-col sm:flex-row items-center space-y-1 sm:space-y-0 sm:space-x-2 px-2 sm:px-4 py-3 sm:py-2 touch-target min-h-[44px] text-slate-500 hover:text-slate-400 hover:bg-slate-800 relative w-full\"\n                            >\n                              <Lock className=\"h-3 w-3 absolute -top-1 -right-1\" />\n                              <Icon className=\"h-4 w-4 opacity-50\" />\n                              <span className=\"text-xs sm:text-sm opacity-50\">{item.label}</span>\n                            </Button>\n                          </div>\n                        </AlertDialogTrigger>\n                      </TooltipTrigger>\n                      <TooltipContent>\n                        <div className=\"flex items-center gap-1\">\n                          <Lock className=\"h-3 w-3\" />\n                          <span>{cost?.toLocaleString()} Credits</span>\n                        </div>\n                      </TooltipContent>\n                    </Tooltip>\n                  </TooltipProvider>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>\n                        🔒 Feature freischalten: {item.label}\n                      </AlertDialogTitle>\n                      <AlertDialogDescription>\n                        Möchtest du <strong>{item.label}</strong> für <strong>{cost?.toLocaleString()} Credits</strong> freischalten?\n                        <br />\n                        <br />\n                        Deine aktuellen Credits: <strong>{userCredits.toLocaleString()}</strong>\n                        {!canAfford && (\n                          <p className=\"text-red-500 font-bold mt-2\">\n                            ⚠️ Du hast nicht genügend Credits!\n                          </p>\n                        )}\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel>Abbrechen</AlertDialogCancel>\n                      <AlertDialogAction\n                        onClick={() => unlockFeature(item.id)}\n                        disabled={!canAfford}\n                        className=\"bg-orange-600 hover:bg-orange-700\"\n                      >\n                        🔓 Freischalten ({cost?.toLocaleString()} Credits)\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n              );\n            }\n            \n            return (\n              <Button\n                key={item.id}\n                variant={isActive ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => handleItemClick(item)}\n                className={`flex flex-col sm:flex-row items-center space-y-1 sm:space-y-0 sm:space-x-2 px-2 sm:px-4 py-3 sm:py-2 touch-target min-h-[44px] ${\n                  isActive \n                    ? \"bg-orange-600 hover:bg-orange-700 text-white\" \n                    : \"text-slate-400 hover:text-white hover:bg-slate-800\"\n                } flex-1 sm:flex-none`}\n              >\n                <Icon className=\"h-4 w-4\" />\n                <span className=\"text-xs sm:text-sm\">{item.label}</span>\n              </Button>\n            );\n          })}\n        </div>\n      </div>\n    </footer>\n  );\n};\n","size_bytes":10434},"client/src/components/GameView.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { KeyboardControls } from \"@react-three/drei\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Gamepad2, Volume2, VolumeX, Pause, Play } from \"lucide-react\";\n\n// Define control keys for the game\nconst controls = [\n  { name: \"forward\", keys: [\"KeyW\", \"ArrowUp\"] },\n  { name: \"backward\", keys: [\"KeyS\", \"ArrowDown\"] },\n  { name: \"leftward\", keys: [\"KeyA\", \"ArrowLeft\"] },\n  { name: \"rightward\", keys: [\"KeyD\", \"ArrowRight\"] },\n  { name: \"action\", keys: [\"Space\"] },\n];\n\n// Simple game scene component\nconst GameScene: React.FC = () => {\n  return (\n    <>\n      {/* Lighting */}\n      <ambientLight intensity={0.4} />\n      <directionalLight position={[10, 10, 5]} intensity={0.8} />\n      \n      {/* Simple ground plane */}\n      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -1, 0]}>\n        <planeGeometry args={[20, 20]} />\n        <meshStandardMaterial color=\"#2a2a2a\" />\n      </mesh>\n      \n      {/* Sample game object */}\n      <mesh position={[0, 0, 0]}>\n        <boxGeometry args={[1, 1, 1]} />\n        <meshStandardMaterial color=\"#f97316\" />\n      </mesh>\n    </>\n  );\n};\n\nexport const GameView: React.FC = () => {\n  const { user } = useAuth();\n  const { phase, start, restart } = useGame();\n  const { toggleMute, isMuted } = useAudio();\n  const [isPaused, setIsPaused] = useState(false);\n\n  useEffect(() => {\n    // Reset game state when component mounts\n    restart();\n  }, [restart]);\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Card className=\"bg-slate-800 border-slate-700 text-white\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-slate-400\">Please log in to play games</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleStartGame = () => {\n    start();\n  };\n\n  const togglePause = () => {\n    setIsPaused(!isPaused);\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Game Header */}\n      <div className=\"bg-slate-800 border-b border-slate-700 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Gamepad2 className=\"h-6 w-6 text-orange-400\" />\n            <h2 className=\"text-xl font-bold text-white\">Game Arena</h2>\n            <span className=\"text-sm text-slate-400\">Phase: {phase}</span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={toggleMute}\n              className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n            >\n              {isMuted ? <VolumeX className=\"h-4 w-4\" /> : <Volume2 className=\"h-4 w-4\" />}\n            </Button>\n            \n            {phase === \"playing\" && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={togglePause}\n                className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n              >\n                {isPaused ? <Play className=\"h-4 w-4\" /> : <Pause className=\"h-4 w-4\" />}\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Game Content */}\n      <div className=\"flex-1 relative\">\n        {phase === \"ready\" && (\n          <div className=\"absolute inset-0 flex items-center justify-center z-10\">\n            <Card className=\"bg-slate-800 border-slate-700 text-white\">\n              <CardHeader>\n                <CardTitle className=\"text-center\">Ready to Play?</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-center text-slate-400\">\n                  Use WASD or arrow keys to move, Space for action\n                </p>\n                <Button \n                  onClick={handleStartGame}\n                  className=\"w-full bg-orange-600 hover:bg-orange-700\"\n                >\n                  Start Game\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {phase === \"ended\" && (\n          <div className=\"absolute inset-0 flex items-center justify-center z-10\">\n            <Card className=\"bg-slate-800 border-slate-700 text-white\">\n              <CardHeader>\n                <CardTitle className=\"text-center\">Game Over</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-center text-slate-400\">\n                  Good game! Ready for another round?\n                </p>\n                <Button \n                  onClick={restart}\n                  className=\"w-full bg-orange-600 hover:bg-orange-700\"\n                >\n                  Play Again\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* 3D Game Canvas */}\n        <KeyboardControls map={controls}>\n          <Canvas\n            shadows\n            camera={{\n              position: [0, 5, 10],\n              fov: 45,\n              near: 0.1,\n              far: 1000\n            }}\n            gl={{\n              antialias: true,\n              powerPreference: \"default\"\n            }}\n            style={{ \n              opacity: isPaused ? 0.5 : 1,\n              transition: 'opacity 0.3s ease'\n            }}\n          >\n            <color attach=\"background\" args={[\"#1e293b\"]} />\n            <GameScene />\n          </Canvas>\n        </KeyboardControls>\n      </div>\n\n      {/* Game Instructions */}\n      <div className=\"bg-slate-800 border-t border-slate-700 p-2\">\n        <div className=\"flex justify-center space-x-6 text-sm text-slate-400\">\n          <span>WASD/Arrows: Move</span>\n          <span>Space: Action</span>\n          <span>ESC: Pause</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n","size_bytes":6171},"client/src/components/GardenView.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { toast } from \"sonner\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useNotification } from \"../hooks/useNotification\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { useSuns } from \"@/lib/stores/useSuns\";\nimport { useSunSpawns } from \"@/lib/stores/useSunSpawns\";\nimport { SeedSelectionModal } from \"./SeedSelectionModal\";\nimport { SeedRewardDialog } from \"./SeedRewardDialog\";\nimport { BouquetSelectionModal } from \"./BouquetSelectionModal\";\nimport { RarityImage } from \"./RarityImage\";\nimport { FlowerHoverPreview } from \"./FlowerHoverPreview\";\nimport { ButterflyHoverPreview } from \"./ButterflyHoverPreview\";\nimport { getGrowthTime, formatTime, getRarityDisplayName, getRarityColor, type RarityTier } from \"@shared/rarity\";\nimport { \n  Flower,\n  Lock,\n  Coins,\n  Shovel,\n  Sprout,\n  Clock,\n  Heart,\n  Sparkles,\n  Sun\n} from \"lucide-react\";\nimport type { UserBouquet, PlacedBouquet, FieldButterfly } from \"@shared/schema\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { HelpButton } from \"./HelpButton\";\n\ninterface GardenField {\n  id: number;\n  isUnlocked: boolean;\n  hasPlant: boolean;\n  plantType?: string;\n  isGrowing?: boolean;\n  plantedAt?: Date;\n  growthTimeSeconds?: number;\n  seedRarity?: string;\n  flowerId?: number;\n  flowerName?: string;\n  flowerImageUrl?: string;\n  hasBouquet?: boolean;\n  bouquetId?: number;\n  bouquetName?: string;\n  bouquetRarity?: string;\n  bouquetPlacedAt?: Date;\n  bouquetExpiresAt?: Date;\n  hasButterfly?: boolean;\n  butterflyId?: number;\n  butterflyName?: string;\n  butterflyImageUrl?: string;\n  butterflyRarity?: string;\n  hasSunSpawn?: boolean;\n  sunSpawnAmount?: number;\n  sunSpawnExpiresAt?: Date;\n}\n\ninterface UserSeed {\n  id: number;\n  seedId: number;\n  seedName: string;\n  seedRarity: string;\n  quantity: number;\n}\n\n// Calculate background position for panoramic garden image\n// 50 fields in 10x5 grid from one 2:1 ratio image (Gardenview.png)\nconst getBackgroundPosition = (fieldIndex: number) => {\n  const column = fieldIndex % 10; // 0-9 columns\n  const row = Math.floor(fieldIndex / 10); // 0-4 rows\n  \n  // With backgroundSize 1000% 500%, the image is scaled 10x wider and 5x taller\n  // To show each segment, we need to move the image by full container sizes\n  // Each horizontal segment = move image left by 100% of container width\n  // Each vertical segment = move image up by 100% of container height\n  const posX = -(column * 100); // 0%, -100%, -200%, ..., -900%\n  const posY = -(row * 100); // 0%, -100%, -200%, -300%, -400%\n  \n  return `${posX}% ${posY}%`;\n};\n\nexport const GardenView: React.FC = () => {\n  const { user } = useAuth();\n  const { credits, updateCredits } = useCredits();\n  const { suns, setSuns } = useSuns();\n  const { sunSpawns, setSunSpawns, removeSunSpawn, getSunSpawnOnField, setLoading } = useSunSpawns();\n  const { showNotification } = useNotification();\n\n  // Initialize garden fields (will be populated from backend)\n  const [gardenFields, setGardenFields] = useState<GardenField[]>(() => {\n    return Array.from({ length: 50 }, (_, i) => ({\n      id: i + 1,\n      isUnlocked: false, // Will be loaded from backend\n      hasPlant: false,\n      plantType: undefined\n    }));\n  });\n\n  const [userSeeds, setUserSeeds] = useState<UserSeed[]>([]);\n  const [fieldButterflies, setFieldButterflies] = useState<FieldButterfly[]>([]);\n  const [userBouquets, setUserBouquets] = useState<UserBouquet[]>([]);\n  const [placedBouquets, setPlacedBouquets] = useState<PlacedBouquet[]>([]);\n  const [showSeedSelection, setShowSeedSelection] = useState(false);\n  const [showBouquetSelection, setShowBouquetSelection] = useState(false);\n  const [showButterflyModal, setShowButterflyModal] = useState(false);\n  const [selectedFieldIndex, setSelectedFieldIndex] = useState<number>(0);\n  const [userButterflies, setUserButterflies] = useState<UserButterfly[]>([]);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [harvestingField, setHarvestingField] = useState<number | null>(null);\n  const [harvestedFields, setHarvestedFields] = useState<Set<number>>(new Set());\n  const [collectedBouquets, setCollectedBouquets] = useState<Set<number>>(new Set());\n  const [collectedSuns, setCollectedSuns] = useState<Set<number>>(new Set());\n  const [bouquetSeedDrops, setBouquetSeedDrops] = useState<Record<number, {quantity: number, rarity: string}>>({});\n  const [touchStart, setTouchStart] = useState<{fieldIndex: number, timer: NodeJS.Timeout} | null>(null);\n  \n  // Field Spinning Animation State\n  const [spinningFields, setSpinningFields] = useState<Set<number>>(new Set());\n  \n  // Seed Reward Dialog State\n  const [isRewardDialogOpen, setIsRewardDialogOpen] = useState(false);\n  const [rewardData, setRewardData] = useState<{quantity: number; rarity: string} | null>(null);\n  \n  // Field Unlock Confirmation Dialog State\n  const [isUnlockDialogOpen, setIsUnlockDialogOpen] = useState(false);\n  const [fieldToUnlock, setFieldToUnlock] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (user) {\n      // Use async function to ensure proper order\n      const fetchAllData = async () => {\n        await fetchUnlockedFields(); // Load unlocked fields first\n        await fetchUserSeeds();\n        await fetchPlantedFields();\n        await fetchUserBouquets();\n        await fetchPlacedBouquets();\n        await fetchFieldButterflies();\n        await fetchSunSpawns();\n        await fetchUserButterflies();\n      };\n      fetchAllData();\n    }\n  }, [user]);\n\n  // Listen for inventory refresh events from ticket redemption\n  useEffect(() => {\n    const handleRefreshInventory = async () => {\n      if (user) {\n        console.log('🌱 GardenView received inventory refresh event - updating seeds');\n        await fetchUserSeeds();\n      }\n    };\n\n    window.addEventListener('refreshInventory', handleRefreshInventory);\n    return () => {\n      window.removeEventListener('refreshInventory', handleRefreshInventory);\n    };\n  }, [user]);\n\n  // Auto-refresh butterflies every 10 seconds\n  useEffect(() => {\n    if (!user) return;\n    \n    const interval = setInterval(() => {\n      fetchFieldButterflies();\n    }, 10000);\n    \n    return () => clearInterval(interval);\n  }, [user]);\n\n  // Auto-refresh sun spawns every 10 seconds\n  useEffect(() => {\n    if (!user) return;\n    \n    const interval = setInterval(() => {\n      fetchSunSpawns();\n    }, 10000);\n    \n    return () => clearInterval(interval);\n  }, [user]);\n\n  // Update timer every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchUserButterflies = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/butterflies`);\n      if (response.ok) {\n        const data = await response.json();\n        setUserButterflies(data.butterflies || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch user butterflies:', error);\n    }\n  };\n\n  const fetchUnlockedFields = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/unlocked-fields`);\n      if (response.ok) {\n        const data = await response.json();\n        const unlockedIndices = new Set(data.unlockedFields.map((field: any) => field.fieldIndex));\n        \n        // Update garden fields with unlocked status\n        setGardenFields(prev => prev.map(field => ({\n          ...field,\n          isUnlocked: unlockedIndices.has(field.id - 1) // Convert field ID to index\n        })));\n      }\n    } catch (error) {\n      console.error('Failed to fetch unlocked fields:', error);\n    }\n  };\n\n  const fetchUserSeeds = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/seeds`);\n      if (response.ok) {\n        const data = await response.json();\n        setUserSeeds(data.seeds || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch user seeds:', error);\n    }\n  };\n\n  const fetchFieldButterflies = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/field-butterflies`);\n      if (response.ok) {\n        const data = await response.json();\n        setFieldButterflies(data.fieldButterflies || []);\n        updateGardenWithFieldButterflies(data.fieldButterflies || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch field butterflies:', error);\n    }\n  };\n\n  const fetchSunSpawns = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch('/api/garden/sun-spawns', {\n        headers: {\n          'x-user-id': user.id.toString()\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setSunSpawns(data.sunSpawns || []);\n        updateGardenWithSunSpawns(data.sunSpawns || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch sun spawns:', error);\n    }\n  };\n\n  const fetchPlantedFields = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/garden/fields/${user.id}`);\n      if (response.ok) {\n        const data = await response.json();\n        updateGardenWithPlantedFields(data.fields || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch planted fields:', error);\n    }\n  };\n\n  const fetchUserBouquets = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/bouquets`);\n      if (response.ok) {\n        const data = await response.json();\n        setUserBouquets(data.bouquets || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch user bouquets:', error);\n    }\n  };\n\n  const fetchPlacedBouquets = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/placed-bouquets`);\n      if (response.ok) {\n        const data = await response.json();\n        setPlacedBouquets(data.placedBouquets || []);\n        updateGardenWithPlacedBouquets(data.placedBouquets || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch placed bouquets:', error);\n    }\n  };\n\n  const updateGardenWithPlacedBouquets = (placedBouquets: PlacedBouquet[]) => {\n    console.log('Updating garden with placed bouquets:', placedBouquets);\n    setGardenFields(prev => prev.map(field => {\n      const placedBouquet = placedBouquets.find(pb => pb.fieldIndex === field.id - 1);\n      if (placedBouquet) {\n        return {\n          ...field,\n          hasBouquet: true,\n          bouquetId: placedBouquet.bouquetId,\n          bouquetName: (placedBouquet as any).bouquetName || undefined,\n          bouquetRarity: (placedBouquet as any).bouquetRarity || \"common\",\n          bouquetPlacedAt: new Date(placedBouquet.placedAt),\n          bouquetExpiresAt: new Date(placedBouquet.expiresAt)\n        };\n      } else {\n        return {\n          ...field,\n          hasBouquet: false,\n          bouquetId: undefined,\n          bouquetName: undefined,\n          bouquetRarity: undefined,\n          bouquetPlacedAt: undefined,\n          bouquetExpiresAt: undefined\n        };\n      }\n    }));\n  };\n\n  const updateGardenWithFieldButterflies = (butterflies: FieldButterfly[]) => {\n    console.log('Updating garden with field butterflies:', butterflies);\n    setGardenFields(prev => prev.map(field => {\n      const butterfly = butterflies.find(bf => bf.fieldIndex === field.id - 1);\n      if (butterfly) {\n        return {\n          ...field,\n          hasButterfly: true,\n          butterflyId: butterfly.butterflyId,\n          butterflyName: butterfly.butterflyName,\n          butterflyImageUrl: butterfly.butterflyImageUrl,\n          butterflyRarity: butterfly.butterflyRarity\n        };\n      } else {\n        return {\n          ...field,\n          hasButterfly: false,\n          butterflyId: undefined,\n          butterflyName: undefined,\n          butterflyImageUrl: undefined,\n          butterflyRarity: undefined\n        };\n      }\n    }));\n  };\n\n  const updateGardenWithSunSpawns = (spawns: any[]) => {\n    console.log('Updating garden with sun spawns:', spawns);\n    setGardenFields(prev => prev.map(field => {\n      const sunSpawn = spawns.find(spawn => spawn.fieldIndex === field.id - 1 && spawn.isActive);\n      if (sunSpawn && new Date(sunSpawn.expiresAt) > new Date()) {\n        return {\n          ...field,\n          hasSunSpawn: true,\n          sunSpawnAmount: sunSpawn.sunAmount,\n          sunSpawnExpiresAt: new Date(sunSpawn.expiresAt)\n        };\n      } else {\n        return {\n          ...field,\n          hasSunSpawn: false,\n          sunSpawnAmount: undefined,\n          sunSpawnExpiresAt: undefined\n        };\n      }\n    }));\n  };\n\n  const updateGardenWithPlantedFields = (plantedFields: any[]) => {\n    console.log('Updating garden with planted fields:', plantedFields);\n    setGardenFields(prev => prev.map(field => {\n      const plantedField = plantedFields.find(pf => pf.fieldIndex === field.id - 1);\n      if (plantedField) {\n        const plantedAt = new Date(plantedField.plantedAt);\n        const growthTimeSeconds = getGrowthTime(plantedField.seedRarity as RarityTier);\n        const isGrown = plantedField.isGrown || \n          (currentTime.getTime() - plantedAt.getTime()) / 1000 >= growthTimeSeconds;\n        \n        return {\n          ...field,\n          hasPlant: true,\n          isGrowing: !isGrown,\n          plantedAt,\n          growthTimeSeconds,\n          seedRarity: plantedField.seedRarity,\n          flowerId: plantedField.flowerId,\n          flowerName: plantedField.flowerName,\n          flowerImageUrl: plantedField.flowerImageUrl\n        };\n      }\n      // Field was harvested or never had a plant - clear only plant data\n      if (field.hasPlant) {\n        console.log(`Clearing field ${field.id} - was harvested`);\n      }\n      return {\n        ...field,\n        hasPlant: false,\n        isGrowing: false,\n        plantedAt: undefined,\n        growthTimeSeconds: undefined,\n        seedRarity: undefined,\n        flowerId: undefined,\n        flowerName: undefined,\n        flowerImageUrl: undefined\n        // Keep bouquet and butterfly data intact\n      };\n    }));\n    \n    console.log('New garden state:', gardenFields.filter(f => f.hasPlant).map(f => `Field ${f.id}: ${f.flowerName}`));\n  };\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Card className=\"bg-slate-800 border-slate-700 text-white\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-slate-400\">Bitte melde dich an, um den Garten zu betreten</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const calculateUnlockCost = (fieldId: number) => {\n    // Count unlocked fields excluding the 4 starter fields (1, 2, 11, 12)\n    const starterFields = [1, 2, 11, 12];\n    const unlockedCount = gardenFields.filter(f => f.isUnlocked && !starterFields.includes(f.id)).length;\n    return Math.round(1000 * Math.pow(1.2, unlockedCount));\n  };\n\n  const unlockField = async (fieldId: number) => {\n    if (!user) return;\n    \n    try {\n      // Calculate cost BEFORE the API call to avoid overcharging\n      const costBefore = calculateUnlockCost(fieldId);\n      \n      const response = await fetch(`/api/user/${user.id}/unlock-field`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          fieldIndex: fieldId - 1 // Convert field ID to index\n        }),\n      });\n\n      if (response.ok) {\n        // Refresh unlocked fields and update UI properly without page reload\n        await fetchUnlockedFields();\n        // Subtract the pre-calculated cost to avoid overcharging\n        updateCredits(credits - costBefore);\n        showNotification('Feld freigeschaltet!', `Du hast Feld ${fieldId} für ${costBefore} Credits freigeschaltet.`, 'success');\n      } else {\n        const errorData = await response.json();\n        showNotification(errorData.error || 'Fehler beim Freischalten des Feldes', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to unlock field:', error);\n      showNotification('Fehler beim Freischalten des Feldes', 'error');\n    }\n  };\n\n  const openSeedSelection = (fieldIndex: number) => {\n    setSelectedFieldIndex(fieldIndex);\n    setShowSeedSelection(true);\n  };\n\n  const openBouquetSelection = (fieldIndex: number) => {\n    setSelectedFieldIndex(fieldIndex);\n    setShowBouquetSelection(true);\n  };\n\n  // Field spinning animation trigger\n  const triggerFieldSpin = (fieldIndex: number) => {\n    setSpinningFields(prev => new Set([...Array.from(prev), fieldIndex]));\n    \n    // Remove spinning class after animation completes (2.1 seconds for 3 full rotations)\n    setTimeout(() => {\n      setSpinningFields(prev => {\n        const newSet = new Set(Array.from(prev));\n        newSet.delete(fieldIndex);\n        return newSet;\n      });\n    }, 2100);\n  };\n\n  const placeBouquet = async (bouquetId: number, fieldIndex: number) => {\n    try {\n      const response = await fetch('/api/bouquets/place', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({\n          bouquetId,\n          fieldIndex\n        })\n      });\n\n      if (response.ok) {\n        // Trigger field spin animation\n        triggerFieldSpin(fieldIndex);\n        \n        // Refresh data\n        await fetchUserBouquets();\n        await fetchPlacedBouquets();\n      } else {\n        const error = await response.json();\n        showNotification(error.message || 'Fehler beim Platzieren', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to place bouquet:', error);\n      showNotification('Fehler beim Platzieren', 'error');\n    }\n  };\n\n  const getBouquetStatus = (field: GardenField) => {\n    if (!field.hasBouquet || !field.bouquetPlacedAt || !field.bouquetExpiresAt) {\n      return null;\n    }\n\n    const placedAt = field.bouquetPlacedAt.getTime();\n    const expiresAt = field.bouquetExpiresAt.getTime();\n    const currentTimeMs = currentTime.getTime();\n    const totalDuration = expiresAt - placedAt;\n    const elapsed = currentTimeMs - placedAt;\n    const remaining = Math.max(0, expiresAt - currentTimeMs);\n\n    return {\n      isExpired: remaining === 0,\n      remainingTime: formatTime(Math.floor(remaining / 1000)),\n      progress: Math.min(100, (elapsed / totalDuration) * 100)\n    };\n  };\n\n  const plantSeed = async (userSeedId: number, seedId: number, fieldIndex: number) => {\n    try {\n      const response = await fetch('/api/garden/plant', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({\n          fieldIndex,\n          seedId,\n          userSeedId\n        })\n      });\n\n      if (response.ok) {\n        // Trigger field spin animation\n        triggerFieldSpin(fieldIndex);\n        \n        // Refresh data\n        await fetchUserSeeds();\n        await fetchPlantedFields();\n        await fetchFieldButterflies();\n      } else {\n        const error = await response.json();\n        showNotification(error.message || 'Fehler beim Pflanzen', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to plant seed:', error);\n      showNotification('Fehler beim Pflanzen', 'error');\n    }\n  };\n\n  const collectSun = async (fieldIndex: number) => {\n    try {\n      console.log('Starting sun collection for field:', fieldIndex);\n      \n      // Add visual feedback immediately\n      setCollectedSuns(prev => new Set([...Array.from(prev), fieldIndex]));\n      \n      const response = await fetch('/api/garden/collect-sun', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-user-id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({\n          fieldIndex,\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Sun collected successfully!', data);\n        \n        // Update suns count\n        setSuns(suns + data.sunAmount);\n        \n        // Remove sun spawn from local state\n        removeSunSpawn(fieldIndex);\n        \n        // Refresh sun spawns data\n        await fetchSunSpawns();\n        \n        // Animate collection\n        setCollectedSuns(prev => new Set(prev).add(fieldIndex));\n        \n        // Remove visual feedback after short delay\n        setTimeout(() => {\n          setCollectedSuns(prev => {\n            const newSet = new Set(prev);\n            newSet.delete(fieldIndex);\n            return newSet;\n          });\n        }, 800);\n      } else {\n        const error = await response.json();\n        toast.error(error.message || 'Fehler beim Einsammeln der Sonne');\n        // Remove visual feedback on error\n        setCollectedSuns(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(fieldIndex);\n          return newSet;\n        });\n      }\n    } catch (error) {\n      console.error('Failed to collect sun:', error);\n      toast.error('Fehler beim Einsammeln der Sonne');\n      // Remove visual feedback on error\n      setCollectedSuns(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fieldIndex);\n        return newSet;\n      });\n    }\n  };\n\n  const collectButterfly = async (fieldIndex: number) => {\n    if (!user) return;\n\n    try {\n      console.log(`🦋 Attempting to collect butterfly on field ${fieldIndex}`);\n      const response = await fetch('/api/garden/collect-butterfly', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({\n          fieldIndex,\n        }),\n      });\n\n      if (response.ok) {\n        // Trigger field spin animation\n        triggerFieldSpin(fieldIndex);\n        \n        // Refresh data\n        await fetchFieldButterflies();\n        const data = await response.json();\n        console.log(`🦋 ${data.message}`);\n      } else {\n        const error = await response.json();\n        // Only log error if it's not a \"no butterfly found\" message\n        if (!error.message.includes('Kein Schmetterling')) {\n          console.error('Failed to collect butterfly:', error.message);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to collect butterfly:', error);\n    }\n  };\n\n  const collectExpiredBouquet = async (fieldIndex: number) => {\n    if (!user) return;\n\n    try {\n      console.log(`💧 Attempting to collect expired bouquet on field ${fieldIndex}`);\n      \n      // Add visual feedback immediately\n      setCollectedBouquets(prev => new Set([...Array.from(prev), fieldIndex]));\n      \n      const response = await fetch('/api/bouquets/collect-expired', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({\n          fieldIndex,\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        // Removed console.log to prevent duplicate notification display\n        \n        // Show beautiful seed reward dialog\n        if (data.seedDrop) {\n          const { rarity, quantity } = data.seedDrop;\n          \n          // Show the reward dialog\n          setRewardData({ quantity, rarity });\n          setIsRewardDialogOpen(true);\n        }\n        \n        // Refresh all garden data\n        await fetchPlacedBouquets();\n        await fetchUserSeeds();\n        await fetchFieldButterflies();\n        \n        // Remove visual feedback after short delay\n        setTimeout(() => {\n          setCollectedBouquets(prev => {\n            const newSet = new Set(prev);\n            newSet.delete(fieldIndex);\n            return newSet;\n          });\n          setBouquetSeedDrops(prev => {\n            const newDrops = { ...prev };\n            delete newDrops[fieldIndex];\n            return newDrops;\n          });\n        }, 1200);\n      } else {\n        const error = await response.json();\n        // Only log error if it's not a \"no expired bouquet\" message for debugging\n        if (!error.message.includes('Kein verwelktes Bouquet')) {\n          console.error('Failed to collect expired bouquet:', error.message);\n        }\n        // Remove visual feedback on error\n        setCollectedBouquets(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(fieldIndex);\n          return newSet;\n        });\n      }\n    } catch (error) {\n      console.error('Failed to collect expired bouquet:', error);\n      // Remove visual feedback on error\n      setCollectedBouquets(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fieldIndex);\n        return newSet;\n      });\n    }\n  };\n\n  const getFieldStatus = (field: GardenField) => {\n    if (!field.hasPlant || !field.plantedAt || !field.growthTimeSeconds) {\n      return null;\n    }\n\n    const plantedAt = field.plantedAt.getTime();\n    const currentTimeMs = currentTime.getTime();\n    const elapsedSeconds = Math.floor((currentTimeMs - plantedAt) / 1000);\n    const remainingSeconds = Math.max(0, field.growthTimeSeconds - elapsedSeconds);\n\n    return {\n      isGrown: remainingSeconds === 0,\n      remainingTime: formatTime(remainingSeconds),\n      progress: Math.min(100, (elapsedSeconds / field.growthTimeSeconds) * 100)\n    };\n  };\n\n  const harvestField = async (fieldIndex: number) => {\n    try {\n      console.log('Starting harvest for field:', fieldIndex);\n      \n      // Start spinning animation first (with image visible)\n      setSpinningFields(prev => new Set([...Array.from(prev), fieldIndex]));\n      \n      const response = await fetch('/api/garden/harvest', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({\n          fieldIndex\n        })\n      });\n\n      if (response.ok) {\n        console.log('Blume erfolgreich geerntet!');\n        \n        // Wait for 1 rotation to complete (0.8s), then hide image and show \"+1 Blume!\"\n        setTimeout(() => {\n          setHarvestedFields(prev => new Set([...Array.from(prev), fieldIndex]));\n          setSpinningFields(prev => {\n            const newSet = new Set(prev);\n            newSet.delete(fieldIndex);\n            return newSet;\n          });\n        }, 800);\n        \n        // Hide \"+1 Blume!\" after 1.5 seconds total (0.8s + 0.7s)\n        setTimeout(() => {\n          setHarvestedFields(prev => {\n            const newSet = new Set(prev);\n            newSet.delete(fieldIndex);\n            return newSet;\n          });\n        }, 1500);\n        \n        // Refresh data immediately  \n        await fetchPlantedFields();\n      } else {\n        const error = await response.json();\n        showNotification(error.message || 'Fehler beim Ernten', 'error');\n        // Remove visual feedback on error\n        setHarvestedFields(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(fieldIndex);\n          return newSet;\n        });\n      }\n    } catch (error) {\n      console.error('Failed to harvest:', error);\n      showNotification('Fehler beim Ernten', 'error');\n      // Remove visual feedback on error\n      setHarvestedFields(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fieldIndex);\n        return newSet;\n      });\n    }\n  };\n\n  const placeButterflyOnField = async (butterflyId: number) => {\n    if (!user) return;\n\n    try {\n      console.log(`🦋 Placing butterfly ${butterflyId} on field ${selectedFieldIndex} for user ${user.id}`);\n      \n      const response = await fetch('/api/garden/place-butterfly', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': user.id.toString()\n        },\n        body: JSON.stringify({\n          fieldIndex: selectedFieldIndex - 1, // Convert 1-based to 0-based index\n          butterflyId: butterflyId\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log('🦋 Butterfly placed successfully!', data.message);\n        \n        // Refresh data to show the placed butterfly\n        await fetchFieldButterflies();\n        await fetchUserButterflies();\n        \n        showNotification('Schmetterling platziert!', data.message, 'success');\n      } else {\n        const error = await response.json();\n        showNotification('Fehler beim Platzieren', error.message || 'Schmetterling konnte nicht platziert werden.', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to place butterfly:', error);\n      showNotification('Fehler beim Platzieren', 'Fehler beim Platzieren des Schmetterlings.', 'error');\n    }\n\n    setShowButterflyModal(false);\n  };\n\n\n  return (\n    <div className=\"p-6 space-y-8 bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 min-h-full\">\n      {/* Garden Header with Stats */}\n      <div className=\"bg-slate-800/60 p-6 rounded-lg border border-green-500/30\">\n        {/* Title Section */}\n        <div className=\"relative mb-4\">\n          {/* HelpButton in absoluter Position rechts oben */}\n          <div className=\"absolute top-0 right-0\">\n            <HelpButton helpText=\"Im Mariposa Garten pflanzt du Samen, lässt sie wachsen und erstellst Bouquets für deine Schmetterlinge. Links-Klick auf Felder für Samen pflanzen, Rechts-Klick für Bouquets platzieren. Sammle die goldenen Sonnen!\" viewType=\"garden\" />\n          </div>\n          \n          {/* Zentrierter Content */}\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-green-300 mb-1\">\n              Mariposa Garten 🌱\n            </h1>\n            <p className=\"text-slate-400 text-sm\">Züchte Blumen für deine Schmetterlinge</p>\n          </div>\n        </div>\n        \n        {/* Compact Stats */}\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"bg-gradient-to-br from-green-800/40 to-emerald-800/40 border border-green-500/30 rounded-lg p-3 text-center\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <Shovel className=\"h-3 w-3 text-green-400 mr-1\" />\n              <span className=\"text-xs font-semibold text-green-300\">Felder</span>\n            </div>\n            <div className=\"text-lg font-bold text-green-400 mb-1\">\n              {gardenFields.filter(f => f.isUnlocked).length}/50\n            </div>\n            <div className=\"w-full bg-slate-700 rounded-full h-1\">\n              <div className=\"bg-green-500 h-1 rounded-full\" style={{width: `${(gardenFields.filter(f => f.isUnlocked).length / 50) * 100}%`}}></div>\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-pink-800/40 to-rose-800/40 border border-pink-500/30 rounded-lg p-3 text-center\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <Flower className=\"h-3 w-3 text-pink-400 mr-1\" />\n              <span className=\"text-xs font-semibold text-pink-300\">Blumen</span>\n            </div>\n            <div className=\"text-lg font-bold text-pink-400\">\n              {gardenFields.filter(f => f.hasPlant).length}\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-orange-800/40 to-yellow-800/40 border border-orange-500/30 rounded-lg p-3 text-center\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <Coins className=\"h-3 w-3 text-orange-400 mr-1\" />\n              <span className=\"text-xs font-semibold text-orange-300\">Credits</span>\n            </div>\n            <div className=\"text-lg font-bold text-orange-400\">{credits} Cr</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Compact Garden Grid */}\n      <Card className=\"bg-slate-800 border border-green-500/30\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-white flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Sprout className=\"h-5 w-5 mr-2 text-green-400\" />\n              <span className=\"text-lg font-semibold\">Garten Felder 🌿</span>\n            </div>\n            <div className=\"text-xs text-slate-400\">\n              Links: Samen • Rechts: Bouquet\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Panorama Background Container */}\n          <div className=\"relative\">\n            {/* Panorama Background Layer */}\n            <div \n              className=\"absolute inset-0 rounded-lg overflow-hidden opacity-60\"\n              style={{\n                backgroundImage: 'url(\"/Landschaft/Gardenview.png\")',\n                backgroundSize: 'cover',\n                backgroundPosition: 'center',\n                zIndex: 0\n              }}\n            />\n            {/* Garden Grid with transparent backgrounds */}\n            <div className=\"relative z-10 grid grid-cols-5 sm:grid-cols-10 gap-1 sm:gap-2 garden-grid-mobile sm:garden-grid-desktop\">\n            {gardenFields.map((field) => {\n              // Check if field is adjacent to any unlocked field\n              const isNextToUnlock = !field.isUnlocked && (() => {\n                const row = Math.floor((field.id - 1) / 10);\n                const col = (field.id - 1) % 10;\n                \n                // Check all 8 adjacent positions (including diagonals)\n                const adjacent = [\n                  { r: row - 1, c: col - 1 }, { r: row - 1, c: col }, { r: row - 1, c: col + 1 },\n                  { r: row, c: col - 1 },                             { r: row, c: col + 1 },\n                  { r: row + 1, c: col - 1 }, { r: row + 1, c: col }, { r: row + 1, c: col + 1 }\n                ];\n                \n                return adjacent.some(pos => {\n                  if (pos.r < 0 || pos.r >= 5 || pos.c < 0 || pos.c >= 10) return false;\n                  const adjacentFieldId = pos.r * 10 + pos.c + 1;\n                  const adjacentField = gardenFields.find(f => f.id === adjacentFieldId);\n                  return adjacentField?.isUnlocked;\n                });\n              })();\n              \n              return (\n                <div\n                  key={field.id}\n                  className={`\n                    aspect-square border-2 rounded-lg relative flex items-center justify-center cursor-pointer transition-all touch-target\n                    ${field.isUnlocked \n                      ? 'border-green-500 bg-green-900/20 hover:bg-green-900/40 active:bg-green-900/60' \n                      : isNextToUnlock \n                        ? 'border-orange-500 bg-slate-800 hover:bg-slate-700 active:bg-slate-600 opacity-50' \n                        : 'border-slate-600 bg-slate-800 opacity-40'\n                    }\n                    ${spinningFields.has(field.id - 1) ? 'animate-field-spin' : ''}\n                  `}\n                  style={{\n                    backgroundColor: field.isUnlocked \n                      ? 'rgba(34, 197, 94, 0.1)' // Transparent green for unlocked\n                      : isNextToUnlock \n                        ? 'rgba(249, 115, 22, 0.2)' // Transparent orange for next to unlock\n                        : 'rgba(51, 65, 85, 0.3)', // Transparent slate for locked\n                    minHeight: '44px',\n                    minWidth: '44px'\n                  }}\n                  onClick={() => {\n                    if (!field.isUnlocked && isNextToUnlock) {\n                      setFieldToUnlock(field.id);\n                      setIsUnlockDialogOpen(true);\n                    } else if (field.hasSunSpawn) {\n                      collectSun(field.id - 1);\n                    } else if (field.hasButterfly) {\n                      collectButterfly(field.id - 1);\n                    } else if (field.isUnlocked && !field.hasPlant && !field.hasBouquet && !field.hasButterfly) {\n                      openSeedSelection(field.id - 1);\n                    } else if (field.isUnlocked && field.hasPlant) {\n                      const status = getFieldStatus(field);\n                      if (status?.isGrown) {\n                        harvestField(field.id - 1);\n                      }\n                    }\n                  }}\n                  onContextMenu={(e) => {\n                    e.preventDefault(); // Prevent default context menu\n                    if (field.isUnlocked && !field.hasPlant && !field.hasBouquet && !field.hasButterfly) {\n                      openBouquetSelection(field.id - 1);\n                    }\n                  }}\n                  onTouchStart={(e) => {\n                    // Clear any existing touch timer\n                    if (touchStart) {\n                      clearTimeout(touchStart.timer);\n                    }\n                    \n                    // Set up long press detection\n                    if (field.isUnlocked && !field.hasPlant && !field.hasBouquet && !field.hasButterfly) {\n                      const timer = setTimeout(() => {\n                        // Long press detected - open bouquet selection\n                        openBouquetSelection(field.id - 1);\n                        setTouchStart(null);\n                      }, 500); // 500ms long press\n                      \n                      setTouchStart({ fieldIndex: field.id - 1, timer });\n                    }\n                  }}\n                  onTouchEnd={() => {\n                    // Clear long press timer on touch end\n                    if (touchStart) {\n                      clearTimeout(touchStart.timer);\n                      setTouchStart(null);\n                    }\n                  }}\n                  onTouchCancel={() => {\n                    // Clear long press timer on touch cancel\n                    if (touchStart) {\n                      clearTimeout(touchStart.timer);\n                      setTouchStart(null);\n                    }\n                  }}\n                >\n                  {/* Harvest Visual Feedback */}\n                  {harvestedFields.has(field.id - 1) && (\n                    <div className=\"absolute inset-0 bg-green-400/30 rounded-lg flex items-center justify-center z-10\">\n                      <div className=\"text-white font-bold text-lg animate-pulse\">\n                        +1 Blume!\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Visual seed notification removed - user requested no more seed notifications */}\n                  \n                  {!field.isUnlocked && (\n                    <>\n                      <Lock className=\"h-4 w-4 text-slate-400\" />\n                      {isNextToUnlock && (\n                        <div className=\"absolute bottom-1 left-1/2 transform -translate-x-1/2 text-xs text-orange-400 font-bold\">\n                          {calculateUnlockCost(field.id)} Cr\n                        </div>\n                      )}\n                    </>\n                  )}\n                  \n                  {field.isUnlocked && field.hasPlant && !harvestedFields.has(field.id - 1) && (() => {\n                    const status = getFieldStatus(field);\n                    if (status?.isGrown && field.flowerImageUrl) {\n                      // Show grown flower with hover preview and tooltip\n                      return (\n                        <FlowerHoverPreview\n                          flowerImageUrl={field.flowerImageUrl}\n                          flowerName={field.flowerName || \"Unbekannte Blume\"}\n                          rarity={field.seedRarity as RarityTier}\n                          isSpinning={spinningFields.has(field.id - 1)}\n                        >\n                          <TooltipProvider>\n                            <Tooltip>\n                              <TooltipTrigger className=\"cursor-pointer w-full h-full\">\n                                <RarityImage \n                                  src={field.flowerImageUrl}\n                                  alt=\"Blume\"\n                                  rarity={field.seedRarity as RarityTier}\n                                  size=\"large\"\n                                  className=\"field-image\"\n                                />\n                              </TooltipTrigger>\n                              <TooltipContent className=\"bg-slate-800 border-slate-600 text-white\">\n                                <div className=\"text-center\">\n                                  <div className=\"font-bold text-sm\">{field.flowerName}</div>\n                                  <div className={`text-xs ${getRarityColor(field.seedRarity as RarityTier)}`}>\n                                    {getRarityDisplayName(field.seedRarity as RarityTier)}\n                                  </div>\n                                </div>\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                        </FlowerHoverPreview>\n                      );\n                    } else if (field.isGrowing) {\n                      // Show seed image while growing with animated scaling\n                      const getGrowthScale = () => {\n                        if (!status) return 0.3;\n                        \n                        // Get growth duration based on rarity\n                        const growthDurations = {\n                          common: 75,\n                          uncommon: 120,\n                          rare: 180,\n                          'super-rare': 300,\n                          epic: 450,\n                          legendary: 540,\n                          mythical: 600\n                        };\n                        \n                        const totalDuration = growthDurations[field.seedRarity as keyof typeof growthDurations] || 75;\n                        \n                        // Calculate remaining seconds from time string (MM:SS format)\n                        const parts = status.remainingTime.split(':');\n                        const remainingSeconds = parts.length === 2 \n                          ? parseInt(parts[0]) * 60 + parseInt(parts[1]) \n                          : 0;\n                        \n                        const elapsed = totalDuration - remainingSeconds;\n                        const progress = Math.max(0, Math.min(1, elapsed / totalDuration));\n                        \n                        // Scale from 30% to 100%\n                        return 0.3 + (0.7 * progress);\n                      };\n                      \n                      const scale = getGrowthScale();\n                      \n                      return (\n                        <TooltipProvider>\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <div className=\"relative w-full h-full flex items-center justify-center cursor-pointer\">\n                          <div \n                            className=\"transition-transform duration-1000 ease-out\"\n                            style={{ transform: `scale(${scale})` }}\n                          >\n                            <RarityImage \n                              src=\"/Blumen/0.jpg\"\n                              alt=\"Wachsender Samen\"\n                              rarity={field.seedRarity as RarityTier}\n                              size=\"medium\"\n                              className=\"field-image\"\n                            />\n                          </div>\n                              </div>\n                            </TooltipTrigger>\n                            <TooltipContent className=\"bg-slate-800 border-slate-600 text-green-300\">\n                              <div className=\"text-center\">\n                                <div className=\"font-bold text-sm\">🌱 Wächst</div>\n                                <div className=\"text-xs\">\n                                  ⏱️ {status?.remainingTime || '00:00'}\n                                </div>\n                              </div>\n                            </TooltipContent>\n                          </Tooltip>\n                        </TooltipProvider>\n                      );\n                    } else {\n                      // Fallback to icon\n                      return <Flower className=\"h-6 w-6 text-pink-400\" />;\n                    }\n                  })()}\n\n                  {/* Bouquet Display */}\n                  {field.isUnlocked && field.hasBouquet && (() => {\n                    const bouquetStatus = getBouquetStatus(field);\n                    return (\n                      <div className=\"relative w-full h-full\">\n                        <TooltipProvider>\n                          <Tooltip>\n                            <TooltipTrigger \n                              className={`w-full h-full ${bouquetStatus?.isExpired ? \"cursor-pointer\" : \"cursor-default\"}`}\n                              onClick={() => bouquetStatus?.isExpired && collectExpiredBouquet(field.id - 1)}\n                            >\n                              <div className=\"relative w-full h-full\">\n                                <RarityImage \n                                  src=\"/Blumen/Bouquet.jpg\"\n                                  alt=\"Bouquet\"\n                                  rarity={(field.bouquetRarity as RarityTier) || \"common\"}\n                                  size=\"large\"\n                                  className=\"field-image\"\n                                />\n                                <Heart className=\"absolute top-2 right-2 h-4 w-4 text-pink-400\" />\n                                {bouquetStatus?.isExpired && (\n                                  <div className=\"absolute inset-0 bg-gray-800/70 rounded-lg flex items-center justify-center\">\n                                    <Sparkles className=\"h-6 w-6 text-yellow-400\" />\n                                  </div>\n                                )}\n                              </div>\n                            </TooltipTrigger>\n                            <TooltipContent className=\"bg-slate-800 border-slate-600 text-white\">\n                              <div className=\"text-center\">\n                                <div className=\"font-bold text-sm\">{field.bouquetName || `Bouquet #${field.bouquetId}`}</div>\n                                {bouquetStatus && (\n                                  <div className={`text-sm font-semibold ${\n                                    bouquetStatus.isExpired \n                                      ? 'text-orange-300 animate-bounce' \n                                      : 'text-pink-300'\n                                  }`}>\n                                    {bouquetStatus.isExpired ? \"🥀 Verwelkt - klicke zum Sammeln\" : `💐 ${bouquetStatus.remainingTime}`}\n                                  </div>\n                                )}\n                              </div>\n                            </TooltipContent>\n                          </Tooltip>\n                        </TooltipProvider>\n                        {bouquetStatus && !bouquetStatus.isExpired && (\n                          <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n                            <div className=\"bg-pink-500/80 border border-pink-400 rounded-lg px-2 py-1 backdrop-blur-sm\">\n                              <div className=\"text-xs font-bold text-white text-center animate-pulse\">\n                                💐 {bouquetStatus.remainingTime}\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })()}\n\n                  {/* Butterfly Display */}\n                  {field.isUnlocked && field.hasButterfly && (\n                    <div className=\"relative w-full h-full\">\n                      <ButterflyHoverPreview\n                        butterflyImageUrl={field.butterflyImageUrl || \"/Schmetterlinge/001.jpg\"}\n                        butterflyName={field.butterflyName || \"Schmetterling\"}\n                        rarity={field.butterflyRarity as RarityTier || \"common\"}\n                        isSpinning={spinningFields.has(field.id - 1)}\n                      >\n                        <TooltipProvider>\n                          <Tooltip>\n                            <TooltipTrigger \n                              className=\"cursor-pointer w-full h-full\"\n                              onClick={() => collectButterfly(field.id - 1)}\n                            >\n                              <div className=\"relative w-full h-full\">\n                                <RarityImage \n                                  src={field.butterflyImageUrl || \"/Schmetterlinge/001.jpg\"}\n                                  alt=\"Schmetterling\"\n                                  rarity={field.butterflyRarity as RarityTier || \"common\"}\n                                  size=\"large\"\n                                  className=\"field-image animate-pulse\"\n                                />\n                                <Sparkles className=\"absolute top-2 right-2 h-4 w-4 text-orange-400 animate-pulse\" />\n                              </div>\n                            </TooltipTrigger>\n                            <TooltipContent className=\"bg-slate-800 border-slate-600 text-white\">\n                              <div className=\"text-center\">\n                                <div className=\"font-bold text-sm\">{field.butterflyName}</div>\n                                <div className={`text-xs ${getRarityColor(field.butterflyRarity as RarityTier || \"common\")}`}>\n                                  {getRarityDisplayName(field.butterflyRarity as RarityTier || \"common\")}\n                                </div>\n                                <div className=\"text-xs text-orange-400 mt-1\">Klicke zum Sammeln</div>\n                              </div>\n                            </TooltipContent>\n                          </Tooltip>\n                        </TooltipProvider>\n                      </ButterflyHoverPreview>\n                    </div>\n                  )}\n\n                  {/* Sun Spawn Display */}\n                  {field.hasSunSpawn && (\n                    <div \n                      className=\"absolute inset-0 pointer-events-auto\" \n                      style={{\n                        zIndex: 9999,\n                        transform: 'translateZ(0)', // Force new stacking context\n                      }}\n                    >\n                      <TooltipProvider>\n                        <Tooltip>\n                          <TooltipTrigger className=\"cursor-pointer w-full h-full\">\n                            <div \n                              className={`relative w-full h-full flex items-center justify-center rounded-lg transition-all duration-300 ${collectedSuns.has(field.id - 1) ? 'scale-75 opacity-30' : 'hover:scale-110 animate-bounce'}`}\n                              style={{\n                                background: '#ffd700',\n                                border: '3px solid #ffed4e',\n                                boxShadow: '0 0 20px #ffd700, 0 0 40px #ffd700, 0 0 60px #ffd700',\n                                opacity: '1 !important'\n                              }}\n                            >\n                              <Sun \n                                className=\"w-full h-full max-w-16 max-h-16 animate-spin\" \n                                style={{\n                                  animationDuration: '3s',\n                                  color: '#ffffff',\n                                  opacity: '1 !important'\n                                }} \n                              />\n                              <Sparkles \n                                className=\"absolute top-1 right-1 h-6 w-6 text-white animate-pulse\" \n                                style={{opacity: 1}}\n                              />\n                              <div \n                                className=\"absolute inset-0 rounded-lg animate-ping opacity-75\"\n                                style={{background: 'radial-gradient(circle, transparent 40%, rgba(255,215,0,0.4) 70%)'}}\n                              ></div>\n                              <div \n                                className=\"absolute bottom-0 left-0 right-0 text-xs font-bold text-black px-1 py-1 rounded-b-lg text-center\"\n                                style={{\n                                  background: 'linear-gradient(to bottom, rgba(255,255,255,0.9), rgba(255,215,0,0.9))',\n                                  borderTop: '2px solid white'\n                                }}\n                              >\n                                {field.sunSpawnAmount}☀️\n                              </div>\n                            </div>\n                          </TooltipTrigger>\n                          <TooltipContent className=\"bg-slate-800 border-slate-600 text-yellow-300\">\n                            <div className=\"text-center\">\n                              <div className=\"font-bold text-sm\">☀️ Sonne</div>\n                              <div className=\"text-xs\">\n                                {field.sunSpawnAmount || 1} Sonnen sammeln\n                              </div>\n                              <div className=\"text-xs text-orange-400 mt-1\">Klicke zum Sammeln</div>\n                            </div>\n                          </TooltipContent>\n                        </Tooltip>\n                      </TooltipProvider>\n                    </div>\n                  )}\n                  \n                  {field.isUnlocked && !field.hasPlant && !field.hasBouquet && !field.hasButterfly && !field.hasSunSpawn && (\n                    <div className=\"text-xs text-green-400\">+</div>\n                  )}\n                  \n                  <div className=\"absolute top-1 left-1 text-xs text-slate-500\">\n                    {field.id}\n                  </div>\n                </div>\n              );\n            })}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Compact Instructions */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-3\">\n          <div className=\"text-center text-slate-400 text-xs space-y-1\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-1 text-xs\">\n              <span>🌱 Linksklick: Samen pflanzen</span>\n              <span>💐 Rechtsklick: Bouquet platzieren</span>\n              <span>🌸 Gewachsene Blumen ernten</span>\n              <span>🦋 Schmetterlinge sammeln</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Seed Selection Modal */}\n      <SeedSelectionModal\n        isOpen={showSeedSelection}\n        onClose={() => setShowSeedSelection(false)}\n        seeds={userSeeds}\n        fieldIndex={selectedFieldIndex}\n        onSelectSeed={plantSeed}\n      />\n\n      {/* Bouquet Selection Modal */}\n      <BouquetSelectionModal\n        isOpen={showBouquetSelection}\n        onClose={() => setShowBouquetSelection(false)}\n        fieldIndex={selectedFieldIndex}\n        userBouquets={userBouquets}\n        onPlaceBouquet={placeBouquet}\n      />\n\n      {/* Seed Reward Dialog */}\n      <SeedRewardDialog\n        isOpen={isRewardDialogOpen}\n        onClose={() => setIsRewardDialogOpen(false)}\n        quantity={rewardData?.quantity || 0}\n        rarity={rewardData?.rarity || 'common'}\n      />\n\n      {/* Field Unlock Confirmation Dialog */}\n      <AlertDialog open={isUnlockDialogOpen} onOpenChange={setIsUnlockDialogOpen}>\n        <AlertDialogContent className=\"bg-slate-800 border-slate-600 text-white\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-xl font-bold text-orange-400\">\n              🔓 Feld freischalten\n            </AlertDialogTitle>\n            <AlertDialogDescription className=\"text-slate-300\">\n              {fieldToUnlock && (\n                <>\n                  Möchtest du wirklich Feld {fieldToUnlock} für{' '}\n                  <span className=\"font-bold text-yellow-400\">\n                    {calculateUnlockCost(fieldToUnlock)} Credits\n                  </span>{' '}\n                  freischalten?\n                  <br /><br />\n                  <span className=\"text-sm text-slate-400\">\n                    Diese Aktion kann nicht rückgängig gemacht werden.\n                  </span>\n                </>\n              )}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              className=\"bg-slate-700 border-slate-600 text-slate-300 hover:bg-slate-600\"\n              onClick={() => {\n                setIsUnlockDialogOpen(false);\n                setFieldToUnlock(null);\n              }}\n            >\n              Abbrechen\n            </AlertDialogCancel>\n            <AlertDialogAction \n              className=\"bg-orange-600 hover:bg-orange-700 text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n              disabled={fieldToUnlock ? credits < calculateUnlockCost(fieldToUnlock) : false}\n              onClick={() => {\n                if (fieldToUnlock) {\n                  unlockField(fieldToUnlock);\n                  setIsUnlockDialogOpen(false);\n                  setFieldToUnlock(null);\n                }\n              }}\n            >\n              Freischalten\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n};","size_bytes":58282},"client/src/components/Header.tsx":{"content":"import React, { useState, useEffect, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { useSuns } from \"@/lib/stores/useSuns\";\nimport { useDna } from \"@/lib/stores/useDna\";\nimport { LogOut, User, Coins, Sprout, Flower, Package, Bug, Fish, TrendingUp, Users, AlertTriangle, Sun, Zap, Ticket, Heart } from \"lucide-react\";\nimport { UserListModal } from \"./UserListModal\";\nimport { ForeignExhibitionView } from \"./ForeignExhibitionView\";\nimport { EmergencyDialog } from \"./EmergencyDialog\";\nimport MariePosaButton from \"./MariePosaButton\";\nimport { TicketRedemptionDialog } from \"./TicketRedemptionDialog\";\nimport { DonateDialog } from \"./DonateDialog\";\nimport { useSmartPolling } from \"@/hooks/useSmartPolling\";\n\ninterface HeaderProps {\n  onAuthClick: () => void;\n  refreshTrigger?: number; // Add refresh trigger prop\n}\n\nexport const Header: React.FC<HeaderProps> = ({ onAuthClick, refreshTrigger }) => {\n  const { user, logout } = useAuth();\n  const { credits, setCredits } = useCredits();\n  const { suns, setSuns } = useSuns();\n  const { dna, setDna } = useDna();\n  const [inventoryCounts, setInventoryCounts] = useState({\n    seeds: 0,\n    flowers: 0,\n    bouquets: 0,\n    butterflies: 0,\n    caterpillars: 0,\n    fish: 0\n  });\n  const [tickets, setTickets] = useState(0);\n  const [passiveIncome, setPassiveIncome] = useState(0);\n  const [showUserList, setShowUserList] = useState(false);\n  const [showEmergencyDialog, setShowEmergencyDialog] = useState(false);\n  const [foreignExhibition, setForeignExhibition] = useState<{\n    ownerId: number;\n    ownerName: string;\n  } | null>(null);\n  const [showTicketDialog, setShowTicketDialog] = useState(false);\n  const [showDonateDialog, setShowDonateDialog] = useState(false);\n  \n  const handleVisitExhibition = (userId: number, username: string) => {\n    setForeignExhibition({ ownerId: userId, ownerName: username });\n  };\n  \n  const handleBackFromForeign = () => {\n    setForeignExhibition(null);\n  };\n\n  const handleEmergencySeedsReceived = () => {\n    // Refresh inventory counts after receiving emergency seeds\n    fetchInventoryCounts();\n  };\n\n  const fetchCredits = async () => {\n    if (!user) return;\n    \n    try {\n      const response = await fetch(`/api/user/${user.id}/credits`);\n      if (response.ok) {\n        const data = await response.json();\n        setCredits(data.credits);\n      }\n    } catch (error) {\n      console.error('Failed to fetch credits:', error);\n    }\n  };\n\n  const fetchSuns = async () => {\n    if (!user) return;\n    \n    try {\n      const response = await fetch(`/api/user/${user.id}/suns`);\n      if (response.ok) {\n        const data = await response.json();\n        setSuns(data.suns);\n      }\n    } catch (error) {\n      console.error('Failed to fetch suns:', error);\n    }\n  };\n\n  const fetchDna = async () => {\n    if (!user) return;\n    \n    try {\n      const response = await fetch(`/api/user/${user.id}/dna`);\n      if (response.ok) {\n        const data = await response.json();\n        setDna(data.dna);\n      }\n    } catch (error) {\n      console.error('Failed to fetch DNA:', error);\n    }\n  };\n\n  const fetchTickets = async () => {\n    if (!user) return;\n    \n    try {\n      const response = await fetch(`/api/user/${user.id}/tickets`);\n      if (response.ok) {\n        const data = await response.json();\n        setTickets(data.tickets);\n      }\n    } catch (error) {\n      console.error('Failed to fetch tickets:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (user) {\n      fetchCredits();\n      fetchSuns();\n      fetchDna();\n      fetchTickets();\n      fetchInventoryCounts();\n      fetchPassiveIncome();\n    }\n  }, [user]);\n\n  // Refresh header when trigger changes (view switching)\n  useEffect(() => {\n    if (user && refreshTrigger !== undefined) {\n      fetchCredits();\n      fetchSuns();\n      fetchDna();\n      fetchTickets();\n      fetchInventoryCounts();\n      fetchPassiveIncome();\n    }\n  }, [refreshTrigger]);\n\n  // Smart polling that adapts to user activity\n  const refreshAllData = useCallback(() => {\n    if (!user) return;\n    fetchCredits();\n    fetchSuns();\n    fetchDna();\n    fetchTickets();\n    fetchInventoryCounts();\n    fetchPassiveIncome();\n  }, [user]);\n\n  useSmartPolling({\n    fn: refreshAllData,\n    activeMs: 10000,    // 10 seconds when active\n    idleMs: 60000,      // 60 seconds when idle\n    backgroundMs: null, // paused when in background\n    enabled: !!user,\n    immediate: false,   // Don't run immediately, initial effect already handles this\n  });\n\n  const fetchInventoryCounts = async () => {\n    if (!user) return;\n    \n    try {\n      const [seedsRes, flowersRes, bouquetsRes, butterfliesRes, caterpillarsRes, fishRes] = await Promise.all([\n        fetch(`/api/user/${user.id}/seeds`),\n        fetch(`/api/user/${user.id}/flowers`),\n        fetch(`/api/user/${user.id}/bouquets`),\n        fetch(`/api/user/${user.id}/butterflies`),\n        fetch(`/api/user/${user.id}/caterpillars`),\n        fetch(`/api/user/${user.id}/fish`)\n      ]);\n\n      if (seedsRes.ok && flowersRes.ok && bouquetsRes.ok && butterfliesRes.ok && caterpillarsRes.ok && fishRes.ok) {\n        const seedsData = await seedsRes.json();\n        const flowersData = await flowersRes.json();\n        const bouquetsData = await bouquetsRes.json();\n        const butterfliesData = await butterfliesRes.json();\n        const caterpillarsData = await caterpillarsRes.json();\n        const fishData = await fishRes.json();\n\n        const seedsTotal = (seedsData.seeds || []).reduce((sum: number, seed: any) => sum + seed.quantity, 0);\n        const flowersTotal = (flowersData.flowers || []).reduce((sum: number, flower: any) => sum + flower.quantity, 0);\n        const bouquetsTotal = (bouquetsData.bouquets || []).reduce((sum: number, bouquet: any) => sum + bouquet.quantity, 0);\n        const butterfliesTotal = (butterfliesData.butterflies || []).reduce((sum: number, butterfly: any) => sum + butterfly.quantity, 0);\n        const caterpillarsTotal = (caterpillarsData.caterpillars || []).length;\n        const fishTotal = (fishData.fish || []).length;\n\n        setInventoryCounts({\n          seeds: seedsTotal,\n          flowers: flowersTotal,\n          bouquets: bouquetsTotal,\n          butterflies: butterfliesTotal,\n          caterpillars: caterpillarsTotal,\n          fish: fishTotal\n        });\n      }\n    } catch (error) {\n      console.error('Failed to fetch inventory counts:', error);\n    }\n  };\n\n  // Calculate current Cr/h based on degradation over 72 hours\n  const getCurrentCrPerHour = (rarity: string, isVip?: boolean, placedAt?: string): number => {\n    if (isVip || rarity === 'vip') {\n      // VIP butterflies: 60 Cr/h → 6 Cr/h over 72 hours\n      const startValue = 60;\n      const minValue = 6;\n      return calculateDegradedValue(startValue, minValue, placedAt);\n    }\n\n    const rarityValues = {\n      'common': { start: 1, min: 1 },       // No degradation for Common\n      'uncommon': { start: 2, min: 1 },     // 2 → 1 Cr/h\n      'rare': { start: 5, min: 1 },         // 5 → 1 Cr/h  \n      'super-rare': { start: 10, min: 1 },  // 10 → 1 Cr/h\n      'epic': { start: 20, min: 2 },        // 20 → 2 Cr/h\n      'legendary': { start: 50, min: 5 },   // 50 → 5 Cr/h\n      'mythical': { start: 100, min: 10 }   // 100 → 10 Cr/h\n    };\n\n    const values = rarityValues[rarity as keyof typeof rarityValues] || { start: 1, min: 1 };\n    return calculateDegradedValue(values.start, values.min, placedAt);\n  };\n\n  // Calculate degraded value over 72 hours\n  const calculateDegradedValue = (startValue: number, minValue: number, placedAt?: string): number => {\n    if (!placedAt) return startValue;\n\n    const placedTime = new Date(placedAt).getTime();\n    const now = new Date().getTime();\n    const timeSincePlacement = now - placedTime;\n    const SEVENTY_TWO_HOURS = 72 * 60 * 60 * 1000;\n\n    // If less than 72 hours have passed, calculate degradation\n    if (timeSincePlacement < SEVENTY_TWO_HOURS) {\n      const degradationProgress = timeSincePlacement / SEVENTY_TWO_HOURS; // 0 to 1\n      const valueRange = startValue - minValue;\n      const currentValue = startValue - (valueRange * degradationProgress);\n      return Math.max(Math.round(currentValue), minValue);\n    }\n\n    // After 72 hours, return minimum value\n    return minValue;\n  };\n\n  const fetchPassiveIncome = async () => {\n    if (!user) return;\n    \n    try {\n      // Fetch normal butterflies\n      const butterfliesRes = await fetch(`/api/user/${user.id}/exhibition-butterflies`);\n      // Fetch VIP butterflies\n      const vipButterfliesRes = await fetch(`/api/user/${user.id}/exhibition-vip-butterflies`);\n      \n      let hourlyIncome = 0;\n      \n      // Calculate income from normal butterflies with time-based degradation\n      if (butterfliesRes.ok) {\n        const butterfliesData = await butterfliesRes.json();\n        hourlyIncome += (butterfliesData.butterflies || []).reduce((total: number, butterfly: any) => {\n          return total + getCurrentCrPerHour(butterfly.butterflyRarity, false, butterfly.placedAt);\n        }, 0);\n      }\n      \n      // Calculate income from VIP butterflies with time-based degradation\n      if (vipButterfliesRes.ok) {\n        const vipButterfliesData = await vipButterfliesRes.json();\n        hourlyIncome += (vipButterfliesData.vipButterflies || []).reduce((total: number, vipButterfly: any) => {\n          return total + getCurrentCrPerHour('vip', true, vipButterfly.placedAt);\n        }, 0);\n      }\n      \n      setPassiveIncome(hourlyIncome);\n    } catch (error) {\n      console.error('Failed to fetch passive income:', error);\n    }\n  };\n\n  return (\n    <header className=\"bg-slate-900 border-b border-slate-700 px-2 sm:px-6 py-2 sm:py-4 safe-area-top\">\n      <div className=\"flex items-center justify-between\">\n        {/* Logo/Title */}\n        <div className=\"flex items-center\">\n          <h1 className=\"text-base sm:text-lg md:text-2xl font-bold text-white\">Mariposa</h1>\n        </div>\n\n        {/* Right side - User info or Login button */}\n        <div className=\"flex items-center space-x-1 sm:space-x-4\">\n          {user ? (\n            <>\n              {/* Inventory Icons - Hidden on very small screens */}\n              <div className=\"hidden md:flex items-center space-x-3\">\n                <div className=\"flex items-center space-x-1 text-slate-300\">\n                  <Sprout className=\"h-4 w-4 text-yellow-400\" />\n                  <span className=\"text-sm font-medium\">{inventoryCounts.seeds}</span>\n                </div>\n                <div className=\"flex items-center space-x-1 text-slate-300\">\n                  <Flower className=\"h-4 w-4 text-pink-400\" />\n                  <span className=\"text-sm font-medium\">{inventoryCounts.flowers}</span>\n                </div>\n                <div className=\"flex items-center space-x-1 text-slate-300\">\n                  <Package className=\"h-4 w-4 text-purple-400\" />\n                  <span className=\"text-sm font-medium\">{inventoryCounts.bouquets}</span>\n                </div>\n                <div className=\"flex items-center space-x-1 text-slate-300\">\n                  <Bug className=\"h-4 w-4 text-blue-400\" />\n                  <span className=\"text-sm font-medium\">{inventoryCounts.butterflies}</span>\n                </div>\n                <div className=\"flex items-center space-x-1 text-slate-300\">\n                  <Bug className=\"h-4 w-4 text-green-500\" />\n                  <span className=\"text-sm font-medium\">{inventoryCounts.caterpillars}</span>\n                </div>\n                <div className=\"flex items-center space-x-1 text-slate-300\">\n                  <Fish className=\"h-4 w-4 text-cyan-400\" />\n                  <span className=\"text-sm font-medium\">{inventoryCounts.fish}</span>\n                </div>\n              </div>\n              \n              {/* Suns Display - Gold style like credits */}\n              <div className=\"flex items-center space-x-2 bg-slate-800 px-2 sm:px-4 py-1 sm:py-2 rounded-lg border border-yellow-500\">\n                <Sun className=\"h-4 w-4 sm:h-5 sm:w-5 text-yellow-400\" />\n                <span className=\"text-yellow-400 font-semibold text-sm sm:text-base\">{suns} ☀️</span>\n              </div>\n\n              {/* DNA Display - Turquoise style */}\n              <div className=\"flex items-center space-x-2 bg-slate-800 px-2 sm:px-4 py-1 sm:py-2 rounded-lg border border-teal-500\">\n                <Zap className=\"h-4 w-4 sm:h-5 sm:w-5 text-teal-400\" />\n                <span className=\"text-teal-400 font-semibold text-sm sm:text-base\">{dna} 🧬</span>\n              </div>\n\n              {/* Passive Income Display */}\n              {passiveIncome > 0 && (\n                <div className=\"hidden sm:flex items-center space-x-2 bg-slate-800 px-3 py-2 rounded-lg border border-green-500\">\n                  <TrendingUp className=\"h-4 w-4 text-green-400\" />\n                  <span className=\"text-green-400 font-semibold\">+{passiveIncome} Cr/h</span>\n                </div>\n              )}\n\n              {/* Credits Display - Always visible but smaller on mobile */}\n              <div className=\"flex items-center space-x-2 bg-slate-800 px-2 sm:px-4 py-1 sm:py-2 rounded-lg border border-orange-500\">\n                <Coins className=\"h-4 w-4 sm:h-5 sm:w-5 text-orange-400\" />\n                <span className=\"text-orange-400 font-semibold text-sm sm:text-base\">{credits} Cr</span>\n              </div>\n              \n              {/* Marie Posa Button - Smaller on mobile */}\n              <MariePosaButton userId={user.id} />\n\n              {/* Tickets Button - Purple style */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowTicketDialog(true)}\n                className=\"border-purple-500 text-purple-300 hover:bg-purple-800 hover:text-white shadow-lg shadow-purple-400/20 px-2 sm:px-3\"\n                title=\"Lose einlösen\"\n              >\n                <Ticket className=\"h-4 w-4 sm:mr-2 text-purple-400\" />\n                <span className=\"hidden sm:inline font-semibold\">{tickets}</span>\n                <span className=\"sm:hidden text-xs\">🎫</span>\n              </Button>\n\n              {/* User List Button - Smaller on mobile */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowUserList(true)}\n                className=\"border-cyan-500 text-cyan-300 hover:bg-cyan-800 hover:text-white px-2 sm:px-3\"\n              >\n                <Users className=\"h-4 w-4 sm:mr-2\" />\n                <span className=\"hidden sm:inline\">👥 User</span>\n              </Button>\n              \n              {/* User Info */}\n              <div className=\"flex items-center space-x-2 text-slate-300\">\n                <User className=\"h-5 w-5\" />\n                <span>{user.username}</span>\n              </div>\n              \n              \n              {/* Logout Button */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={logout}\n                className=\"border-slate-600 text-slate-300 hover:bg-slate-800 hover:text-white\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Logout\n              </Button>\n            </>\n          ) : (\n            <Button\n              onClick={onAuthClick}\n              className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n            >\n              Login / Register\n            </Button>\n          )}\n        </div>\n      </div>\n      \n      {/* User List Modal */}\n      <UserListModal \n        isOpen={showUserList} \n        onClose={() => setShowUserList(false)}\n        onVisitExhibition={handleVisitExhibition}\n      />\n      \n      {/* Emergency Dialog */}\n      <EmergencyDialog\n        isOpen={showEmergencyDialog}\n        onClose={() => setShowEmergencyDialog(false)}\n        onSeedsReceived={handleEmergencySeedsReceived}\n      />\n\n      {/* Ticket Redemption Dialog */}\n      <TicketRedemptionDialog\n        isOpen={showTicketDialog}\n        onClose={() => setShowTicketDialog(false)}\n        userTickets={tickets}\n        onRedeem={async (itemType: string, cost: number) => {\n          try {\n            const response = await fetch(`/api/user/${user?.id}/redeem-tickets`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'X-User-Id': user?.id?.toString() || '1'\n              },\n              body: JSON.stringify({\n                prizeType: itemType,\n                cost: cost\n              })\n            });\n\n            const data = await response.json();\n            \n            if (response.ok && data.success) {\n              // Refresh user data immediately\n              fetchTickets();\n              fetchCredits();\n              fetchSuns();\n              fetchDna();\n              \n              // Multiple attempts to ensure inventory update\n              setTimeout(() => {\n                fetchInventoryCounts();\n              }, 100);\n              \n              // Force second update after longer delay\n              setTimeout(() => {\n                fetchInventoryCounts();\n                \n                // Trigger inventory view refresh\n                window.dispatchEvent(new CustomEvent('refreshInventory'));\n              }, 500);\n              \n              return { success: true, message: data.message || \"Preis erfolgreich eingelöst!\" };\n            } else {\n              return { success: false, message: data.message || \"Fehler beim Einlösen\" };\n            }\n          } catch (error) {\n            console.error('Redemption error:', error);\n            return { success: false, message: \"Fehler beim Einlösen\" };\n          }\n        }}\n      />\n\n      {/* Donate Dialog */}\n      <DonateDialog\n        open={showDonateDialog}\n        onOpenChange={setShowDonateDialog}\n        recipientName={user?.username || \"dem Spieler\"}\n      />\n\n      {/* Foreign Exhibition Modal/View */}\n      {foreignExhibition && (\n        <div className=\"fixed inset-0 z-50 bg-black/80\">\n          <ForeignExhibitionView\n            ownerId={foreignExhibition.ownerId}\n            ownerName={foreignExhibition.ownerName}\n            onBack={handleBackFromForeign}\n          />\n        </div>\n      )}\n    </header>\n  );\n};\n","size_bytes":18475},"client/src/components/InventoryView.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useNotification } from \"../hooks/useNotification\";\nimport { useSuns } from \"@/lib/stores/useSuns\";\nimport { HelpButton } from './HelpButton';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\nimport { RarityImage } from \"./RarityImage\";\nimport { FlowerHoverPreview } from \"./FlowerHoverPreview\";\nimport { ButterflyHoverPreview } from \"./ButterflyHoverPreview\";\nimport { FishHoverPreview } from \"./FishHoverPreview\";\nimport { CaterpillarHoverPreview } from \"./CaterpillarHoverPreview\";\nimport { CaterpillarDetailModal } from \"./CaterpillarDetailModal\";\nimport type { UserFlower, UserBouquet, UserButterfly, UserVipButterfly, UserFish, UserCaterpillar } from \"@shared/schema\";\n\nexport const InventoryView: React.FC = () => {\n  const { user } = useAuth();\n  const { setSuns } = useSuns();\n  const { showNotification } = useNotification();\n  const [mySeeds, setMySeeds] = useState<any[]>([]);\n  const [myFlowers, setMyFlowers] = useState<UserFlower[]>([]);\n  const [myBouquets, setMyBouquets] = useState<UserBouquet[]>([]);\n  const [myButterflies, setMyButterflies] = useState<UserButterfly[]>([]);\n  const [myVipButterflies, setMyVipButterflies] = useState<UserVipButterfly[]>([]);\n  const [myFish, setMyFish] = useState<UserFish[]>([]);\n  const [myCaterpillars, setMyCaterpillars] = useState<UserCaterpillar[]>([]);\n  const [selectedCaterpillar, setSelectedCaterpillar] = useState<UserCaterpillar | null>(null);\n  const [showCaterpillarModal, setShowCaterpillarModal] = useState(false);\n\n  const getBorderColor = (rarity: RarityTier): string => {\n    switch (rarity) {\n      case 'common': return '#fbbf24';      // yellow-400\n      case 'uncommon': return '#4ade80';    // green-400  \n      case 'rare': return '#3b82f6';        // blue-400\n      case 'super-rare': return '#06b6d4';  // cyan-400\n      case 'epic': return '#a855f7';        // purple-400\n      case 'legendary': return '#f97316';   // orange-400\n      case 'mythical': return '#ef4444';    // red-400\n      default: return '#9ca3af';            // gray-400\n    }\n  };\n\n  const getSortedFlowers = (rarityFilter?: string | string[]) => {\n    let filtered = myFlowers;\n    \n    if (rarityFilter) {\n      if (Array.isArray(rarityFilter)) {\n        filtered = myFlowers.filter(flower => flower.flowerRarity && rarityFilter.includes(flower.flowerRarity));\n      } else {\n        filtered = myFlowers.filter(flower => flower.flowerRarity === rarityFilter);\n      }\n    }\n    \n    return filtered.sort((a, b) => (a.flowerName || '').localeCompare(b.flowerName || ''));\n  };\n\n  const getFlowersByRarity = (rarity: string) => {\n    return myFlowers.filter(flower => flower.flowerRarity === rarity);\n  };\n\n  const getButterflyesByRarity = (rarity: string) => {\n    return myButterflies.filter(butterfly => butterfly.butterflyRarity === rarity);\n  };\n\n  const getFishByRarity = (rarity: string) => {\n    return myFish.filter(fish => fish.fishRarity === rarity);\n  };\n\n  const getCaterpillarsByRarity = (rarity: string) => {\n    return myCaterpillars.filter(caterpillar => caterpillar.caterpillarRarity === rarity);\n  };\n\n  const openCaterpillarModal = (caterpillar: UserCaterpillar) => {\n    setSelectedCaterpillar(caterpillar);\n    setShowCaterpillarModal(true);\n  };\n\n  const closeCaterpillarModal = () => {\n    setSelectedCaterpillar(null);\n    setShowCaterpillarModal(false);\n  };\n\n  const handleCaterpillarSold = () => {\n    fetchMyCaterpillars(); // Reload caterpillars after selling\n    closeCaterpillarModal();\n  };\n\n  const getBouquetsByRarity = (rarity: string) => {\n    return myBouquets.filter(bouquet => (bouquet.bouquetRarity || \"common\") === rarity && bouquet.quantity > 0);\n  };\n\n  const getSortedButterflies = (rarityFilter?: string | string[]) => {\n    let filtered = myButterflies;\n    \n    if (rarityFilter) {\n      if (Array.isArray(rarityFilter)) {\n        filtered = myButterflies.filter(butterfly => rarityFilter.includes(butterfly.butterflyRarity));\n      } else {\n        filtered = myButterflies.filter(butterfly => butterfly.butterflyRarity === rarityFilter);\n      }\n    }\n    \n    return filtered.sort((a, b) => a.butterflyName.localeCompare(b.butterflyName));\n  };\n\n  const getSortedBouquets = (rarityFilter?: string | string[]) => {\n    let filtered = myBouquets.filter(bouquet => bouquet.quantity > 0);\n    \n    if (rarityFilter) {\n      if (Array.isArray(rarityFilter)) {\n        filtered = filtered.filter(bouquet => rarityFilter.includes(bouquet.bouquetRarity || \"common\"));\n      } else {\n        filtered = filtered.filter(bouquet => (bouquet.bouquetRarity || \"common\") === rarityFilter);\n      }\n    }\n    \n    return filtered.sort((a, b) => a.bouquetName.localeCompare(b.bouquetName));\n  };\n\n  const getRarityLabel = (rarity: string) => {\n    switch (rarity) {\n      case 'common': return 'Gewöhnlich';\n      case 'uncommon': return 'Ungewöhnlich'; \n      case 'rare': return 'Selten';\n      case 'super-rare': return 'Super-Selten';\n      case 'epic': return 'Episch';\n      case 'legendary': return 'Legendär';\n      case 'mythical': return 'Mythisch';\n      default: return rarity;\n    }\n  };\n\n  const getRarityColorClass = (rarity: string) => {\n    switch (rarity) {\n      case 'common': return 'text-yellow-400';\n      case 'uncommon': return 'text-green-400';\n      case 'rare': return 'text-blue-400';\n      case 'super-rare': return 'text-cyan-400';\n      case 'epic': return 'text-purple-400';\n      case 'legendary': return 'text-orange-400';\n      case 'mythical': return 'text-red-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const rarities = ['common', 'uncommon', 'rare', 'super-rare', 'epic', 'legendary', 'mythical'];\n\n  const FlowerCard = ({ flower, getBorderColor }: { flower: any; getBorderColor: (rarity: RarityTier) => string }) => (\n    <div\n      className=\"bg-slate-900 rounded-lg p-3 border-2\"\n      style={{ borderColor: getBorderColor(flower.flowerRarity as RarityTier) }}\n    >\n      <div className=\"flex items-center space-x-3\">\n        <FlowerHoverPreview\n          flowerImageUrl={flower.flowerImageUrl}\n          flowerName={flower.flowerName}\n          rarity={flower.flowerRarity as RarityTier}\n        >\n          <RarityImage \n            src={flower.flowerImageUrl}\n            alt={flower.flowerName}\n            rarity={flower.flowerRarity as RarityTier}\n            size=\"medium\"\n            className=\"w-12 h-12\"\n          />\n        </FlowerHoverPreview>\n        <div className=\"flex-1\">\n          <h4 className=\"font-bold text-white text-sm\">{flower.flowerName}</h4>\n          <div className=\"flex items-center justify-between gap-2\">\n            <span className={`text-xs ${getRarityColor(flower.flowerRarity as RarityTier)}`}>\n              {getRarityDisplayName(flower.flowerRarity as RarityTier)}\n            </span>\n            <span className=\"text-sm font-bold text-green-400 flex-shrink-0\">x{flower.quantity}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const getButterflyToSunsPrice = (rarity: string): number => {\n    const prices = {\n      'common': 30,\n      'uncommon': 45,\n      'rare': 70,\n      'super-rare': 100,\n      'epic': 150,\n      'legendary': 250,\n      'mythical': 500\n    };\n    return prices[rarity as keyof typeof prices] || 30;\n  };\n\n  const sellButterflyForSuns = async (butterflyId: number) => {\n    if (!user) return;\n    \n    try {\n      const response = await fetch('/api/inventory/sell-butterfly-for-suns', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          butterflyId\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        // Show success message\n        console.log(`✅ ${data.message}`);\n        // Refresh butterflies\n        await fetchMyButterflies();\n        // Update suns in header\n        const sunResponse = await fetch(`/api/user/${user.id}/suns`);\n        if (sunResponse.ok) {\n          const sunData = await sunResponse.json();\n          setSuns(sunData.suns);\n        }\n      } else {\n        const errorData = await response.json();\n        console.error('Failed to sell butterfly:', errorData.message);\n      }\n    } catch (error) {\n      console.error('Error selling butterfly:', error);\n    }\n  };\n\n  // Fish and Caterpillar Card Components\n  const FishCard = ({ fish, getBorderColor }: { fish: any; getBorderColor: (rarity: RarityTier) => string }) => (\n    <div\n      className=\"bg-slate-900 rounded-lg p-3 border-2\"\n      style={{ borderColor: getBorderColor(fish.fishRarity as RarityTier) }}\n    >\n      <div className=\"flex items-center space-x-3\">\n        <FishHoverPreview\n          fishImageUrl={fish.fishImageUrl}\n          fishName={fish.fishName}\n          rarity={fish.fishRarity as RarityTier}\n        >\n          <RarityImage \n            src={fish.fishImageUrl}\n            alt={fish.fishName}\n            rarity={fish.fishRarity as RarityTier}\n            size=\"medium\"\n            className=\"w-12 h-12\"\n          />\n        </FishHoverPreview>\n        <div className=\"flex-1\">\n          <h4 className=\"font-bold text-white text-sm\">{fish.fishName}</h4>\n          <div className=\"flex items-center justify-between gap-2\">\n            <span className={`text-xs ${getRarityColor(fish.fishRarity as RarityTier)}`}>\n              {getRarityDisplayName(fish.fishRarity as RarityTier)}\n            </span>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <div className=\"bg-blue-500 text-white px-2 py-1 rounded text-xs font-bold flex items-center justify-center min-w-[40px]\">\n            x{fish.quantity}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const CaterpillarCard = ({ caterpillar, getBorderColor }: { caterpillar: any; getBorderColor: (rarity: RarityTier) => string }) => (\n    <div\n      className=\"bg-slate-900 rounded-lg p-3 border-2\"\n      style={{ borderColor: getBorderColor(caterpillar.caterpillarRarity as RarityTier) }}\n    >\n      <div className=\"flex items-center space-x-3\">\n        <CaterpillarHoverPreview\n          caterpillarImageUrl={caterpillar.caterpillarImageUrl}\n          caterpillarName={caterpillar.caterpillarName}\n          rarity={caterpillar.caterpillarRarity as RarityTier}\n        >\n          <RarityImage \n            src={caterpillar.caterpillarImageUrl}\n            alt={caterpillar.caterpillarName}\n            rarity={caterpillar.caterpillarRarity as RarityTier}\n            size=\"medium\"\n            className=\"w-12 h-12\"\n          />\n        </CaterpillarHoverPreview>\n        <div className=\"flex-1\">\n          <h4 className=\"font-bold text-white text-sm\">{caterpillar.caterpillarName}</h4>\n          <div className=\"flex items-center justify-between gap-2\">\n            <span className={`text-xs ${getRarityColor(caterpillar.caterpillarRarity as RarityTier)}`}>\n              {getRarityDisplayName(caterpillar.caterpillarRarity as RarityTier)}\n            </span>\n          </div>\n        </div>\n        <div className=\"bg-green-600 text-white px-2 py-1 rounded text-xs font-bold flex items-center justify-center min-w-[40px]\">\n          x{caterpillar.quantity}\n        </div>\n      </div>\n    </div>\n  );\n\n  const ButterflyCard = ({ butterfly, getBorderColor }: { butterfly: any; getBorderColor: (rarity: RarityTier) => string }) => (\n    <div\n      className=\"bg-slate-900 rounded-lg p-3 border-2\"\n      style={{ borderColor: getBorderColor(butterfly.butterflyRarity as RarityTier) }}\n    >\n      <div className=\"flex items-center space-x-3\">\n        <ButterflyHoverPreview\n          butterflyImageUrl={butterfly.butterflyImageUrl}\n          butterflyName={butterfly.butterflyName}\n          rarity={butterfly.butterflyRarity as RarityTier}\n        >\n          <RarityImage \n            src={butterfly.butterflyImageUrl}\n            alt={butterfly.butterflyName}\n            rarity={butterfly.butterflyRarity as RarityTier}\n            size=\"medium\"\n            className=\"w-12 h-12\"\n          />\n        </ButterflyHoverPreview>\n        <div className=\"flex-1\">\n          <h4 className=\"font-bold text-white text-sm\">{butterfly.butterflyName}</h4>\n          <div className=\"flex items-center justify-between gap-2\">\n            <span className={`text-xs ${getRarityColor(butterfly.butterflyRarity as RarityTier)}`}>\n              {getRarityDisplayName(butterfly.butterflyRarity as RarityTier)}\n            </span>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <div className=\"bg-green-500 text-white px-2 py-1 rounded text-xs font-bold flex items-center justify-center min-w-[40px]\">\n            x{butterfly.quantity}\n          </div>\n          <button\n            onClick={() => sellButterflyForSuns(butterfly.id)}\n            className=\"bg-gradient-to-br from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white px-2 py-1 rounded text-xs font-bold flex items-center gap-1 transition-all duration-200 hover:scale-105 min-w-[40px] justify-center\"\n            title={`Verkaufe für ${getButterflyToSunsPrice(butterfly.butterflyRarity)} Sonnen`}\n          >\n            <span className=\"text-xs\">☀️</span>\n            {getButterflyToSunsPrice(butterfly.butterflyRarity)}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n\n  const VipButterflyCard = ({ vipButterfly }: { vipButterfly: UserVipButterfly }) => (\n    <div className=\"bg-gradient-to-r from-pink-900/50 to-purple-900/50 rounded-lg p-3 border-2 border-pink-500 relative\">\n      {/* Animated sparkle overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/5 to-purple-500/5 rounded-lg animate-pulse\"></div>\n      \n      <div className=\"flex items-center space-x-3 relative z-10\">\n        {/* Animated GIF Display with Hover Preview */}\n        <ButterflyHoverPreview\n          butterflyImageUrl={vipButterfly.vipButterflyImageUrl}\n          butterflyName={vipButterfly.vipButterflyName}\n          rarity=\"vip\"\n        >\n          <div className=\"relative\">\n            <img\n              src={vipButterfly.vipButterflyImageUrl}\n              alt={vipButterfly.vipButterflyName}\n              className=\"w-12 h-12 rounded-lg object-cover cursor-pointer\"\n              onError={(e) => {\n                e.currentTarget.style.display = 'none';\n              }}\n            />\n            {/* VIP Crown Icon */}\n            <div className=\"absolute -top-1 -right-1 bg-yellow-400 rounded-full p-1\">\n              <span className=\"text-xs text-yellow-900\">⭐</span>\n            </div>\n          </div>\n        </ButterflyHoverPreview>\n        \n        <div className=\"flex-1\">\n          <h4 className=\"font-bold text-pink-200 text-sm flex items-center gap-1\">\n            {vipButterfly.vipButterflyName}\n            <span className=\"text-yellow-400\">👑</span>\n          </h4>\n          <div className=\"flex items-center justify-between gap-2\">\n            <span className=\"text-xs text-pink-300 font-semibold\">\n              ✨ VIP Premium\n            </span>\n            <span className=\"text-sm font-bold text-pink-400 flex-shrink-0\">x{vipButterfly.quantity}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const BouquetCard = ({ bouquet, getBorderColor }: { bouquet: any; getBorderColor: (rarity: RarityTier) => string }) => (\n    <div\n      className=\"bg-slate-900 rounded-lg p-3 border-2\"\n      style={{ borderColor: getBorderColor((bouquet.bouquetRarity || \"common\") as RarityTier) }}\n    >\n      <div className=\"flex items-center space-x-3\">\n        <RarityImage \n          src=\"/Blumen/Bouquet.jpg\"\n          alt=\"Bouquet\"\n          rarity={(bouquet.bouquetRarity || \"common\") as RarityTier}\n          size=\"medium\"\n          className=\"w-12 h-12\"\n        />\n        <div className=\"flex-1\">\n          <h4 className=\"font-bold text-white text-sm\">{bouquet.bouquetName}</h4>\n          <div className=\"flex items-center justify-between gap-2\">\n            <span className={`text-xs ${getRarityColor((bouquet.bouquetRarity || \"common\") as RarityTier)}`}>\n              {getRarityDisplayName((bouquet.bouquetRarity || \"common\") as RarityTier)}\n            </span>\n            <span className=\"text-sm font-bold text-green-400 flex-shrink-0\">x{bouquet.quantity}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  useEffect(() => {\n    if (user) {\n      fetchMySeeds();\n      fetchMyFlowers();\n      fetchMyBouquets();\n      fetchMyButterflies();\n      fetchMyVipButterflies(); // Initial VIP fetch\n      fetchMyFish();\n      fetchMyCaterpillars();\n    }\n  }, [user]);\n\n  // Listen for inventory refresh events (from ticket redemption)\n  useEffect(() => {\n    const handleRefreshInventory = () => {\n      if (user) {\n        console.log('🔄 Refreshing inventory after ticket redemption');\n        fetchMySeeds();\n        fetchMyFlowers();\n        fetchMyBouquets();\n        fetchMyButterflies();\n        fetchMyVipButterflies();\n        fetchMyFish();\n        fetchMyCaterpillars();\n      }\n    };\n\n    window.addEventListener('refreshInventory', handleRefreshInventory);\n    return () => window.removeEventListener('refreshInventory', handleRefreshInventory);\n  }, [user]);\n\n  // Auto-refresh butterflies inventory every 15 seconds\n  useEffect(() => {\n    if (!user) return;\n    \n    const interval = setInterval(() => {\n      fetchMyButterflies();\n      fetchMyVipButterflies();\n      fetchMyFish();\n      fetchMyCaterpillars();\n    }, 15000);\n    \n    return () => clearInterval(interval);\n  }, [user]);\n\n  const fetchMySeeds = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/seeds`);\n      if (response.ok) {\n        const data = await response.json();\n        setMySeeds(data.seeds || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my seeds:', error);\n    }\n  };\n\n  const fetchMyFlowers = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/flowers`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyFlowers(data.flowers || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my flowers:', error);\n    }\n  };\n\n  const fetchMyBouquets = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/bouquets`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyBouquets(data.bouquets || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my bouquets:', error);\n    }\n  };\n\n  const fetchMyButterflies = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/butterflies`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyButterflies(data.butterflies || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my butterflies:', error);\n    }\n  };\n\n  const fetchMyFish = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/fish`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyFish(data.fish || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my fish:', error);\n    }\n  };\n\n  const fetchMyCaterpillars = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/caterpillars`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyCaterpillars(data.caterpillars || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my caterpillars:', error);\n    }\n  };\n\n  const fetchMyVipButterflies = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/vip-butterflies`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyVipButterflies(data.vipButterflies || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my VIP butterflies:', error);\n    }\n  };\n\n  const handleCreateBouquet = async (flowerId1: number, flowerId2: number, flowerId3: number, name?: string, generateName?: boolean) => {\n    try {\n      const response = await fetch('/api/bouquets/create', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({\n          flowerId1,\n          flowerId2,\n          flowerId3,\n          name,\n          generateName\n        })\n      });\n\n      if (response.ok) {\n        // Refresh all relevant data\n        await fetchMyFlowers();\n        await fetchMyBouquets();\n        // Update credits would be here if we had access to it\n      } else {\n        const error = await response.json();\n        showNotification(error.message || 'Fehler beim Erstellen des Bouquets', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to create bouquet:', error);\n      showNotification('Fehler beim Erstellen des Bouquets', 'error');\n    }\n  };\n\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Card className=\"bg-slate-800 border-slate-700 text-white\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-slate-400\">Bitte melde dich an, um dein Inventar zu sehen</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-8 bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 min-h-full\">\n      {/* Compact Inventory Header */}\n      <div className=\"bg-slate-800/60 p-4 rounded-lg border border-indigo-500/30\">\n        <div className=\"relative\">\n          {/* HelpButton in absoluter Position rechts oben */}\n          <div className=\"absolute top-0 right-0\">\n            <HelpButton helpText=\"Im Inventar siehst du alle deine gesammelten Gegenstände: Samen, Blumen, Schmetterlinge, Fische und Raupen. Du kannst sie hier verwalten und für verschiedene Zwecke verwenden!\" viewType=\"inventory\" />\n          </div>\n          \n          {/* Zentrierter Content */}\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-indigo-300 mb-1\">\n              Inventar 🎒\n            </h1>\n            <p className=\"text-slate-400 text-sm\">Verwalte deine Blumen und Schmetterlinge</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Organized Inventory Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Seeds Section */}\n        <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border border-green-500/30 shadow-lg\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-white flex items-center\">\n              <span className=\"text-lg font-semibold text-green-300\">\n                Samen 🌱 ({mySeeds.filter(seed => seed.quantity > 0).length})\n              </span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {mySeeds.filter(seed => seed.quantity > 0).length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-slate-400\">Noch keine Samen gesammelt</p>\n                <p className=\"text-slate-500 text-sm mt-2\">Kaufe Samen im Markt oder erhalte sie durch Gärtnern</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                {mySeeds.filter(seed => seed.quantity > 0).map((userSeed) => (\n                  <div\n                    key={userSeed.id}\n                    className=\"bg-slate-900 rounded-lg p-3 border-2\"\n                    style={{ borderColor: getBorderColor(userSeed.seedRarity as RarityTier) }}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <RarityImage \n                        src=\"/Blumen/0.jpg\"\n                        alt={userSeed.seedName}\n                        rarity={userSeed.seedRarity as RarityTier}\n                        size=\"large\"\n                      />\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-bold text-white text-sm\">{userSeed.seedName}</h4>\n                        <div className=\"flex items-center justify-between gap-2\">\n                          <span className={`text-xs ${getRarityColor(userSeed.seedRarity as RarityTier)}`}>\n                            {getRarityDisplayName(userSeed.seedRarity as RarityTier)}\n                          </span>\n                          <span className=\"text-sm font-bold text-green-400 flex-shrink-0\">x{userSeed.quantity}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Flowers Section */}\n        <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border border-pink-500/30 shadow-lg\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-white flex items-center\">\n              <span className=\"text-lg font-semibold text-pink-300\">\n                Blumen 🌸 ({myFlowers.length})\n              </span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {myFlowers.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-slate-400\">Noch keine Blumen gesammelt</p>\n                <p className=\"text-slate-500 text-sm mt-2\">Züchte Blumen in deinem Garten</p>\n              </div>\n            ) : (\n              <Accordion type=\"multiple\" className=\"w-full space-y-2\">\n                {rarities.map((rarity) => {\n                  const flowersInRarity = getFlowersByRarity(rarity);\n                  if (flowersInRarity.length === 0) return null;\n                  \n                  return (\n                    <AccordionItem key={rarity} value={rarity} className=\"border border-slate-600 rounded-lg bg-slate-800/50\">\n                      <AccordionTrigger className=\"px-4 py-3 hover:no-underline\">\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span className={`font-semibold ${getRarityColorClass(rarity)}`}>\n                            {getRarityLabel(rarity)}\n                          </span>\n                          <span className=\"text-sm text-slate-400\">\n                            {flowersInRarity.reduce((sum, flower) => sum + flower.quantity, 0)} Blumen\n                          </span>\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent className=\"px-4 pb-4\">\n                        <div className=\"grid grid-cols-1 gap-3 max-h-80 overflow-y-auto\">\n                          {getSortedFlowers(rarity).map((flower) => (\n                            <FlowerCard key={flower.id} flower={flower} getBorderColor={getBorderColor} />\n                          ))}\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                  );\n                })}\n              </Accordion>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Butterflies Section */}\n        <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border border-yellow-500/30 shadow-lg\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-white flex items-center\">\n              <span className=\"text-lg font-semibold text-yellow-300\">\n                Schmetterlinge 🦋 ({myButterflies.length})\n              </span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {myButterflies.length === 0 ? (\n              <div className=\"text-center py-12 relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-500/5 to-orange-500/5 rounded-lg\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"relative mb-6\">\n                    <div className=\"text-6xl animate-bounce mx-auto\">🦋</div>\n                  </div>\n                  <p className=\"text-slate-300 text-xl mb-3\">🦋 Noch keine Schmetterlinge gefangen</p>\n                  <p className=\"text-slate-400 text-lg\">Schmetterlinge werden von deinen Blumen angezogen</p>\n                </div>\n              </div>\n            ) : (\n              <Accordion type=\"multiple\" className=\"w-full space-y-2\">\n                {rarities.map((rarity) => {\n                  const butterfliesInRarity = getButterflyesByRarity(rarity);\n                  if (butterfliesInRarity.length === 0) return null;\n                  \n                  return (\n                    <AccordionItem key={rarity} value={rarity} className=\"border border-slate-600 rounded-lg bg-slate-800/50\">\n                      <AccordionTrigger className=\"px-4 py-3 hover:no-underline\">\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span className={`font-semibold ${getRarityColorClass(rarity)}`}>\n                            {getRarityLabel(rarity)}\n                          </span>\n                          <span className=\"text-sm text-slate-400\">\n                            {butterfliesInRarity.reduce((sum, butterfly) => sum + butterfly.quantity, 0)} Schmetterlinge\n                          </span>\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent className=\"px-4 pb-4\">\n                        <div className=\"grid grid-cols-1 gap-3 max-h-80 overflow-y-auto\">\n                          {getSortedButterflies(rarity).map((butterfly) => (\n                            <ButterflyCard key={butterfly.id} butterfly={butterfly} getBorderColor={getBorderColor} />\n                          ))}\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                  );\n                })}\n              </Accordion>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* VIP Butterflies Section */}\n        <Card className=\"bg-gradient-to-br from-pink-900 to-purple-900 border border-pink-500/50 shadow-lg relative overflow-hidden\">\n          {/* Animated background sparkles */}\n          <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/10 to-purple-500/10 animate-pulse\"></div>\n          \n          <CardHeader className=\"pb-3 relative z-10\">\n            <CardTitle className=\"text-white flex items-center\">\n              <span className=\"text-lg font-semibold text-pink-200\">\n                VIP Schmetterlinge ✨👑 ({myVipButterflies.length})\n              </span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"relative z-10\">\n            {myVipButterflies.length === 0 ? (\n              <div className=\"text-center py-12 relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/5 to-purple-500/5 rounded-lg\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"relative mb-6\">\n                    <div className=\"text-6xl animate-bounce mx-auto\">✨</div>\n                  </div>\n                  <p className=\"text-pink-200 text-xl mb-3\">✨ Noch keine VIP-Schmetterlinge</p>\n                  <p className=\"text-pink-300 text-lg\">Gewinne sie als 1. Preis in Flowerpower-Challenges!</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 gap-3 max-h-80 overflow-y-auto\">\n                {myVipButterflies.map((vipButterfly) => (\n                  <VipButterflyCard key={vipButterfly.id} vipButterfly={vipButterfly} />\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Fish Section */}\n        <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border border-blue-500/30 shadow-lg\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-white flex items-center\">\n              <span className=\"text-lg font-semibold text-blue-300\">\n                Fische 🐟 ({myFish.length})\n              </span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {myFish.length === 0 ? (\n              <div className=\"text-center py-12 relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/5 to-cyan-500/5 rounded-lg\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"relative mb-6\">\n                    <div className=\"text-6xl animate-bounce mx-auto\">🐟</div>\n                  </div>\n                  <p className=\"text-slate-300 text-xl mb-3\">🐟 Noch keine Fische gesammelt</p>\n                  <p className=\"text-slate-400 text-lg\">Fische können im Teich gefunden werden</p>\n                </div>\n              </div>\n            ) : (\n              <Accordion type=\"multiple\" className=\"w-full space-y-2\">\n                {rarities.map((rarity) => {\n                  const fishInRarity = getFishByRarity(rarity);\n                  if (fishInRarity.length === 0) return null;\n                  \n                  return (\n                    <AccordionItem key={rarity} value={rarity} className=\"border border-slate-600 rounded-lg bg-slate-800/50\">\n                      <AccordionTrigger className=\"px-4 py-3 hover:no-underline\">\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span className={`font-semibold ${getRarityColorClass(rarity)}`}>\n                            {getRarityLabel(rarity)}\n                          </span>\n                          <span className=\"text-sm text-slate-400\">\n                            {fishInRarity.reduce((sum, fish) => sum + fish.quantity, 0)} Fische\n                          </span>\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent className=\"px-4 pb-4\">\n                        <div className=\"grid grid-cols-1 gap-3 max-h-80 overflow-y-auto\">\n                          {fishInRarity.map((fish) => (\n                            <FishCard key={fish.id} fish={fish} getBorderColor={getBorderColor} />\n                          ))}\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                  );\n                })}\n              </Accordion>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Caterpillars Section */}\n        <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border border-green-500/30 shadow-lg\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-white flex items-center\">\n              <span className=\"text-lg font-semibold text-green-300\">\n                Raupen 🐛 ({myCaterpillars.length})\n              </span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {myCaterpillars.length === 0 ? (\n              <div className=\"text-center py-12 relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/5 to-emerald-500/5 rounded-lg\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"relative mb-6\">\n                    <div className=\"text-6xl animate-bounce mx-auto\">🐛</div>\n                  </div>\n                  <p className=\"text-slate-300 text-xl mb-3\">🐛 Noch keine Raupen gesammelt</p>\n                  <p className=\"text-slate-400 text-lg\">Raupen können im Teich gefunden werden</p>\n                </div>\n              </div>\n            ) : (\n              <Accordion type=\"multiple\" className=\"w-full space-y-2\">\n                {rarities.map((rarity) => {\n                  const caterpillarsInRarity = getCaterpillarsByRarity(rarity);\n                  if (caterpillarsInRarity.length === 0) return null;\n                  \n                  return (\n                    <AccordionItem key={rarity} value={rarity} className=\"border border-slate-600 rounded-lg bg-slate-800/50\">\n                      <AccordionTrigger className=\"px-4 py-3 hover:no-underline\">\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span className={`font-semibold ${getRarityColorClass(rarity)}`}>\n                            {getRarityLabel(rarity)}\n                          </span>\n                          <span className=\"text-sm text-slate-400\">\n                            {caterpillarsInRarity.reduce((sum, caterpillar) => sum + caterpillar.quantity, 0)} Raupen\n                          </span>\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent className=\"px-4 pb-4\">\n                        <div className=\"grid grid-cols-1 gap-3 max-h-80 overflow-y-auto\">\n                          {caterpillarsInRarity.map((caterpillar) => (\n                            <CaterpillarCard key={caterpillar.id} caterpillar={caterpillar} getBorderColor={getBorderColor} />\n                          ))}\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                  );\n                })}\n              </Accordion>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Bouquets Section */}\n        <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border border-purple-500/30 shadow-lg\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-white flex items-center\">\n              <span className=\"text-lg font-semibold text-purple-300\">\n                Bouquets 💐 ({myBouquets.filter(b => b.quantity > 0).length})\n              </span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {myBouquets.filter(b => b.quantity > 0).length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-slate-400\">Noch keine Bouquets erstellt</p>\n                <p className=\"text-slate-500 text-sm mt-2\">Erstelle Bouquets im Bouquet-Bereich</p>\n              </div>\n            ) : (\n              <Accordion type=\"multiple\" className=\"w-full space-y-2\">\n                {rarities.map((rarity) => {\n                  const bouquetsInRarity = getBouquetsByRarity(rarity);\n                  if (bouquetsInRarity.length === 0) return null;\n                  \n                  return (\n                    <AccordionItem key={rarity} value={rarity} className=\"border border-slate-600 rounded-lg bg-slate-800/50\">\n                      <AccordionTrigger className=\"px-4 py-3 hover:no-underline\">\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span className={`font-semibold ${getRarityColorClass(rarity)}`}>\n                            {getRarityLabel(rarity)}\n                          </span>\n                          <span className=\"text-sm text-slate-400\">\n                            {bouquetsInRarity.reduce((sum, bouquet) => sum + bouquet.quantity, 0)} Bouquets\n                          </span>\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent className=\"px-4 pb-4\">\n                        <div className=\"grid grid-cols-1 gap-3 max-h-80 overflow-y-auto\">\n                          {getSortedBouquets(rarity).map((bouquet) => (\n                            <BouquetCard key={bouquet.id} bouquet={bouquet} getBorderColor={getBorderColor} />\n                          ))}\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                  );\n                })}\n              </Accordion>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Caterpillar Detail Modal */}\n      {selectedCaterpillar && (\n        <CaterpillarDetailModal\n          isOpen={showCaterpillarModal}\n          onClose={closeCaterpillarModal}\n          caterpillar={{\n            id: selectedCaterpillar.id,\n            caterpillarName: selectedCaterpillar.caterpillarName,\n            caterpillarRarity: selectedCaterpillar.caterpillarRarity,\n            caterpillarImageUrl: selectedCaterpillar.caterpillarImageUrl,\n            userId: selectedCaterpillar.userId\n          }}\n          onSold={handleCaterpillarSold}\n          readOnly={false}\n        />\n      )}\n    </div>\n  );\n};","size_bytes":41009},"client/src/components/Layout.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Header } from \"./Header\";\nimport { Footer } from \"./Footer\";\nimport { AuthModal } from \"./AuthModal\";\nimport { Dashboard } from \"./Dashboard\";\nimport { GameView } from \"./GameView\";\nimport { GardenView } from \"./GardenView\";\nimport { TeichView } from \"./TeichView\";\nimport { MarketView } from \"./MarketView\";\nimport { InventoryView } from \"./InventoryView\";\nimport { DNAView } from \"./DNAView\";\nimport { BouquetsView } from \"./BouquetsView\";\nimport { FlowerpowerView } from \"./FlowerpowerView\";\nimport { ExhibitionView } from \"./ExhibitionView\";\nimport { AquariumView } from \"./AquariumView\";\nimport { MarieSlotView } from \"./MarieSlotView\";\nimport { CastleGardenView } from \"./CastleGardenView\";\nimport { VasesView } from \"./VasesView\";\nimport { EncyclopediaView } from \"./EncyclopediaView\";\nimport { DonateDialog } from \"./DonateDialog\";\nimport { ImpressumDialog } from \"./ImpressumDialog\";\nimport { DatenschutzDialog } from \"./DatenschutzDialog\";\nimport { LoginNotifications } from \"./LoginNotifications\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { useActivityDetection } from \"@/hooks/useActivityDetection\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\n// Balloon interface\ninterface Balloon {\n  id: string;\n  x: number; // X position (0-100%)\n  color: string;\n  startTime: number;\n  hasCard: boolean; // Some balloons have small cards\n}\n\n// Confetti interface\ninterface Confetti {\n  id: string;\n  x: number;\n  y: number;\n  color: string;\n  delay: number;\n}\n\n// Loot interface\ninterface Loot {\n  id: string;\n  x: number;\n  y: number;\n  type: 'credit' | 'sun' | 'dna' | 'ticket';\n  amount: number;\n}\n\n// Balloon component\nconst BalloonComponent: React.FC<{ \n  balloon: Balloon; \n  onPop: (id: string) => void;\n  setConfettiParticles: React.Dispatch<React.SetStateAction<Confetti[]>>;\n  setLootDrops: React.Dispatch<React.SetStateAction<Loot[]>>;\n  awardLoot: (type: 'credit' | 'sun' | 'dna' | 'ticket', amount: number, balloonId: string) => void;\n}> = ({ balloon, onPop, setConfettiParticles, setLootDrops, awardLoot }) => {\n  const [isPopped, setIsPopped] = useState(false);\n\n  const handleClick = (event: React.MouseEvent) => {\n    setIsPopped(true);\n    \n    // Get exact balloon position from click event\n    const rect = (event.target as HTMLElement).getBoundingClientRect();\n    const balloonCenterX = ((rect.left + rect.width / 2) / window.innerWidth) * 100;\n    const balloonCenterY = ((rect.top + rect.height / 2) / window.innerHeight) * 100;\n    \n    // Create confetti explosion\n    const newConfetti: Confetti[] = [];\n    const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F'];\n    \n    for (let i = 0; i < 25; i++) {\n      newConfetti.push({\n        id: `confetti-${balloon.id}-${i}`,\n        x: balloonCenterX,\n        y: balloonCenterY,\n        color: colors[Math.floor(Math.random() * colors.length)],\n        delay: Math.random() * 0.3\n      });\n    }\n    \n    // Add confetti to global state\n    setConfettiParticles(prev => [...prev, ...newConfetti]);\n    \n    // Remove confetti after animation\n    setTimeout(() => {\n      setConfettiParticles(prev => \n        prev.filter(confetti => !confetti.id.includes(balloon.id))\n      );\n    }, 1000);\n    \n    // Loot system for balloons without cards (75% chance)\n    if (!balloon.hasCard && Math.random() < 0.75) {\n      const lootTypes = ['credit', 'sun', 'dna'] as const;\n      const lootType = lootTypes[Math.floor(Math.random() * lootTypes.length)];\n      \n      const newLoot: Loot = {\n        id: `loot-${balloon.id}`,\n        x: balloonCenterX,\n        y: balloonCenterY,\n        type: lootType,\n        amount: 1\n      };\n      \n      setLootDrops(prev => [...prev, newLoot]);\n      \n      // Award the loot\n      awardLoot(lootType, 1, balloon.id);\n      \n      // Remove loot display after 2 seconds\n      setTimeout(() => {\n        setLootDrops(prev => prev.filter(loot => loot.id !== newLoot.id));\n      }, 2000);\n    }\n    \n    // Ticket system for balloons WITH cards (always gives 1 ticket)\n    if (balloon.hasCard) {\n      const ticketLoot: Loot = {\n        id: `ticket-${balloon.id}`,\n        x: balloonCenterX,\n        y: balloonCenterY,\n        type: 'ticket',\n        amount: 1\n      };\n      \n      setLootDrops(prev => [...prev, ticketLoot]);\n      \n      // Award the ticket\n      awardLoot('ticket', 1, balloon.id);\n      \n      // Remove loot display after 2 seconds\n      setTimeout(() => {\n        setLootDrops(prev => prev.filter(loot => loot.id !== ticketLoot.id));\n      }, 2000);\n    }\n    \n    // Add a small delay for pop animation\n    setTimeout(() => onPop(balloon.id), 150);\n  };\n\n  return (\n    <div\n      className={`fixed balloon ${isPopped ? 'balloon-popped' : ''}`}\n      style={{\n        left: `${balloon.x}%`,\n        bottom: isPopped ? '50%' : '-100px',\n        transform: 'translateX(-50%)',\n        zIndex: 1000,\n        cursor: 'pointer',\n        transition: isPopped ? 'all 0.15s ease-out' : 'none',\n        animation: isPopped ? 'none' : 'balloon-float 8s ease-in-out forwards'\n      }}\n      onClick={handleClick}\n    >\n      {/* Balloon string - BEHIND balloon */}\n      <div \n        style={{\n          position: 'absolute',\n          bottom: '-20px',\n          left: '50%',\n          transform: 'translateX(-50%)',\n          width: '1px',\n          height: balloon.hasCard ? '35px' : '20px',\n          backgroundColor: '#8B4513',\n          opacity: isPopped ? 0 : 1,\n          transition: 'opacity 0.15s ease-out'\n        }}\n      />\n      \n      {/* Small card hanging from string - BEHIND balloon */}\n      {balloon.hasCard && (\n        <div \n          style={{\n            position: 'absolute',\n            bottom: '-40px',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            width: '24px',\n            height: '18px',\n            backgroundColor: '#FFE4E1',\n            border: '1px solid #DDD',\n            borderRadius: '2px',\n            opacity: isPopped ? 0 : 1,\n            transition: 'opacity 0.15s ease-out',\n            boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n            fontSize: '8px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            color: '#666'\n          }}\n        >\n          🎁\n        </div>\n      )}\n\n      <div \n        className={`balloon-body ${isPopped ? 'scale-0' : ''} ${\n          isPopped ? '' : \n          parseInt(balloon.id.slice(-1)) % 3 === 0 ? 'balloon-wobble' :\n          parseInt(balloon.id.slice(-1)) % 3 === 1 ? 'balloon-wobble-2' : 'balloon-wobble-3'\n        }`}\n        style={{\n          width: '50px',\n          height: '60px',\n          backgroundColor: balloon.color,\n          borderRadius: '50% 50% 50% 50% / 35% 35% 65% 65%',\n          position: 'relative',\n          transition: 'transform 0.15s ease-out',\n          boxShadow: `inset -5px -5px 0 rgba(0,0,0,0.1), \n                      0 2px 8px rgba(0,0,0,0.3)`,\n          border: '1px solid rgba(255,255,255,0.3)'\n        }}\n      >\n        {/* Balloon highlight */}\n        <div \n          style={{\n            position: 'absolute',\n            top: '8px',\n            left: '12px',\n            width: '8px',\n            height: '12px',\n            backgroundColor: 'rgba(255,255,255,0.6)',\n            borderRadius: '50% 50% 50% 50% / 35% 35% 65% 65%',\n            opacity: isPopped ? 0 : 1,\n            transition: 'opacity 0.15s ease-out'\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport const Layout: React.FC = () => {\n  const [currentView, setCurrentView] = useState(\"garten\");\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [showDonateDialog, setShowDonateDialog] = useState(false);\n  const [showImpressumDialog, setShowImpressumDialog] = useState(false);\n  const [showDatenschutzDialog, setShowDatenschutzDialog] = useState(false);\n  const [headerRefreshTrigger, setHeaderRefreshTrigger] = useState(0);\n  const [balloons, setBalloons] = useState<Balloon[]>([]);\n  const [confettiParticles, setConfettiParticles] = useState<Confetti[]>([]);\n  const [lootDrops, setLootDrops] = useState<Loot[]>([]);\n  const { user, isLoading, hasCheckedAuth, checkAuth, showNotifications, setShowNotifications } = useAuth();\n  const { setCredits } = useCredits();\n  \n  // Initialize activity detection for performance optimization\n  useActivityDetection();\n\n  // Check authentication on component mount\n  useEffect(() => {\n    checkAuth();\n  }, [checkAuth]);\n\n  // Award loot function with balloon validation\n  const awardLoot = async (type: 'credit' | 'sun' | 'dna' | 'ticket', amount: number, balloonId: string) => {\n    if (!user || !balloonId) {\n      console.error('Missing user or balloon ID for loot collection');\n      return;\n    }\n    \n    try {\n      console.log(`🎈 Collecting balloon ${balloonId} for ${amount} ${type}(s)`);\n      \n      const response = await fetch('/api/balloon/collect', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json'\n        },\n        credentials: 'include', // 🔒 SECURITY: Use JWT cookies instead of forgeable headers\n        body: JSON.stringify({ \n          balloonId,\n          lootType: type,\n          amount \n        })\n      });\n      \n      const result = await response.json();\n      \n      if (!response.ok) {\n        console.error(`Balloon collection failed: ${result.message}`);\n        // Still refresh header in case of partial failure\n        setHeaderRefreshTrigger(prev => prev + 1);\n        return;\n      }\n      \n      if (result.success) {\n        console.log(`🎈 SUCCESS: ${result.message}`);\n        // Refresh header to show updated values\n        setHeaderRefreshTrigger(prev => prev + 1);\n      } else {\n        console.error(`Balloon collection failed: ${result.message}`);\n      }\n    } catch (error) {\n      console.error('Failed to collect balloon loot:', error);\n      // Refresh header anyway in case of network issues\n      setHeaderRefreshTrigger(prev => prev + 1);\n    }\n  };\n\n  // Balloon colors\n  const balloonColors = [\n    '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', \n    '#FFEAA7', '#DDA0DD', '#FF9F43', '#00B894',\n    '#FDA7DF', '#74B9FF', '#A29BFE', '#6C5CE7'\n  ];\n\n  // Set initial credits when user logs in\n  useEffect(() => {\n    if (user) {\n      setCredits(user.credits);\n    }\n  }, [user, setCredits]);\n\n  // Balloon spawning system with proper spawn/pause phases  \n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    // Use unique keys to prevent multiple timers\n    const spawnTimerKey = 'balloon-spawn-timer';\n    const phaseTimerKey = 'balloon-phase-timer';\n    \n    // Clear any existing timers\n    if ((window as any)[spawnTimerKey]) {\n      clearInterval((window as any)[spawnTimerKey]);\n    }\n    if ((window as any)[phaseTimerKey]) {\n      clearTimeout((window as any)[phaseTimerKey]);\n    }\n\n    const spawnBalloon = () => {\n      // Only disable balloons if we're in castle garden AND toggle is disabled\n      if (currentView === 'schlossgarten' && (window as any).balloonsDisabledInCastle) {\n        return; // Exit early if balloons are disabled in castle garden\n      }\n      \n      // Determine how many balloons to spawn\n      const randomChance = Math.random();\n      let balloonCount: number;\n      \n      if (randomChance < 0.85) {\n        balloonCount = 1; // 85% chance for 1 balloon\n      } else if (randomChance < 0.95) {\n        balloonCount = 2; // 10% chance for 2 balloons\n      } else {\n        balloonCount = 3; // 5% chance for 3 balloons\n      }\n      \n      console.log(`🎈 Spawning ${balloonCount} balloon${balloonCount > 1 ? 's' : ''}`);\n      \n      const newBalloons: Balloon[] = [];\n      \n      for (let i = 0; i < balloonCount; i++) {\n        const newBalloon: Balloon = {\n          id: `balloon-${Date.now()}-${Math.random()}-${i}`,\n          x: Math.random() * 90 + 5, // 5% to 95% to avoid edges\n          color: balloonColors[Math.floor(Math.random() * balloonColors.length)],\n          startTime: Date.now() + (i * 100), // Slight delay to avoid same exact time\n          hasCard: Math.random() < 0.3 // 30% chance for a card\n        };\n        newBalloons.push(newBalloon);\n      }\n      \n      setBalloons(prev => [...prev, ...newBalloons]);\n\n      // Remove balloons after 8 seconds (animation duration)\n      newBalloons.forEach(balloon => {\n        setTimeout(() => {\n          setBalloons(prev => prev.filter(b => b.id !== balloon.id));\n        }, 8000);\n      });\n    };\n\n    const startSpawningPhase = () => {\n      console.log('🎈 SPAWN PHASE started (90 seconds)');\n      \n      // Spawn balloons every 7 seconds (middle of 5-10 seconds)\n      (window as any)[spawnTimerKey] = setInterval(spawnBalloon, 7000);\n      \n      // Stop spawning after 90 seconds and start pause\n      (window as any)[phaseTimerKey] = setTimeout(() => {\n        if ((window as any)[spawnTimerKey]) {\n          clearInterval((window as any)[spawnTimerKey]);\n          delete (window as any)[spawnTimerKey];\n        }\n        startPausePhase();\n      }, 90000); // 90 seconds spawn phase\n    };\n\n    const startPausePhase = () => {\n      console.log('🎈 PAUSE PHASE started (40 seconds)');\n      \n      // Pause for 40 seconds, then restart spawning\n      (window as any)[phaseTimerKey] = setTimeout(() => {\n        startSpawningPhase();\n      }, 40000); // 40 seconds pause phase\n    };\n\n    // Start first spawning phase after 3 seconds\n    setTimeout(() => {\n      startSpawningPhase();\n    }, 3000);\n\n    return () => {\n      if ((window as any)[spawnTimerKey]) {\n        clearInterval((window as any)[spawnTimerKey]);\n        delete (window as any)[spawnTimerKey];\n      }\n      if ((window as any)[phaseTimerKey]) {\n        clearTimeout((window as any)[phaseTimerKey]);\n        delete (window as any)[phaseTimerKey];\n      }\n    };\n  }, []); // No dependencies to avoid HMR restarts\n\n  // Function to pop balloon\n  const popBalloon = (balloonId: string) => {\n    setBalloons(prev => prev.filter(b => b.id !== balloonId));\n  };\n\n  const handleViewChange = (view: string) => {\n    setCurrentView(view);\n    // Trigger header refresh when switching views\n    setHeaderRefreshTrigger(prev => prev + 1);\n  };\n\n  const handleAuthClick = () => {\n    setShowAuthModal(true);\n  };\n\n  const renderContent = () => {\n    switch (currentView) {\n      case \"garten\":\n        return <GardenView />;\n      case \"teich\":\n        return <TeichView />;\n      case \"markt\":\n        return <MarketView />;\n      case \"inventar\":\n        return <InventoryView />;\n      case \"dna\":\n        return <DNAView />;\n      case \"bouquets\":\n        return <BouquetsView />;\n      case \"flowerpower\":\n        return <FlowerpowerView />;\n      case \"ausstellung\":\n        return <ExhibitionView />;\n      case \"aquarium\":\n        return <AquariumView />;\n      case \"marie-slot\":\n        return <MarieSlotView onBack={() => handleViewChange('garten')} />;\n      case \"schlossgarten\":\n        return <CastleGardenView />;\n      case \"vasen\":\n        return <VasesView />;\n      case \"encyclopedia\":\n        return <EncyclopediaView />;\n      case \"dashboard\":\n        return <Dashboard onViewChange={handleViewChange} />;\n      case \"game\":\n        return <GameView />;\n      default:\n        return <GardenView />;\n    }\n  };\n\n  // 🔒 SECURITY: Block UI until server auth check is complete\n  if (!hasCheckedAuth) {\n    return (\n      <div className=\"layout-container h-screen bg-slate-950 flex flex-col items-center justify-center\">\n        <Card className=\"bg-slate-800 border-slate-700 text-white\">\n          <CardContent className=\"pt-6 pb-6\">\n            <p className=\"text-center text-slate-400\">🔒 Authentifizierung wird geprüft...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // 🔒 SECURITY: Show only authentication interface for non-authenticated users  \n  if (!user) {\n    return (\n      <div className=\"layout-container h-screen bg-slate-950 flex flex-col items-center justify-center\">\n        {/* Show loading state while checking authentication */}\n        {isLoading ? (\n          <Card className=\"bg-slate-800 border-slate-700 text-white\">\n            <CardContent className=\"pt-6 pb-6\">\n              <p className=\"text-center text-slate-400\">🔒 Authentifizierung wird geprüft...</p>\n            </CardContent>\n          </Card>\n        ) : (\n          /* Show login prompt when not authenticated */\n          <Card className=\"bg-slate-800 border-slate-700 text-white max-w-md mx-4\">\n            <CardContent className=\"pt-6 pb-6 text-center\">\n              <h2 className=\"text-xl font-bold text-white mb-4\">🦋 Mariposa Garden</h2>\n              <p className=\"text-slate-400 mb-6\">Bitte melde dich an, um das Spiel zu spielen und auf alle Funktionen zuzugreifen.</p>\n              <button \n                onClick={() => setShowAuthModal(true)}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white font-bold px-6 py-3 rounded-lg transition-all duration-200 hover:scale-105 active:scale-95\"\n              >\n                🔐 Anmelden / Registrieren\n              </button>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Always show auth modal when needed */}\n        <AuthModal \n          isOpen={showAuthModal} \n          onClose={() => setShowAuthModal(false)} \n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"layout-container h-screen bg-slate-950 flex flex-col\">\n      <Header onAuthClick={handleAuthClick} refreshTrigger={headerRefreshTrigger} />\n      \n      <main className=\"layout-main flex-1 overflow-y-auto\">\n        {renderContent()}\n      </main>\n      \n      <Footer activeView={currentView} onViewChange={handleViewChange} />\n      \n      {/* Legal Footer with Copyright and Donate Button */}\n      <div className=\"bg-slate-950 border-t border-slate-800 px-6 py-3\">\n        <div className=\"flex flex-col sm:flex-row items-center justify-between text-xs text-slate-400 space-y-2 sm:space-y-0\">\n          <div className=\"flex items-center space-x-4\">\n            <button \n              onClick={() => setShowImpressumDialog(true)}\n              className=\"hover:text-white transition-colors cursor-pointer\"\n            >\n              Impressum\n            </button>\n            <button \n              onClick={() => setShowDatenschutzDialog(true)}\n              className=\"hover:text-white transition-colors cursor-pointer\"\n            >\n              Datenschutz\n            </button>\n            <span>Copyright © Mariposa 2025</span>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <button \n              onClick={() => handleViewChange('encyclopedia')}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white font-bold px-4 py-2 rounded-full shadow-lg transform transition-all duration-200 hover:scale-105 active:scale-95\"\n            >\n              📚 Enzyklopädie\n            </button>\n            <button \n              onClick={() => setShowDonateDialog(true)}\n              className=\"bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-300 hover:to-orange-400 text-black font-bold px-6 py-2 rounded-full shadow-lg transform transition-all duration-200 hover:scale-105 active:scale-95 animate-slow-pulse hover:animate-none\"\n            >\n              ✨ DONATE ✨\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      <AuthModal \n        isOpen={showAuthModal} \n        onClose={() => setShowAuthModal(false)} \n      />\n\n      {/* Donate Dialog */}\n      <DonateDialog\n        open={showDonateDialog}\n        onOpenChange={setShowDonateDialog}\n        recipientName=\"Mariposa\"\n      />\n\n      {/* Impressum Dialog */}\n      <ImpressumDialog\n        open={showImpressumDialog}\n        onOpenChange={setShowImpressumDialog}\n      />\n\n      {/* Datenschutz Dialog */}\n      <DatenschutzDialog\n        open={showDatenschutzDialog}\n        onOpenChange={setShowDatenschutzDialog}\n      />\n\n      {/* Login Notifications */}\n      {user && (\n        <LoginNotifications\n          userId={user.id}\n          isOpen={showNotifications}\n          onClose={() => setShowNotifications(false)}\n        />\n      )}\n\n      {/* Floating Balloons */}\n      {balloons.map(balloon => (\n        <BalloonComponent \n          key={balloon.id} \n          balloon={balloon} \n          onPop={popBalloon}\n          setConfettiParticles={setConfettiParticles}\n          setLootDrops={setLootDrops}\n          awardLoot={awardLoot}\n        />\n      ))}\n\n      {/* Confetti Particles */}\n      {confettiParticles.map((confetti, index) => (\n        <div\n          key={confetti.id}\n          className=\"confetti-particle\"\n          style={{\n            position: 'fixed',\n            left: `${confetti.x}%`,\n            top: `${confetti.y}%`,\n            width: '8px',\n            height: '8px',\n            backgroundColor: confetti.color,\n            borderRadius: '2px',\n            zIndex: 1001,\n            animationName: `confettiExplosion-${index % 8}`,\n            animationDuration: '1s',\n            animationTimingFunction: 'ease-out',\n            animationFillMode: 'forwards',\n            animationDelay: `${confetti.delay}s`\n          }}\n        />\n      ))}\n\n      {/* Loot Drops */}\n      {lootDrops.map((loot) => (\n        <div\n          key={loot.id}\n          className=\"loot-drop\"\n          style={{\n            position: 'fixed',\n            left: `${loot.x}%`,\n            top: `${loot.y}%`,\n            transform: 'translate(-50%, -50%)',\n            zIndex: 1002,\n            animation: 'lootPop 2s ease-out forwards',\n            backgroundColor: loot.type === 'credit' ? '#FFD700' : loot.type === 'sun' ? '#FFA500' : loot.type === 'dna' ? '#9B59B6' : '#8B5CF6',\n            color: 'white',\n            padding: '8px 12px',\n            borderRadius: '20px',\n            fontSize: '14px',\n            fontWeight: 'bold',\n            boxShadow: '0 4px 12px rgba(0,0,0,0.3)',\n            border: '2px solid rgba(255,255,255,0.3)',\n            pointerEvents: 'none'\n          }}\n        >\n          {loot.type === 'credit' && '💰'}\n          {loot.type === 'sun' && '☀️'}\n          {loot.type === 'dna' && '🧬'}\n          {loot.type === 'ticket' && '🎫'}\n          +{loot.amount}\n        </div>\n      ))}\n\n      {/* Global CSS for Balloon Animations */}\n      <style dangerouslySetInnerHTML={{\n        __html: `\n          @keyframes balloon-float {\n            0% {\n              bottom: -100px;\n              transform: translateX(-50%) rotate(-3deg);\n            }\n            12% {\n              transform: translateX(calc(-50% + 35px)) rotate(4deg);\n            }\n            25% {\n              transform: translateX(calc(-50% + 45px)) rotate(2deg);\n            }\n            37% {\n              transform: translateX(calc(-50% + 20px)) rotate(-1deg);\n            }\n            50% {\n              transform: translateX(calc(-50% - 30px)) rotate(-4deg);\n            }\n            62% {\n              transform: translateX(calc(-50% - 40px)) rotate(-2deg);\n            }\n            75% {\n              transform: translateX(calc(-50% + 15px)) rotate(3deg);\n            }\n            87% {\n              transform: translateX(calc(-50% + 25px)) rotate(1deg);\n            }\n            100% {\n              bottom: calc(100vh + 50px);\n              transform: translateX(-50%) rotate(-1deg);\n            }\n          }\n          \n          .balloon:hover .balloon-body {\n            transform: scale(1.1) !important;\n          }\n          \n          .balloon-popped .balloon-body {\n            transform: scale(0) !important;\n          }\n          \n          @keyframes balloonWobble {\n            0%, 100% { transform: translateX(0px) rotate(0deg); }\n            25% { transform: translateX(6px) rotate(1.5deg); }\n            50% { transform: translateX(-6px) rotate(-1.5deg); }\n            75% { transform: translateX(3px) rotate(0.8deg); }\n          }\n          .balloon-wobble {\n            animation: balloonWobble 2.5s ease-in-out infinite;\n          }\n          .balloon-wobble-2 {\n            animation: balloonWobble 3s ease-in-out infinite;\n            animation-delay: 0.5s;\n          }\n          .balloon-wobble-3 {\n            animation: balloonWobble 2.8s ease-in-out infinite;\n            animation-delay: 1s;\n          }\n          \n          @keyframes confettiExplosion-0 {\n            0% { transform: translate(0, 0) rotate(0deg); opacity: 1; }\n            100% { transform: translate(-60px, -80px) rotate(180deg); opacity: 0; }\n          }\n          @keyframes confettiExplosion-1 {\n            0% { transform: translate(0, 0) rotate(0deg); opacity: 1; }\n            100% { transform: translate(80px, -60px) rotate(270deg); opacity: 0; }\n          }\n          @keyframes confettiExplosion-2 {\n            0% { transform: translate(0, 0) rotate(0deg); opacity: 1; }\n            100% { transform: translate(-40px, -100px) rotate(90deg); opacity: 0; }\n          }\n          @keyframes confettiExplosion-3 {\n            0% { transform: translate(0, 0) rotate(0deg); opacity: 1; }\n            100% { transform: translate(100px, -40px) rotate(360deg); opacity: 0; }\n          }\n          @keyframes confettiExplosion-4 {\n            0% { transform: translate(0, 0) rotate(0deg); opacity: 1; }\n            100% { transform: translate(-80px, -60px) rotate(180deg); opacity: 0; }\n          }\n          @keyframes confettiExplosion-5 {\n            0% { transform: translate(0, 0) rotate(0deg); opacity: 1; }\n            100% { transform: translate(60px, -90px) rotate(270deg); opacity: 0; }\n          }\n          @keyframes confettiExplosion-6 {\n            0% { transform: translate(0, 0) rotate(0deg); opacity: 1; }\n            100% { transform: translate(-100px, -30px) rotate(90deg); opacity: 0; }\n          }\n          @keyframes confettiExplosion-7 {\n            0% { transform: translate(0, 0) rotate(0deg); opacity: 1; }\n            100% { transform: translate(70px, -70px) rotate(360deg); opacity: 0; }\n          }\n          \n          @keyframes lootPop {\n            0% { \n              transform: translate(-50%, -50%) scale(0) rotate(0deg); \n              opacity: 0;\n            }\n            20% { \n              transform: translate(-50%, -50%) scale(1.2) rotate(5deg); \n              opacity: 1;\n            }\n            80% { \n              transform: translate(-50%, -50%) scale(1) rotate(-2deg); \n              opacity: 1;\n            }\n            100% { \n              transform: translate(-50%, -50%) scale(0.8) rotate(0deg); \n              opacity: 0;\n            }\n          }\n        `\n      }} />\n    </div>\n  );\n};\n","size_bytes":26913},"client/src/components/MarketView.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { useSuns } from \"@/lib/stores/useSuns\";\nimport { useNotification } from \"../hooks/useNotification\";\nimport { getRarityColor, generateLatinCaterpillarName, type RarityTier } from \"@shared/rarity\";\n\n// getBorderColor helper function\nconst getBorderColor = (rarity: RarityTier): string => {\n  switch (rarity) {\n    case 'common': return '#fbbf24';      // yellow-400\n    case 'uncommon': return '#4ade80';    // green-400  \n    case 'rare': return '#3b82f6';        // blue-400\n    case 'super-rare': return '#06b6d4';  // cyan-400\n    case 'epic': return '#a855f7';        // purple-400\n    case 'legendary': return '#f97316';   // orange-400\n    case 'mythical': return '#ef4444';    // red-400\n    default: return '#9ca3af';            // gray-400\n  }\n};\nimport { \n  Store,\n  TrendingUp,\n  ShoppingCart,\n  Coins,\n  Package,\n  HandCoins,\n  Star\n} from \"lucide-react\";\nimport { HelpButton } from './HelpButton';\n\ninterface MarketListing {\n  id: number;\n  sellerUsername: string;\n  itemType: 'seed' | 'caterpillar' | 'flower' | 'butterfly' | 'fish';\n  // Seed fields\n  seedName?: string;\n  seedRarity?: string;\n  // Caterpillar fields\n  caterpillarId?: number;\n  caterpillarName?: string;\n  caterpillarRarity?: string;\n  caterpillarImageUrl?: string;\n  caterpillarIdOriginal?: number;\n  // Flower fields\n  flowerId?: number;\n  flowerName?: string;\n  flowerRarity?: string;\n  flowerImageUrl?: string;\n  flowerIdOriginal?: number;\n  // Butterfly fields\n  butterflyId?: number;\n  butterflyName?: string;\n  butterflyRarity?: string;\n  butterflyImageUrl?: string;\n  butterflyIdOriginal?: number;\n  // Fish fields\n  fishId?: number;\n  fishName?: string;\n  fishRarity?: string;\n  fishImageUrl?: string;\n  fishIdOriginal?: number;\n  quantity: number;\n  pricePerUnit: number;\n  totalPrice: number;\n}\n\ninterface Seed {\n  id: number;\n  name: string;\n  rarity: string;\n  price: number;\n  description?: string;\n}\n\nexport const MarketView: React.FC = () => {\n  const { user } = useAuth();\n  const { credits, updateCredits } = useCredits();\n  const { suns, setSuns } = useSuns();\n  const { showNotification } = useNotification();\n  const [marketListings, setMarketListings] = useState<MarketListing[]>([]);\n  const [creditOffers, setCreditOffers] = useState<any[]>([]);\n  const [sunOffers, setSunOffers] = useState<any[]>([]);\n  const [mySeeds, setMySeeds] = useState<any[]>([]);\n  const [myCaterpillars, setMyCaterpillars] = useState<any[]>([]);\n  const [myFlowers, setMyFlowers] = useState<any[]>([]);\n  const [myButterflies, setMyButterflies] = useState<any[]>([]);\n  const [myFish, setMyFish] = useState<any[]>([]);\n  const [activeTab, setActiveTab] = useState<\"buy\" | \"sell\" | \"server\">(\"buy\");\n  const [buyFilter, setBuyFilter] = useState<'all' | 'seed' | 'flower' | 'butterfly' | 'caterpillar' | 'fish'>('all');\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const getBorderColor = (rarity: RarityTier): string => {\n    switch (rarity) {\n      case 'common': return '#fbbf24';      // yellow-400\n      case 'uncommon': return '#4ade80';    // green-400  \n      case 'rare': return '#3b82f6';        // blue-400\n      case 'super-rare': return '#06b6d4';  // cyan-400\n      case 'epic': return '#a855f7';        // purple-400\n      case 'legendary': return '#f97316';   // orange-400\n      case 'mythical': return '#ef4444';    // red-400\n      default: return '#9ca3af';            // gray-400\n    }\n  };\n  \n  // Sell form state\n  const [sellForm, setSellForm] = useState({\n    itemType: 'seed' as 'seed' | 'caterpillar' | 'flower' | 'butterfly' | 'fish',\n    seedId: 0,\n    caterpillarId: 0,\n    flowerId: 0,\n    butterflyId: 0,\n    fishId: 0,\n    quantity: 1,\n    pricePerUnit: 10\n  });\n\n  useEffect(() => {\n    if (user) {\n      fetchMarketListings();\n      fetchServerOffers();\n      fetchMySeeds();\n      fetchMyCaterpillars();\n      fetchMyFlowers();\n      fetchMyButterflies();\n      fetchMyFish();\n    }\n  }, [user]);\n\n  const fetchServerOffers = async () => {\n    try {\n      const response = await fetch('/api/market/server-shop');\n      if (response.ok) {\n        const data = await response.json();\n        setCreditOffers(data.creditOffers || []);\n        setSunOffers(data.sunOffers || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch server offers:', error);\n    }\n  };\n\n  const fetchMarketListings = async () => {\n    try {\n      const response = await fetch('/api/market/listings');\n      if (response.ok) {\n        const data = await response.json();\n        setMarketListings(data.listings || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch market listings:', error);\n    }\n  };\n\n  const fetchMySeeds = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/seeds`);\n      if (response.ok) {\n        const data = await response.json();\n        setMySeeds(data.seeds || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my seeds:', error);\n    }\n  };\n\n  const fetchMyCaterpillars = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/caterpillars`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyCaterpillars(data.caterpillars || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my caterpillars:', error);\n    }\n  };\n\n  const fetchMyFlowers = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/flowers`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyFlowers(data.flowers || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my flowers:', error);\n    }\n  };\n\n  const fetchMyButterflies = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/butterflies`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyButterflies(data.butterflies || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my butterflies:', error);\n    }\n  };\n\n  const fetchMyFish = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/fish`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyFish(data.fish || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my fish:', error);\n    }\n  };\n\n  const buyListing = async (listingId: number, quantity: number, totalCost: number) => {\n    if (!user || credits < totalCost) {\n      showNotification(`Du brauchst ${totalCost} Cr um dieses Angebot zu kaufen!`, 'warning');\n      return;\n    }\n\n    // Check if this is a self-purchase (user buying their own listing)\n    const listing = marketListings.find(l => l.id === listingId);\n    const isSelfPurchase = listing && (listing as any).sellerId === user.id;\n\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/market/buy', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({ listingId, quantity })\n      });\n\n      if (response.ok) {\n        // Only deduct credits if it's NOT a self-purchase\n        if (!isSelfPurchase) {\n          await updateCredits(user.id, -totalCost);\n        }\n        await fetchMarketListings();\n        await fetchMySeeds();\n        await fetchMyCaterpillars();\n        await fetchMyFlowers();\n        await fetchMyButterflies();\n        await fetchMyFish();\n        showNotification('Kauf erfolgreich!', 'success');\n      } else {\n        const error = await response.json();\n        showNotification(error.message || 'Kauf fehlgeschlagen', 'error');\n      }\n    } catch (error) {\n      showNotification('Kauf fehlgeschlagen', 'error');\n    }\n    setIsLoading(false);\n  };\n\n  const createListing = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!user) return;\n    if (sellForm.itemType === 'seed' && !sellForm.seedId) return;\n    if (sellForm.itemType === 'caterpillar' && !sellForm.caterpillarId) return;\n    if (sellForm.itemType === 'flower' && !sellForm.flowerId) return;\n    if (sellForm.itemType === 'butterfly' && !sellForm.butterflyId) return;\n    if (sellForm.itemType === 'fish' && !sellForm.fishId) return;\n\n    setIsLoading(true);\n    try {\n      // Create clean request data - only send relevant fields\n      const requestData = {\n        itemType: sellForm.itemType,\n        ...(sellForm.itemType === 'seed' ? { seedId: sellForm.seedId } : \n            sellForm.itemType === 'caterpillar' ? { caterpillarId: sellForm.caterpillarId } :\n            sellForm.itemType === 'flower' ? { flowerId: sellForm.flowerId } :\n            sellForm.itemType === 'butterfly' ? { butterflyId: sellForm.butterflyId } :\n            sellForm.itemType === 'fish' ? { fishId: sellForm.fishId } : {}),\n        quantity: sellForm.quantity,\n        pricePerUnit: sellForm.pricePerUnit\n      };\n\n      const response = await fetch('/api/market/create-listing', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify(requestData)\n      });\n\n      if (response.ok) {\n        // Immediately remove the sold item from local state for instant UI update\n        if (sellForm.itemType === 'caterpillar' && sellForm.caterpillarId) {\n          setMyCaterpillars(prev => prev.filter(cat => cat.id !== sellForm.caterpillarId));\n        } else if (sellForm.itemType === 'seed' && sellForm.seedId) {\n          setMySeeds(prev => prev.map(seed => \n            seed.seedId === sellForm.seedId \n              ? { ...seed, quantity: Math.max(0, seed.quantity - sellForm.quantity) }\n              : seed\n          ).filter(seed => seed.quantity > 0));\n        } else if (sellForm.itemType === 'flower' && sellForm.flowerId) {\n          setMyFlowers(prev => prev.map(flower => \n            flower.id === sellForm.flowerId \n              ? { ...flower, quantity: Math.max(0, flower.quantity - sellForm.quantity) }\n              : flower\n          ).filter(flower => flower.quantity > 0));\n        } else if (sellForm.itemType === 'butterfly' && sellForm.butterflyId) {\n          setMyButterflies(prev => prev.filter(butterfly => butterfly.id !== sellForm.butterflyId));\n        } else if (sellForm.itemType === 'fish' && sellForm.fishId) {\n          setMyFish(prev => prev.map(fish => \n            fish.id === sellForm.fishId \n              ? { ...fish, quantity: Math.max(0, fish.quantity - sellForm.quantity) }\n              : fish\n          ).filter(fish => fish.quantity > 0));\n        }\n        \n        await fetchMarketListings();\n        await fetchMySeeds();\n        await fetchMyCaterpillars();\n        await fetchMyFlowers();\n        await fetchMyButterflies();\n        await fetchMyFish();\n        setSellForm({ \n          itemType: 'seed',\n          seedId: 0, \n          caterpillarId: 0,\n          flowerId: 0,\n          butterflyId: 0,\n          fishId: 0,\n          quantity: 1, \n          pricePerUnit: 10 \n        });\n        showNotification('Angebot erfolgreich erstellt!', 'success');\n      } else {\n        const error = await response.json();\n        showNotification(error.message || 'Angebot fehlgeschlagen', 'error');\n      }\n    } catch (error) {\n      showNotification('Angebot fehlgeschlagen', 'error');\n    }\n    setIsLoading(false);\n  };\n\n  const buyFromServer = async (seedId: number, quantity: number, totalCost: number) => {\n    if (!user || credits < totalCost) {\n      showNotification(`Du brauchst ${totalCost} Cr um ${quantity} Samen zu kaufen!`, 'warning');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/market/buy-from-server', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user.id.toString()\n        },\n        body: JSON.stringify({ seedId, quantity })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        await updateCredits(user.id, -totalCost);\n        await fetchMySeeds();\n        showNotification(data.message || 'Kauf erfolgreich!', 'success');\n      } else {\n        const error = await response.json();\n        showNotification(error.message || 'Kauf fehlgeschlagen', 'error');\n      }\n    } catch (error) {\n      showNotification('Kauf fehlgeschlagen', 'error');\n    }\n    setIsLoading(false);\n  };\n\n  const buyFromServerWithSuns = async (seedId: number, quantity: number, pricePerUnit: number) => {\n    if (!user) return;\n    \n    const totalCost = quantity * pricePerUnit;\n    \n    if (suns < totalCost) {\n      showNotification(`Du brauchst ${totalCost} Sonnen um ${quantity} Samen zu kaufen!`, 'warning');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/market/buy-from-server-suns', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-user-id': user.id.toString()\n        },\n        body: JSON.stringify({ seedId, quantity })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        showNotification(data.message, 'success');\n        // Update suns by fetching from server\n        const sunsResponse = await fetch(`/api/user/${user.id}/suns`);\n        if (sunsResponse.ok) {\n          const sunsData = await sunsResponse.json();\n          setSuns(sunsData.suns);\n        }\n        await fetchMySeeds();\n      } else {\n        const errorData = await response.json();\n        showNotification(errorData.message || 'Fehler beim Kauf', 'error');\n      }\n    } catch (error) {\n      console.error('Suns purchase error:', error);\n      showNotification('Fehler beim Kauf', 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Card className=\"bg-slate-800 border-slate-700 text-white\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-slate-400\">Bitte melde dich an, um den Markt zu betreten</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-8 bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 min-h-full\">\n      {/* Market Header with Stats */}\n      <div className=\"bg-slate-800/60 p-6 rounded-lg border border-emerald-500/30\">\n        {/* Title Section */}\n        <div className=\"relative mb-4\">\n          {/* HelpButton in absoluter Position rechts oben */}\n          <div className=\"absolute top-0 right-0\">\n            <HelpButton helpText=\"Im Markt kaufst du Samen von anderen Spielern oder vom Server. Du kannst auch deine eigenen Samen verkaufen und Credits verdienen. Schau regelmäßig nach neuen Angeboten!\" viewType=\"market\" />\n          </div>\n          \n          {/* Zentrierter Content */}\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-emerald-300 mb-1\">\n              Samen Markt 🌱\n            </h1>\n            <p className=\"text-slate-400 text-sm\">Handel mit anderen Spielern</p>\n          </div>\n        </div>\n        \n        {/* Compact Stats */}\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"bg-gradient-to-br from-orange-800/40 to-yellow-800/40 border border-orange-500/30 rounded-lg p-3 text-center\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <Coins className=\"h-3 w-3 text-orange-400 mr-1\" />\n              <span className=\"text-xs font-semibold text-orange-300\">Credits</span>\n            </div>\n            <div className=\"text-lg font-bold text-orange-400\">{credits} Cr</div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-green-800/40 to-emerald-800/40 border border-green-500/30 rounded-lg p-3 text-center\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <TrendingUp className=\"h-3 w-3 text-green-400 mr-1\" />\n              <span className=\"text-xs font-semibold text-green-300\">Angebote</span>\n            </div>\n            <div className=\"text-lg font-bold text-green-400\">{marketListings.length}</div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-blue-800/40 to-indigo-800/40 border border-blue-500/30 rounded-lg p-3 text-center\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <Package className=\"h-3 w-3 text-blue-400 mr-1\" />\n              <span className=\"text-xs font-semibold text-blue-300\">Samen</span>\n            </div>\n            <div className=\"text-lg font-bold text-blue-400\">{mySeeds.length}</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Enhanced Market Tabs */}\n      <div className=\"flex justify-center space-x-8\">\n        <Button\n          variant={activeTab === \"buy\" ? \"default\" : \"outline\"}\n          onClick={() => setActiveTab(\"buy\")}\n          className={`relative transition-all duration-300 ${\n            activeTab === \"buy\" \n              ? \"bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white shadow-lg scale-110\" \n              : \"border-slate-500 text-slate-300 hover:border-green-400 hover:text-green-400\"\n          } px-8 py-3 font-bold text-lg`}\n        >\n          <div className=\"flex items-center\">\n            <span>🛒 Kaufen</span>\n          </div>\n          {activeTab === \"buy\" && (\n            <div className=\"absolute inset-0 bg-green-400 rounded opacity-20 animate-ping\"></div>\n          )}\n        </Button>\n        <Button\n          variant={activeTab === \"server\" ? \"default\" : \"outline\"}\n          onClick={() => setActiveTab(\"server\")}\n          className={`relative transition-all duration-300 ${\n            activeTab === \"server\" \n              ? \"bg-gradient-to-r from-blue-500 to-indigo-500 hover:from-blue-600 hover:to-indigo-600 text-white shadow-lg scale-110\" \n              : \"border-slate-500 text-slate-300 hover:border-blue-400 hover:text-blue-400\"\n          } px-8 py-3 font-bold text-lg`}\n        >\n          <div className=\"flex items-center\">\n            <span>🏪 Shop</span>\n          </div>\n          {activeTab === \"server\" && (\n            <div className=\"absolute inset-0 bg-blue-400 rounded opacity-20 animate-ping\"></div>\n          )}\n        </Button>\n        <Button\n          variant={activeTab === \"sell\" ? \"default\" : \"outline\"}\n          onClick={() => setActiveTab(\"sell\")}\n          className={`relative transition-all duration-300 ${\n            activeTab === \"sell\" \n              ? \"bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 text-white shadow-lg scale-110\" \n              : \"border-slate-500 text-slate-300 hover:border-orange-400 hover:text-orange-400\"\n          } px-8 py-3 font-bold text-lg`}\n        >\n          <div className=\"flex items-center\">\n            <span>💰 Verkaufen</span>\n          </div>\n          {activeTab === \"sell\" && (\n            <div className=\"absolute inset-0 bg-orange-400 rounded opacity-20 animate-ping\"></div>\n          )}\n        </Button>\n      </div>\n\n      {/* Enhanced Market Content */}\n      {activeTab === \"buy\" && (\n        <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-green-500/30 shadow-2xl\">\n          <CardHeader className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n            <CardTitle className=\"text-white flex items-center relative z-10\">\n              <div className=\"relative\">\n                <ShoppingCart className=\"h-8 w-8 mr-3 text-green-400 animate-pulse\" />\n                <div className=\"absolute inset-0 h-8 w-8 mr-3 text-green-400 animate-ping opacity-30\"></div>\n              </div>\n              <span className=\"text-3xl font-bold bg-gradient-to-r from-green-300 to-emerald-300 bg-clip-text text-transparent\">\n                Markt Angebote\n              </span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {/* Filter Buttons */}\n            <div className=\"mb-6\">\n              <Label className=\"text-slate-300 mb-3 block\">Angebote filtern:</Label>\n              <div className=\"grid grid-cols-3 lg:grid-cols-6 gap-2 bg-slate-900 rounded-lg border border-slate-700 p-1\">\n                <button\n                  type=\"button\"\n                  onClick={() => setBuyFilter('all')}\n                  className={`flex items-center justify-center py-3 px-2 rounded-md transition-all duration-200 font-medium ${\n                    buyFilter === 'all'\n                      ? 'bg-gradient-to-r from-slate-600 to-slate-500 text-white shadow-lg border-2 border-slate-400'\n                      : 'text-slate-400 hover:text-white hover:bg-slate-800'\n                  }`}\n                >\n                  <span className=\"text-lg mr-1\">📦</span>\n                  <div className=\"flex flex-col items-center\">\n                    <span className=\"text-sm\">Alle</span>\n                    <span className=\"text-xs opacity-75\">({marketListings.length})</span>\n                  </div>\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => setBuyFilter('seed')}\n                  className={`flex items-center justify-center py-3 px-2 rounded-md transition-all duration-200 font-medium ${\n                    buyFilter === 'seed'\n                      ? 'bg-gradient-to-r from-green-600 to-green-500 text-white shadow-lg border-2 border-green-400'\n                      : 'text-slate-400 hover:text-white hover:bg-slate-800'\n                  }`}\n                >\n                  <span className=\"text-lg mr-1\">🌱</span>\n                  <div className=\"flex flex-col items-center\">\n                    <span className=\"text-sm\">Samen</span>\n                    <span className=\"text-xs opacity-75\">({marketListings.filter(l => l.itemType === 'seed').length})</span>\n                  </div>\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => setBuyFilter('flower')}\n                  className={`flex items-center justify-center py-3 px-2 rounded-md transition-all duration-200 font-medium ${\n                    buyFilter === 'flower'\n                      ? 'bg-gradient-to-r from-pink-600 to-pink-500 text-white shadow-lg border-2 border-pink-400'\n                      : 'text-slate-400 hover:text-white hover:bg-slate-800'\n                  }`}\n                >\n                  <span className=\"text-lg mr-1\">🌸</span>\n                  <div className=\"flex flex-col items-center\">\n                    <span className=\"text-sm\">Blumen</span>\n                    <span className=\"text-xs opacity-75\">({marketListings.filter(l => l.itemType === 'flower').length})</span>\n                  </div>\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => setBuyFilter('butterfly')}\n                  className={`flex items-center justify-center py-3 px-2 rounded-md transition-all duration-200 font-medium ${\n                    buyFilter === 'butterfly'\n                      ? 'bg-gradient-to-r from-purple-600 to-purple-500 text-white shadow-lg border-2 border-purple-400'\n                      : 'text-slate-400 hover:text-white hover:bg-slate-800'\n                  }`}\n                >\n                  <span className=\"text-lg mr-1\">🦋</span>\n                  <div className=\"flex flex-col items-center\">\n                    <span className=\"text-sm\">Schmetterlinge</span>\n                    <span className=\"text-xs opacity-75\">({marketListings.filter(l => l.itemType === 'butterfly').length})</span>\n                  </div>\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => setBuyFilter('caterpillar')}\n                  className={`flex items-center justify-center py-3 px-2 rounded-md transition-all duration-200 font-medium ${\n                    buyFilter === 'caterpillar'\n                      ? 'bg-gradient-to-r from-orange-600 to-orange-500 text-white shadow-lg border-2 border-orange-400'\n                      : 'text-slate-400 hover:text-white hover:bg-slate-800'\n                  }`}\n                >\n                  <span className=\"text-lg mr-1\">🐛</span>\n                  <div className=\"flex flex-col items-center\">\n                    <span className=\"text-sm\">Raupen</span>\n                    <span className=\"text-xs opacity-75\">({marketListings.filter(l => l.itemType === 'caterpillar').length})</span>\n                  </div>\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => setBuyFilter('fish')}\n                  className={`flex items-center justify-center py-3 px-2 rounded-md transition-all duration-200 font-medium ${\n                    buyFilter === 'fish'\n                      ? 'bg-gradient-to-r from-blue-600 to-blue-500 text-white shadow-lg border-2 border-blue-400'\n                      : 'text-slate-400 hover:text-white hover:bg-slate-800'\n                  }`}\n                >\n                  <span className=\"text-lg mr-1\">🐟</span>\n                  <div className=\"flex flex-col items-center\">\n                    <span className=\"text-sm\">Fische</span>\n                    <span className=\"text-xs opacity-75\">({marketListings.filter(l => l.itemType === 'fish').length})</span>\n                  </div>\n                </button>\n              </div>\n            </div>\n\n            {(buyFilter === 'all' ? marketListings : marketListings.filter(listing => listing.itemType === buyFilter)).length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-slate-400\">\n                  {buyFilter === 'all' \n                    ? 'Noch keine Angebote verfügbar' \n                    : `Noch keine ${\n                        buyFilter === 'seed' ? 'Samen' :\n                        buyFilter === 'flower' ? 'Blumen' :\n                        buyFilter === 'butterfly' ? 'Schmetterling' :\n                        buyFilter === 'caterpillar' ? 'Raupen' :\n                        buyFilter === 'fish' ? 'Fisch' : ''\n                      } Angebote verfügbar`\n                  }\n                </p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {(buyFilter === 'all' ? marketListings : marketListings.filter(listing => listing.itemType === buyFilter)).map((listing) => {\n                  const rarity = listing.itemType === 'seed' ? listing.seedRarity : \n                                listing.itemType === 'caterpillar' ? listing.caterpillarRarity :\n                                listing.itemType === 'flower' ? listing.flowerRarity :\n                                listing.itemType === 'butterfly' ? listing.butterflyRarity :\n                                listing.itemType === 'fish' ? listing.fishRarity : 'common';\n                  const itemName = listing.itemType === 'seed' ? listing.seedName : \n                                  listing.itemType === 'caterpillar' ? (listing.caterpillarName || generateLatinCaterpillarName(listing.caterpillarIdOriginal || listing.caterpillarId || 0)) :\n                                  listing.itemType === 'flower' ? listing.flowerName :\n                                  listing.itemType === 'butterfly' ? listing.butterflyName :\n                                  listing.itemType === 'fish' ? listing.fishName : 'Unbekannt';\n                  const itemIcon = listing.itemType === 'seed' ? '🌱' : \n                                  listing.itemType === 'caterpillar' ? '🐛' :\n                                  listing.itemType === 'flower' ? '🌸' :\n                                  listing.itemType === 'butterfly' ? '🦋' :\n                                  listing.itemType === 'fish' ? '🐟' : '❓';\n                  \n                  return (\n                    <div\n                      key={listing.id}\n                    className=\"bg-slate-900 rounded-lg p-4 border-2\"\n                    style={{ borderColor: getBorderColor(rarity as RarityTier) }}\n                  >\n                    <div className=\"flex items-start gap-3 mb-3\">\n                      {/* 80x80 Item Bild */}\n                      <div className=\"w-20 h-20 rounded-lg border-2 bg-slate-700 flex-shrink-0 overflow-hidden shadow-md\"\n                           style={{ borderColor: getBorderColor(rarity as RarityTier) }}>\n                        {listing.itemType === 'seed' ? (\n                          <div className=\"w-full h-full flex items-center justify-center text-4xl\">\n                            {itemIcon}\n                          </div>\n                        ) : listing.itemType === 'caterpillar' ? (\n                          <img\n                            src={listing.caterpillarImageUrl || `/Raupen/${(listing.caterpillarIdOriginal || listing.caterpillarId || 0)}.jpg`}\n                            alt={itemName}\n                            className=\"w-full h-full object-cover\"\n                            onError={(e) => {\n                              e.currentTarget.style.display = 'none';\n                              e.currentTarget.parentElement!.innerHTML = '<div class=\"w-full h-full flex items-center justify-center text-4xl\">🐛</div>';\n                            }}\n                          />\n                        ) : listing.itemType === 'flower' ? (\n                          <img\n                            src={listing.flowerImageUrl || `/Blumen/${(listing.flowerIdOriginal || listing.flowerId || 1)}.jpg`}\n                            alt={itemName}\n                            className=\"w-full h-full object-cover\"\n                            onError={(e) => {\n                              e.currentTarget.style.display = 'none';\n                              e.currentTarget.parentElement!.innerHTML = '<div class=\"w-full h-full flex items-center justify-center text-4xl\">🌸</div>';\n                            }}\n                          />\n                        ) : listing.itemType === 'butterfly' ? (\n                          <img\n                            src={listing.butterflyImageUrl || `/Schmetterlinge/${(listing.butterflyIdOriginal || listing.butterflyId || 1)}.jpg`}\n                            alt={itemName}\n                            className=\"w-full h-full object-cover\"\n                            onError={(e) => {\n                              e.currentTarget.style.display = 'none';\n                              e.currentTarget.parentElement!.innerHTML = '<div class=\"w-full h-full flex items-center justify-center text-4xl\">🦋</div>';\n                            }}\n                          />\n                        ) : listing.itemType === 'fish' ? (\n                          <img\n                            src={listing.fishImageUrl || `/Fische/${(listing.fishIdOriginal || listing.fishId || 1)}.jpg`}\n                            alt={itemName}\n                            className=\"w-full h-full object-cover\"\n                            onError={(e) => {\n                              e.currentTarget.style.display = 'none';\n                              e.currentTarget.parentElement!.innerHTML = '<div class=\"w-full h-full flex items-center justify-center text-4xl\">🐟</div>';\n                            }}\n                          />\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center text-4xl\">\n                            {itemIcon}\n                          </div>\n                        )}\n                      </div>\n                      \n                      {/* Item Info */}\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <h4 className=\"font-bold text-white truncate\">\n                            {itemName}\n                          </h4>\n                          <div className=\"flex items-center ml-2\">\n                            <Star className={`h-4 w-4 mr-1 ${getRarityColor(rarity as RarityTier)}`} />\n                            <span className={`text-xs ${getRarityColor(rarity as RarityTier)}`}>\n                              {rarity}\n                            </span>\n                          </div>\n                        </div>\n                        <p className=\"text-slate-400 text-sm mb-2\">Von: {listing.sellerUsername}</p>\n                        {/* Typ und Menge in einer Zeile */}\n                        <div className=\"flex justify-between text-xs text-slate-300 mb-2\">\n                          <span>Typ: {\n                            listing.itemType === 'seed' ? 'Samen' : \n                            listing.itemType === 'caterpillar' ? 'Raupe' :\n                            listing.itemType === 'flower' ? 'Blume' :\n                            listing.itemType === 'butterfly' ? 'Schmetterling' :\n                            listing.itemType === 'fish' ? 'Fisch' : 'Unbekannt'\n                          }</span>\n                          <span>Menge: {listing.quantity}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">Preis/Stück:</span>\n                        <span className=\"text-orange-400\">{listing.pricePerUnit} Cr</span>\n                      </div>\n                      <div className=\"flex justify-between font-bold\">\n                        <span className=\"text-slate-300\">Gesamt:</span>\n                        <span className=\"text-orange-400\">{listing.totalPrice} Cr</span>\n                      </div>\n                    </div>\n                    <Button\n                      className=\"w-full mt-4 bg-green-600 hover:bg-green-700\"\n                      onClick={() => buyListing(listing.id, listing.quantity, listing.totalPrice)}\n                      disabled={isLoading || credits < listing.totalPrice}\n                    >\n                      {isLoading ? \"Kaufe...\" : \"Kaufen\"}\n                    </Button>\n                    </div>\n                  )\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {activeTab === \"server\" && (\n        <div className=\"p-6 bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-yellow-500/30 rounded-lg shadow-2xl\">\n          <div className=\"flex items-center mb-6\">\n            <div className=\"text-yellow-400 text-4xl mr-3 animate-pulse\">☀️</div>\n            <span className=\"text-3xl font-bold bg-gradient-to-r from-yellow-300 to-orange-300 bg-clip-text text-transparent\">\n              Sonnen-Shop\n            </span>\n          </div>\n          <p className=\"text-slate-400 text-sm mb-6\">Kaufe Samen mit Sonnen</p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {sunOffers.map((offer) => (\n              <div\n                key={offer.id}\n                className=\"bg-slate-900 rounded-lg p-4 border-2\"\n                style={{ borderColor: getBorderColor(offer.seedRarity as RarityTier) }}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-bold text-white\">{offer.seedName}</h4>\n                  <div className=\"flex items-center\">\n                    <Star className={`h-4 w-4 mr-1 ${getRarityColor(offer.seedRarity as RarityTier)}`} />\n                    <span className={`text-xs ${getRarityColor(offer.seedRarity as RarityTier)}`}>\n                      {offer.seedRarity}\n                    </span>\n                  </div>\n                </div>\n                <p className=\"text-slate-400 text-sm mb-3\">Von: {offer.seller}</p>\n                <p className=\"text-slate-300 text-sm mb-3\">{offer.description}</p>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-400\">Verfügbar:</span>\n                    <span className=\"text-white\">♾️ Unbegrenzt</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-400\">Preis/Stück:</span>\n                    <span className=\"text-yellow-400\">{offer.pricePerUnit} ☀️</span>\n                  </div>\n                </div>\n                <div className=\"mt-4 space-y-2\">\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      className=\"flex-1 bg-yellow-600 hover:bg-yellow-700\"\n                      onClick={() => buyFromServerWithSuns(offer.seedId, 1, offer.pricePerUnit)}\n                      disabled={isLoading || suns < offer.pricePerUnit}\n                    >\n                      1x kaufen ({offer.pricePerUnit} ☀️)\n                    </Button>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      className=\"flex-1 bg-yellow-600 hover:bg-yellow-700\"\n                      onClick={() => buyFromServerWithSuns(offer.seedId, 5, offer.pricePerUnit * 5)}\n                      disabled={isLoading || suns < offer.pricePerUnit * 5}\n                    >\n                      5x kaufen ({offer.pricePerUnit * 5} ☀️)\n                    </Button>\n                    <Button\n                      className=\"flex-1 bg-yellow-600 hover:bg-yellow-700\"\n                      onClick={() => buyFromServerWithSuns(offer.seedId, 10, offer.pricePerUnit * 10)}\n                      disabled={isLoading || suns < offer.pricePerUnit * 10}\n                    >\n                      10x kaufen ({offer.pricePerUnit * 10} ☀️)\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {activeTab === \"sell\" && (\n        <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-orange-500/30 shadow-2xl overflow-visible\">\n          <CardHeader className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-orange-500/10 to-yellow-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n            <CardTitle className=\"text-white flex items-center relative z-10\">\n              <div className=\"relative\">\n                <HandCoins className=\"h-8 w-8 mr-3 text-orange-400 animate-pulse\" />\n                <div className=\"absolute inset-0 h-8 w-8 mr-3 text-orange-400 animate-ping opacity-30\"></div>\n              </div>\n              <span className=\"text-3xl font-bold bg-gradient-to-r from-orange-300 to-yellow-300 bg-clip-text text-transparent\">\n                Items Verkaufen 💰\n              </span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"overflow-visible\">\n            <div className=\"relative\">\n              {/* Item Type Selector - Schöne Tab-Buttons */}\n              <div className=\"mb-6\">\n                <Label className=\"text-slate-300 mb-3 block\">Was möchtest du verkaufen?</Label>\n                <div className=\"grid grid-cols-2 lg:grid-cols-5 gap-2 bg-slate-900 rounded-lg border border-slate-700 p-1\">\n                  <button\n                    type=\"button\"\n                    onClick={() => setSellForm({...sellForm, itemType: 'seed', seedId: 0, caterpillarId: 0, flowerId: 0, butterflyId: 0, fishId: 0, quantity: 1})}\n                    className={`flex items-center justify-center py-3 px-2 rounded-md transition-all duration-200 font-medium ${\n                      sellForm.itemType === 'seed'\n                        ? 'bg-gradient-to-r from-green-600 to-green-500 text-white shadow-lg border-2 border-green-400'\n                        : 'text-slate-400 hover:text-white hover:bg-slate-800'\n                    }`}\n                  >\n                    <span className=\"text-lg mr-1\">🌱</span>\n                    <div className=\"flex flex-col items-center\">\n                      <span className=\"text-sm\">Samen</span>\n                      <span className=\"text-xs opacity-75\">({mySeeds.length})</span>\n                    </div>\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => setSellForm({...sellForm, itemType: 'flower', seedId: 0, caterpillarId: 0, flowerId: 0, butterflyId: 0, fishId: 0})}\n                    className={`flex items-center justify-center py-3 px-2 rounded-md transition-all duration-200 font-medium ${\n                      sellForm.itemType === 'flower'\n                        ? 'bg-gradient-to-r from-pink-600 to-pink-500 text-white shadow-lg border-2 border-pink-400'\n                        : 'text-slate-400 hover:text-white hover:bg-slate-800'\n                    }`}\n                  >\n                    <span className=\"text-lg mr-1\">🌸</span>\n                    <div className=\"flex flex-col items-center\">\n                      <span className=\"text-sm\">Blumen</span>\n                      <span className=\"text-xs opacity-75\">({myFlowers.length})</span>\n                    </div>\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => setSellForm({...sellForm, itemType: 'butterfly', seedId: 0, caterpillarId: 0, flowerId: 0, butterflyId: 0, fishId: 0})}\n                    className={`flex items-center justify-center py-3 px-2 rounded-md transition-all duration-200 font-medium ${\n                      sellForm.itemType === 'butterfly'\n                        ? 'bg-gradient-to-r from-purple-600 to-purple-500 text-white shadow-lg border-2 border-purple-400'\n                        : 'text-slate-400 hover:text-white hover:bg-slate-800'\n                    }`}\n                  >\n                    <span className=\"text-lg mr-1\">🦋</span>\n                    <div className=\"flex flex-col items-center\">\n                      <span className=\"text-sm\">Schmetterlinge</span>\n                      <span className=\"text-xs opacity-75\">({myButterflies.length})</span>\n                    </div>\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => setSellForm({...sellForm, itemType: 'caterpillar', seedId: 0, caterpillarId: 0, flowerId: 0, butterflyId: 0, fishId: 0})}\n                    className={`flex items-center justify-center py-3 px-2 rounded-md transition-all duration-200 font-medium ${\n                      sellForm.itemType === 'caterpillar'\n                        ? 'bg-gradient-to-r from-orange-600 to-orange-500 text-white shadow-lg border-2 border-orange-400'\n                        : 'text-slate-400 hover:text-white hover:bg-slate-800'\n                    }`}\n                  >\n                    <span className=\"text-lg mr-1\">🐛</span>\n                    <div className=\"flex flex-col items-center\">\n                      <span className=\"text-sm\">Raupen</span>\n                      <span className=\"text-xs opacity-75\">({myCaterpillars.length})</span>\n                    </div>\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => setSellForm({...sellForm, itemType: 'fish', seedId: 0, caterpillarId: 0, flowerId: 0, butterflyId: 0, fishId: 0})}\n                    className={`flex items-center justify-center py-3 px-2 rounded-md transition-all duration-200 font-medium ${\n                      sellForm.itemType === 'fish'\n                        ? 'bg-gradient-to-r from-blue-600 to-blue-500 text-white shadow-lg border-2 border-blue-400'\n                        : 'text-slate-400 hover:text-white hover:bg-slate-800'\n                    }`}\n                  >\n                    <span className=\"text-lg mr-1\">🐟</span>\n                    <div className=\"flex flex-col items-center\">\n                      <span className=\"text-sm\">Fische</span>\n                      <span className=\"text-xs opacity-75\">({myFish.length})</span>\n                    </div>\n                  </button>\n                </div>\n              </div>\n\n              {/* Conditional Content based on selection */}\n              {sellForm.itemType === 'seed' && mySeeds.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-slate-400\">Du hast noch keine Samen zum Verkaufen</p>\n                  <p className=\"text-slate-500 text-sm mt-2\">Züchte Blumen im Garten um Samen zu erhalten</p>\n                </div>\n              ) : sellForm.itemType === 'caterpillar' && myCaterpillars.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-slate-400\">Du hast noch keine Raupen zum Verkaufen</p>\n                  <p className=\"text-slate-500 text-sm mt-2\">Sammel Raupen am Teich um sie zu verkaufen</p>\n                </div>\n              ) : sellForm.itemType === 'flower' && myFlowers.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-slate-400\">Du hast noch keine Blumen zum Verkaufen</p>\n                  <p className=\"text-slate-500 text-sm mt-2\">Züchte Blumen im Garten und ernte sie</p>\n                </div>\n              ) : sellForm.itemType === 'butterfly' && myButterflies.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-slate-400\">Du hast noch keine Schmetterlinge zum Verkaufen</p>\n                  <p className=\"text-slate-500 text-sm mt-2\">Sammle Schmetterlinge in der Ausstellung</p>\n                </div>\n              ) : sellForm.itemType === 'fish' && myFish.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-slate-400\">Du hast noch keine Fische zum Verkaufen</p>\n                  <p className=\"text-slate-500 text-sm mt-2\">Züchte Fische am Teich mit Raupen</p>\n                </div>\n              ) : (\n                <div className=\"max-w-6xl mx-auto\">\n                  <form onSubmit={createListing}>\n                    {/* Two Column Layout: Selection Left + Form Right */}\n                    <div className=\"grid grid-cols-2 gap-6\">\n                      \n                      {/* LEFT COLUMN: Item Selection Card */}\n                      <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-blue-500/30\">\n                        <CardHeader>\n                          <CardTitle className=\"text-white flex items-center\">\n                            <span className=\"text-2xl mr-3\">\n                              {sellForm.itemType === 'seed' ? '🌱' :\n                               sellForm.itemType === 'flower' ? '🌸' :\n                               sellForm.itemType === 'butterfly' ? '🦋' :\n                               sellForm.itemType === 'caterpillar' ? '🐛' :\n                               sellForm.itemType === 'fish' ? '🐟' : '📦'}\n                            </span>\n                            {sellForm.itemType === 'seed' ? 'Samen auswählen' :\n                             sellForm.itemType === 'flower' ? 'Blume auswählen' :\n                             sellForm.itemType === 'butterfly' ? 'Schmetterling auswählen' :\n                             sellForm.itemType === 'caterpillar' ? 'Raupe auswählen' :\n                             sellForm.itemType === 'fish' ? 'Fisch auswählen' : 'Item auswählen'}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n\n                        {/* Item Selector based on type */}\n                        {sellForm.itemType === 'seed' ? (\n                          <div>\n                            <select\n                              id=\"seedSelect\"\n                              value={sellForm.seedId}\n                              onChange={(e) => setSellForm({...sellForm, seedId: Number(e.target.value)})}\n                              className=\"w-full p-3 bg-slate-900 border border-slate-600 rounded-lg text-white\"\n                              required\n                            >\n                              <option value={0}>-- Samen wählen --</option>\n                              {mySeeds.map((seed) => (\n                                <option key={seed.id} value={seed.seedId}>\n                                  {seed.seedName} (x{seed.quantity})\n                                </option>\n                              ))}\n                            </select>\n                          </div>\n                ) : sellForm.itemType === 'flower' ? (\n                          <div className=\"relative\">\n                            <div className=\"space-y-3 max-h-80 overflow-y-auto pr-2\">\n                              {myFlowers.length === 0 ? (\n                        <div className=\"text-center py-4 text-slate-400\">\n                          Keine Blumen verfügbar\n                        </div>\n                      ) : (\n                        myFlowers.map((flower) => {\n                          const isSelected = sellForm.flowerId === flower.id;\n                          \n                          return (\n                            <div\n                              key={flower.id}\n                              onClick={() => setSellForm({...sellForm, flowerId: flower.id})}\n                              className={`cursor-pointer rounded-lg p-3 border-2 transition-all duration-200 hover:scale-[1.02] ${\n                                isSelected \n                                  ? `border-pink-400 bg-pink-400/20 shadow-lg` \n                                  : `hover:border-slate-500 border-slate-600 bg-slate-800`\n                              }`}\n                              style={isSelected ? { borderColor: getBorderColor(flower.flowerRarity as RarityTier) } : {}}\n                            >\n                              <div className=\"flex items-center space-x-3\">\n                                {/* Blumen Bild */}\n                                <div \n                                  className=\"w-16 h-16 rounded-lg bg-slate-700 border-2 flex-shrink-0 overflow-hidden\"\n                                  style={{ borderColor: getBorderColor(flower.flowerRarity as RarityTier) }}\n                                >\n                                  <img\n                                    src={flower.flowerImageUrl || `/Blumen/${(flower.flowerId || flower.id)}.jpg`}\n                                    alt={flower.flowerName}\n                                    className=\"w-full h-full object-cover\"\n                                    onError={(e) => {\n                                      e.currentTarget.style.display = 'none';\n                                      e.currentTarget.parentElement!.innerHTML = '<div class=\"w-full h-full flex items-center justify-center text-2xl\">🌸</div>';\n                                    }}\n                                  />\n                                </div>\n                                \n                                {/* Blumen Info */}\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center justify-between mb-1\">\n                                    <h4 className=\"font-bold text-white text-sm\">{flower.flowerName}</h4>\n                                    <div className=\"flex items-center\">\n                                      <Star className={`h-3 w-3 mr-1 ${getRarityColor(flower.flowerRarity as RarityTier)}`} />\n                                      <span className={`text-xs font-medium ${getRarityColor(flower.flowerRarity as RarityTier)}`}>\n                                        {flower.flowerRarity}\n                                      </span>\n                                    </div>\n                                  </div>\n                                  <div className=\"text-xs text-slate-400\">\n                                    Menge: {flower.quantity}\n                                  </div>\n                                </div>\n                                \n                                {/* Auswahl Indikator */}\n                                {isSelected && (\n                                  <div className=\"flex-shrink-0\">\n                                    <div className=\"w-6 h-6 rounded-full bg-pink-400 flex items-center justify-center\">\n                                      <span className=\"text-white text-xs font-bold\">✓</span>\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          );\n                        })\n                      )}\n                    </div>\n                  </div>\n                ) : sellForm.itemType === 'fish' ? (\n                  <div className=\"relative\">\n                    <Label>Fisch auswählen</Label>\n                    <div className=\"space-y-3 max-h-64 overflow-y-auto\" style={{ position: 'relative' }}>\n                      {myFish.length === 0 ? (\n                        <div className=\"text-center py-4 text-slate-400\">\n                          Keine Fische verfügbar\n                        </div>\n                      ) : (\n                        myFish.map((fish) => {\n                          const isSelected = sellForm.fishId === fish.id;\n                          \n                          return (\n                            <div\n                              key={fish.id}\n                              onClick={() => setSellForm({...sellForm, fishId: fish.id})}\n                              className={`cursor-pointer rounded-lg p-3 border-2 transition-all duration-200 hover:scale-[1.02] ${\n                                isSelected \n                                  ? `border-blue-400 bg-blue-400/20 shadow-lg` \n                                  : `hover:border-slate-500 border-slate-600 bg-slate-800`\n                              }`}\n                              style={isSelected ? { borderColor: getBorderColor(fish.fishRarity as RarityTier) } : {}}\n                            >\n                              <div className=\"flex items-center space-x-3\">\n                                {/* Fisch Bild */}\n                                <div \n                                  className=\"w-16 h-16 rounded-lg bg-slate-700 border-2 flex-shrink-0 overflow-hidden\"\n                                  style={{ borderColor: getBorderColor(fish.fishRarity as RarityTier) }}\n                                >\n                                  <img\n                                    src={fish.fishImageUrl || `/Fische/${(fish.fishId || fish.id)}.jpg`}\n                                    alt={fish.fishName}\n                                    className=\"w-full h-full object-cover\"\n                                    onError={(e) => {\n                                      e.currentTarget.style.display = 'none';\n                                      e.currentTarget.parentElement!.innerHTML = '<div class=\"w-full h-full flex items-center justify-center text-2xl\">🐟</div>';\n                                    }}\n                                  />\n                                </div>\n                                \n                                {/* Fisch Info */}\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center justify-between mb-1\">\n                                    <h4 className=\"font-bold text-white text-sm\">{fish.fishName}</h4>\n                                    <div className=\"flex items-center\">\n                                      <Star className={`h-3 w-3 mr-1 ${getRarityColor(fish.fishRarity as RarityTier)}`} />\n                                      <span className={`text-xs font-medium ${getRarityColor(fish.fishRarity as RarityTier)}`}>\n                                        {fish.fishRarity}\n                                      </span>\n                                    </div>\n                                  </div>\n                                  <div className=\"text-xs text-slate-400\">\n                                    Menge: {fish.quantity}\n                                  </div>\n                                </div>\n                                \n                                {/* Auswahl Indikator */}\n                                {isSelected && (\n                                  <div className=\"flex-shrink-0\">\n                                    <div className=\"w-6 h-6 rounded-full bg-blue-400 flex items-center justify-center\">\n                                      <span className=\"text-white text-xs font-bold\">✓</span>\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          );\n                        })\n                      )}\n                    </div>\n                  </div>\n                ) : sellForm.itemType === 'caterpillar' ? (\n                  <div className=\"relative\">\n                    <Label>Raupe auswählen</Label>\n                    <div className=\"space-y-3 max-h-64 overflow-y-auto\" style={{ position: 'relative' }}>\n                      {myCaterpillars.length === 0 ? (\n                        <div className=\"text-center py-4 text-slate-400\">\n                          Keine Raupen verfügbar\n                        </div>\n                      ) : (\n                        myCaterpillars.map((caterpillar) => {\n                          const caterpillarName = caterpillar.caterpillarName || generateLatinCaterpillarName(caterpillar.caterpillarId || caterpillar.id);\n                          const isSelected = sellForm.caterpillarId === caterpillar.id;\n                          \n                          return (\n                            <div\n                              key={caterpillar.id}\n                              onClick={() => setSellForm({...sellForm, caterpillarId: caterpillar.id})}\n                              className={`cursor-pointer rounded-lg p-3 border-2 transition-all duration-200 hover:scale-[1.02] ${\n                                isSelected \n                                  ? `border-orange-400 bg-orange-400/20 shadow-lg` \n                                  : `hover:border-slate-500 border-slate-600 bg-slate-800`\n                              }`}\n                              style={isSelected ? { borderColor: getBorderColor(caterpillar.caterpillarRarity as RarityTier) } : {}}\n                            >\n                              <div className=\"flex items-center space-x-3\">\n                                {/* Raupe Bild - einfach ohne Hover */}\n                                <div \n                                  className=\"w-16 h-16 rounded-lg bg-slate-700 border-2 flex-shrink-0 overflow-hidden\"\n                                  style={{ borderColor: getBorderColor(caterpillar.caterpillarRarity as RarityTier) }}\n                                >\n                                  <img\n                                    src={caterpillar.caterpillarImageUrl || `/Raupen/${(caterpillar.caterpillarId || caterpillar.id)}.jpg`}\n                                    alt={caterpillarName}\n                                    className=\"w-full h-full object-cover\"\n                                    onError={(e) => {\n                                      // Fallback zu einem Platzhalter wenn Bild nicht gefunden wird\n                                      e.currentTarget.style.display = 'none';\n                                      e.currentTarget.parentElement!.innerHTML = '<div class=\"w-full h-full flex items-center justify-center text-2xl\">🐛</div>';\n                                    }}\n                                  />\n                                </div>\n                                \n                                {/* Raupe Info */}\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center justify-between mb-1\">\n                                    <h4 className=\"font-bold text-white text-sm\">{caterpillarName}</h4>\n                                    <div className=\"flex items-center\">\n                                      <Star className={`h-3 w-3 mr-1 ${getRarityColor(caterpillar.caterpillarRarity as RarityTier)}`} />\n                                      <span className={`text-xs font-medium ${getRarityColor(caterpillar.caterpillarRarity as RarityTier)}`}>\n                                        {caterpillar.caterpillarRarity}\n                                      </span>\n                                    </div>\n                                  </div>\n                                  <div className=\"text-xs text-slate-400\">\n                                    ID: {caterpillar.caterpillarId || caterpillar.id}\n                                  </div>\n                                </div>\n                                \n                                {/* Auswahl Indikator */}\n                                {isSelected && (\n                                  <div className=\"flex-shrink-0\">\n                                    <div className=\"w-6 h-6 rounded-full bg-orange-400 flex items-center justify-center\">\n                                      <span className=\"text-white text-xs font-bold\">✓</span>\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          );\n                        })\n                      )}\n                    </div>\n                  </div>\n                ) : sellForm.itemType === 'butterfly' ? (\n                  <div className=\"relative\">\n                    <Label>Schmetterling auswählen</Label>\n                    <div className=\"space-y-3 max-h-64 overflow-y-auto\" style={{ position: 'relative' }}>\n                      {myButterflies.length === 0 ? (\n                        <div className=\"text-center py-4 text-slate-400\">\n                          Keine Schmetterlinge verfügbar\n                        </div>\n                      ) : (\n                        myButterflies.map((butterfly) => {\n                          const isSelected = sellForm.butterflyId === butterfly.id;\n                          \n                          return (\n                            <div\n                              key={butterfly.id}\n                              onClick={() => setSellForm({...sellForm, butterflyId: butterfly.id})}\n                              className={`cursor-pointer rounded-lg p-3 border-2 transition-all duration-200 hover:scale-[1.02] ${\n                                isSelected \n                                  ? `border-purple-400 bg-purple-400/20 shadow-lg` \n                                  : `hover:border-slate-500 border-slate-600 bg-slate-800`\n                              }`}\n                              style={isSelected ? { borderColor: getBorderColor(butterfly.butterflyRarity as RarityTier) } : {}}\n                            >\n                              <div className=\"flex items-center space-x-3\">\n                                <div \n                                  className=\"w-16 h-16 rounded-lg bg-slate-700 border-2 flex-shrink-0 overflow-hidden\"\n                                  style={{ borderColor: getBorderColor(butterfly.butterflyRarity as RarityTier) }}\n                                >\n                                  <img\n                                    src={butterfly.butterflyImageUrl || `/Schmetterlinge/${(butterfly.butterflyId || 0)}.jpg`}\n                                    alt={butterfly.butterflyName}\n                                    className=\"w-full h-full object-cover\"\n                                    onError={(e) => {\n                                      e.currentTarget.style.display = 'none';\n                                      e.currentTarget.parentElement!.innerHTML = '<div class=\"w-full h-full flex items-center justify-center text-2xl\">🦋</div>';\n                                    }}\n                                  />\n                                </div>\n                                \n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center justify-between mb-1\">\n                                    <h4 className=\"font-bold text-white text-sm\">{butterfly.butterflyName}</h4>\n                                    <div className=\"flex items-center\">\n                                      <Star className={`h-3 w-3 mr-1 ${getRarityColor(butterfly.butterflyRarity as RarityTier)}`} />\n                                      <span className={`text-xs font-medium ${getRarityColor(butterfly.butterflyRarity as RarityTier)}`}>\n                                        {butterfly.butterflyRarity}\n                                      </span>\n                                    </div>\n                                  </div>\n                                  <div className=\"text-xs text-slate-400\">\n                                    ID: {butterfly.butterflyId || butterfly.id}\n                                  </div>\n                                </div>\n                                \n                                {isSelected && (\n                                  <div className=\"flex-shrink-0\">\n                                    <div className=\"w-6 h-6 rounded-full bg-purple-400 flex items-center justify-center\">\n                                      <span className=\"text-white text-xs font-bold\">✓</span>\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          );\n                        })\n                      )}\n                    </div>\n                  </div>\n                        ) : null}\n                        </CardContent>\n                      </Card>\n\n                      {/* RIGHT COLUMN: Form Fields Card */}\n                      <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-orange-500/30\">\n                        <CardHeader>\n                          <CardTitle className=\"text-white flex items-center\">\n                            <span className=\"text-2xl mr-3\">💰</span>\n                            Verkaufsdetails\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-6\">\n\n                        {/* Quantity Input */}\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"quantity\" className=\"text-white font-medium\">Menge</Label>\n                          <Input\n                            id=\"quantity\"\n                            type=\"number\"\n                            min=\"1\"\n                            max={sellForm.itemType === 'seed' \n                              ? (mySeeds.find(s => s.seedId === sellForm.seedId)?.quantity || 1)\n                              : sellForm.itemType === 'caterpillar'\n                              ? (myCaterpillars.find(c => c.id === sellForm.caterpillarId)?.quantity || 1)\n                              : sellForm.itemType === 'flower'\n                              ? (myFlowers.find(f => f.id === sellForm.flowerId)?.quantity || 1)\n                              : sellForm.itemType === 'butterfly'\n                              ? 1\n                              : sellForm.itemType === 'fish'\n                              ? (myFish.find(f => f.id === sellForm.fishId)?.quantity || 1)\n                              : 1\n                            }\n                            value={sellForm.quantity}\n                            onChange={(e) => setSellForm({...sellForm, quantity: Number(e.target.value)})}\n                            className=\"bg-slate-900 border-slate-600 text-white h-12\"\n                            required\n                          />\n                          <p className=\"text-xs text-slate-400\">\n                            Verfügbar: {sellForm.itemType === 'seed' \n                              ? (mySeeds.find(s => s.seedId === sellForm.seedId)?.quantity || 0)\n                              : sellForm.itemType === 'caterpillar'\n                              ? (myCaterpillars.find(c => c.id === sellForm.caterpillarId)?.quantity || 0)\n                              : sellForm.itemType === 'flower'\n                              ? (myFlowers.find(f => f.id === sellForm.flowerId)?.quantity || 0)\n                              : sellForm.itemType === 'butterfly'\n                              ? 1\n                              : sellForm.itemType === 'fish'\n                              ? (myFish.find(f => f.id === sellForm.fishId)?.quantity || 0)\n                              : 0\n                            }\n                          </p>\n                        </div>\n\n                        {/* Price Input */}\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"pricePerUnit\" className=\"text-white font-medium\">Preis pro Stück (Cr)</Label>\n                          <Input\n                            id=\"pricePerUnit\"\n                            type=\"number\"\n                            min=\"1\"\n                            value={sellForm.pricePerUnit}\n                            onChange={(e) => setSellForm({...sellForm, pricePerUnit: Number(e.target.value)})}\n                            className=\"bg-slate-900 border-slate-600 text-white h-12\"\n                            required\n                          />\n                        </div>\n\n                        {/* Total Price Preview */}\n                        <div className=\"bg-gradient-to-r from-orange-900/40 to-yellow-900/40 border border-orange-500/30 rounded-lg p-4\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-slate-300 font-medium\">Gesamtpreis:</span>\n                            <span className=\"text-orange-400 font-bold text-xl\">\n                              {sellForm.quantity * sellForm.pricePerUnit} Cr\n                            </span>\n                          </div>\n                        </div>\n\n                        {/* Submit Button */}\n                        <Button\n                          type=\"submit\"\n                          className=\"w-full bg-gradient-to-r from-orange-600 to-yellow-600 hover:from-orange-700 hover:to-yellow-700 text-white font-bold py-4 text-lg transition-all duration-200 shadow-lg hover:shadow-xl\"\n                          disabled={isLoading || \n                            (sellForm.itemType === 'seed' && !sellForm.seedId) || \n                            (sellForm.itemType === 'caterpillar' && !sellForm.caterpillarId) ||\n                            (sellForm.itemType === 'flower' && !sellForm.flowerId) ||\n                            (sellForm.itemType === 'butterfly' && !sellForm.butterflyId) ||\n                            (sellForm.itemType === 'fish' && !sellForm.fishId)\n                          }\n                        >\n                          {isLoading ? (\n                            <div className=\"flex items-center justify-center\">\n                              <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                              Erstelle Angebot...\n                            </div>\n                          ) : (\n                            \"💰 Angebot erstellen\"\n                          )}\n                        </Button>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </form>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};","size_bytes":73189},"client/src/components/RarityImage.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { type RarityTier } from \"@shared/rarity\";\nimport { Flower, Sparkles } from \"lucide-react\";\n\ninterface RarityImageProps {\n  src: string;\n  alt: string;\n  rarity: RarityTier;\n  size?: 'small' | 'medium' | 'large';\n  className?: string;\n}\n\nexport const RarityImage: React.FC<RarityImageProps> = ({\n  src,\n  alt,\n  rarity,\n  size = 'medium',\n  className = \"\"\n}) => {\n  const [imageError, setImageError] = useState(false);\n  const [currentSrc, setCurrentSrc] = useState(src);\n\n  // Reset state when src prop changes\n  useEffect(() => {\n    setCurrentSrc(src);\n    setImageError(false);\n  }, [src]);\n  \n  const sizeClasses = {\n    small: 'w-8 h-8',      // 32px\n    medium: 'w-12 h-12',   // 48px\n    large: 'w-16 h-16'     // 64px\n  };\n\n  const borderSize = {\n    small: 'border-2',\n    medium: 'border-2',\n    large: 'border-4'\n  };\n\n  const iconSize = {\n    small: 'h-4 w-4',\n    medium: 'h-6 w-6',\n    large: 'h-8 w-8'\n  };\n\n  const getBorderColor = (rarity: RarityTier): string => {\n    switch (rarity) {\n      case 'common': return '#fbbf24';      // yellow-400\n      case 'uncommon': return '#4ade80';    // green-400  \n      case 'rare': return '#3b82f6';        // blue-400\n      case 'super-rare': return '#06b6d4';  // cyan-400\n      case 'epic': return '#a855f7';        // purple-400\n      case 'legendary': return '#f97316';   // orange-400\n      case 'mythical': return '#ef4444';    // red-400\n      default: return '#9ca3af';            // gray-400\n    }\n  };\n\n  const handleImageError = () => {\n    // Try fallback to 0.jpg for different creature types before showing icon\n    if (currentSrc.includes('Schmetterlinge') && !currentSrc.includes('0.jpg')) {\n      setCurrentSrc('/Schmetterlinge/0.jpg');\n    } else if (currentSrc.includes('Fische') && !currentSrc.includes('0.jpg')) {\n      setCurrentSrc('/Fische/0.jpg');\n    } else if (currentSrc.includes('Raupen') && !currentSrc.includes('0.jpg')) {\n      // First try removing padding from padded numbers (07.jpg -> 7.jpg)  \n      const match = currentSrc.match(/\\/Raupen\\/0*(\\d+)\\.jpg$/);\n      if (match && match[1] && currentSrc.includes('0' + match[1])) {\n        setCurrentSrc(`/Raupen/${match[1]}.jpg`);\n      } else {\n        setCurrentSrc('/Raupen/0.jpg');\n      }\n    } else {\n      setImageError(true);\n    }\n  };\n\n  return (\n    <div \n      className={`\n        ${className.includes('field-image') ? '' : sizeClasses[size]} \n        ${borderSize[size]} \n        rounded-lg \n        overflow-hidden \n        bg-slate-800 \n        flex \n        items-center \n        justify-center \n        flex-shrink-0\n        ${className}\n      `} \n      style={{ \n        borderStyle: 'solid',\n        borderColor: getBorderColor(rarity),\n        aspectRatio: '1/1'\n      }}>\n      {!imageError ? (\n        <img\n          src={currentSrc}\n          alt={alt}\n          className=\"w-full h-full object-cover\"\n          style={{ aspectRatio: '1/1' }}\n          onError={handleImageError}\n        />\n      ) : (\n        // Fallback icon for missing images\n        currentSrc.includes('Blumen') ? (\n          <Flower className={`${iconSize[size]} text-pink-400`} />\n        ) : (\n          <Sparkles className={`${iconSize[size]} text-purple-400`} />\n        )\n      )}\n    </div>\n  );\n};","size_bytes":3305},"client/src/components/SeedSelectionModal.tsx":{"content":"import React from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RarityImage } from \"./RarityImage\";\nimport { Sprout, Star, X, Clock, Sparkles } from \"lucide-react\";\nimport { getRarityColor, getRarityDisplayName, getRarityBadgeStyle, type RarityTier, getGrowthTime, formatTime } from \"@shared/rarity\";\n\ninterface SeedOption {\n  id: number;\n  seedId: number;\n  seedName: string;\n  seedRarity: string;\n  quantity: number;\n}\n\ninterface SeedSelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  seeds: SeedOption[];\n  fieldIndex: number;\n  onSelectSeed: (userSeedId: number, seedId: number, fieldIndex: number) => void;\n}\n\nexport const SeedSelectionModal: React.FC<SeedSelectionModalProps> = ({\n  isOpen,\n  onClose,\n  seeds,\n  fieldIndex,\n  onSelectSeed\n}) => {\n  const handleSeedSelect = (userSeedId: number, seedId: number) => {\n    onSelectSeed(userSeedId, seedId, fieldIndex);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 border-2 border-orange-500/30 text-white max-w-3xl shadow-2xl\">\n        <DialogHeader className=\"relative\">\n          {/* Enhanced Header Background */}\n          <div className=\"absolute inset-0 bg-gradient-to-r from-orange-500/10 to-yellow-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n          \n          <DialogTitle className=\"flex items-center text-white relative z-10\">\n            <div className=\"relative\">\n              <Sprout className=\"h-7 w-7 mr-3 text-orange-400 animate-pulse\" />\n              <div className=\"absolute inset-0 h-7 w-7 mr-3 text-orange-400 animate-ping opacity-30\"></div>\n            </div>\n            <span className=\"text-2xl font-bold bg-gradient-to-r from-orange-300 to-yellow-300 bg-clip-text text-transparent\">\n              🌱 Samen auswählen - Feld {fieldIndex + 1}\n            </span>\n          </DialogTitle>\n          \n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {seeds.filter(seed => seed.quantity > 0).length === 0 ? (\n            <div className=\"text-center py-16\">\n              <div className=\"w-24 h-24 mx-auto bg-gradient-to-br from-red-500/20 to-orange-500/20 rounded-full flex items-center justify-center mb-6 border-2 border-red-400/30\">\n                <Sprout className=\"h-12 w-12 text-red-400\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-slate-300 mb-4\">Keine Samen verfügbar</h3>\n              <div className=\"bg-slate-800/50 rounded-xl p-6 border border-slate-600 inline-block\">\n                <p className=\"text-slate-400 text-lg mb-2\">Du hast keine Samen zum Pflanzen</p>\n                <p className=\"text-slate-500\">Kaufe Samen im Markt oder erhalte sie durch Gärtnern 🛒</p>\n              </div>\n            </div>\n          ) : (\n            <>\n              {/* Info Header */}\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-xl blur-sm\"></div>\n                <div className=\"relative bg-gradient-to-r from-slate-800/80 to-slate-900/80 p-4 rounded-xl border border-green-400/30\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <div className=\"relative\">\n                        <Sparkles className=\"h-6 w-6 mr-3 text-green-400 animate-bounce\" />\n                        <div className=\"absolute inset-0 h-6 w-6 mr-3 text-green-400 animate-ping opacity-30\"></div>\n                      </div>\n                      <span className=\"text-lg font-semibold text-green-300\">Verfügbare Samen:</span>\n                    </div>\n                    <Badge className=\"bg-gradient-to-r from-green-600 to-emerald-600 text-white text-lg px-4 py-2 font-bold\">\n                      {seeds.filter(seed => seed.quantity > 0).length} Arten\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              {/* Seeds Grid */}\n              <div className=\"bg-slate-900/50 rounded-xl p-4 border border-slate-700\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 max-h-96 overflow-y-auto\">\n                  {seeds\n                    .filter(seed => seed.quantity > 0)\n                    .sort((a, b) => {\n                      const rarityOrder = { common: 0, uncommon: 1, rare: 2, \"super-rare\": 3, epic: 4, legendary: 5, mythical: 6 };\n                      return (rarityOrder[b.seedRarity as keyof typeof rarityOrder] || 0) - (rarityOrder[a.seedRarity as keyof typeof rarityOrder] || 0);\n                    })\n                    .map((seed) => (\n                    <Card \n                      key={seed.id}\n                      className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-600 cursor-pointer hover:border-orange-400/50 transition-all duration-300 hover:scale-105 hover:shadow-lg group relative overflow-hidden\"\n                      onClick={() => handleSeedSelect(seed.id, seed.seedId)}\n                    >\n                      {/* Glow Effect */}\n                      <div className={`absolute inset-0 rounded-lg opacity-0 group-hover:opacity-20 transition-opacity duration-300 ${getRarityColor(seed.seedRarity as RarityTier).replace('text-', 'bg-')}`}></div>\n                      \n                      <CardContent className=\"p-5 relative z-10\">\n                        <div className=\"flex items-start space-x-4\">\n                          <div className=\"relative\">\n                            <RarityImage \n                              src=\"/Blumen/0.jpg\"\n                              alt=\"Samen\"\n                              rarity={seed.seedRarity as RarityTier}\n                              size=\"large\"\n                              className=\"transition-transform duration-300 group-hover:scale-110\"\n                            />\n                            <div className=\"absolute -top-2 -right-2 bg-green-500 text-white text-xs font-bold rounded-full w-8 h-8 flex items-center justify-center animate-bounce\">\n                              {seed.quantity}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex-1 min-w-0 space-y-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <h4 className=\"font-bold text-white text-base truncate group-hover:text-orange-200 transition-colors duration-200\">\n                                {seed.seedName}\n                              </h4>\n                            </div>\n                            \n                            <Badge className={`${getRarityBadgeStyle(seed.seedRarity as RarityTier)} text-sm font-bold px-3 py-1 w-fit`}>\n                              <Star className=\"h-3 w-3 mr-1\" />\n                              {getRarityDisplayName(seed.seedRarity as RarityTier)}\n                            </Badge>\n\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <div className=\"flex items-center text-green-400 font-bold\">\n                                <Sparkles className=\"h-4 w-4 mr-1\" />\n                                {seed.quantity} verfügbar\n                              </div>\n                              <div className=\"flex items-center text-slate-400\">\n                                <Clock className=\"h-4 w-4 mr-1\" />\n                                {formatTime(getGrowthTime(seed.seedRarity as RarityTier))}\n                              </div>\n                            </div>\n\n                            {/* Click hint */}\n                            <div className=\"text-xs text-orange-400 opacity-0 group-hover:opacity-100 transition-opacity duration-300 font-medium\">\n                              ✨ Klicken zum Pflanzen\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n          \n          {/* Schließen Button */}\n          <div className=\"flex justify-center pt-6\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"text-slate-300 border-2 border-slate-600 hover:bg-slate-700 hover:border-slate-500 text-lg px-8 py-3 transition-all duration-300 hover:scale-105 shadow-lg\"\n            >\n              ✕ Schließen\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":8913},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-10 sm:h-8 rounded-md px-3 text-xs sm:text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1921},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent, DialogDescription, DialogTitle } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\" aria-describedby=\"command-dialog-description\">\n        <DialogTitle className=\"sr-only\">Kommando-Dialog</DialogTitle>\n        <DialogDescription id=\"command-dialog-description\" className=\"sr-only\">\n          Suchbarer Dialog zur Auswahl von Befehlen oder Optionen.\n        </DialogDescription>\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":5198},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  spinningSound: HTMLAudioElement | null; // Für kontinuierlichen Spin-Sound\n  spinStopTimer: NodeJS.Timeout | null; // Timer für verzögerten Stop\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n  playSlotSpin: () => void;\n  playSlotStop: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  spinningSound: null,\n  spinStopTimer: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted } = get();\n    const newMutedState = !isMuted;\n    \n    // Just update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound && !isMuted) {\n      successSound.volume = 0.7; // Lautstärke einstellen\n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSlotSpin: () => {\n    const { backgroundMusic, isMuted, spinStopTimer } = get();\n    \n    // Lösche vorherigen Timer falls vorhanden\n    if (spinStopTimer) {\n      clearTimeout(spinStopTimer);\n      set({ spinStopTimer: null });\n    }\n    \n    if (backgroundMusic && !isMuted) {\n      // Erstelle einen kontinuierlichen Spin-Sound aus der Hintergrundmusik\n      const spinSound = backgroundMusic.cloneNode() as HTMLAudioElement;\n      spinSound.volume = 0.15; // Leiser für Hintergrund-Effekt\n      spinSound.playbackRate = 2.0; // Doppelte Geschwindigkeit für Maschinen-Effekt\n      spinSound.loop = true; // Kontinuierlich wiederholen\n      spinSound.play().catch(error => {\n        console.log(\"Slot spin sound play prevented:\", error);\n      });\n      \n      // Speichere Referenz zum Stoppen\n      set({ spinningSound: spinSound });\n    }\n  },\n  \n  playSlotStop: () => {\n    const { hitSound, spinningSound, isMuted, spinStopTimer } = get();\n    \n    // Spiele den Stop-Sound sofort\n    if (hitSound && !isMuted) {\n      // Doppelter \"Stopp\" Sound für hörbareren Effekt\n      const soundClone1 = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone1.volume = 0.6; // Lauter\n      soundClone1.playbackRate = 0.8; // Langsamer, tiefer\n      soundClone1.play().catch(error => {\n        console.log(\"Slot stop sound play prevented:\", error);\n      });\n      \n      // Zweiter Sound nach kurzer Verzögerung\n      setTimeout(() => {\n        const soundClone2 = hitSound.cloneNode() as HTMLAudioElement;\n        soundClone2.volume = 0.4;\n        soundClone2.playbackRate = 1.2; // Höher für \"Klick\" Effekt\n        soundClone2.play().catch(error => {\n          console.log(\"Slot stop sound 2 play prevented:\", error);\n        });\n      }, 100);\n    }\n    \n    // Stoppe den kontinuierlichen Spin-Sound erst nach 2 Sekunden, aber nur einmal\n    if (spinningSound && !spinStopTimer) {\n      const timer = setTimeout(() => {\n        const { spinningSound: currentSpinningSound } = get();\n        if (currentSpinningSound) {\n          currentSpinningSound.pause();\n          currentSpinningSound.currentTime = 0;\n          set({ spinningSound: null, spinStopTimer: null });\n        }\n      }, 2000); // 2 Sekunden Verzögerung\n      \n      set({ spinStopTimer: timer });\n    }\n  }\n}));\n","size_bytes":4492},"client/src/lib/stores/useAuth.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector, persist } from \"zustand/middleware\";\n\nexport interface User {\n  id: number;\n  username: string;\n  credits: number;\n}\n\nexport interface UserNotification {\n  id: number;\n  userId: number;\n  type: string;\n  title: string;\n  message: string;\n  isRead: boolean;\n  rewardType?: string;\n  rewardItemId?: number;\n  rewardItemName?: string;\n  rewardItemRarity?: string;\n  rewardAmount?: number;\n  challengeId?: number;\n  challengeRank?: number;\n  createdAt: string;\n  readAt?: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  isLoading: boolean;\n  error: string | null;\n  isAuthenticated: boolean;\n  hasCheckedAuth: boolean; // 🔒 SECURITY: Track if server auth has been verified\n  \n  // Notifications\n  notifications: UserNotification[];\n  showNotifications: boolean;\n  hasUnreadNotifications: boolean;\n  \n  // Actions\n  login: (username: string, password: string) => Promise<void>;\n  register: (username: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  checkAuth: () => Promise<void>;\n  clearError: () => void;\n  \n  // Notification actions  \n  loadNotifications: () => Promise<void>;\n  setShowNotifications: (show: boolean) => void;\n  markNotificationAsRead: (notificationId: number) => Promise<void>;\n  markAllNotificationsAsRead: () => Promise<void>;\n}\n\nexport const useAuth = create<AuthState>()(\n  subscribeWithSelector(\n    persist(\n      (set, get) => ({\n        user: null,\n        isLoading: false,\n        error: null,\n        isAuthenticated: false,\n        hasCheckedAuth: false, // 🔒 SECURITY: Starts false until server verification\n        \n        // Notifications\n        notifications: [],\n        showNotifications: false,\n        hasUnreadNotifications: false,\n        \n        login: async (username: string, password: string) => {\n          set({ isLoading: true, error: null });\n          \n          try {\n            const response = await fetch(\"/api/auth/login\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({ username, password }),\n              credentials: \"include\", // Include cookies for JWT\n            });\n\n            if (!response.ok) {\n              const errorData = await response.json();\n              throw new Error(errorData.message || \"Login failed\");\n            }\n\n            const data = await response.json();\n            set({ user: data.user, isLoading: false, isAuthenticated: true, hasCheckedAuth: true });\n            console.log('🔐 Login successful:', data.user.username);\n            \n            // Load notifications after successful login\n            get().loadNotifications();\n          } catch (error) {\n            set({ \n              error: error instanceof Error ? error.message : \"Login failed\", \n              isLoading: false,\n              isAuthenticated: false\n            });\n            console.error('🔐 Login failed:', error);\n          }\n        },\n        \n        register: async (username: string, password: string) => {\n          set({ isLoading: true, error: null });\n          \n          try {\n            const response = await fetch(\"/api/auth/register\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({ username, password }),\n              credentials: \"include\", // Include cookies for JWT\n            });\n\n            if (!response.ok) {\n              const errorData = await response.json();\n              throw new Error(errorData.message || \"Registration failed\");\n            }\n\n            const data = await response.json();\n            set({ user: data.user, isLoading: false, isAuthenticated: true, hasCheckedAuth: true });\n            console.log('🔐 Registration successful:', data.user.username);\n          } catch (error) {\n            set({ \n              error: error instanceof Error ? error.message : \"Registration failed\", \n              isLoading: false,\n              isAuthenticated: false\n            });\n            console.error('🔐 Registration failed:', error);\n          }\n        },\n        \n        logout: async () => {\n          try {\n            await fetch(\"/api/auth/logout\", {\n              method: \"POST\",\n              credentials: \"include\", // Include cookies for JWT\n            });\n            console.log('🔐 Logout successful');\n          } catch (error) {\n            console.error('🔐 Logout error:', error);\n          } finally {\n            set({ user: null, error: null, isAuthenticated: false, hasCheckedAuth: true });\n          }\n        },\n        \n        checkAuth: async () => {\n          try {\n            set({ isLoading: true });\n            const response = await fetch(\"/api/auth/me\", {\n              method: \"GET\",\n              credentials: \"include\", // Include cookies for JWT\n            });\n\n            if (response.ok) {\n              const data = await response.json();\n              set({ \n                user: { \n                  id: data.user.id, \n                  username: data.user.username, \n                  credits: 0 // Will be fetched separately\n                }, \n                isAuthenticated: true,\n                isLoading: false,\n                hasCheckedAuth: true\n              });\n              console.log('🔐 Authentication verified:', data.user.username);\n            } else {\n              set({ user: null, isAuthenticated: false, isLoading: false, hasCheckedAuth: true });\n            }\n          } catch (error) {\n            console.error('🔐 Auth check failed:', error);\n            set({ user: null, isAuthenticated: false, isLoading: false, hasCheckedAuth: true });\n          }\n        },\n        \n        clearError: () => {\n          set({ error: null });\n        },\n\n        // Notification actions\n        loadNotifications: async () => {\n          const state = get();\n          if (!state.user) return;\n\n          try {\n            const response = await fetch(`/api/user/${state.user.id}/notifications`);\n            if (response.ok) {\n              const data = await response.json();\n              const notifications = data.notifications || [];\n              const hasUnread = notifications.some((n: UserNotification) => !n.isRead);\n              \n              set({ \n                notifications,\n                hasUnreadNotifications: hasUnread,\n                showNotifications: hasUnread // Auto-show if there are unread notifications\n              });\n              \n              console.log(`📨 Loaded ${notifications.length} notifications (${hasUnread ? 'has unread' : 'all read'})`);\n            }\n          } catch (error) {\n            console.error('Failed to load notifications:', error);\n          }\n        },\n\n        setShowNotifications: (show: boolean) => {\n          set({ showNotifications: show });\n        },\n\n        markNotificationAsRead: async (notificationId: number) => {\n          const state = get();\n          if (!state.user) return;\n\n          try {\n            const response = await fetch(`/api/user/${state.user.id}/notifications/${notificationId}/read`, {\n              method: 'POST'\n            });\n            if (response.ok) {\n              set(state => ({\n                notifications: state.notifications.map(n => \n                  n.id === notificationId ? { ...n, isRead: true } : n\n                ),\n                hasUnreadNotifications: state.notifications.some(n => \n                  n.id !== notificationId && !n.isRead\n                )\n              }));\n            }\n          } catch (error) {\n            console.error('Failed to mark notification as read:', error);\n          }\n        },\n\n        markAllNotificationsAsRead: async () => {\n          const state = get();\n          if (!state.user) return;\n\n          try {\n            const response = await fetch(`/api/user/${state.user.id}/notifications/read-all`, {\n              method: 'POST'\n            });\n            if (response.ok) {\n              set(state => ({\n                notifications: state.notifications.map(n => ({ ...n, isRead: true })),\n                hasUnreadNotifications: false\n              }));\n            }\n          } catch (error) {\n            console.error('Failed to mark all notifications as read:', error);\n          }\n        },\n      }),\n      {\n        name: 'mariposa-auth', // localStorage key\n        partialize: (state) => ({ user: state.user, isAuthenticated: state.isAuthenticated }), // 🔒 SECURITY: Don't persist hasCheckedAuth - force re-check on reload\n      }\n    )\n  )\n);","size_bytes":8697},"client/src/lib/stores/useCredits.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\ninterface CreditsState {\n  credits: number;\n  isLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  updateCredits: (userId: number, amount: number) => Promise<void>;\n  setCredits: (credits: number) => void;\n  clearError: () => void;\n}\n\nexport const useCredits = create<CreditsState>()(\n  subscribeWithSelector((set, get) => ({\n    credits: 0,\n    isLoading: false,\n    error: null,\n    \n    updateCredits: async (userId: number, amount: number) => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        const response = await fetch(`/api/user/${userId}/credits`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ amount }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || \"Failed to update credits\");\n        }\n\n        const data = await response.json();\n        set({ credits: data.credits, isLoading: false });\n      } catch (error) {\n        set({ \n          error: error instanceof Error ? error.message : \"Failed to update credits\", \n          isLoading: false \n        });\n      }\n    },\n    \n    setCredits: (credits: number) => {\n      set({ credits });\n    },\n    \n    clearError: () => {\n      set({ error: null });\n    },\n  }))\n);\n","size_bytes":1450},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"client/src/lib/stores/useMarket.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport interface MarketListing {\n  id: number;\n  sellerUsername: string;\n  itemType: 'seed' | 'caterpillar';\n  // Seed properties\n  seedName: string;\n  seedRarity: string;\n  seedId?: number;\n  // Caterpillar properties\n  caterpillarId?: number;\n  caterpillarName?: string;\n  caterpillarRarity?: string;\n  caterpillarImageUrl?: string;\n  caterpillarIdOriginal?: number;\n  // Common properties\n  quantity: number;\n  pricePerUnit: number;\n  totalPrice: number;\n}\n\nexport interface UserSeed {\n  id: number;\n  seedId: number;\n  seedName: string;\n  seedRarity: string;\n  quantity: number;\n}\n\ninterface MarketState {\n  listings: MarketListing[];\n  mySeeds: UserSeed[];\n  isLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  fetchListings: () => Promise<void>;\n  fetchMySeeds: (userId: number) => Promise<void>;\n  buyListing: (listingId: number, quantity: number) => Promise<boolean>;\n  createListing: (seedId: number, quantity: number, pricePerUnit: number) => Promise<boolean>;\n  clearError: () => void;\n}\n\nexport const useMarket = create<MarketState>()(\n  subscribeWithSelector((set, get) => ({\n    listings: [],\n    mySeeds: [],\n    isLoading: false,\n    error: null,\n    \n    fetchListings: async () => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        const response = await fetch('/api/market/listings');\n        if (!response.ok) {\n          throw new Error('Failed to fetch market listings');\n        }\n        \n        const data = await response.json();\n        set({ listings: data.listings || [], isLoading: false });\n      } catch (error) {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to fetch listings', \n          isLoading: false \n        });\n      }\n    },\n    \n    fetchMySeeds: async (userId: number) => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        const response = await fetch(`/api/user/${userId}/seeds`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch user seeds');\n        }\n        \n        const data = await response.json();\n        set({ mySeeds: data.seeds || [], isLoading: false });\n      } catch (error) {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to fetch seeds', \n          isLoading: false \n        });\n      }\n    },\n    \n    buyListing: async (listingId: number, quantity: number) => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        const response = await fetch('/api/market/buy', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-User-Id': '1', // Note: This will be overridden by component\n          },\n          body: JSON.stringify({ listingId, quantity }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || 'Failed to buy listing');\n        }\n\n        // Refresh listings after successful purchase\n        await get().fetchListings();\n        set({ isLoading: false });\n        return true;\n      } catch (error) {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to buy listing', \n          isLoading: false \n        });\n        return false;\n      }\n    },\n    \n    createListing: async (seedId: number, quantity: number, pricePerUnit: number) => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        const response = await fetch('/api/market/create-listing', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-User-Id': '1', // Note: This will be overridden by component\n          },\n          body: JSON.stringify({ seedId, quantity, pricePerUnit }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || 'Failed to create listing');\n        }\n\n        // Refresh listings after successful creation\n        await get().fetchListings();\n        set({ isLoading: false });\n        return true;\n      } catch (error) {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to create listing', \n          isLoading: false \n        });\n        return false;\n      }\n    },\n    \n    clearError: () => {\n      set({ error: null });\n    },\n  }))\n);","size_bytes":4436},"client/src/components/FlowerHoverPreview.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\nimport { Flower } from \"lucide-react\";\n\ninterface FlowerHoverPreviewProps {\n  flowerImageUrl: string;\n  flowerName: string;\n  rarity: RarityTier;\n  children: React.ReactNode;\n  isSpinning?: boolean;\n}\n\nexport const FlowerHoverPreview: React.FC<FlowerHoverPreviewProps> = ({\n  flowerImageUrl,\n  flowerName,\n  rarity,\n  children,\n  isSpinning = false\n}) => {\n  const [isHovering, setIsHovering] = useState(false);\n  const [imageError, setImageError] = useState(false);\n  const [currentSrc, setCurrentSrc] = useState(flowerImageUrl);\n  const [dialogPosition, setDialogPosition] = useState({ x: 0, y: 0 });\n\n  // Reset state when flowerImageUrl prop changes\n  useEffect(() => {\n    setCurrentSrc(flowerImageUrl);\n    setImageError(false);\n  }, [flowerImageUrl]);\n\n  const handleMouseEnter = (e: React.MouseEvent) => {\n    if (isSpinning) return; // No hover during spin animation\n    \n    const rect = e.currentTarget.getBoundingClientRect();\n    const dialogWidth = 280; // Dialog width + padding\n    const dialogHeight = 320; // Dialog height + padding\n    const margin = 8; // Margin from element\n    \n    // Get viewport dimensions\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n    \n    // Calculate horizontal position\n    let x = rect.right + margin; // Default: right of element\n    if (x + dialogWidth > viewportWidth) {\n      // Not enough space on right, position on left\n      x = rect.left - dialogWidth - margin;\n      if (x < 0) {\n        // Not enough space on left either, center it\n        x = Math.max(margin, (viewportWidth - dialogWidth) / 2);\n      }\n    }\n    \n    // Calculate vertical position\n    let y = rect.top; // Default: aligned with top of element\n    if (y + dialogHeight > viewportHeight) {\n      // Not enough space below, position above\n      y = rect.bottom - dialogHeight;\n      if (y < 0) {\n        // Not enough space above either, center vertically\n        y = Math.max(margin, (viewportHeight - dialogHeight) / 2);\n      }\n    }\n    \n    setDialogPosition({ x, y });\n    setIsHovering(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovering(false);\n  };\n\n  return (\n    <div\n      className=\"relative\"\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      {children}\n      \n      {isHovering && !isSpinning && (\n        <div \n          className=\"fixed z-[999999] pointer-events-none\" \n          style={{ \n            left: `${dialogPosition.x}px`,\n            top: `${dialogPosition.y}px`,\n            isolation: 'isolate' \n          }}\n        >\n          <div className=\"bg-slate-900 border-2 border-slate-600 rounded-lg p-3 shadow-2xl\">\n            <div className=\"w-64 h-64 rounded-lg overflow-hidden mb-2 bg-slate-800 flex items-center justify-center\">\n              {!imageError ? (\n                <img\n                  src={currentSrc}\n                  alt={flowerName}\n                  className=\"w-full h-full object-cover\"\n                  onError={() => {\n                    // For flowers, try fallback to 0.jpg before showing icon\n                    if (currentSrc.includes('Blumen') && !currentSrc.includes('0.jpg')) {\n                      setCurrentSrc('/Blumen/0.jpg');\n                    } else {\n                      setImageError(true);\n                    }\n                  }}\n                />\n              ) : (\n                <Flower className=\"w-24 h-24 text-pink-400\" />\n              )}\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-bold text-white text-lg mb-1\">{flowerName}</div>\n              <div className={`text-sm ${getRarityColor(rarity)}`}>\n                🌸 {getRarityDisplayName(rarity)} Blume\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","size_bytes":3967},"client/src/components/HarvestAnimation.tsx":{"content":"import React, { useEffect, useState } from 'react';\n\ninterface HarvestAnimationProps {\n  fieldIndex: number;\n  onComplete: () => void;\n}\n\nexport const HarvestAnimation: React.FC<HarvestAnimationProps> = ({ fieldIndex, onComplete }) => {\n  const [isAnimating, setIsAnimating] = useState(true);\n\n  useEffect(() => {\n    // Auto-complete animation after exactly 2 blinks (1.2 seconds)\n    const timer = setTimeout(() => {\n      setIsAnimating(false);\n      onComplete();\n    }, 1200);\n\n    return () => clearTimeout(timer);\n  }, [onComplete]);\n\n  if (!isAnimating) return null;\n\n  // Generate random particle positions\n  const particles = Array.from({ length: 8 }, (_, i) => ({\n    id: i,\n    delay: Math.random() * 0.3,\n    direction: Math.random() * 360,\n    distance: 40 + Math.random() * 20,\n  }));\n\n  return (\n    <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n      {/* Success message */}\n      <div className=\"absolute inset-0 flex items-center justify-center z-10\">\n        <div \n          className=\"bg-green-500 text-white px-3 py-1 rounded-lg font-bold text-sm shadow-lg\"\n          style={{ \n            animation: 'pulse 0.6s ease-in-out 2',\n            animationFillMode: 'forwards'\n          }}\n        >\n          +1 Blume!\n        </div>\n      </div>\n\n      {/* Particles */}\n      {particles.map((particle) => (\n        <div\n          key={particle.id}\n          className=\"absolute w-2 h-2 bg-orange-400 rounded-full animate-ping\"\n          style={{\n            left: '50%',\n            top: '50%',\n            transform: `translate(-50%, -50%)`,\n            animationDelay: `${particle.delay}s`,\n            animationDuration: '1s',\n            animationFillMode: 'forwards',\n            opacity: 1,\n          }}\n        />\n      ))}\n\n      {/* Sparkle effect */}\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <div className=\"w-16 h-16 border-4 border-yellow-400 rounded-full animate-ping opacity-40\" />\n      </div>\n    </div>\n  );\n};","size_bytes":2012},"client/src/components/BouquetCreationModal.tsx":{"content":"import React, { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RarityImage } from \"./RarityImage\";\nimport { Sparkles, Heart, X, Coins, Crown, Star } from \"lucide-react\";\nimport { getRarityColor, getRarityDisplayName, getRarityBadgeStyle, type RarityTier, getRarityTierIndex } from \"@shared/rarity\";\nimport type { UserFlower } from \"@shared/schema\";\n\ninterface BouquetCreationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  userFlowers: UserFlower[];\n  onCreateBouquet: (flowerId1: number, flowerId2: number, flowerId3: number, name?: string, generateName?: boolean) => void;\n  credits: number;\n}\n\nexport const BouquetCreationModal: React.FC<BouquetCreationModalProps> = ({\n  isOpen,\n  onClose,\n  userFlowers,\n  onCreateBouquet,\n  credits\n}) => {\n  const [selectedFlowers, setSelectedFlowers] = useState<(UserFlower | null)[]>([null, null, null]);\n  const [bouquetName, setBouquetName] = useState(\"\");\n  const [isGeneratingName, setIsGeneratingName] = useState(false);\n\n  const selectFlower = (flower: UserFlower) => {\n    // Check if flower is already selected\n    const isAlreadySelected = selectedFlowers.some(selected => \n      selected && selected.flowerId === flower.flowerId\n    );\n    \n    if (isAlreadySelected) {\n      return; // Don't allow selecting the same flower twice\n    }\n\n    // Find first empty slot\n    const firstEmptySlotIndex = selectedFlowers.findIndex(slot => slot === null);\n    \n    if (firstEmptySlotIndex === -1) {\n      return; // All slots are full\n    }\n\n    const newSelection = [...selectedFlowers];\n    newSelection[firstEmptySlotIndex] = flower;\n    setSelectedFlowers(newSelection);\n  };\n\n  const removeFlower = (slotIndex: number) => {\n    const newSelection = [...selectedFlowers];\n    newSelection[slotIndex] = null;\n    setSelectedFlowers(newSelection);\n  };\n\n  const calculateAverageRarity = (): RarityTier => {\n    const validFlowers = selectedFlowers.filter(f => f !== null) as UserFlower[];\n    if (validFlowers.length === 0) return \"common\";\n    \n    const totalRarityScore = validFlowers.reduce((sum, flower) => {\n      return sum + getRarityTierIndex(flower.flowerRarity as RarityTier);\n    }, 0);\n    \n    const avgScore = Math.round(totalRarityScore / validFlowers.length);\n    const rarities: RarityTier[] = [\"common\", \"uncommon\", \"rare\", \"super-rare\", \"epic\", \"legendary\", \"mythical\"];\n    return rarities[Math.min(avgScore, rarities.length - 1)];\n  };\n\n  const canCreate = selectedFlowers.every(f => f !== null) && credits >= 30;\n\n  const handleCreateBouquet = () => {\n    if (!canCreate) return;\n    \n    const flowers = selectedFlowers as UserFlower[];\n    if (bouquetName.trim()) {\n      onCreateBouquet(flowers[0].flowerId, flowers[1].flowerId, flowers[2].flowerId, bouquetName.trim());\n    } else {\n      onCreateBouquet(flowers[0].flowerId, flowers[1].flowerId, flowers[2].flowerId, undefined, true);\n    }\n    \n    // Reset form\n    setSelectedFlowers([null, null, null]);\n    setBouquetName(\"\");\n    onClose();\n  };\n\n  const generateName = async () => {\n    setIsGeneratingName(true);\n    try {\n      const response = await fetch('/api/bouquets/generate-name', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          rarity: calculateAverageRarity()\n        })\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setBouquetName(data.name);\n      }\n    } catch (error) {\n      console.error('Failed to generate name:', error);\n    } finally {\n      setIsGeneratingName(false);\n    }\n  };\n\n  // Group flowers by rarity for better organization\n  const flowersByRarity = userFlowers.reduce((acc, flower) => {\n    const rarity = flower.flowerRarity as RarityTier;\n    if (!acc[rarity]) acc[rarity] = [];\n    acc[rarity].push(flower);\n    return acc;\n  }, {} as Record<RarityTier, UserFlower[]>);\n\n  const availableFlowers = userFlowers.filter(flower => \n    !selectedFlowers.some(selected => selected && selected.flowerId === flower.flowerId)\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 border-2 border-pink-500/30 text-white max-w-5xl max-h-[95vh] overflow-y-auto shadow-2xl\">\n        <DialogHeader className=\"relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/10 to-purple-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n          <DialogTitle className=\"flex items-center text-white text-2xl font-bold relative z-10\">\n            <div className=\"relative\">\n              <Heart className=\"h-7 w-7 mr-3 text-pink-400 animate-pulse\" />\n              <div className=\"absolute inset-0 h-7 w-7 mr-3 text-pink-400 animate-ping opacity-20\"></div>\n            </div>\n            <span className=\"bg-gradient-to-r from-pink-300 to-purple-300 bg-clip-text text-transparent\">\n              Bouquet erstellen\n            </span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-8\">\n          {/* Cost and Credits - Enhanced */}\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-orange-500/20 to-yellow-500/20 rounded-xl blur-sm\"></div>\n            <div className=\"relative bg-gradient-to-r from-slate-800/80 to-slate-900/80 p-4 rounded-xl border border-orange-400/30\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className=\"relative\">\n                    <Coins className=\"h-6 w-6 mr-3 text-orange-400 animate-bounce\" />\n                    <div className=\"absolute inset-0 h-6 w-6 mr-3 text-orange-400 animate-ping opacity-30\"></div>\n                  </div>\n                  <span className=\"text-lg font-semibold text-orange-300\">Kosten: 30 Credits</span>\n                </div>\n                <div className=\"flex items-center space-x-6\">\n                  {/* Average rarity display */}\n                  {selectedFlowers.some(f => f !== null) && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Star className={`h-5 w-5 ${getRarityColor(calculateAverageRarity())} animate-pulse`} />\n                      <span className=\"text-sm font-semibold\">Durchschnitt:</span>\n                      <Badge className={`${getRarityBadgeStyle(calculateAverageRarity())} text-sm font-bold px-3 py-1`}>\n                        {getRarityDisplayName(calculateAverageRarity())}\n                      </Badge>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center\">\n                    <span className=\"text-lg mr-3\">Verfügbare Credits:</span>\n                    <Badge \n                      variant={credits >= 30 ? \"default\" : \"destructive\"} \n                      className={`text-lg px-4 py-2 font-bold ${\n                        credits >= 30 \n                          ? 'bg-gradient-to-r from-green-600 to-emerald-600 text-white' \n                          : 'bg-gradient-to-r from-red-600 to-rose-600 text-white animate-pulse'\n                      }`}\n                    >\n                      {credits}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Selected Flowers - Enhanced */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center\">\n              <Crown className=\"h-6 w-6 mr-3 text-yellow-400\" />\n              <h3 className=\"text-2xl font-bold bg-gradient-to-r from-pink-300 to-purple-300 bg-clip-text text-transparent\">\n                Ausgewählte Blumen (3 benötigt)\n              </h3>\n            </div>\n            <div className=\"grid grid-cols-3 gap-6\">\n              {selectedFlowers.map((flower, index) => (\n                <Card key={index} className=\"relative group transition-all duration-300 hover:scale-105\">\n                  <div className={`absolute inset-0 rounded-lg ${\n                    flower \n                      ? 'bg-gradient-to-br from-green-500/20 to-emerald-500/20 border-2 border-green-400/40'\n                      : 'bg-gradient-to-br from-slate-700/40 to-slate-800/40 border-2 border-slate-600/40 border-dashed'\n                  } transition-all duration-300`}></div>\n                  <CardContent className=\"relative p-6 text-center\">\n                    {flower ? (\n                      <div className=\"space-y-3\">\n                        <div className=\"relative\">\n                          <RarityImage \n                            src={flower.flowerImageUrl}\n                            alt={flower.flowerName || 'Flower'}\n                            rarity={flower.flowerRarity as RarityTier}\n                            size=\"large\"\n                            className=\"mx-auto transform transition-transform duration-300 hover:scale-110\"\n                          />\n                          <div className=\"absolute -top-2 -right-2 bg-green-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center animate-bounce\">\n                            ✓\n                          </div>\n                        </div>\n                        <div className=\"text-sm font-medium text-white truncate\">{flower.flowerName || 'Unbenannte Blume'}</div>\n                        <Badge className={`${getRarityBadgeStyle(flower.flowerRarity as RarityTier)} text-sm font-bold px-3 py-1`}>\n                          {getRarityDisplayName(flower.flowerRarity as RarityTier)}\n                        </Badge>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => removeFlower(index)}\n                          className=\"text-red-400 border-red-400 hover:bg-red-500/20 hover:border-red-300 transition-all duration-200\"\n                        >\n                          <X className=\"h-4 w-4 mr-1\" />\n                          Entfernen\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        <div className=\"relative\">\n                          <div className=\"w-20 h-20 mx-auto bg-gradient-to-br from-slate-600 to-slate-700 rounded-2xl flex items-center justify-center group-hover:bg-gradient-to-br group-hover:from-slate-500 group-hover:to-slate-600 transition-all duration-300\">\n                            <Heart className=\"h-10 w-10 text-slate-400 group-hover:text-pink-400 transition-colors duration-300\" />\n                          </div>\n                        </div>\n                        <div className=\"text-slate-400 font-medium\">Slot {index + 1}</div>\n                        <div className=\"text-xs text-slate-500\">Blume auswählen</div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n          </div>\n\n          {/* Name Input - Enhanced */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center\">\n              <Sparkles className=\"h-6 w-6 mr-3 text-purple-400\" />\n              <h3 className=\"text-xl font-bold\">Bouquet Name</h3>\n            </div>\n            <div className=\"flex gap-3\">\n              <div className=\"relative flex-1\">\n                <Input\n                  value={bouquetName}\n                  onChange={(e) => setBouquetName(e.target.value)}\n                  placeholder=\"Gib einen Namen ein oder lass ihn generieren...\"\n                  className=\"bg-slate-900/80 border-2 border-purple-500/30 text-white text-lg py-3 px-4 rounded-xl focus:border-purple-400 focus:ring-2 focus:ring-purple-400/20 transition-all duration-200\"\n                  maxLength={50}\n                />\n                {bouquetName && (\n                  <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                  </div>\n                )}\n              </div>\n              <Button\n                onClick={generateName}\n                disabled={isGeneratingName || selectedFlowers.every(f => f === null)}\n                className=\"bg-gradient-to-r from-purple-600 to-violet-600 hover:from-purple-700 hover:to-violet-700 px-6 py-3 text-lg font-semibold transition-all duration-200 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100\"\n              >\n                <Sparkles className={`h-5 w-5 mr-2 ${isGeneratingName ? 'animate-spin' : 'animate-pulse'}`} />\n                {isGeneratingName ? \"Generiere...\" : \"Generieren\"}\n              </Button>\n            </div>\n          </div>\n\n          {/* Available Flowers - Enhanced */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center\">\n              <div className=\"relative\">\n                <Heart className=\"h-6 w-6 mr-3 text-rose-400\" />\n                <div className=\"absolute inset-0 h-6 w-6 mr-3 text-rose-400 animate-ping opacity-30\"></div>\n              </div>\n              <h3 className=\"text-xl font-bold\">Verfügbare Blumen</h3>\n              {availableFlowers.length > 0 && (\n                <Badge className=\"ml-3 bg-blue-600 text-white px-3 py-1\">\n                  {availableFlowers.length} verfügbar\n                </Badge>\n              )}\n            </div>\n            {availableFlowers.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"w-16 h-16 mx-auto bg-slate-700 rounded-full flex items-center justify-center mb-4\">\n                  <Heart className=\"h-8 w-8 text-slate-500\" />\n                </div>\n                <div className=\"text-slate-400 text-lg\">Du hast keine verfügbaren Blumen für ein Bouquet</div>\n                <div className=\"text-slate-500 text-sm mt-2\">Sammle mehr Blumen im Garten!</div>\n              </div>\n            ) : (\n              <div className=\"bg-slate-900/50 rounded-xl p-4 border border-slate-700\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 max-h-80 overflow-y-auto\">\n                  {availableFlowers\n                    .sort((a, b) => getRarityTierIndex(b.flowerRarity as RarityTier) - getRarityTierIndex(a.flowerRarity as RarityTier))\n                    .map((flower) => (\n                    <Card \n                      key={flower.id}\n                      className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-600 cursor-pointer hover:border-pink-400/50 transition-all duration-300 hover:scale-105 hover:shadow-lg group\"\n                    >\n                      <CardContent className=\"p-4 text-center\">\n                        <div className=\"relative\">\n                          <RarityImage \n                            src={flower.flowerImageUrl}\n                            alt={flower.flowerName || 'Flower'}\n                            rarity={flower.flowerRarity as RarityTier}\n                            size=\"medium\"\n                            className=\"mx-auto mb-3 transition-transform duration-300 group-hover:scale-110\"\n                          />\n                          <Badge className={`${getRarityBadgeStyle(flower.flowerRarity as RarityTier)} text-xs font-bold px-2 py-1 absolute -top-2 -right-2`}>\n                            {flower.quantity}x\n                          </Badge>\n                        </div>\n                        <div className=\"text-xs font-medium text-white truncate mb-2\">{flower.flowerName || 'Unbenannte Blume'}</div>\n                        \n                        {/* Enhanced Selection button */}\n                        <div className=\"flex justify-center\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => selectFlower(flower)}\n                            disabled={selectedFlowers.every(slot => slot !== null) || selectedFlowers.some(selected => selected && selected.flowerId === flower.flowerId)}\n                            className={`px-4 py-2 h-9 font-bold transition-all duration-200 ${\n                              selectedFlowers.every(slot => slot !== null) || selectedFlowers.some(selected => selected && selected.flowerId === flower.flowerId)\n                                ? 'bg-slate-700 text-slate-500 cursor-not-allowed' \n                                : 'border-pink-400/50 text-pink-300 hover:bg-pink-500/20 hover:border-pink-400 hover:scale-110'\n                            }`}\n                          >\n                            {selectedFlowers.some(selected => selected && selected.flowerId === flower.flowerId)\n                              ? '✓ Ausgewählt'\n                              : selectedFlowers.every(slot => slot !== null)\n                              ? 'Alle Slots belegt'\n                              : '+ Hinzufügen'\n                            }\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Create Button - Enhanced */}\n          <div className=\"relative\">\n            <div className={`absolute inset-0 rounded-2xl blur-lg opacity-50 ${\n              canCreate \n                ? 'bg-gradient-to-r from-pink-500 to-rose-500 animate-pulse' \n                : 'bg-gradient-to-r from-slate-600 to-slate-700'\n            }`}></div>\n            <Button\n              onClick={handleCreateBouquet}\n              disabled={!canCreate}\n              className={`relative w-full text-xl font-bold py-6 rounded-2xl transition-all duration-300 ${\n                canCreate \n                  ? 'bg-gradient-to-r from-pink-600 to-rose-600 hover:from-pink-700 hover:to-rose-700 hover:scale-105 shadow-lg' \n                  : 'bg-gradient-to-r from-slate-600 to-slate-700 cursor-not-allowed'\n              }`}\n            >\n              <div className=\"flex items-center justify-center\">\n                <Heart className={`h-6 w-6 mr-3 ${canCreate ? 'animate-pulse' : ''}`} />\n                {!canCreate \n                  ? (credits < 30 ? \"❌ Nicht genügend Credits\" : \"⚠️ Wähle 3 Blumen aus\")\n                  : \"🌸 Bouquet erstellen (30 Credits)\"\n                }\n              </div>\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":18890},"server/bouquet.ts":{"content":"import OpenAI from \"openai\";\nimport { getRarityTierIndex, type RarityTier } from \"@shared/rarity\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\ninterface ButterflyData {\n  id: number;\n  name: string;\n  imageUrl: string;\n}\n\n// Generate a unique bouquet name using AI\n// Get existing bouquet names to avoid duplicates\nasync function getExistingBouquetNames(): Promise<string[]> {\n  try {\n    const { storage } = await import('./storage');\n    \n    // Get all bouquets from database to find existing names\n    const db = (storage as any).db;\n    if (db) {\n      const { bouquets } = await import('../shared/schema');\n      const result = await db.select({ name: bouquets.name }).from(bouquets);\n      return result.map((bouquet: any) => bouquet.name || '').filter((name: string) => name.length > 0);\n    }\n    \n    // Fallback to in-memory storage\n    const allBouquets = Array.from((storage as any).bouquets?.values() || []);\n    return allBouquets.map((bouquet: any) => bouquet.name || '').filter((name: string) => name.length > 0);\n  } catch (error) {\n    console.error('Failed to get existing names:', error);\n    return [];\n  }\n}\n\nexport async function generateBouquetName(rarity: RarityTier): Promise<string> {\n  try {\n    const rarityDescriptions = {\n      common: \"einfach und bescheiden\",\n      uncommon: \"charmant und ansprechend\", \n      rare: \"elegant und außergewöhnlich\",\n      \"super-rare\": \"prächtig und beeindruckend\",\n      epic: \"majestätisch und kraftvoll\",\n      legendary: \"mythisch und ehrfurchtgebietend\",\n      mythical: \"göttlich und transzendent\"\n    };\n\n    // Get existing names to tell the AI to avoid them\n    const existingNames = await getExistingBouquetNames();\n    const existingNamesText = existingNames.length > 0 \n      ? `\\n\\nVERMEIDE diese bereits existierenden Namen: ${existingNames.slice(-10).join(', ')}`\n      : '';\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: `Du bist ein Experte für Blumenbouquets und erstellst einzigartige, poetische Namen. \n          Erstelle kreative deutsche Bouquet-Namen, die ${rarityDescriptions[rarity]} klingen.\n          \n          Verwende Muster wie:\n          - [Adjektiv] + [Blumen-/Natur-Substantiv] (z.B. \"Strahlende Morgenröte\", \"Sanfte Brise\")\n          - [Poetisches Wort] + der/des + [Natur-Element] (z.B. \"Symphonie der Blüten\", \"Hauch des Frühlings\")\n          - [Emotional] + [Naturphänomen] (z.B. \"Verzauberte Dämmerung\", \"Träumende Wiese\")\n          - [Zeitbezug] + [Natur] (z.B. \"Mitternachtstraum\", \"Morgentau\", \"Abendsonne\")\n          - [Gefühl] + [Element] (z.B. \"Stille Schönheit\", \"Wilde Anmut\", \"Zarte Kraft\")\n          \n          Sei SEHR kreativ und verwende ungewöhnliche Wort-Kombinationen!\n          Antworte nur mit dem Namen, keine Erklärung. Maximal 3-4 Wörter.${existingNamesText}`\n        },\n        {\n          role: \"user\", \n          content: `Erstelle einen völlig EINZIGARTIGEN ${rarityDescriptions[rarity]} Bouquet-Namen der Seltenheitsstufe ${rarity}. Verwende seltene, poetische Wörter und ungewöhnliche Kombinationen!`\n        }\n      ],\n      max_tokens: 30,\n      temperature: 1.1\n    });\n\n    const generatedName = response.choices[0].message.content?.trim() || \"Unbenanntes Bouquet\";\n    \n    // Clean up the name (remove quotes, ensure proper formatting)\n    return generatedName.replace(/\"/g, '').replace(/\\.$/, '');\n    \n  } catch (error) {\n    console.error('Failed to generate bouquet name:', error);\n    \n    // Fallback names based on rarity\n    const fallbackNames = {\n      common: [\"Schlichte Schönheit\", \"Einfache Freude\", \"Bescheidene Blüte\"],\n      uncommon: [\"Sanfte Harmonie\", \"Liebliche Melodie\", \"Charmante Komposition\"],\n      rare: [\"Elegante Symphonie\", \"Seltene Pracht\", \"Edle Komposition\"],\n      \"super-rare\": [\"Prächtige Verzauberung\", \"Glanzvolle Erscheinung\", \"Strahlende Vollendung\"],\n      epic: [\"Majestätische Offenbarung\", \"Kraftvolle Schönheit\", \"Epische Blütenpracht\"],\n      legendary: [\"Legendäre Verzauberung\", \"Mythische Schönheit\", \"Ewige Vollendung\"],\n      mythical: [\"Göttliche Perfektion\", \"Transzendente Pracht\", \"Mystische Offenbarung\"]\n    };\n    \n    const options = fallbackNames[rarity];\n    return options[Math.floor(Math.random() * options.length)];\n  }\n}\n\n// Calculate average rarity from three flower rarities\nexport function calculateAverageRarity(rarity1: RarityTier, rarity2: RarityTier, rarity3: RarityTier): RarityTier {\n  const score1 = getRarityTierIndex(rarity1);\n  const score2 = getRarityTierIndex(rarity2);\n  const score3 = getRarityTierIndex(rarity3);\n  \n  const avgScore = Math.round((score1 + score2 + score3) / 3);\n  const rarities: RarityTier[] = [\"common\", \"uncommon\", \"rare\", \"super-rare\", \"epic\", \"legendary\", \"mythical\"];\n  return rarities[Math.min(avgScore, rarities.length - 1)];\n}\n\n\n// Generate all available butterfly IDs dynamically from Schmetterlinge folder\nasync function generateAvailableButterflyIds(): Promise<number[]> {\n  try {\n    const fs = await import('fs/promises');\n    const path = await import('path');\n    \n    const butterflyDir = path.join(process.cwd(), 'client/public/Schmetterlinge');\n    const files = await fs.readdir(butterflyDir);\n    \n    // Extract butterfly numbers from xxx.jpg files\n    const ids: number[] = [];\n    files.forEach(file => {\n      const match = file.match(/^(\\d+)\\.jpg$/i);\n      if (match) {\n        const id = parseInt(match[1]);\n        if (!isNaN(id)) {\n          ids.push(id);\n        }\n      }\n    });\n    \n    // Sort IDs numerically\n    const sortedIds = ids.sort((a, b) => a - b);\n    console.log(`🦋 Found ${sortedIds.length} butterfly images: 0-${Math.max(...sortedIds)}`);\n    \n    return sortedIds.length > 0 ? sortedIds : [0]; // Fallback to just 0 if none found\n  } catch (error) {\n    console.error('🦋 Error reading Schmetterlinge directory:', error);\n    // Fallback to original range if scanning fails\n    const ids: number[] = [];\n    for (let i = 0; i <= 960; i++) {\n      ids.push(i);\n    }\n    return ids;\n  }\n}\n\n// Initialize available butterfly IDs (will be set after async call)\nlet AVAILABLE_BUTTERFLY_IDS: number[] = [];\n// Will be initialized asynchronously\nlet TOTAL_BUTTERFLIES = 960; // Default to 960, will be updated\n\n// Get proper filename for butterfly ID\nfunction getButterflyImageFilename(id: number): string {\n  return `${id}.jpg`;\n}\n\n// Base rarity distribution for original 960 butterflies\nconst BASE_RARITY_DISTRIBUTION = {\n  common: Math.floor(960 * 0.443),      // ~425 butterflies (44.3%)\n  uncommon: Math.floor(960 * 0.30),     // ~288 butterflies (30%)\n  rare: Math.floor(960 * 0.122),        // ~117 butterflies (12.2%)\n  'super-rare': Math.floor(960 * 0.078), // ~75 butterflies (7.8%)\n  epic: Math.floor(960 * 0.047),        // ~45 butterflies (4.7%)\n  legendary: Math.floor(960 * 0.026),   // ~25 butterflies (2.6%)\n  mythical: Math.floor(960 * 0.013)     // ~12 butterflies (1.3%)\n};\n\n// Ensure we use all 960 original butterflies by adjusting the common tier\nconst totalAssigned = Object.values(BASE_RARITY_DISTRIBUTION).reduce((sum, count) => sum + count, 0);\nBASE_RARITY_DISTRIBUTION.common += (960 - totalAssigned);\n\n// Dynamic rarity distribution (will be calculated based on total butterflies)\nlet RARITY_DISTRIBUTION = { ...BASE_RARITY_DISTRIBUTION };\n\n// Create randomized rarity assignments for each butterfly ID\nexport const BUTTERFLY_RARITY_MAP = new Map<number, RarityTier>();\n\n// Store original 960 butterfly rarities to preserve them\nlet ORIGINAL_BUTTERFLY_RARITIES: Map<number, RarityTier> | null = null;\n\n// Fisher-Yates shuffle algorithm for true randomness\nfunction shuffleArray<T>(array: T[]): T[] {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}\n\n// Initialize butterfly system with dynamic detection\nasync function initializeButterflySystem(): Promise<void> {\n  try {\n    // Get all available butterfly IDs from folder\n    AVAILABLE_BUTTERFLY_IDS = await generateAvailableButterflyIds();\n    TOTAL_BUTTERFLIES = AVAILABLE_BUTTERFLY_IDS.filter(id => id > 0).length;\n    \n    // Preserve original rarities for existing butterflies (1-960)\n    if (!ORIGINAL_BUTTERFLY_RARITIES) {\n      ORIGINAL_BUTTERFLY_RARITIES = new Map();\n      \n      // Create original rarity assignments for butterflies 1-960\n      const originalIds = Array.from({length: 960}, (_, i) => i + 1);\n      const originalRarityAssignments: RarityTier[] = [];\n      \n      for (const [rarity, count] of Object.entries(BASE_RARITY_DISTRIBUTION) as [RarityTier, number][]) {\n        for (let i = 0; i < count; i++) {\n          originalRarityAssignments.push(rarity);\n        }\n      }\n      \n      const shuffledOriginalRarities = shuffleArray(originalRarityAssignments);\n      \n      // Assign preserved rarities to original butterfly IDs\n      for (let i = 0; i < originalIds.length && i < shuffledOriginalRarities.length; i++) {\n        ORIGINAL_BUTTERFLY_RARITIES.set(originalIds[i], shuffledOriginalRarities[i]);\n      }\n    }\n    \n    // Clear and rebuild butterfly rarity map\n    BUTTERFLY_RARITY_MAP.clear();\n    \n    // First, add all preserved original rarities\n    for (const [id, rarity] of ORIGINAL_BUTTERFLY_RARITIES) {\n      if (AVAILABLE_BUTTERFLY_IDS.includes(id)) {\n        BUTTERFLY_RARITY_MAP.set(id, rarity);\n      }\n    }\n    \n    // Find new butterflies (961+) that need rarity assignment\n    const newButterflyIds = AVAILABLE_BUTTERFLY_IDS.filter(id => id > 960 && id > 0);\n    \n    if (newButterflyIds.length > 0) {\n      // Assign rarities to new butterflies using same distribution percentages\n      const newRarityAssignments: RarityTier[] = [];\n      const percentages = {\n        common: 0.443,\n        uncommon: 0.30,\n        rare: 0.122,\n        'super-rare': 0.078,\n        epic: 0.047,\n        legendary: 0.026,\n        mythical: 0.013\n      };\n      \n      for (const [rarity, percentage] of Object.entries(percentages) as [RarityTier, number][]) {\n        const count = Math.floor(newButterflyIds.length * percentage);\n        for (let i = 0; i < count; i++) {\n          newRarityAssignments.push(rarity);\n        }\n      }\n      \n      // Fill remaining slots with common rarity\n      while (newRarityAssignments.length < newButterflyIds.length) {\n        newRarityAssignments.push('common');\n      }\n      \n      const shuffledNewRarities = shuffleArray(newRarityAssignments);\n      \n      // Assign rarities to new butterflies\n      for (let i = 0; i < newButterflyIds.length; i++) {\n        BUTTERFLY_RARITY_MAP.set(newButterflyIds[i], shuffledNewRarities[i]);\n      }\n      \n      console.log(`🦋 Added ${newButterflyIds.length} new butterflies: ${Math.min(...newButterflyIds)}-${Math.max(...newButterflyIds)}`);\n    }\n    \n    // Update total count for logging\n    const totalMapped = BUTTERFLY_RARITY_MAP.size;\n    console.log(`🦋 Initialized butterfly system with ${totalMapped} butterflies (${TOTAL_BUTTERFLIES} total files found)`);\n    \n  } catch (error) {\n    console.error('🦋 Error initializing butterfly system:', error);\n  }\n}\n\n// Export the initialization function for server startup\nexport { initializeButterflySystem };\n\n// Initialize the system immediately\ninitializeButterflySystem();\n\n// Generate random butterfly based on bouquet rarity using pre-assigned rarities\nexport async function generateRandomButterfly(rarity: RarityTier): Promise<ButterflyData> {\n  // Get all butterfly IDs that match the requested rarity\n  const matchingIds = Array.from(BUTTERFLY_RARITY_MAP.entries())\n    .filter(([id, assignedRarity]) => assignedRarity === rarity)\n    .map(([id]) => id);\n  \n  // If no butterflies of this rarity, fall back to any available ID\n  const availableIds = matchingIds.length > 0 ? matchingIds : AVAILABLE_BUTTERFLY_IDS.filter(id => id > 0);\n  const butterflyId = availableIds[Math.floor(Math.random() * availableIds.length)];\n  \n  // Generate consistent German name using butterflyId as seed\n  const { generateGermanButterflyName } = await import('../shared/rarity');\n  const name = generateGermanButterflyName(butterflyId);\n\n  return {\n    id: butterflyId,\n    name,\n    imageUrl: `/Schmetterlinge/${getButterflyImageFilename(butterflyId)}`\n  };\n}\n\n// Get butterfly spawn probability based on rarity\nexport function getButterflySpawnProbability(rarity: RarityTier): number {\n  const probabilities = {\n    common: 0.85,      // 85%\n    uncommon: 0.75,    // 75%\n    rare: 0.65,        // 65%\n    \"super-rare\": 0.50, // 50%\n    epic: 0.35,        // 35%\n    legendary: 0.20,   // 20%\n    mythical: 0.10     // 10%\n  };\n  \n  return probabilities[rarity];\n}\n\n// Get random spawn interval (1-5 minutes in milliseconds)\nexport function getRandomSpawnInterval(): number {\n  const minMinutes = 1;\n  const maxMinutes = 5;\n  const minutes = Math.random() * (maxMinutes - minMinutes) + minMinutes;\n  return minutes * 60 * 1000; // Convert to milliseconds\n}\n\n// Check if a bouquet should spawn a butterfly\nexport function shouldSpawnButterfly(rarity: RarityTier, attemptNumber?: number, totalAttempts?: number): boolean {\n  const probability = getButterflySpawnProbability(rarity);\n  \n  // Guarantee minimum spawns for all rarities to prevent frustrating \"zero spawn\" scenarios\n  if (attemptNumber && totalAttempts) {\n    // For all rarities: guarantee at least 1 spawn if this is the last attempt\n    if (attemptNumber === totalAttempts) {\n      return true; // Force spawn on final attempt if none spawned yet\n    }\n  }\n  \n  return Math.random() < probability;\n}\n\n// Debug function to show rarity distribution\nexport function getRarityDistribution(): Record<RarityTier, number> {\n  const distribution: Record<RarityTier, number> = {\n    common: 0,\n    uncommon: 0,\n    rare: 0,\n    'super-rare': 0,\n    epic: 0,\n    legendary: 0,\n    mythical: 0\n  };\n  \n  BUTTERFLY_RARITY_MAP.forEach((rarity: RarityTier, id: number) => {\n    distribution[rarity]++;\n  });\n  \n  return distribution;\n}\n\n// Get seed drop when bouquet wilts\nexport function getBouquetSeedDrop(rarity: RarityTier): { rarity: RarityTier; quantity: number } {\n  const quantity = Math.floor(Math.random() * 4) + 1; // 1-4 seeds\n  const rarities: RarityTier[] = [\"common\", \"uncommon\", \"rare\", \"super-rare\", \"epic\", \"legendary\", \"mythical\"];\n  const currentIndex = getRarityTierIndex(rarity);\n  \n  const roll = Math.random();\n  \n  // 15% chance for higher rarity (if possible)\n  if (roll < 0.15 && currentIndex < rarities.length - 1) {\n    const upgradedRarity = rarities[currentIndex + 1];\n    return { rarity: upgradedRarity, quantity };\n  }\n  \n  // 30% chance for lower rarity (if possible)  \n  if (roll >= 0.15 && roll < 0.45 && currentIndex > 0) {\n    const downgradedRarity = rarities[currentIndex - 1];\n    return { rarity: downgradedRarity, quantity };\n  }\n  \n  // 55% chance for same rarity (also fallback for edge cases)\n  return { rarity, quantity };\n}","size_bytes":15235},"client/src/components/BouquetSelectionModal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RarityImage } from \"./RarityImage\";\nimport { Heart, X, Clock, Sparkles } from \"lucide-react\";\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\nimport type { UserBouquet } from \"@shared/schema\";\n\ninterface BouquetSelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  fieldIndex: number;\n  userBouquets: UserBouquet[];\n  onPlaceBouquet: (bouquetId: number, fieldIndex: number) => void;\n}\n\nexport const BouquetSelectionModal: React.FC<BouquetSelectionModalProps> = ({\n  isOpen,\n  onClose,\n  fieldIndex,\n  userBouquets,\n  onPlaceBouquet\n}) => {\n  const [selectedBouquet, setSelectedBouquet] = useState<UserBouquet | null>(null);\n\n  const handlePlaceBouquet = () => {\n    if (!selectedBouquet) return;\n    \n    onPlaceBouquet(selectedBouquet.bouquetId, fieldIndex);\n    setSelectedBouquet(null);\n    onClose();\n  };\n\n  // Reset selection when modal closes\n  useEffect(() => {\n    if (!isOpen) {\n      setSelectedBouquet(null);\n    }\n  }, [isOpen]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-purple-500/30 text-white max-w-2xl max-h-[90vh] overflow-y-auto shadow-2xl\">\n        <DialogHeader className=\"relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n          <DialogTitle className=\"flex items-center text-white relative z-10\">\n            <div className=\"relative\">\n              <Heart className=\"h-8 w-8 mr-3 text-pink-400 animate-pulse\" />\n              <div className=\"absolute inset-0 h-8 w-8 mr-3 text-pink-400 animate-ping opacity-30\"></div>\n            </div>\n            <span className=\"text-3xl font-bold bg-gradient-to-r from-pink-300 to-purple-300 bg-clip-text text-transparent\">\n              Bouquet platzieren 💐 - Feld {fieldIndex + 1}\n            </span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Enhanced Info Box */}\n          <div className=\"bg-gradient-to-r from-yellow-800/30 to-orange-800/30 rounded-xl p-6 border-2 border-yellow-500/30 shadow-xl relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-500/5 to-orange-500/5 rounded-xl\"></div>\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"relative\">\n                  <Sparkles className=\"h-6 w-6 mr-3 text-yellow-400 animate-pulse\" />\n                  <div className=\"absolute inset-0 h-6 w-6 mr-3 text-yellow-400 animate-ping opacity-20\"></div>\n                </div>\n                <span className=\"text-xl font-bold bg-gradient-to-r from-yellow-300 to-orange-300 bg-clip-text text-transparent\">Bouquet-System ✨</span>\n              </div>\n              <ul className=\"text-slate-300 space-y-2 text-lg\">\n                <li className=\"flex items-center\">⏰ Bouquet wird 21 Minuten lang Schmetterlinge anlocken</li>\n                <li className=\"flex items-center\">🦋 Schmetterlinge spawnen alle 1-5 Minuten</li>\n                <li className=\"flex items-center\">🥀 Nach 21 Minuten verwelkt das Bouquet und gibt Samen</li>\n                <li className=\"flex items-center\">📍 Ein Bouquet pro Feld möglich</li>\n              </ul>\n            </div>\n          </div>\n\n          {/* Enhanced Bouquet Selection */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-2xl font-bold bg-gradient-to-r from-purple-300 to-pink-300 bg-clip-text text-transparent flex items-center\">\n              💐 Wähle ein Bouquet ({userBouquets.filter(b => b.quantity > 0).length} verfügbar)\n            </h3>\n            \n            {userBouquets.filter(b => b.quantity > 0).length === 0 ? (\n              <div className=\"text-center py-12 relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/5 to-pink-500/5 rounded-lg\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"relative mb-6\">\n                    <Heart className=\"h-16 w-16 text-purple-400 mx-auto animate-bounce\" />\n                    <div className=\"absolute inset-0 h-16 w-16 mx-auto text-purple-400 animate-ping opacity-20\"></div>\n                  </div>\n                  <p className=\"text-slate-300 text-xl mb-3\">💐 Keine Bouquets verfügbar</p>\n                  <p className=\"text-slate-400 text-lg\">Erstelle zuerst Bouquets im Bouquets-Tab</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 max-h-60 overflow-y-auto\">\n                {userBouquets.filter(b => b.quantity > 0).map((bouquet) => (\n                  <Card \n                    key={bouquet.id} \n                    className={`cursor-pointer transition-all duration-300 hover:scale-105 shadow-lg ${\n                      selectedBouquet?.id === bouquet.id \n                        ? 'bg-gradient-to-br from-purple-800/60 to-pink-800/60 border-2 border-purple-400 ring-2 ring-purple-400 shadow-purple-500/50' \n                        : 'bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-slate-600 hover:border-purple-400/50'\n                    }`}\n                    onClick={() => setSelectedBouquet(bouquet)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <RarityImage \n                          src=\"/Blumen/Bouquet.jpg\"\n                          alt=\"Bouquet\"\n                          rarity={(bouquet.bouquetRarity || \"common\") as RarityTier}\n                          size=\"medium\"\n                          className=\"w-12 h-12\"\n                        />\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-bold text-white text-sm\">{bouquet.bouquetName || `Bouquet #${bouquet.id}`}</h4>\n                          <div className=\"flex items-center justify-between gap-2\">\n                            <Badge className=\"text-xs text-rose-400 bg-rose-400/20\">\n                              Bouquet\n                            </Badge>\n                            <span className=\"text-sm font-bold text-green-400\">x{bouquet.quantity}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Enhanced Action Buttons */}\n          <div className=\"flex items-center justify-between pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"text-slate-300 border-2 border-slate-600 hover:bg-slate-700 hover:border-slate-500 text-lg px-6 py-3 transition-all duration-300\"\n            >\n              ❌ Abbrechen\n            </Button>\n            <Button\n              onClick={handlePlaceBouquet}\n              disabled={!selectedBouquet}\n              className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 disabled:opacity-50 disabled:cursor-not-allowed text-lg px-6 py-3 font-bold transition-all duration-300 hover:scale-110 shadow-lg\"\n            >\n              <div className=\"relative\">\n                <Clock className=\"h-5 w-5 mr-2 animate-pulse\" />\n              </div>\n              💐 Bouquet platzieren\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":7903},"server/butterflySpawner.ts":{"content":"import { postgresStorage as storage } from './postgresStorage';\nimport type { RarityTier } from '@shared/rarity';\n\n/**\n * Individual Butterfly Spawning System\n * - Checks bouquets every 60 seconds for individual spawn times\n * - Each bouquet has its own nextSpawnAt timestamp\n * - Spawns butterflies based on bouquet rarity and individual timing\n * - Automatically manages expired bouquets\n */\nexport class ButterflySpawner {\n  private intervalId: NodeJS.Timeout | null = null;\n  private isRunning = false;\n\n  start() {\n    if (this.isRunning) {\n      console.log('🦋 Butterfly spawner already running');\n      return;\n    }\n\n    this.isRunning = true;\n    console.log('🦋 Starting butterfly spawning system...');\n    \n    // Run immediately once, then start interval\n    this.checkForButterflySpawns();\n    \n    // Individual timing checks every 60 seconds\n    const CHECK_INTERVAL = 60 * 1000; // 1 minute\n    \n    const scheduleNext = () => {\n      if (!this.isRunning) return;\n      \n      console.log(`🦋 Next butterfly check in 1:00 minute`);\n      \n      this.intervalId = setTimeout(() => {\n        this.checkForButterflySpawns();\n        scheduleNext(); // Schedule the next check\n      }, CHECK_INTERVAL);\n    };\n\n    scheduleNext();\n  }\n\n  stop() {\n    if (this.intervalId) {\n      clearTimeout(this.intervalId);\n      this.intervalId = null;\n    }\n    this.isRunning = false;\n    console.log('🦋 Butterfly spawner stopped');\n  }\n\n  private async checkForButterflySpawns() {\n    try {\n      console.log('🦋 Checking individual bouquet spawn times...');\n      \n      const currentTime = new Date();\n      let totalSpawns = 0;\n      let totalChecked = 0;\n      \n      // Get all users with active bouquets  \n      const allUsers = await storage.getAllUsersWithStatus();\n      \n      for (const user of allUsers) {\n        try {\n          const placedBouquets = await storage.getPlacedBouquets(user.id);\n          const activeBouquets = placedBouquets.filter(pb => new Date(pb.expiresAt) > currentTime);\n          \n          if (activeBouquets.length === 0) {\n            continue; // Skip this user, no active bouquets\n          }\n          \n          for (const placedBouquet of activeBouquets) {\n            totalChecked++;\n            \n            // Check if this bouquet is ready to spawn (individual timing)\n            const nextSpawnTime = new Date((placedBouquet as any).nextSpawnAt);\n            if (currentTime < nextSpawnTime) {\n              continue; // Not time yet for this bouquet\n            }\n            \n            // Check how many butterflies already spawned for this bouquet\n            const existingButterflies = await storage.getFieldButterflies(user.id);\n            const butterflyCount = existingButterflies.filter(fb => fb.bouquetId === placedBouquet.bouquetId).length;\n            \n            // 4-Slot System: Each bouquet has exactly 4 spawn opportunities (one per slot)\n            const currentSlot = (placedBouquet as any).currentSpawnSlot || 1;\n            \n            if (currentSlot > 4) {\n              continue; // This bouquet has completed all 4 spawn slots\n            }\n            \n            // Use the rarity stored in the placed bouquet\n            const rarity = (placedBouquet as any).bouquetRarity as RarityTier || 'common';\n            \n            const result = await storage.spawnButterflyOnFieldWithSlot(\n              user.id, \n              placedBouquet.bouquetId, \n              rarity,\n              currentSlot,\n              4, // total attempts\n              butterflyCount // already spawned count\n            );\n            \n            if (result.success) {\n              totalSpawns++;\n              console.log(`✨ User ${user.id}: Butterfly spawned on field ${result.fieldIndex}: ${result.fieldButterfly?.butterflyName} from ${rarity} bouquet #${placedBouquet.bouquetId}! (Slot ${currentSlot}/4)`);\n              \n              // Advance to next spawn slot\n              await storage.updateBouquetNextSpawnTime(user.id, placedBouquet.fieldIndex, new Date());\n            } else {\n              // Spawn failed due to probability check - still advance to next slot\n              console.log(`🎲 User ${user.id}: Spawn probability check failed for ${rarity} bouquet #${placedBouquet.bouquetId} (Slot ${currentSlot}/4)`);\n              await storage.updateBouquetNextSpawnTime(user.id, placedBouquet.fieldIndex, new Date());\n            }\n          }\n        } catch (error) {\n          console.error(`🦋 Error checking bouquets for user ${user.id}:`, error);\n        }\n      }\n      \n      if (totalSpawns > 0) {\n        console.log(`🦋 Individual spawn cycle complete: ${totalSpawns} butterflies spawned from ${totalChecked} bouquets checked`);\n      } else {\n        console.log(`🦋 Individual spawn cycle complete: No butterflies spawned (${totalChecked} bouquets checked)`);\n      }\n      \n    } catch (error) {\n      console.error('🦋 Error in individual butterfly spawn check:', error);\n    }\n  }\n  \n  // 4-Slot System: No longer needed as slots are managed by storage\n\n  // Force a spawn check (for testing or manual triggers)\n  async forceSpawnCheck() {\n    console.log('🦋 Forcing individual butterfly spawn check...');\n    await this.checkForButterflySpawns();\n  }\n\n  // 4-Slot System: Removed max spawns - now determined by slot completion\n\n  getStatus() {\n    return {\n      isRunning: this.isRunning,\n      hasActiveTimer: this.intervalId !== null\n    };\n  }\n}\n\n// Export singleton instance\nexport const butterflySpawner = new ButterflySpawner();","size_bytes":5567},"client/src/components/BouquetRecipeDisplay.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { RarityImage } from './RarityImage';\nimport { FlowerHoverPreview } from './FlowerHoverPreview';\nimport { Badge } from '@/components/ui/badge';\nimport { getRarityColor, getRarityDisplayName } from '@shared/rarity';\nimport type { BouquetRecipe, UserFlower } from '@shared/schema';\nimport type { RarityTier } from '@shared/rarity';\nimport { CheckCircle, XCircle, Package } from 'lucide-react';\n\ninterface Flower {\n  id: number;\n  name: string;\n  rarity: string;\n  imageUrl: string;\n}\n\ninterface BouquetRecipeDisplayProps {\n  bouquetId: number;\n  recipe?: BouquetRecipe;\n  onRecreate?: (flowerId1: number, flowerId2: number, flowerId3: number) => void;\n  userFlowers?: UserFlower[];\n}\n\nexport const BouquetRecipeDisplay: React.FC<BouquetRecipeDisplayProps> = ({\n  bouquetId,\n  recipe,\n  onRecreate,\n  userFlowers = []\n}) => {\n  const [ingredients, setIngredients] = useState<Flower[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  // Check if user has enough flowers to recreate bouquet\n  const canRecreate = () => {\n    if (!recipe || !userFlowers.length) return false;\n    \n    const requiredFlowerIds = [recipe.flowerId1, recipe.flowerId2, recipe.flowerId3];\n    \n    // Count required flowers\n    const flowerCounts: Record<number, number> = {};\n    requiredFlowerIds.forEach(id => {\n      flowerCounts[id] = (flowerCounts[id] || 0) + 1;\n    });\n    \n    // Check if user has enough of each required flower\n    for (const [flowerId, requiredCount] of Object.entries(flowerCounts)) {\n      const userFlower = userFlowers.find(f => f.flowerId === parseInt(flowerId));\n      const availableCount = userFlower?.quantity || 0;\n      \n      if (availableCount < requiredCount) {\n        return false;\n      }\n    }\n    \n    return true;\n  };\n\n  useEffect(() => {\n    if (recipe) {\n      fetchIngredients();\n    }\n  }, [recipe]);\n\n  const fetchIngredients = async () => {\n    if (!recipe) return;\n    \n    setLoading(true);\n    try {\n      const flowerIds = [recipe.flowerId1, recipe.flowerId2, recipe.flowerId3];\n      const ingredientsData = [];\n      \n      for (const flowerId of flowerIds) {\n        const response = await fetch(`/api/flower/${flowerId}`);\n        if (response.ok) {\n          const flower = await response.json();\n          ingredientsData.push(flower);\n        }\n      }\n      \n      setIngredients(ingredientsData);\n    } catch (error) {\n      console.error('Failed to fetch ingredients:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!recipe) {\n    return (\n      <div className=\"p-3 bg-slate-800 border-t border-slate-700\">\n        <p className=\"text-slate-400 text-sm text-center\">Rezept nicht verfügbar</p>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"p-3 bg-slate-800 border-t border-slate-700\">\n        <p className=\"text-slate-400 text-sm text-center\">Lade Rezept...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"border-t border-slate-600 bg-slate-800/80\">\n      <div className=\"p-3\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h4 className=\"text-white text-sm font-medium\">Zutaten</h4>\n          {onRecreate && (\n            <button\n              onClick={() => onRecreate(recipe.flowerId1, recipe.flowerId2, recipe.flowerId3)}\n              disabled={!canRecreate()}\n              className={`px-2 py-1 text-xs rounded ${\n                canRecreate() \n                  ? 'bg-green-600 hover:bg-green-700 text-white' \n                  : 'bg-slate-600 text-slate-400 cursor-not-allowed'\n              }`}\n              title={!canRecreate() ? 'Nicht genügend Blumen im Inventar' : 'Bouquet mit deinen Blumen neustecken'}\n            >\n              Nachstellen\n            </button>\n          )}\n        </div>\n        \n        <div className=\"space-y-3\">\n          {ingredients.map((flower, index) => (\n            <div key={index} className=\"flex items-center gap-3 p-2 bg-slate-900/50 rounded-lg border border-slate-600/30\">\n              <FlowerHoverPreview\n                flowerImageUrl={flower.imageUrl}\n                flowerName={flower.name}\n                rarity={flower.rarity as RarityTier}\n              >\n                <RarityImage \n                  src={flower.imageUrl}\n                  alt={flower.name}\n                  rarity={flower.rarity as RarityTier}\n                  size=\"medium\"\n                  className=\"w-16 h-16 flex-shrink-0 cursor-pointer\"\n                />\n              </FlowerHoverPreview>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"text-sm font-medium text-white\">{flower.name}</div>\n                <div className=\"flex items-center gap-2\">\n                  <div className={`text-xs font-medium ${getRarityColor(flower.rarity as RarityTier)}`}>\n                    {getRarityDisplayName(flower.rarity as RarityTier)}\n                  </div>\n                  {/* Verfügbarkeits-Anzeige */}\n                  {(() => {\n                    const userFlower = userFlowers.find(f => f.flowerId === flower.id);\n                    const quantity = userFlower?.quantity || 0;\n                    \n                    if (quantity > 0) {\n                      return (\n                        <Badge className=\"bg-green-500/20 text-green-400 border border-green-400/40 px-2 py-0.5 text-xs\">\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\n                          {quantity}x verfügbar\n                        </Badge>\n                      );\n                    } else {\n                      return (\n                        <Badge className=\"bg-red-500/20 text-red-400 border border-red-400/40 px-2 py-0.5 text-xs\">\n                          <XCircle className=\"h-3 w-3 mr-1\" />\n                          Nicht verfügbar\n                        </Badge>\n                      );\n                    }\n                  })()}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":6058},"client/src/components/ButterflyHoverPreview.tsx":{"content":"import React, { useState, useEffect, useRef } from \"react\";\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\nimport { Sparkles, Clock } from \"lucide-react\";\n\ninterface ButterflyHoverPreviewProps {\n  butterflyImageUrl: string;\n  butterflyName: string;\n  rarity: RarityTier | \"vip\";\n  children: React.ReactNode;\n  // Optional sell countdown data\n  placedAt?: string;\n  canSell?: boolean;\n  timeRemainingMs?: number;\n  isSpinning?: boolean;\n}\n\nexport const ButterflyHoverPreview: React.FC<ButterflyHoverPreviewProps> = ({\n  butterflyImageUrl,\n  butterflyName,\n  rarity,\n  children,\n  placedAt,\n  canSell,\n  timeRemainingMs,\n  isSpinning = false\n}) => {\n  const [isHovering, setIsHovering] = useState(false);\n  const [imageError, setImageError] = useState(false);\n  const [currentSrc, setCurrentSrc] = useState(butterflyImageUrl);\n  const [dialogPosition, setDialogPosition] = useState({ x: 0, y: 0 });\n\n  // Reset state when butterflyImageUrl prop changes\n  useEffect(() => {\n    setCurrentSrc(butterflyImageUrl);\n    setImageError(false);\n  }, [butterflyImageUrl]);\n\n  const handleMouseEnter = (e: React.MouseEvent) => {\n    if (isSpinning) return; // No hover during spin animation\n    \n    const rect = e.currentTarget.getBoundingClientRect();\n    const dialogWidth = 280; // Dialog width + padding\n    const dialogHeight = 320; // Dialog height + padding\n    const margin = 8; // Margin from element\n    \n    // Get viewport dimensions\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n    \n    // Calculate horizontal position\n    let x = rect.right + margin; // Default: right of element\n    if (x + dialogWidth > viewportWidth) {\n      // Not enough space on right, position on left\n      x = rect.left - dialogWidth - margin;\n      if (x < 0) {\n        // Not enough space on left either, center it\n        x = Math.max(margin, (viewportWidth - dialogWidth) / 2);\n      }\n    }\n    \n    // Calculate vertical position\n    let y = rect.top; // Default: aligned with top of element\n    if (y + dialogHeight > viewportHeight) {\n      // Not enough space below, position above\n      y = rect.bottom - dialogHeight;\n      if (y < 0) {\n        // Not enough space above either, center vertically\n        y = Math.max(margin, (viewportHeight - dialogHeight) / 2);\n      }\n    }\n    \n    setDialogPosition({ x, y });\n    setIsHovering(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovering(false);\n  };\n\n  const formatTimeRemaining = (ms: number): string => {\n    // Round to nearest minute to prevent flickering between values\n    const roundedMs = Math.ceil(ms / (1000 * 60)) * (1000 * 60);\n    const hours = Math.floor(roundedMs / (1000 * 60 * 60));\n    const minutes = Math.floor((roundedMs % (1000 * 60 * 60)) / (1000 * 60));\n    return `${hours}h ${minutes}m`;\n  };\n\n  return (\n    <div\n      className=\"relative\"\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      {children}\n      \n      {isHovering && !isSpinning && (\n        <div \n          className=\"fixed z-[999999] pointer-events-none\" \n          style={{ \n            left: `${dialogPosition.x}px`,\n            top: `${dialogPosition.y}px`,\n            isolation: 'isolate' \n          }}\n        >\n          <div className=\"bg-slate-900 border-2 border-slate-600 rounded-lg p-3 shadow-2xl\">\n            <div className=\"w-64 h-64 rounded-lg overflow-hidden mb-2 bg-slate-800 flex items-center justify-center\">\n              {!imageError ? (\n                <img\n                  src={currentSrc}\n                  alt={butterflyName}\n                  className=\"w-full h-full object-cover\"\n                  onError={() => {\n                    // For butterflies, try fallback to 0.jpg before showing icon\n                    if (currentSrc.includes('Schmetterlinge') && !currentSrc.includes('0.jpg')) {\n                      setCurrentSrc('/Schmetterlinge/0.jpg');\n                    } else {\n                      setImageError(true);\n                    }\n                  }}\n                />\n              ) : (\n                <Sparkles className=\"w-24 h-24 text-purple-400\" />\n              )}\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-bold text-white text-lg mb-1\">{butterflyName}</div>\n              <div className={`text-sm ${rarity === \"vip\" ? \"text-pink-200 bg-gradient-to-r from-pink-500/30 to-purple-500/30 rounded-full px-2 py-1\" : getRarityColor(rarity as RarityTier)}`}>\n                {rarity === \"vip\" ? \"✨ VIP Premium 👑\" : getRarityDisplayName(rarity as RarityTier)}\n              </div>\n              \n              {/* Sell Progress Bar */}\n              {placedAt && !canSell && timeRemainingMs !== undefined && (\n                <div className=\"mt-3 space-y-2\">\n                  <div className=\"flex items-center justify-center text-orange-300 text-sm\">\n                    <Clock className=\"h-4 w-4 mr-1\" />\n                    <span>{formatTimeRemaining(timeRemainingMs)}</span>\n                  </div>\n                  \n                  <div className=\"w-full bg-slate-700 rounded-full h-2 overflow-hidden\">\n                    <div \n                      className=\"h-full bg-gradient-to-r from-orange-500 to-green-500 rounded-full transition-all duration-1000\"\n                      style={{\n                        width: `${Math.max(0, Math.min(100, ((72 * 60 * 60 * 1000 - timeRemainingMs) / (72 * 60 * 60 * 1000)) * 100))}%`\n                      }}\n                    ></div>\n                  </div>\n                  \n                  <div className=\"text-xs text-slate-400\">\n                    Verkaufbar in {formatTimeRemaining(timeRemainingMs)}\n                  </div>\n                </div>\n              )}\n              \n              {placedAt && canSell && (\n                <div className=\"mt-3\">\n                  <div className=\"flex items-center justify-center text-green-400 text-sm font-semibold\">\n                    <Clock className=\"h-4 w-4 mr-1\" />\n                    <span>Verkaufsbereit!</span>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","size_bytes":6259},"client/src/components/UserListModal.tsx":{"content":"import React, { useState, useEffect, useMemo } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Users, X, Eye, Bug, Search, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { Top100Modal } from \"@/components/Top100Modal\";\n\ninterface UserListData {\n  id: number;\n  username: string;\n  isOnline: boolean;\n  exhibitionButterflies: number;\n  lastSeen: string;\n  totalLikes: number;\n}\n\ninterface UserListModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onVisitExhibition: (userId: number, username: string) => void;\n}\n\ntype SortOption = 'username' | 'butterflies' | 'likes' | 'online';\n\nexport const UserListModal: React.FC<UserListModalProps> = ({\n  isOpen,\n  onClose,\n  onVisitExhibition\n}) => {\n  const [users, setUsers] = useState<UserListData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortBy, setSortBy] = useState<SortOption>('butterflies');\n  const [isTop100Open, setIsTop100Open] = useState(false);\n  const { user: currentUser } = useAuth();\n  \n  const itemsPerPage = 12;\n\n  useEffect(() => {\n    if (isOpen) {\n      fetchUsers();\n    }\n  }, [isOpen]);\n\n  const fetchUsers = async () => {\n    if (!currentUser) return;\n    \n    setLoading(true);\n    try {\n      const response = await fetch('/api/users/list', {\n        headers: {\n          'X-User-Id': currentUser.id.toString()\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUsers(data.users || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch users:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getOnlineStatus = (user: UserListData) => {\n    return user.isOnline ? 'Online' : `Zuletzt: ${user.lastSeen}`;\n  };\n\n  const getOnlineColor = (user: UserListData) => {\n    return user.isOnline ? 'text-green-400' : 'text-slate-400';\n  };\n\n  // Filter and sort users\n  const filteredAndSortedUsers = useMemo(() => {\n    let filtered = users.filter(user => \n      user.username.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    // Sort users\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'username':\n          return a.username.localeCompare(b.username);\n        case 'butterflies':\n          return b.exhibitionButterflies - a.exhibitionButterflies;\n        case 'likes':\n          return (b.totalLikes || 0) - (a.totalLikes || 0);\n        case 'online':\n          if (a.isOnline && !b.isOnline) return -1;\n          if (!a.isOnline && b.isOnline) return 1;\n          return b.exhibitionButterflies - a.exhibitionButterflies;\n        default:\n          return 0;\n      }\n    });\n\n    return filtered;\n  }, [users, searchQuery, sortBy]);\n\n  // Pagination\n  const totalPages = Math.ceil(filteredAndSortedUsers.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedUsers = filteredAndSortedUsers.slice(startIndex, startIndex + itemsPerPage);\n\n  // Reset page when search changes\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchQuery, sortBy]);\n\n  const getSortLabel = (option: SortOption) => {\n    switch (option) {\n      case 'username': return '📝 Name A-Z';\n      case 'butterflies': return '🦋 Schmetterlinge';\n      case 'likes': return '❤️ Likes';\n      case 'online': return '🟢 Online Status';\n      default: return '';\n    }\n  };\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-cyan-500/30 text-white w-[95vw] max-w-sm md:max-w-3xl max-h-[90vh] overflow-y-auto shadow-2xl\">\n        <DialogHeader className=\"relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n          <DialogTitle className=\"flex items-center text-white relative z-10\">\n            <div className=\"relative\">\n              <Users className=\"h-8 w-8 mr-3 text-cyan-400 animate-pulse\" />\n              <div className=\"absolute inset-0 h-8 w-8 mr-3 text-cyan-400 animate-ping opacity-30\"></div>\n            </div>\n            <span className=\"text-3xl font-bold bg-gradient-to-r from-cyan-300 to-blue-300 bg-clip-text text-transparent\">\n              🌐 Alle Mariposa-Spieler\n            </span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* TOP 100 SPIELER Button */}\n          <div className=\"flex justify-center\">\n            <button \n              onClick={() => setIsTop100Open(true)}\n              className=\"relative group\"\n            >\n              {/* Main button with golden gradient */}\n              <div className=\"bg-gradient-to-r from-yellow-400 via-yellow-500 to-orange-400 text-black font-bold text-2xl px-12 py-6 rounded-xl border-4 border-yellow-300 shadow-2xl transform transition-all duration-300 group-hover:scale-105 group-hover:shadow-yellow-500/50\">\n                {/* Animated glow effect */}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-400 via-yellow-500 to-orange-400 rounded-xl blur-lg opacity-75 animate-pulse\"></div>\n                {/* Button text with relative positioning */}\n                <div className=\"relative z-10 flex items-center\">\n                  <span className=\"mr-2\">🏆</span>\n                  TOP 100 SPIELER\n                  <span className=\"ml-2\">🏆</span>\n                </div>\n              </div>\n              {/* Additional outer glow */}\n              <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-300 to-orange-300 rounded-xl blur-xl opacity-30 animate-ping\"></div>\n            </button>\n          </div>\n\n          {/* Search and Controls */}\n          <div className=\"space-y-4\">\n            <div className=\"flex flex-col sm:flex-row gap-4 items-center\">\n              {/* Search Input */}\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4\" />\n                <Input\n                  placeholder=\"🔍 Spieler suchen...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 bg-slate-700 border-slate-600 text-white placeholder-slate-400 focus:border-cyan-400\"\n                />\n              </div>\n              \n              {/* Sort Dropdown */}\n              <Select value={sortBy} onValueChange={(value: SortOption) => setSortBy(value)}>\n                <SelectTrigger className=\"w-48 bg-slate-700 border-slate-600 text-white\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-600\">\n                  <SelectItem value=\"butterflies\" className=\"text-white hover:bg-slate-700\">🦋 Schmetterlinge</SelectItem>\n                  <SelectItem value=\"likes\" className=\"text-white hover:bg-slate-700\">❤️ Likes</SelectItem>\n                  <SelectItem value=\"online\" className=\"text-white hover:bg-slate-700\">🟢 Online Status</SelectItem>\n                  <SelectItem value=\"username\" className=\"text-white hover:bg-slate-700\">📝 Name A-Z</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Results Summary */}\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-2xl font-bold bg-gradient-to-r from-cyan-300 to-blue-300 bg-clip-text text-transparent flex items-center\">\n                👥 Spieler-Liste ({filteredAndSortedUsers.length} gefunden)\n              </h3>\n              \n              {totalPages > 1 && (\n                <div className=\"text-sm text-slate-400\">\n                  Seite {currentPage} von {totalPages}\n                </div>\n              )}\n            </div>\n            \n            {loading ? (\n              <div className=\"text-center py-12 relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/5 to-blue-500/5 rounded-lg\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"relative mb-6\">\n                    <Users className=\"h-16 w-16 text-cyan-400 mx-auto animate-spin\" />\n                    <div className=\"absolute inset-0 h-16 w-16 mx-auto text-cyan-400 animate-ping opacity-20\"></div>\n                  </div>\n                  <p className=\"text-slate-300 text-xl\">👥 Lade Spieler-Daten...</p>\n                </div>\n              </div>\n            ) : users.length === 0 ? (\n              <div className=\"text-center py-12 relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/5 to-blue-500/5 rounded-lg\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"relative mb-6\">\n                    <Users className=\"h-16 w-16 text-cyan-400 mx-auto animate-bounce\" />\n                    <div className=\"absolute inset-0 h-16 w-16 mx-auto text-cyan-400 animate-ping opacity-20\"></div>\n                  </div>\n                  <p className=\"text-slate-300 text-xl mb-3\">👥 Keine Spieler gefunden</p>\n                  <p className=\"text-slate-400 text-lg\">Die Daten konnten nicht geladen werden</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 max-h-96 overflow-y-auto\">\n                {users.map((user) => (\n                  <Card \n                    key={user.id} \n                    className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-slate-600 hover:border-cyan-400/50 transition-all duration-300 hover:scale-105 shadow-lg cursor-pointer\"\n                    onClick={() => {\n                      onVisitExhibition(user.id, user.username);\n                      onClose();\n                    }}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center mb-2\">\n                            <Users className=\"h-5 w-5 mr-2 text-cyan-400\" />\n                            <h4 className=\"font-bold text-white text-lg\">{user.username}</h4>\n                          </div>\n                          \n                          <div className=\"space-y-1\">\n                            <div className=\"flex items-center\">\n                              <div className={`w-2 h-2 rounded-full mr-2 ${user.isOnline ? 'bg-green-400' : 'bg-slate-400'}`}></div>\n                              <span className={`text-sm ${getOnlineColor(user)}`}>\n                                {getOnlineStatus(user)}\n                              </span>\n                            </div>\n                            \n                            <div className=\"flex items-center\">\n                              <Bug className=\"h-4 w-4 mr-2 text-blue-400\" />\n                              <span className=\"text-sm text-slate-300\">\n                                {user.exhibitionButterflies} 🦋 in Ausstellung\n                              </span>\n                            </div>\n                            \n                            <div className=\"flex items-center\">\n                              <span className=\"text-sm text-pink-400\">\n                                ❤️ {user.totalLikes || 0} Likes\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"ml-4\">\n                          <Badge className={`text-xs ${user.isOnline ? 'bg-green-500/20 text-green-400' : 'bg-slate-500/20 text-slate-400'}`}>\n                            {user.isOnline ? '🟢 Online' : '🔴 Offline'}\n                          </Badge>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n            \n            {/* Pagination Controls */}\n            {totalPages > 1 && (\n              <div className=\"flex items-center justify-center gap-2 mt-6\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                  disabled={currentPage === 1}\n                  className=\"bg-slate-700 border-slate-600 text-white hover:bg-slate-600\"\n                >\n                  <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                  Zurück\n                </Button>\n                \n                <div className=\"flex items-center gap-1\">\n                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                    const pageNum = Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + i;\n                    if (pageNum > totalPages) return null;\n                    \n                    return (\n                      <Button\n                        key={pageNum}\n                        variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(pageNum)}\n                        className={currentPage === pageNum \n                          ? \"bg-cyan-600 hover:bg-cyan-700 text-white\"\n                          : \"bg-slate-700 border-slate-600 text-white hover:bg-slate-600\"\n                        }\n                      >\n                        {pageNum}\n                      </Button>\n                    );\n                  })}\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                  disabled={currentPage === totalPages}\n                  className=\"bg-slate-700 border-slate-600 text-white hover:bg-slate-600\"\n                >\n                  Weiter\n                  <ChevronRight className=\"h-4 w-4 ml-1\" />\n                </Button>\n              </div>\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-center pt-4\">\n            <Button\n              onClick={onClose}\n              className=\"bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white text-lg px-6 py-3 font-bold transition-all duration-300 hover:scale-110 shadow-lg\"\n            >\n              ✅ Schließen\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n      </Dialog>\n      \n      {/* TOP 100 Modal */}\n      <Top100Modal\n        isOpen={isTop100Open}\n        onClose={() => setIsTop100Open(false)}\n      />\n    </>\n  );\n};","size_bytes":15336},"client/src/components/ForeignExhibitionView.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/lib/stores/useAuth';\nimport { useNotification } from '../hooks/useNotification';\nimport { RarityImage } from './RarityImage';\nimport { ButterflyDetailModal } from './ButterflyDetailModal';\nimport { FishDetailModal } from './FishDetailModal';\nimport { ArrowLeft, Heart, Bug, ChevronLeft, ChevronRight, Fish, Crown, Lock } from 'lucide-react';\nimport { Dialog, DialogContent, DialogTitle, DialogDescription, DialogTrigger } from '@/components/ui/dialog';\nimport { type RarityTier, getRarityColor, getRarityDisplayName } from '@shared/rarity';\n\ninterface ExhibitionButterfly {\n  id: number;\n  userId: number;\n  frameId: number;\n  slotIndex: number;\n  butterflyId: number;\n  butterflyName: string;\n  butterflyRarity: string;\n  butterflyImageUrl: string;\n  placedAt: string;\n  createdAt: string;\n}\n\ninterface ExhibitionFrame {\n  id: number;\n  userId: number;\n  frameNumber: number;\n  purchasedAt: string;\n  createdAt: string;\n}\n\ninterface FrameLike {\n  frameId: number;\n  isLiked: boolean;\n  totalLikes: number;\n}\n\ninterface AquariumFish {\n  id: number;\n  userId: number;\n  tankId: number;\n  slotIndex: number;\n  fishId: number;\n  fishName: string;\n  fishRarity: string;\n  fishImageUrl: string;\n  placedAt: string;\n  createdAt: string;\n}\n\ninterface AquariumTank {\n  id: number;\n  userId: number;\n  tankNumber: number;\n  purchasedAt: string;\n  createdAt: string;\n}\n\ninterface UserVase {\n  id: number;\n  name: string;\n  heartsRequired: number;\n  collected: boolean;\n  image: string;\n}\n\n// Vase Image Component without JPG Badge\nfunction VaseImage({ vase, onClick }: { vase: UserVase; onClick?: () => void }) {\n  const [imageError, setImageError] = useState(false);\n\n  const handleImageError = () => {\n    setImageError(true);\n  };\n\n  if (imageError) {\n    return (\n      <div className=\"text-center\">\n        <div className=\"text-4xl mb-1\">🏺</div>\n        <div className=\"text-xs font-semibold text-orange-300\">\n          Verfügbar\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full h-full relative cursor-pointer\" onClick={onClick}>\n      <img \n        src={vase.image}\n        alt={vase.name}\n        className=\"w-full h-full object-contain rounded-md hover:scale-105 transition-transform\"\n        onError={handleImageError}\n      />\n    </div>\n  );\n}\n\n// Vase Detail Modal Component\nfunction VaseDetailModal({ \n  isOpen, \n  onClose, \n  vase \n}: { \n  isOpen: boolean; \n  onClose: () => void; \n  vase: UserVase | null; \n}) {\n  if (!vase) return null;\n\n  return (\n    <div className={`fixed inset-0 z-50 ${isOpen ? 'flex' : 'hidden'} items-center justify-center`}>\n      {/* Backdrop */}\n      <div className=\"absolute inset-0 bg-black/80 backdrop-blur-sm\" onClick={onClose} />\n      \n      {/* Modal */}\n      <div className=\"relative bg-gradient-to-br from-slate-900 to-slate-800 border-2 border-orange-500/30 rounded-xl shadow-2xl max-w-2xl mx-4 max-h-[95vh] overflow-y-auto\">\n        {/* Close Button */}\n        <button\n          onClick={onClose}\n          className=\"absolute top-3 right-3 z-10 bg-slate-800/80 hover:bg-slate-700 text-slate-300 hover:text-white rounded-full p-2 transition-colors\"\n        >\n          ✕\n        </button>\n        \n        {/* Header */}\n        <div className=\"text-center p-4 border-b border-orange-500/20\">\n          <h3 className=\"text-xl font-bold text-orange-300\">\n            {vase.name}\n          </h3>\n          <div className=\"flex items-center justify-center space-x-2 mt-2\">\n            <Heart className=\"h-4 w-4 text-red-400\" />\n            <span className=\"text-slate-300\">{vase.heartsRequired.toLocaleString()} Herzen</span>\n          </div>\n        </div>\n        \n        {/* Image */}\n        <div className=\"p-4\">\n          <div className=\"w-[500px] h-[750px] mx-auto bg-slate-800 rounded-lg border border-orange-500/20 flex items-center justify-center\">\n            <img \n              src={vase.image}\n              alt={vase.name}\n              className=\"max-w-full max-h-full object-contain rounded-lg\"\n              onError={(e) => {\n                const target = e.currentTarget as HTMLImageElement;\n                target.style.display = 'none';\n                const nextElement = target.nextElementSibling as HTMLElement;\n                if (nextElement) nextElement.style.display = 'block';\n              }}\n            />\n            <div className=\"text-center text-6xl hidden\">🏺</div>\n          </div>\n        </div>\n        \n        {/* Status */}\n        <div className=\"text-center p-4 border-t border-orange-500/20\">\n          {vase.collected ? (\n            <div className=\"flex items-center justify-center space-x-2 text-green-400\">\n              <Crown className=\"h-5 w-5\" />\n              <span className=\"font-semibold\">Gesammelt!</span>\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-center space-x-2 text-slate-400\">\n              <Lock className=\"h-5 w-5\" />\n              <span>Noch nicht gesammelt</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\ntype ViewMode = 'exhibition' | 'aquarium' | 'vases';\n\ninterface ForeignExhibitionViewProps {\n  ownerId: number;\n  ownerName: string;\n  onBack: () => void;\n}\n\nexport const ForeignExhibitionView: React.FC<ForeignExhibitionViewProps> = ({\n  ownerId,\n  ownerName,\n  onBack\n}) => {\n  const { user } = useAuth();\n  const { showNotification } = useNotification();\n  \n  // Exhibition data\n  const [butterflies, setButterflies] = useState<ExhibitionButterfly[]>([]);\n  const [vipButterflies, setVipButterflies] = useState<any[]>([]);\n  const [frames, setFrames] = useState<ExhibitionFrame[]>([]);\n  const [frameLikes, setFrameLikes] = useState<FrameLike[]>([]);\n  const [currentFrameIndex, setCurrentFrameIndex] = useState(0);\n  \n  // Aquarium data\n  const [aquariumFish, setAquariumFish] = useState<AquariumFish[]>([]);\n  const [aquariumTanks, setAquariumTanks] = useState<AquariumTank[]>([]);\n  const [currentTankIndex, setCurrentTankIndex] = useState(0);\n  \n  // Vases data\n  const [userVases, setUserVases] = useState<UserVase[]>([]);\n  const [selectedVase, setSelectedVase] = useState<UserVase | null>(null);\n  const [showVaseModal, setShowVaseModal] = useState(false);\n  const [currentUserHearts, setCurrentUserHearts] = useState(0);\n  const [foreignUserHearts, setForeignUserHearts] = useState(0);\n  \n  // Common state\n  const [loading, setLoading] = useState(true);\n  const [selectedButterfly, setSelectedButterfly] = useState<ExhibitionButterfly | null>(null);\n  const [showButterflyModal, setShowButterflyModal] = useState(false);\n  \n  // Fish modal state  \n  const [selectedFish, setSelectedFish] = useState<AquariumFish | null>(null);\n  const [showFishModal, setShowFishModal] = useState(false);\n  const [currentFishIndex, setCurrentFishIndex] = useState<number>(0);\n  const [viewMode, setViewMode] = useState<ViewMode>('exhibition');\n\n  useEffect(() => {\n    loadForeignExhibition();\n    loadFrameLikes();\n    loadForeignAquarium();\n    loadForeignVases();\n  }, [ownerId, user?.id]);\n\n  const loadForeignExhibition = async () => {\n    try {\n      const response = await fetch(`/api/user/${ownerId}/foreign-exhibition`);\n      const data = await response.json();\n      setButterflies(data.butterflies || []);\n      setVipButterflies(data.vipButterflies || []);\n      setFrames(data.frames || []);\n    } catch (error) {\n      console.error('Failed to load foreign exhibition:', error);\n    }\n  };\n\n  const loadFrameLikes = async () => {\n    if (!user) return;\n    \n    try {\n      const response = await fetch(`/api/user/${user.id}/exhibition/${ownerId}/likes`);\n      const data = await response.json();\n      setFrameLikes(data.likes || []);\n    } catch (error) {\n      console.error('Failed to load frame likes:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  const loadForeignAquarium = async () => {\n    try {\n      const response = await fetch(`/api/user/${ownerId}/foreign-aquarium`);\n      const data = await response.json();\n      setAquariumFish(data.fish || []);\n      setAquariumTanks(data.tanks || []);\n    } catch (error) {\n      console.error('Failed to load foreign aquarium:', error);\n    }\n  };\n\n  const loadForeignVases = async () => {\n    try {\n      if (!user?.id) return;\n      \n      // Load hearts for both users\n      const [currentUserHeartsResponse, foreignUserHeartsResponse] = await Promise.all([\n        fetch(`/api/user/${user.id}/hearts`),\n        fetch(`/api/user/${ownerId}/hearts`)\n      ]);\n      \n      let currentHearts = 0;\n      let foreignHearts = 0;\n      \n      if (currentUserHeartsResponse.ok) {\n        const data = await currentUserHeartsResponse.json();\n        currentHearts = data.hearts;\n        setCurrentUserHearts(currentHearts);\n      }\n      \n      if (foreignUserHeartsResponse.ok) {\n        const data = await foreignUserHeartsResponse.json();\n        foreignHearts = data.hearts;\n        setForeignUserHearts(foreignHearts);\n      }\n      \n      // Generate vases with proper visibility logic\n      const vaseList: UserVase[] = [];\n      \n      for (let i = 1; i <= 24; i++) {\n        // Same heart calculation as in VasesView\n        const heartsRequired = Math.round(1000 + Math.pow((i - 1) / 23, 2.2) * 99000);\n        \n        // Visibility logic: ONLY show vases that BOTH users have unlocked\n        const currentUserUnlocked = currentHearts >= heartsRequired;\n        const foreignUserUnlocked = foreignHearts >= heartsRequired;\n        \n        // Only add vase to list if BOTH users have unlocked it\n        if (currentUserUnlocked && foreignUserUnlocked) {\n          vaseList.push({\n            id: i,\n            name: `Prächtige Vase ${i}`,\n            heartsRequired: heartsRequired,\n            collected: true, // Both users have it, so it's \"collected\" for display\n            image: `/Vasen/${i}.jpg`\n          });\n        }\n        // If not both users have unlocked it, don't add to list (= not visible)\n      }\n      \n      setUserVases(vaseList);\n    } catch (error) {\n      console.error('Failed to load foreign vases:', error);\n    }\n  };\n\n  const handleLike = async (frameId: number) => {\n    if (!user) return;\n\n    const frameButterflies = butterflyFrames.get(frameId) || [];\n    const frameLike = frameLikes.find(fl => fl.frameId === frameId);\n    const isCurrentlyLiked = frameLike?.isLiked || false;\n\n    // Check if frame has 6 butterflies before allowing like\n    if (!isCurrentlyLiked && frameButterflies.length < 6) {\n      showNotification('Du kannst nur volle Rahmen mit 6 Schmetterlingen liken!', 'warning');\n      return;\n    }\n\n    try {\n      const method = isCurrentlyLiked ? 'DELETE' : 'POST';\n      const response = await fetch('/api/exhibition/like', {\n        method,\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({\n          likerId: user.id,\n          frameOwnerId: ownerId,\n          frameId\n        })\n      });\n\n      if (response.ok) {\n        await loadFrameLikes();\n      } else {\n        const errorData = await response.json();\n        showNotification(errorData.message || 'Fehler beim Liken des Rahmens', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to toggle like:', error);\n      showNotification('Fehler beim Liken des Rahmens', 'error');\n    }\n  };\n\n  // Group butterflies by frame\n  const butterflyFrames = new Map<number, ExhibitionButterfly[]>();\n  butterflies.forEach(butterfly => {\n    if (!butterflyFrames.has(butterfly.frameId)) {\n      butterflyFrames.set(butterfly.frameId, []);\n    }\n    butterflyFrames.get(butterfly.frameId)!.push(butterfly);\n  });\n\n  const vipButterflyFrames = new Map<number, any[]>();\n  vipButterflies.forEach(butterfly => {\n    if (!vipButterflyFrames.has(butterfly.frameId)) {\n      vipButterflyFrames.set(butterfly.frameId, []);\n    }\n    vipButterflyFrames.get(butterfly.frameId)!.push(butterfly);\n  });\n\n  // Group fish by tank\n  const fishTanks = new Map<number, AquariumFish[]>();\n  aquariumFish.forEach(fish => {\n    if (!fishTanks.has(fish.tankId)) {\n      fishTanks.set(fish.tankId, []);\n    }\n    fishTanks.get(fish.tankId)!.push(fish);\n  });\n\n  const allFrameIds = new Set([\n    ...butterflies.map(b => b.frameId),\n    ...vipButterflies.map(b => b.frameId)\n  ]);\n  \n  const sortedFrameIds = Array.from(allFrameIds).sort((a, b) => {\n    const frameA = frames.find(f => f.id === a);\n    const frameB = frames.find(f => f.id === b);\n    return (frameA?.frameNumber || 0) - (frameB?.frameNumber || 0);\n  });\n\n  const sortedTankIds = aquariumTanks\n    .map(tank => tank.id)\n    .sort((a, b) => {\n      const tankA = aquariumTanks.find(t => t.id === a);\n      const tankB = aquariumTanks.find(t => t.id === b);\n      return (tankA?.tankNumber || 0) - (tankB?.tankNumber || 0);\n    });\n\n  // Reset frame index when frames change\n  useEffect(() => {\n    if (currentFrameIndex >= sortedFrameIds.length && sortedFrameIds.length > 0) {\n      setCurrentFrameIndex(sortedFrameIds.length - 1);\n    }\n  }, [sortedFrameIds.length, currentFrameIndex]);\n\n  // Reset tank index when tanks change\n  useEffect(() => {\n    if (currentTankIndex >= sortedTankIds.length && sortedTankIds.length > 0) {\n      setCurrentTankIndex(sortedTankIds.length - 1);\n    }\n  }, [sortedTankIds.length, currentTankIndex]);\n\n  if (loading) {\n    return (\n      <div className=\"p-8 space-y-6\">\n        <div className=\"text-center text-slate-300\">\n          Lade {viewMode === 'exhibition' ? 'Ausstellung' : 'Aquarium'} von {ownerName}...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-800 p-4 flex flex-col\">\n      <div className=\"max-w-7xl mx-auto space-y-6 flex flex-col h-full\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between bg-gradient-to-r from-slate-800 to-slate-700 rounded-xl p-6 border-2 border-slate-600 flex-shrink-0\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              onClick={onBack}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"bg-slate-700 border-slate-500 hover:bg-slate-600 text-slate-200\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Zurück\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-white\">\n                {viewMode === 'exhibition' ? '🦋' : viewMode === 'aquarium' ? '🐠' : '🏺'} {viewMode === 'exhibition' ? 'Ausstellung' : viewMode === 'aquarium' ? 'Aquarium' : 'Vasen'} von {ownerName}\n              </h1>\n              <p className=\"text-slate-300 mt-2\">\n                {viewMode === 'exhibition' \n                  ? 'Entdecke die Schmetterlingssammlung und vergib Likes!' \n                  : viewMode === 'aquarium'\n                    ? 'Betrachte die Fischsammlung im Aquarium!'\n                    : 'Betrachte die Vasen-Sammlung!'}\n              </p>\n              \n              {/* View Mode Toggle */}\n              <div className=\"flex space-x-2 mt-4\">\n                <Button\n                  onClick={() => setViewMode('exhibition')}\n                  variant={viewMode === 'exhibition' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  className={viewMode === 'exhibition' \n                    ? 'bg-blue-600 hover:bg-blue-700 text-white' \n                    : 'bg-slate-700 border-slate-500 hover:bg-slate-600 text-slate-200'}\n                >\n                  <Bug className=\"h-4 w-4 mr-2\" />\n                  Ausstellung\n                </Button>\n                <Button\n                  onClick={() => setViewMode('aquarium')}\n                  variant={viewMode === 'aquarium' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  className={viewMode === 'aquarium' \n                    ? 'bg-cyan-600 hover:bg-cyan-700 text-white' \n                    : 'bg-slate-700 border-slate-500 hover:bg-slate-600 text-slate-200'}\n                >\n                  <Fish className=\"h-4 w-4 mr-2\" />\n                  Aquarium\n                </Button>\n                <Button\n                  onClick={() => setViewMode('vases')}\n                  variant={viewMode === 'vases' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  className={viewMode === 'vases' \n                    ? 'bg-orange-600 hover:bg-orange-700 text-white' \n                    : 'bg-slate-700 border-slate-500 hover:bg-slate-600 text-slate-200'}\n                >\n                  <span className=\"h-4 w-4 mr-2\">🏺</span>\n                  Vasen\n                </Button>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-slate-300\">\n            {viewMode === 'exhibition' ? (\n              <>\n                <Bug className=\"h-8 w-8 inline mr-2 text-blue-400 animate-pulse\" />\n                {butterflies.length} Schmetterlinge ausgestellt\n              </>\n            ) : viewMode === 'aquarium' ? (\n              <>\n                <Fish className=\"h-8 w-8 inline mr-2 text-cyan-400 animate-pulse\" />\n                {aquariumFish.length} Fische im Aquarium\n              </>\n            ) : (\n              <>\n                <span className=\"text-3xl mr-2\">🏺</span>\n                {userVases.filter(v => v.collected).length} / {userVases.length} Vasen gesammelt\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Exhibition Mode */}\n        {viewMode === 'exhibition' && (\n          sortedFrameIds.length > 0 ? (\n            <div className=\"space-y-6 max-w-7xl mx-auto flex-1 overflow-y-auto pr-2 pb-8\">\n              {/* Current Frame */}\n              {sortedFrameIds[currentFrameIndex] && (() => {\n                const frameId = sortedFrameIds[currentFrameIndex];\n                const frameData = frames.find(f => f.id === frameId);\n                const frameNumber = frameData?.frameNumber || 1;\n                const frameButterflies = butterflyFrames.get(frameId) || [];\n                const frameVipButterflies = vipButterflyFrames.get(frameId) || [];\n                const frameLike = frameLikes.find(fl => fl.frameId === frameId);\n                \n                const totalButterflies = frameButterflies.length + frameVipButterflies.length;\n                const isFullFrame = totalButterflies === 6;\n                const canBeLiked = isFullFrame || frameLike?.isLiked;\n                \n                return (\n                  <Card \n                    key={frameId}\n                    className=\"bg-gradient-to-br from-amber-900 to-amber-800 border-amber-700 shadow-2xl\"\n                  >\n                    <CardHeader className=\"pb-4\">\n                      <CardTitle className=\"text-amber-100 text-center flex items-center justify-between text-xl\">\n                        <div className=\"flex items-center\">\n                          <span>🖼️ {ownerName}s Rahmen #{frameNumber}</span>\n                          {isFullFrame && (\n                            <span className=\"ml-3 text-sm bg-green-600 text-white px-3 py-1 rounded-full animate-pulse shadow-lg\">\n                              ✨ Vollständig\n                            </span>\n                          )}\n                          {!isFullFrame && (\n                            <span className=\"ml-3 text-sm bg-amber-600 text-amber-100 px-3 py-1 rounded-full\">\n                              {totalButterflies}/6\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          {/* Likes Display */}\n                          {(frameLike?.totalLikes || 0) > 0 && (\n                            <div className=\"flex items-center text-pink-300\">\n                              <Heart className=\"h-5 w-5 mr-2 fill-pink-300\" />\n                              <span className=\"text-base\">{frameLike?.totalLikes}</span>\n                            </div>\n                          )}\n                          \n                          {/* Navigation Controls */}\n                          {sortedFrameIds.length > 1 && (\n                            <div className=\"flex items-center space-x-3 bg-amber-800/60 rounded-lg px-3 py-2 border border-amber-600\">\n                              <Button\n                                onClick={() => setCurrentFrameIndex(Math.max(0, currentFrameIndex - 1))}\n                                disabled={currentFrameIndex === 0}\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"bg-amber-700 border-amber-500 hover:bg-amber-600 text-amber-100 disabled:opacity-50 h-8 w-8 p-0\"\n                              >\n                                <ChevronLeft className=\"h-4 w-4\" />\n                              </Button>\n                              \n                              <div className=\"text-base font-semibold text-amber-100 px-3\">\n                                #{frameNumber} / {sortedFrameIds.length}\n                              </div>\n                              \n                              <Button\n                                onClick={() => setCurrentFrameIndex(Math.min(sortedFrameIds.length - 1, currentFrameIndex + 1))}\n                                disabled={currentFrameIndex >= sortedFrameIds.length - 1}\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"bg-amber-700 border-amber-500 hover:bg-amber-600 text-amber-100 disabled:opacity-50 h-8 w-8 p-0\"\n                              >\n                                <ChevronRight className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          )}\n                          \n                          <Button\n                            onClick={() => handleLike(frameId)}\n                            disabled={!canBeLiked}\n                            variant={frameLike?.isLiked ? \"default\" : \"outline\"}\n                            size=\"sm\"\n                            className={frameLike?.isLiked \n                              ? \"bg-pink-600 hover:bg-pink-700 text-white\" \n                              : canBeLiked \n                                ? \"bg-amber-700 border-amber-500 hover:bg-amber-600 text-amber-100 hover:border-pink-400\" \n                                : \"bg-amber-800 border-amber-600 text-amber-500 cursor-not-allowed\"}\n                          >\n                            <Heart className={`h-4 w-4 mr-1 ${frameLike?.isLiked ? 'fill-current' : ''}`} />\n                            {frameLike?.isLiked ? 'Geliked' : 'Liken'}\n                          </Button>\n                        </div>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {/* Wood frame effect */}\n                      <div className=\"bg-gradient-to-br from-amber-700 to-amber-900 p-8 rounded-lg border-4 border-amber-600 shadow-inner\">\n                        <div className=\"bg-slate-100 p-7 rounded grid grid-cols-3 grid-rows-2 gap-3 h-[800px] place-items-center\">\n                          {Array.from({ length: 6 }, (_, slotIndex) => {\n                            const butterfly = frameButterflies.find(b => b.slotIndex === slotIndex);\n                            const vipButterfly = frameVipButterflies.find(b => b.slotIndex === slotIndex);\n                            const hasContent = butterfly || vipButterfly;\n                            \n                            return (\n                              <div \n                                key={slotIndex}\n                                className=\"aspect-square bg-white border border-slate-300 rounded flex items-center justify-center overflow-hidden shadow-md hover:shadow-lg transition-shadow min-h-0\"\n                              >\n                                {hasContent ? (\n                                  <div \n                                    className=\"w-full h-full cursor-pointer relative group\"\n                                    onClick={() => {\n                                      setSelectedButterfly(butterfly || vipButterfly);\n                                      setShowButterflyModal(true);\n                                    }}\n                                  >\n                                    <RarityImage\n                                      src={(butterfly || vipButterfly).butterflyImageUrl}\n                                      alt={(butterfly || vipButterfly).butterflyName}\n                                      rarity={(butterfly || vipButterfly).butterflyRarity as RarityTier}\n                                      size=\"medium\"\n                                      className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n                                    />\n                                    <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-opacity rounded flex items-center justify-center\">\n                                      <div className=\"bg-slate-900/80 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity\">\n                                        Details anzeigen\n                                      </div>\n                                    </div>\n                                  </div>\n                                ) : (\n                                  <div className=\"text-slate-400 text-sm text-center\">\n                                    Leer\n                                  </div>\n                                )}\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                      \n                      {frameButterflies.length > 0 && (\n                        <div className=\"mt-4 text-center\">\n                          <p className=\"text-slate-400 text-sm\">\n                            {frameButterflies.length} von 10 Plätzen belegt\n                          </p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                );\n              })()}\n            </div>\n          ) : (\n            <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-slate-600\">\n              <CardContent className=\"text-center py-12\">\n                <Bug className=\"h-16 w-16 text-slate-600 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-bold text-slate-300 mb-2\">\n                  Keine Ausstellung vorhanden\n                </h3>\n                <p className=\"text-slate-400\">\n                  {ownerName} hat noch keine Schmetterlinge ausgestellt.\n                </p>\n              </CardContent>\n            </Card>\n          )\n        )}\n\n        {/* Aquarium Mode */}\n        {viewMode === 'aquarium' && (\n          sortedTankIds.length > 0 ? (\n            <div className=\"space-y-6 max-w-7xl mx-auto flex-1 overflow-y-auto pr-2 pb-8\">\n              {/* Current Tank */}\n              {sortedTankIds[currentTankIndex] && (() => {\n                const tankId = sortedTankIds[currentTankIndex];\n                const tankData = aquariumTanks.find(t => t.id === tankId);\n                const tankNumber = tankData?.tankNumber || 1;\n                const tankFish = fishTanks.get(tankId) || [];\n                \n                return (\n                  <Card \n                    key={tankId}\n                    className=\"bg-gradient-to-br from-blue-950/50 to-teal-950/30 border-blue-500/30 shadow-2xl\"\n                  >\n                    <CardHeader className=\"pb-4\">\n                      <CardTitle className=\"text-blue-300 text-center flex items-center justify-between text-xl\">\n                        <div className=\"flex items-center\">\n                          <span>🐠 {ownerName}s Aquarium #{tankNumber}</span>\n                          <span className=\"ml-3 text-sm bg-blue-600 text-blue-100 px-3 py-1 rounded-full\">\n                            {tankFish.length}/6 Fische\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-3\">\n                          {/* Navigation Controls - immer anzeigen für Konsistenz */}\n                          <div className=\"flex items-center space-x-3 bg-blue-800/60 rounded-lg px-3 py-2 border border-blue-600\">\n                            <Button\n                              onClick={() => setCurrentTankIndex(Math.max(0, currentTankIndex - 1))}\n                              disabled={currentTankIndex === 0 || sortedTankIds.length <= 1}\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"bg-blue-700 border-blue-500 hover:bg-blue-600 text-blue-100 disabled:opacity-50 h-8 w-8 p-0\"\n                            >\n                              <ChevronLeft className=\"h-4 w-4\" />\n                            </Button>\n                            \n                            <div className=\"text-base font-semibold text-blue-100 px-3\">\n                              #{tankNumber} / {sortedTankIds.length}\n                            </div>\n                            \n                            <Button\n                              onClick={() => setCurrentTankIndex(Math.min(sortedTankIds.length - 1, currentTankIndex + 1))}\n                              disabled={currentTankIndex >= sortedTankIds.length - 1 || sortedTankIds.length <= 1}\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"bg-blue-700 border-blue-500 hover:bg-blue-600 text-blue-100 disabled:opacity-50 h-8 w-8 p-0\"\n                            >\n                              <ChevronRight className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {/* Aquarium water effect */}\n                      <div className=\"p-3 bg-gradient-to-br from-blue-900/20 to-teal-900/10 rounded-lg border border-blue-500/20\">\n                        <div className=\"grid grid-cols-3 grid-rows-2 gap-3 h-[800px] place-items-center\">\n                          {Array.from({ length: 6 }, (_, slotIndex) => {\n                            const fish = tankFish.find(f => f.slotIndex === slotIndex);\n                            \n                            return (\n                              <div \n                                key={slotIndex}\n                                className=\"aspect-square bg-blue-950/30 border border-blue-400/30 rounded-lg flex items-center justify-center overflow-hidden shadow-md hover:shadow-lg transition-shadow min-h-0\"\n                              >\n                                {fish ? (\n                                  <div \n                                    className=\"w-full h-full relative group cursor-pointer\"\n                                    onClick={() => {\n                                      console.log(\"🐟 Foreign Fish clicked:\", fish.fishName, fish.id);\n                                      const fishIndex = aquariumFish.findIndex(f => f.id === fish.id);\n                                      setSelectedFish(fish);\n                                      setCurrentFishIndex(fishIndex >= 0 ? fishIndex : 0);\n                                      setShowFishModal(true);\n                                      console.log(\"🐟 Foreign Fish Modal should open:\", fish.fishName);\n                                    }}\n                                  >\n                                    <RarityImage\n                                      src={fish.fishImageUrl}\n                                      alt={fish.fishName}\n                                      rarity={fish.fishRarity as RarityTier}\n                                      size=\"medium\"\n                                      className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n                                    />\n                                    <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-opacity rounded flex items-center justify-center\">\n                                      <div className=\"bg-slate-900/80 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity\">\n                                        {fish.fishName}\n                                      </div>\n                                    </div>\n                                  </div>\n                                ) : (\n                                  <div className=\"text-blue-400/60 text-sm text-center\">\n                                    Leer\n                                  </div>\n                                )}\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                      \n                      {tankFish.length > 0 && (\n                        <div className=\"mt-4 text-center\">\n                          <p className=\"text-cyan-300 text-sm\">\n                            🐠 {tankFish.length} von 10 Plätzen belegt\n                          </p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                );\n              })()}\n            </div>\n          ) : (\n            <Card className=\"bg-gradient-to-br from-cyan-900 to-slate-900 border-2 border-cyan-600\">\n              <CardContent className=\"text-center py-12\">\n                <Fish className=\"h-16 w-16 text-cyan-600 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-bold text-cyan-300 mb-2\">\n                  Kein Aquarium vorhanden\n                </h3>\n                <p className=\"text-slate-400\">\n                  {ownerName} hat noch keine Fische im Aquarium.\n                </p>\n              </CardContent>\n            </Card>\n          )\n        )}\n\n        {/* Vases Mode */}\n        {viewMode === 'vases' && (\n          <div className=\"space-y-6 max-w-7xl mx-auto flex-1 overflow-y-auto pr-2 pb-8\">\n            {/* Header with animated title */}\n            <div className=\"text-center mb-8\">\n              <div className=\"text-6xl mb-6 flex justify-center items-center space-x-2 leading-tight py-4\">\n                <span className=\"animate-pulse\">👑</span>\n                <span className=\"bg-gradient-to-r from-orange-400 via-yellow-500 to-orange-600 bg-clip-text text-transparent font-bold\">\n                  {ownerName}s Vasen-Sammlung\n                </span>\n                <span className=\"animate-pulse\">👑</span>\n              </div>\n              <p className=\"text-slate-400 text-lg max-w-2xl mx-auto\">\n                Betrachte {ownerName}s exquisite Vasen-Sammlung! Jede Vase wurde mit Herzen gesammelt.\n              </p>\n            </div>\n\n            {/* Gallery - 4 Shelves with 6 Vases each */}\n            <div className=\"space-y-12 mb-12\">\n              {[0, 1, 2, 3].map((shelfIndex) => (\n                <div key={shelfIndex} className=\"relative\">\n                  {/* Shelf Background */}\n                  <div className=\"absolute inset-0 -top-4 -bottom-8 bg-gradient-to-b from-slate-800/40 to-slate-900/60 rounded-xl backdrop-blur-sm border border-orange-500/10 shadow-2xl\" />\n                  \n                  {/* Shelf Label */}\n                  <div className=\"relative text-center mb-6 z-10\">\n                    <Badge \n                      variant=\"outline\" \n                      className=\"bg-slate-800/60 text-orange-300 border-orange-500/30 px-4 py-2 text-lg font-semibold shadow-lg\"\n                    >\n                      Regal {shelfIndex + 1}\n                    </Badge>\n                  </div>\n\n                  {/* Vases Grid */}\n                  <div className=\"relative grid grid-cols-6 gap-4 p-6 z-10\">\n                    {userVases\n                      .slice(shelfIndex * 6, (shelfIndex + 1) * 6)\n                      .map((vase) => {\n                        const isLocked = !vase.collected;\n\n                        return (\n                          <div\n                            key={vase.id}\n                            className={`\n                              relative group transition-all duration-300\n                              opacity-100\n                            `}\n                            style={{\n                              animationDelay: `${(vase.id * 0.3)}s`, // Random staggered delays\n                            }}\n                          >\n                            {/* Vase Container */}\n                            <div className={`\n                              aspect-[2/3] rounded-lg border-2 relative overflow-hidden transition-all duration-500\n                              border-orange-400 bg-orange-900/30 shadow-orange-400/30 shadow-lg\n                              animate-gold-glow-random\n                            `}\n                            style={{\n                              animationDelay: `${Math.random() * 5}s`, // Random gold glow timing\n                              animationDuration: `${3 + Math.random() * 2}s`, // Vary duration 3-5s\n                            }}>\n                              {/* Vase Image or Placeholder */}\n                              <div className=\"w-full h-full flex items-center justify-center p-2\">\n                                <VaseImage \n                                  vase={vase} \n                                  onClick={() => {\n                                    setSelectedVase(vase);\n                                    setShowVaseModal(true);\n                                  }}\n                                />\n                              </div>\n\n                              {/* Vase Info */}\n                              <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-slate-900/90 to-transparent p-2 rounded-b-lg\">\n                                <div className=\"text-xs font-medium text-slate-400\">\n                                  Vase {vase.id}\n                                </div>\n                              </div>\n\n                              {/* Hearts Badge */}\n                              <div className=\"absolute top-2 right-2\">\n                                <Badge className={`\n                                  text-xs px-1 py-0 \n                                  bg-orange-600 text-orange-100 border border-orange-400/50\n                                `}>\n                                  <Heart className=\"h-3 w-3 mr-1\" />\n                                  {vase.heartsRequired.toLocaleString()}\n                                </Badge>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                  </div>\n\n                  {/* Shelf Support Beams */}\n                  <div className=\"absolute -bottom-2 left-4 right-4 h-2 bg-gradient-to-r from-slate-600 to-slate-500 rounded-full shadow-lg border-t border-slate-400/20\" />\n                </div>\n              ))}\n            </div>\n\n            {/* Statistics Card */}\n            <div className=\"text-center\">\n              <Card className=\"inline-block bg-slate-800/60 backdrop-blur-sm border border-orange-500/20 p-4 shadow-lg\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-orange-400\">\n                        {userVases.filter(v => v.collected).length}\n                      </div>\n                      <div className=\"text-xs text-slate-400\">Gesammelt</div>\n                    </div>\n                    <div className=\"text-slate-500\">/</div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-slate-300\">\n                        {userVases.length}\n                      </div>\n                      <div className=\"text-xs text-slate-400\">Gesamt</div>\n                    </div>\n                    <div className=\"text-slate-500\">•</div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-400\">\n                        {((userVases.filter(v => v.collected).length / userVases.length) * 100).toFixed(1)}%\n                      </div>\n                      <div className=\"text-xs text-slate-400\">Vollständigkeit</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Butterfly Detail Modal for viewing other users' butterflies */}\n      <ButterflyDetailModal\n        isOpen={showButterflyModal}\n        onClose={() => {\n          setShowButterflyModal(false);\n          setSelectedButterfly(null);\n        }}\n        butterfly={selectedButterfly ? {\n          id: selectedButterfly.id,\n          butterflyName: selectedButterfly.butterflyName,\n          butterflyRarity: selectedButterfly.butterflyRarity,\n          butterflyImageUrl: selectedButterfly.butterflyImageUrl,\n          placedAt: selectedButterfly.placedAt,\n          userId: selectedButterfly.userId\n        } : null}\n        onSold={() => {}} // Not used in read-only mode\n        readOnly={true} // This will hide selling options\n      />\n\n      {/* Fish Detail Modal for viewing other users' fish */}\n      <FishDetailModal\n        isOpen={showFishModal}\n        onClose={() => {\n          setShowFishModal(false);\n          setSelectedFish(null);\n        }}\n        fish={selectedFish ? {\n          id: selectedFish.id,\n          fishName: selectedFish.fishName,\n          fishRarity: selectedFish.fishRarity,\n          fishImageUrl: selectedFish.fishImageUrl,\n          placedAt: selectedFish.placedAt,\n          userId: selectedFish.userId,\n          tankId: selectedFish.tankId\n        } : null}\n        onSold={() => {}} // Not used in read-only mode\n        readOnly={true} // This will hide selling options\n        currentIndex={currentFishIndex}\n        totalCount={aquariumFish.length}\n        onNext={currentFishIndex < aquariumFish.length - 1 ? () => {\n          const nextIndex = currentFishIndex + 1;\n          setCurrentFishIndex(nextIndex);\n          setSelectedFish(aquariumFish[nextIndex]);\n        } : undefined}\n        onPrevious={currentFishIndex > 0 ? () => {\n          const prevIndex = currentFishIndex - 1;\n          setCurrentFishIndex(prevIndex);\n          setSelectedFish(aquariumFish[prevIndex]);\n        } : undefined}\n      />\n\n      {/* Vase Detail Modal */}\n      <VaseDetailModal\n        isOpen={showVaseModal}\n        onClose={() => {\n          setShowVaseModal(false);\n          setSelectedVase(null);\n        }}\n        vase={selectedVase}\n      />\n    </div>\n  );\n};","size_bytes":43669},"client/src/components/ButterflyDetailModal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { RarityImage } from \"./RarityImage\";\nimport { X, Clock, Coins, Star, Timer, ChevronLeft, ChevronRight, Sun, Zap } from \"lucide-react\";\nimport { getRarityColor, getRarityDisplayName, getRarityBadgeStyle, type RarityTier } from \"@shared/rarity\";\nimport { toast } from \"sonner\";\nimport { useSuns } from \"@/lib/stores/useSuns\";\n\ninterface ButterflyDetailProps {\n  id: number;\n  butterflyName: string;\n  butterflyRarity: string;\n  butterflyImageUrl: string;\n  placedAt: string;\n  userId: number;\n  frameId?: number; // Add frameId to get likes information\n  isVip?: boolean; // Flag to distinguish VIP butterflies\n}\n\ninterface ButterflyDetailModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  butterfly: ButterflyDetailProps | null;\n  onSold: () => void;\n  readOnly?: boolean; // For viewing other users' butterflies without selling options\n  // Navigation props\n  currentIndex?: number;\n  totalCount?: number;\n  onNext?: () => void;\n  onPrevious?: () => void;\n}\n\nexport const ButterflyDetailModal: React.FC<ButterflyDetailModalProps> = ({\n  isOpen,\n  onClose,\n  butterfly,\n  onSold,\n  readOnly = false,\n  currentIndex,\n  totalCount,\n  onNext,\n  onPrevious\n}) => {\n  const [timeRemaining, setTimeRemaining] = useState<number>(72 * 60 * 60 * 1000); // Default: 72h\n  const [canSell, setCanSell] = useState<boolean>(false);\n  const [isServerDataLoaded, setIsServerDataLoaded] = useState<boolean>(false);\n  const [isSelling, setIsSelling] = useState<boolean>(false);\n  const [frameLikes, setFrameLikes] = useState<number>(0);\n  \n  // Sonnen-Boost state\n  const [boostMinutes, setBoostMinutes] = useState<string>('1');\n  const [isBoosting, setIsBoosting] = useState<boolean>(false);\n  const { suns, setSuns } = useSuns();\n\n  // Mouse wheel navigation\n  useEffect(() => {\n    if (!isOpen || !onNext || !onPrevious) return;\n\n    const handleWheel = (e: Event) => {\n      e.preventDefault();\n      const wheelEvent = e as WheelEvent;\n      if (wheelEvent.deltaY > 0) {\n        // Scroll down = Next\n        if (currentIndex !== undefined && totalCount !== undefined && currentIndex < totalCount - 1) {\n          onNext();\n        }\n      } else if (wheelEvent.deltaY < 0) {\n        // Scroll up = Previous  \n        if (currentIndex !== undefined && currentIndex > 0) {\n          onPrevious();\n        }\n      }\n    };\n\n    // Add wheel event listener to dialog\n    const dialogElement = document.querySelector('[role=\"dialog\"]');\n    if (dialogElement) {\n      dialogElement.addEventListener('wheel', handleWheel, { passive: false });\n      return () => dialogElement.removeEventListener('wheel', handleWheel);\n    }\n  }, [isOpen, onNext, onPrevious, currentIndex, totalCount]);\n\n  // Reset server data loaded state when butterfly changes\n  useEffect(() => {\n    setIsServerDataLoaded(false);\n  }, [butterfly?.id]);\n\n  // Calculate countdown every second (using server data with local countdown)\n  useEffect(() => {\n    if (!butterfly || readOnly) return;\n\n    let currentButterflyId = butterfly.id; // Capture current butterfly ID\n    let isCancelled = false; // Flag to prevent race conditions\n    let lastServerUpdate = Date.now(); // Track when we last got server data\n    let isInitialDataLoaded = false; // Track if we got initial data\n\n    const fetchSellStatus = async () => {\n      if (isCancelled || butterfly.id !== currentButterflyId) return; // Prevent outdated calls\n      \n      try {\n        // Use different endpoint for VIP butterflies\n        const isVipButterfly = butterfly.isVip || butterfly.butterflyRarity === 'vip';\n        \n        const endpoint = isVipButterfly \n          ? `/api/exhibition/vip-butterfly/${butterfly.id}/sell-status`\n          : `/api/exhibition/butterfly/${butterfly.id}/sell-status`;\n          \n        const response = await fetch(endpoint, {\n          headers: { \n            'X-User-Id': butterfly.userId.toString()\n          }\n        });\n        \n        // Check again after async operation\n        if (isCancelled || butterfly.id !== currentButterflyId) return;\n        \n        if (response.ok) {\n          const data = await response.json();\n          setCanSell(data.canSell);\n          setTimeRemaining(data.timeRemainingMs);\n          setFrameLikes(data.likesCount || 0);\n          setIsServerDataLoaded(true);\n          isInitialDataLoaded = true; // Mark as loaded\n          lastServerUpdate = Date.now(); // Update last server sync time\n        } else {\n          // 🚨 FIX: Server error - default to safe conservative state, no \"verkaufbar\" fallback\n          console.warn('Sell status endpoint returned non-OK status:', response.status);\n          setCanSell(false); // Always safe default\n          setTimeRemaining(72 * 60 * 60 * 1000); // Default to 72h remaining\n          setFrameLikes(0);\n          setIsServerDataLoaded(true);\n          isInitialDataLoaded = true;\n          lastServerUpdate = Date.now();\n        }\n      } catch (error) {\n        if (isCancelled || butterfly.id !== currentButterflyId) return;\n        \n        console.error('Failed to fetch sell status:', error);\n        // 🚨 FIX: Network error - default to safe conservative state, no \"verkaufbar\" fallback\n        setCanSell(false); // Always safe default\n        setTimeRemaining(72 * 60 * 60 * 1000); // Default to 72h remaining  \n        setFrameLikes(0);\n        setIsServerDataLoaded(true);\n        isInitialDataLoaded = true;\n        lastServerUpdate = Date.now();\n      }\n    };\n\n    // Update local countdown every second\n    const updateLocalCountdown = () => {\n      if (isCancelled || butterfly.id !== currentButterflyId || !isInitialDataLoaded) return;\n      \n      setTimeRemaining(prevTime => {\n        const newTime = Math.max(0, prevTime - 1000); // Subtract 1 second\n        if (newTime <= 0) {\n          setCanSell(true);\n        }\n        return newTime;\n      });\n    };\n\n    // Fetch immediately\n    fetchSellStatus();\n\n    // Update countdown every second for smooth display\n    const countdownInterval = setInterval(updateLocalCountdown, 1000);\n    \n    // Sync with server every 30 seconds to prevent drift\n    const serverSyncInterval = setInterval(fetchSellStatus, 30000);\n\n    return () => {\n      isCancelled = true; // Cancel any pending operations\n      clearInterval(countdownInterval);\n      clearInterval(serverSyncInterval);\n    };\n  }, [butterfly, readOnly]);\n\n  const formatTimeRemaining = (milliseconds: number): string => {\n    // 🚨 FIX: Never show \"Verkaufbar!\" here - let canSell state control that\n    if (milliseconds <= 0) return \"0s\";\n\n    // No rounding for precise countdown display\n    const hours = Math.floor(milliseconds / (1000 * 60 * 60));\n    const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((milliseconds % (1000 * 60)) / 1000);\n\n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${seconds}s`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds}s`;\n    } else {\n      return `${seconds}s`;\n    }\n  };\n\n  const getSellPrice = (rarity: string, isVip?: boolean): number => {\n    if (isVip || rarity === 'vip') return 2500; // VIP butterflies are extra valuable!\n    // Must match server-side rarityValues in sellExhibitionButterfly\n    const prices = {\n      'common': 10,\n      'uncommon': 25,\n      'rare': 50,\n      'super-rare': 100,\n      'epic': 200,\n      'legendary': 500,\n      'mythical': 1000\n    };\n    return prices[rarity as keyof typeof prices] || 10;\n  };\n\n  // Calculate current Cr/h based on degradation over 72 hours with like bonus\n  const getCurrentCrPerHour = (rarity: string, isVip?: boolean, placedAt?: string): number => {\n    let baseValue: number;\n    \n    if (isVip || rarity === 'vip') {\n      // VIP butterflies: 60 Cr/h → 6 Cr/h over 72 hours\n      const startValue = 60;\n      const minValue = 6;\n      baseValue = calculateDegradedValue(startValue, minValue, placedAt);\n    } else {\n      const rarityValues = {\n        'common': { start: 1, min: 1 },       // No degradation for Common\n        'uncommon': { start: 2, min: 1 },     // 2 → 1 Cr/h\n        'rare': { start: 5, min: 1 },         // 5 → 1 Cr/h  \n        'super-rare': { start: 10, min: 1 },  // 10 → 1 Cr/h\n        'epic': { start: 20, min: 2 },        // 20 → 2 Cr/h\n        'legendary': { start: 50, min: 5 },   // 50 → 5 Cr/h\n        'mythical': { start: 100, min: 10 }   // 100 → 10 Cr/h\n      };\n\n      const values = rarityValues[rarity as keyof typeof rarityValues] || { start: 1, min: 1 };\n      baseValue = calculateDegradedValue(values.start, values.min, placedAt);\n    }\n    \n    // Apply like bonus: 2% per like for 72 hours\n    if (butterfly?.frameId && frameLikes) {\n      const frameWithLikes = frameLikes.find(f => f.frameId === butterfly.frameId);\n      const likesCount = frameWithLikes ? frameWithLikes.totalLikes : 0;\n      const likeBonus = 1 + (likesCount * 0.02); // 2% per like\n      baseValue = Math.round(baseValue * likeBonus);\n    }\n    \n    return baseValue;\n  };\n\n  // Calculate degraded value over 72 hours\n  const calculateDegradedValue = (startValue: number, minValue: number, placedAt?: string): number => {\n    if (!placedAt) return startValue;\n\n    const placedTime = new Date(placedAt).getTime();\n    const now = new Date().getTime();\n    const timeSincePlacement = now - placedTime;\n    const SEVENTY_TWO_HOURS = 72 * 60 * 60 * 1000;\n\n    // If less than 72 hours have passed, calculate degradation\n    if (timeSincePlacement < SEVENTY_TWO_HOURS) {\n      const degradationProgress = timeSincePlacement / SEVENTY_TWO_HOURS; // 0 to 1\n      const valueRange = startValue - minValue;\n      const currentValue = startValue - (valueRange * degradationProgress);\n      return Math.max(Math.round(currentValue), minValue);\n    }\n\n    // After 72 hours, return minimum value\n    return minValue;\n  };\n\n  const handleSell = async () => {\n    if (!butterfly || !canSell) return;\n\n    setIsSelling(true);\n    try {\n      // Use different endpoint for VIP butterflies\n      const isVipButterfly = butterfly.isVip || butterfly.butterflyRarity === 'vip';\n      \n      const endpoint = isVipButterfly ? '/api/exhibition/sell-vip-butterfly' : '/api/exhibition/sell-butterfly';\n      const bodyData = isVipButterfly \n        ? { userId: butterfly.userId, exhibitionVipButterflyId: butterfly.id }\n        : { userId: butterfly.userId, exhibitionButterflyId: butterfly.id };\n\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': butterfly.userId.toString() || '1'\n        },\n        body: JSON.stringify(bodyData)\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        const butterflyType = butterfly.isVip ? \"VIP-Schmetterling\" : \"Schmetterling\";\n        toast.success(`${butterflyType} verkauft!`, {\n          description: `Du hast ${result.creditsEarned} Credits erhalten! 💰`,\n          duration: 4000,\n          className: \"border-l-4 border-l-green-500\",\n        });\n        onSold();\n        onClose();\n      } else {\n        const error = await response.json();\n        toast.error(\"Verkauf fehlgeschlagen\", {\n          description: error.message || 'Unbekannter Fehler',\n          duration: 4000,\n        });\n      }\n    } catch (error) {\n      console.error('Error selling butterfly:', error);\n      toast.error(\"Verbindungsfehler\", {\n        description: 'Schmetterling konnte nicht verkauft werden',\n        duration: 4000,\n      });\n    } finally {\n      setIsSelling(false);\n    }\n  };\n\n  const handleSunBoost = async () => {\n    if (!butterfly || canSell) return;\n\n    const minutes = parseInt(boostMinutes);\n    if (isNaN(minutes) || minutes <= 0 || minutes > 720) {\n      toast.error(\"Ungültige Eingabe\", {\n        description: 'Bitte gib eine gültige Anzahl Minuten ein (1-720)',\n        duration: 4000,\n      });\n      return;\n    }\n\n    const sunsCost = minutes * 10;\n    if (suns < sunsCost) {\n      toast.error(\"Nicht genug Sonnen\", {\n        description: `Du brauchst ${sunsCost} Sonnen für ${minutes} Minuten Boost`,\n        duration: 4000,\n      });\n      return;\n    }\n\n    setIsBoosting(true);\n    try {\n      const response = await fetch('/api/exhibition/butterfly-sun-boost', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': butterfly.userId.toString() || '1'\n        },\n        body: JSON.stringify({\n          exhibitionButterflyId: butterfly.id,\n          minutes: minutes\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast.success(\"☀️ Sonnen-Boost erfolgreich!\", {\n          description: `Countdown um ${minutes} Minuten für ${sunsCost} Sonnen verkürzt!`,\n          duration: 4000,\n          className: \"border-l-4 border-l-yellow-500\",\n        });\n        // Refresh suns to show updated amount\n        const sunsResponse = await fetch(`/api/user/${butterfly.userId}/suns`);\n        if (sunsResponse.ok) {\n          const sunsData = await sunsResponse.json();\n          setSuns(sunsData.suns);\n        }\n        // Reset input\n        setBoostMinutes('1');\n      } else {\n        const error = await response.json();\n        toast.error(\"Boost fehlgeschlagen\", {\n          description: error.message || 'Unbekannter Fehler',\n          duration: 4000,\n        });\n      }\n    } catch (error) {\n      console.error('Error applying sun boost:', error);\n      toast.error(\"Verbindungsfehler\", {\n        description: 'Sonnen-Boost konnte nicht angewendet werden',\n        duration: 4000,\n      });\n    } finally {\n      setIsBoosting(false);\n    }\n  };\n\n  if (!butterfly) return null;\n\n  const sellPrice = getSellPrice(butterfly.butterflyRarity);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 border-2 border-orange-500/30 text-white max-w-7xl w-full shadow-2xl [&>button]:hidden\">\n        <DialogHeader className=\"relative mb-4\">\n          {/* Enhanced Header Background */}\n          <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n          \n          <DialogTitle className=\"flex items-center text-white relative z-10\">\n            <div className=\"relative\">\n              <Star className=\"h-6 w-6 mr-3 text-purple-400 animate-pulse\" />\n              <div className=\"absolute inset-0 h-6 w-6 mr-3 text-purple-400 animate-ping opacity-30\"></div>\n            </div>\n            <span className=\"text-lg font-bold bg-gradient-to-r from-purple-300 to-pink-300 bg-clip-text text-transparent\">\n              🦋 Schmetterling-Details\n            </span>\n          </DialogTitle>\n          \n        </DialogHeader>\n\n        {/* Top Section: Name/Rarity left, Navigation right */}\n        <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-600 shadow-lg mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              {/* Name and Rarity */}\n              <div className=\"flex items-center gap-4\">\n                <h3 className=\"text-2xl font-bold text-white\">{butterfly.butterflyName}</h3>\n                <Badge className={`${getRarityBadgeStyle(butterfly.butterflyRarity as RarityTier)} text-base font-bold px-3 py-1`}>\n                  <Star className=\"h-4 w-4 mr-2\" />\n                  {getRarityDisplayName(butterfly.butterflyRarity as RarityTier)}\n                </Badge>\n              </div>\n\n              {/* Navigation Controls */}\n              {(totalCount !== undefined && totalCount > 1 && currentIndex !== undefined) && (\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-sm text-slate-400\">\n                    Schmetterling {currentIndex + 1} von {totalCount}\n                  </div>\n                  \n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={onPrevious}\n                      disabled={currentIndex === 0}\n                      size=\"sm\"\n                      className=\"bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 disabled:from-slate-600 disabled:to-slate-700 disabled:cursor-not-allowed\"\n                    >\n                      <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                      Zurück\n                    </Button>\n                    \n                    <Button\n                      onClick={onNext}\n                      disabled={currentIndex === totalCount - 1}\n                      size=\"sm\"\n                      className=\"bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 disabled:from-slate-600 disabled:to-slate-700 disabled:cursor-not-allowed\"\n                    >\n                      Weiter\n                      <ChevronRight className=\"h-4 w-4 ml-1\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Content: Large Image left, Details right */}\n        <div className=\"flex gap-8 min-h-[800px]\">\n          {/* Left Side - Large Butterfly Image (800x800) */}\n          <div className=\"flex-shrink-0\">\n            <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-600 shadow-lg relative overflow-hidden\">\n              <div className={`absolute inset-0 rounded-lg opacity-20 ${getRarityColor(butterfly.butterflyRarity as RarityTier).replace('text-', 'bg-')}`}></div>\n              \n              <CardContent className=\"p-6 relative z-10 text-center\">\n                <div className=\"relative\">\n                  <img \n                    src={butterfly.butterflyImageUrl}\n                    alt={butterfly.butterflyName}\n                    className={`w-[700px] h-[700px] object-contain mx-auto border-4 rounded-lg shadow-lg ${getRarityColor(butterfly.butterflyRarity as RarityTier).replace('text-', 'border-')}`}\n                    style={{\n                      filter: 'drop-shadow(0 0 20px rgba(255,255,255,0.3))'\n                    }}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Side - Details */}\n          <div className=\"flex-1 space-y-6\">\n            {/* Countdown Timer - Only show for own butterflies */}\n            {!readOnly && (\n              <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-600 shadow-lg\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"flex items-center justify-center mb-4\">\n                    <div className=\"relative\">\n                      <Timer className={`h-6 w-6 mr-3 ${canSell ? 'text-green-400' : 'text-orange-400'}`} />\n                      {!canSell && <div className=\"absolute inset-0 h-6 w-6 mr-3 text-orange-400 animate-ping opacity-30\"></div>}\n                    </div>\n                    <span className=\"text-lg font-semibold\">\n                      {canSell ? \"Verkaufsbereit!\" : \"Verkaufs-Countdown\"}\n                    </span>\n                  </div>\n\n                  <div className={`text-3xl font-bold mb-2 ${canSell ? 'text-green-400' : 'text-orange-400'}`}>\n                    {!isServerDataLoaded ? \"Lade...\" : formatTimeRemaining(timeRemaining)}\n                  </div>\n\n                  {frameLikes > 0 && !canSell && (\n                    <div className=\"text-lg text-pink-300 mb-2 flex items-center justify-center\">\n                      <Star className=\"h-4 w-4 mr-1 fill-pink-300\" />\n                      <span>{frameLikes} Likes</span>\n                      <span className=\"ml-2 text-green-300\">(+{frameLikes * 2}% Einkommen)</span>\n                    </div>\n                  )}\n\n                  {canSell && (\n                    <div className=\"text-sm text-slate-400 mb-4\">\n                      Dieser Schmetterling kann jetzt verkauft werden!\n                    </div>\n                  )}\n\n                  {/* Sonnen-Boost Panel */}\n                  {!canSell && (\n                    <div className=\"border-t border-slate-600 pt-4\">\n                      <div className=\"flex items-center mb-3\">\n                        <Sun className=\"h-5 w-5 mr-2 text-yellow-400\" />\n                        <span className=\"text-lg font-semibold text-yellow-300\">Sonnen-Boost</span>\n                      </div>\n                      \n                      <div className=\"text-sm text-slate-400 mb-3\">\n                        Verkürze den Countdown: 10 ☀️ = 1 Minute weniger\n                      </div>\n\n                      <div className=\"flex gap-3 items-end\">\n                        <div className=\"flex-1\">\n                          <label className=\"text-sm text-slate-300 mb-1 block\">Minuten</label>\n                          <Input\n                            type=\"number\"\n                            value={boostMinutes}\n                            onChange={(e) => setBoostMinutes(e.target.value)}\n                            min=\"1\"\n                            max=\"720\"\n                            className=\"bg-slate-800 border-slate-600 text-white\"\n                            placeholder=\"1\"\n                          />\n                        </div>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"text-sm text-slate-300 mb-1\">Kosten</div>\n                          <div className=\"bg-slate-800 border border-slate-600 rounded-md px-3 py-2 text-center\">\n                            <span className=\"text-yellow-400 font-bold\">\n                              {parseInt(boostMinutes) * 10 || 0} ☀️\n                            </span>\n                          </div>\n                        </div>\n\n                        <Button\n                          onClick={handleSunBoost}\n                          disabled={isBoosting || parseInt(boostMinutes) <= 0 || parseInt(boostMinutes) > 720 || suns < (parseInt(boostMinutes) * 10)}\n                          className=\"bg-gradient-to-r from-yellow-600 to-orange-600 hover:from-yellow-700 hover:to-orange-700 disabled:from-slate-600 disabled:to-slate-700 text-white px-4 py-2\"\n                        >\n                          <div className=\"flex items-center\">\n                            <Zap className=\"h-4 w-4 mr-2\" />\n                            {isBoosting ? \"Boost...\" : \"Boost!\"}\n                          </div>\n                        </Button>\n                      </div>\n\n                      <div className=\"text-xs text-slate-500 mt-2 text-center\">\n                        Du hast {suns} ☀️ Sonnen\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Sell Price & Button - Only show for own butterflies */}\n            {!readOnly && (\n              <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-600 shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center\">\n                      <Coins className=\"h-6 w-6 mr-3 text-yellow-400\" />\n                      <span className=\"text-lg font-semibold\">Verkaufspreis:</span>\n                    </div>\n                    <Badge className=\"bg-gradient-to-r from-yellow-600 to-orange-600 text-white text-lg px-4 py-2 font-bold\">\n                      {sellPrice} Credits\n                    </Badge>\n                  </div>\n\n                  {/* Passive Income Display */}\n                  <div className=\"flex items-center justify-between mb-4 p-3 bg-gradient-to-r from-purple-900/30 to-pink-900/30 border border-purple-500/20 rounded-lg\">\n                    <div className=\"flex items-center\">\n                      <Timer className=\"h-5 w-5 mr-3 text-purple-400\" />\n                      <span className=\"text-base font-semibold text-purple-200\">Passives Einkommen:</span>\n                    </div>\n                    <Badge className=\"bg-gradient-to-r from-purple-600 to-pink-600 text-white text-base px-3 py-1 font-bold\">\n                      {getCurrentCrPerHour(butterfly.butterflyRarity, butterfly.isVip, butterfly.placedAt)} Cr/h\n                    </Badge>\n                  </div>\n\n                  <Button\n                    onClick={handleSell}\n                    disabled={!canSell || isSelling}\n                    className={`w-full text-lg font-bold py-6 rounded-xl transition-all duration-300 ${\n                      canSell \n                        ? 'bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 hover:scale-105 shadow-lg' \n                        : 'bg-gradient-to-r from-slate-600 to-slate-700 cursor-not-allowed'\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-center\">\n                      <Coins className={`h-6 w-6 mr-3 ${canSell ? 'animate-bounce' : ''}`} />\n                      {isSelling \n                        ? \"Verkaufe...\" \n                        : canSell \n                          ? `💰 Für ${sellPrice} Credits verkaufen`\n                          : \"Noch nicht verkaufbar\"\n                      }\n                    </div>\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Exit Button */}\n            <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-600 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <Button\n                  onClick={onClose}\n                  className=\"w-full text-lg font-bold py-4 rounded-xl bg-gradient-to-r from-slate-600 to-slate-700 hover:from-slate-700 hover:to-slate-800 transition-all duration-300\"\n                >\n                  <X className=\"h-5 w-5 mr-3\" />\n                  Verlassen\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":26599},"server/passiveIncomeProcessor.ts":{"content":"import { postgresStorage as storage } from './postgresStorage';\n\nclass PassiveIncomeProcessor {\n  private isRunning = false;\n  private intervalId: NodeJS.Timeout | null = null;\n\n  start() {\n    if (this.isRunning) {\n      console.log('💰 Passive income processor already running');\n      return;\n    }\n\n    this.isRunning = true;\n    console.log('💰 Starting passive income processing system...');\n    \n    // Process immediately once, then start interval\n    this.processAllUsersPassiveIncome();\n    \n    // Process every minute (60000ms) - but only award whole credits based on time elapsed\n    this.intervalId = setInterval(() => {\n      this.processAllUsersPassiveIncome();\n    }, 60000);\n  }\n\n  stop() {\n    if (!this.isRunning) {\n      console.log('💰 Passive income processor not running');\n      return;\n    }\n\n    this.isRunning = false;\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    console.log('💰 Passive income processing stopped');\n  }\n\n  private async processAllUsersPassiveIncome() {\n    try {\n      console.log('💰 Processing passive income for all users...');\n      \n      // Get all users who are online or have exhibition butterflies\n      const allUsers = await storage.getAllUsersWithStatus();\n      let totalCreditsAwarded = 0;\n      let usersProcessed = 0;\n\n      for (const user of allUsers) {\n        try {\n          const result = await storage.processPassiveIncome(user.id);\n          if (result.success && result.creditsEarned && result.creditsEarned > 0) {\n            totalCreditsAwarded += result.creditsEarned;\n            usersProcessed++;\n          }\n        } catch (error) {\n          console.error(`💰 Failed to process passive income for user ${user.id}:`, error);\n        }\n      }\n\n      if (usersProcessed > 0) {\n        console.log(`💰 Passive income processing complete: ${totalCreditsAwarded} credits awarded to ${usersProcessed} users`);\n      } else {\n        console.log('💰 Passive income processing complete: No credits awarded this cycle');\n      }\n    } catch (error) {\n      console.error('💰 Error in passive income processing:', error);\n    }\n  }\n}\n\nexport const passiveIncomeProcessor = new PassiveIncomeProcessor();","size_bytes":2249},"scripts/init-production.js":{"content":"import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport * as schema from '../shared/schema.ts';\n\nconst sql = neon(process.env.DATABASE_URL);\nconst db = drizzle(sql, { schema });\n\nasync function initializeProductionDatabase() {\n  try {\n    console.log('🚀 Initializing production database...');\n    \n    // Initialize seeds data (same as in MemStorage constructor)\n    const seedsData = [\n      { id: 1, name: \"Common Samen\", rarity: \"common\", price: 10, growthTime: 75, description: \"Ein gewöhnlicher Samen mit einfachen Eigenschaften\", imageUrl: \"/Blumen/0.jpg\" },\n      { id: 2, name: \"Uncommon Samen\", rarity: \"uncommon\", price: 25, growthTime: 120, description: \"Ein ungewöhnlicher Samen mit besonderen Eigenschaften\", imageUrl: \"/Blumen/0.jpg\" },\n      { id: 3, name: \"Rare Samen\", rarity: \"rare\", price: 50, growthTime: 180, description: \"Ein seltener Samen mit wertvollen Eigenschaften\", imageUrl: \"/Blumen/0.jpg\" },\n      { id: 4, name: \"Super-rare Samen\", rarity: \"super-rare\", price: 100, growthTime: 300, description: \"Ein super-seltener Samen mit außergewöhnlichen Eigenschaften\", imageUrl: \"/Blumen/0.jpg\" },\n      { id: 5, name: \"Epic Samen\", rarity: \"epic\", price: 200, growthTime: 420, description: \"Ein epischer Samen mit legendären Eigenschaften\", imageUrl: \"/Blumen/0.jpg\" },\n      { id: 6, name: \"Legendary Samen\", rarity: \"legendary\", price: 500, growthTime: 540, description: \"Ein legendärer Samen mit mythischen Eigenschaften\", imageUrl: \"/Blumen/0.jpg\" },\n      { id: 7, name: \"Mythical Samen\", rarity: \"mythical\", price: 1000, growthTime: 600, description: \"Ein mythischer Samen mit göttlichen Eigenschaften\", imageUrl: \"/Blumen/0.jpg\" }\n    ];\n\n    // Check if seeds already exist\n    const existingSeeds = await db.select().from(schema.seeds).limit(1);\n    \n    if (existingSeeds.length === 0) {\n      // Insert seeds\n      await db.insert(schema.seeds).values(seedsData);\n      console.log('✅ Seeds initialized in production database');\n    } else {\n      console.log('ℹ️ Seeds already exist in production database');\n    }\n\n    console.log('🎉 Production database initialization complete!');\n    \n  } catch (error) {\n    console.error('❌ Failed to initialize production database:', error);\n    process.exit(1);\n  }\n}\n\ninitializeProductionDatabase();","size_bytes":2346},"server/routes_NEW.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from './storage_NEW';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n\n/**\n * NEUE SAUBERE API-ROUTES\n * - Nur PostgreSQL Storage\n * - Alle ursprünglichen Features\n * - Keine Hybrid-Probleme\n */\n\n// === USER ROUTES ===\napp.post('/api/auth/register', async (req, res) => {\n  try {\n    const { username, password } = req.body;\n\n    if (!username || !password) {\n      return res.status(400).json({ message: 'Username and password required' });\n    }\n\n    const result = await storage.createUser(username, password);\n    \n    if (result.success) {\n      console.log(`🎯 NEW API: User registered: ${username}`);\n      res.json({ \n        user: {\n          id: result.user!.id,\n          username: result.user!.username,\n          credits: result.user!.credits\n        }\n      });\n    } else {\n      res.status(400).json({ message: result.message || 'Registration failed' });\n    }\n  } catch (error) {\n    console.error('❌ NEW API Error registering user:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\napp.post('/api/auth/login', async (req, res) => {\n  try {\n    const { username, password } = req.body;\n\n    if (!username || !password) {\n      return res.status(400).json({ message: 'Username and password required' });\n    }\n\n    const result = await storage.authenticateUser(username, password);\n    \n    if (result.success) {\n      console.log(`🎯 NEW API: User logged in: ${username}`);\n      res.json({ \n        user: {\n          id: result.user!.id,\n          username: result.user!.username,\n          credits: result.user!.credits\n        }\n      });\n    } else {\n      res.status(401).json({ message: 'Invalid credentials' });\n    }\n  } catch (error) {\n    console.error('❌ NEW API Error logging in:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\napp.get('/api/user/:userId', async (req, res) => {\n  try {\n    const userId = parseInt(req.params.userId);\n    const user = await storage.getUser(userId);\n\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    res.json({ \n      id: user.id,\n      username: user.username,\n      credits: user.credits,\n      createdAt: user.createdAt\n    });\n  } catch (error) {\n    console.error('❌ NEW API Error getting user:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// === BUTTERFLY ROUTES ===\napp.get('/api/user/:userId/butterflies', async (req, res) => {\n  try {\n    const userId = parseInt(req.params.userId);\n    const butterflies = await storage.getUserButterflies(userId);\n    \n    console.log(`🎯 NEW API: Getting butterflies for user ${userId} - found ${butterflies.length}`);\n    res.json({ butterflies });\n  } catch (error) {\n    console.error('❌ NEW API Error getting butterflies:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\napp.post('/api/garden/collect-butterfly', async (req, res) => {\n  try {\n    const userId = parseInt(req.headers['x-user-id'] as string);\n    const { fieldIndex } = req.body;\n\n    if (!userId || fieldIndex === undefined) {\n      return res.status(400).json({ message: 'User ID and field index required' });\n    }\n\n    const result = await storage.collectFieldButterfly(userId, fieldIndex);\n\n    if (result.success) {\n      console.log(`🎯 NEW API: Butterfly collected for user ${userId} from field ${fieldIndex}`);\n      res.json({ \n        message: 'Schmetterling erfolgreich gesammelt!', \n        butterfly: result.butterfly \n      });\n    } else {\n      res.status(400).json({ message: 'No butterfly found on that field' });\n    }\n  } catch (error) {\n    console.error('❌ NEW API Error collecting butterfly:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// === EXHIBITION ROUTES ===\napp.post('/api/exhibition/place-butterfly', async (req, res) => {\n  try {\n    const userId = parseInt(req.headers['x-user-id'] as string);\n    const { frameId, slotIndex, butterflyId } = req.body;\n\n    if (!userId || !frameId || slotIndex === undefined || !butterflyId) {\n      return res.status(400).json({ message: 'All parameters required' });\n    }\n\n    const result = await storage.placeExhibitionButterfly(userId, frameId, slotIndex, butterflyId);\n\n    if (result.success) {\n      console.log(`🎯 NEW API: Butterfly placed in exhibition for user ${userId}`);\n      res.json({ message: 'Schmetterling erfolgreich platziert!' });\n    } else {\n      res.status(400).json({ message: result.message || 'Failed to place butterfly' });\n    }\n  } catch (error) {\n    console.error('❌ NEW API Error placing butterfly:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// === PLACEHOLDER ROUTES (to be implemented) ===\napp.get('/api/user/:userId/seeds', async (req, res) => {\n  const seeds = await storage.getUserSeeds(parseInt(req.params.userId));\n  res.json({ seeds });\n});\n\napp.get('/api/user/:userId/flowers', async (req, res) => {\n  const flowers = await storage.getUserFlowers(parseInt(req.params.userId));\n  res.json({ flowers });\n});\n\napp.get('/api/garden/planted-fields', async (req, res) => {\n  const userId = parseInt(req.headers['x-user-id'] as string);\n  const fields = await storage.getPlantedFields(userId);\n  res.json({ fields });\n});\n\napp.get('/api/garden/field-butterflies', async (req, res) => {\n  const userId = parseInt(req.headers['x-user-id'] as string);\n  const butterflies = await storage.getFieldButterflies(userId);\n  res.json({ butterflies });\n});\n\napp.get('/api/garden/placed-bouquets', async (req, res) => {\n  const userId = parseInt(req.headers['x-user-id'] as string);\n  const bouquets = await storage.getPlacedBouquets(userId);\n  res.json({ bouquets });\n});\n\napp.get('/api/user/:userId/bouquets', async (req, res) => {\n  const bouquets = await storage.getUserBouquets(parseInt(req.params.userId));\n  res.json({ bouquets });\n});\n\napp.get('/api/user/:userId/exhibition-frames', async (req, res) => {\n  const frames = await storage.getExhibitionFrames(parseInt(req.params.userId));\n  res.json({ frames });\n});\n\napp.get('/api/user/:userId/exhibition-butterflies', async (req, res) => {\n  const butterflies = await storage.getExhibitionButterflies(parseInt(req.params.userId));\n  res.json({ butterflies });\n});\n\napp.get('/api/market', async (req, res) => {\n  const listings = await storage.getMarketListings();\n  res.json({ listings });\n});\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":6605},"server/storage_NEW.ts":{"content":"import { drizzle } from 'drizzle-orm/neon-http';\nimport { neon } from '@neondatabase/serverless';\nimport { eq, and, desc, asc, sql, inArray, ne } from 'drizzle-orm';\nimport * as schema from '../shared/schema.js';\nimport { User, UserSeed, UserFlower, UserButterfly, PlantedField, FieldButterfly, PlacedBouquet, UserBouquet, ExhibitionFrame, ExhibitionButterfly, MarketListing } from '../shared/schema.js';\nimport { generateLatinButterflyName } from '../shared/rarity.js';\nimport OpenAI from 'openai';\n\n// Database connection\nconst sql_connection = neon(process.env.DATABASE_URL!);\nconst db = drizzle(sql_connection, { schema });\n\n// OpenAI for bouquet naming\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\n/**\n * VOLLSTÄNDIG NEUE STORAGE-IMPLEMENTATION \n * - Nur PostgreSQL (kein Memory Storage)\n * - Alle ursprünglichen Features wiederhergestellt\n * - Keine Duplikat-Probleme\n * - Saubere Architektur\n */\nexport class Storage {\n  constructor() {\n    console.log('🎯 NEW Storage: Initialisiert mit reinem PostgreSQL');\n  }\n\n  // === USER MANAGEMENT ===\n  async createUser(username: string, password: string): Promise<{ success: boolean; user?: User; message?: string }> {\n    try {\n      // Check if username exists\n      const existingUser = await db.select().from(schema.users)\n        .where(eq(schema.users.username, username))\n        .limit(1);\n\n      if (existingUser.length > 0) {\n        return { success: false, message: 'Username already exists' };\n      }\n\n      // Create user with starting credits and seeds\n      const [newUser] = await db.insert(schema.users).values({\n        username,\n        password, // In real app, hash this\n        credits: 1000, // Starting credits\n        createdAt: new Date()\n      }).returning();\n\n      // Give starting seeds (3 common seeds)\n      // Use existing common seed (ID: 1)\n      const commonSeedId = 1; // We know from DB query this exists as \"Common Samen\"\n      \n      console.log(`🔍 NEW: Creating user_seeds with userId=${newUser.id}, seedId=${commonSeedId}`);\n      \n      await db.insert(schema.userSeeds).values({\n        userId: newUser.id,\n        seedId: commonSeedId,\n        quantity: 3,\n        createdAt: new Date()\n      });\n      \n      console.log(`🔍 NEW: user_seeds created successfully`);\n\n      console.log(`✅ NEW User created: ${username} (ID: ${newUser.id})`);\n      return { success: true, user: newUser };\n\n    } catch (error) {\n      console.error('❌ Error creating user:', error);\n      return { success: false, message: 'Database error' };\n    }\n  }\n\n  async authenticateUser(username: string, password: string): Promise<{ success: boolean; user?: User }> {\n    try {\n      const [user] = await db.select().from(schema.users)\n        .where(and(\n          eq(schema.users.username, username),\n          eq(schema.users.password, password)\n        ))\n        .limit(1);\n\n      if (!user) {\n        return { success: false };\n      }\n\n      return { success: true, user };\n    } catch (error) {\n      console.error('❌ Error authenticating user:', error);\n      return { success: false };\n    }\n  }\n\n  async getUser(userId: number): Promise<User | null> {\n    try {\n      const [user] = await db.select().from(schema.users)\n        .where(eq(schema.users.id, userId))\n        .limit(1);\n\n      return user || null;\n    } catch (error) {\n      console.error('❌ Error getting user:', error);\n      return null;\n    }\n  }\n\n  async updateUserCredits(userId: number, newCredits: number): Promise<User | null> {\n    try {\n      const [updatedUser] = await db.update(schema.users)\n        .set({ credits: newCredits })\n        .where(eq(schema.users.id, userId))\n        .returning();\n\n      return updatedUser || null;\n    } catch (error) {\n      console.error('❌ Error updating user credits:', error);\n      return null;\n    }\n  }\n\n  // === BUTTERFLY COLLECTION (NO DUPLICATES) ===\n  async collectFieldButterfly(userId: number, fieldIndex: number): Promise<{ success: boolean; butterfly?: UserButterfly }> {\n    try {\n      // Find butterfly on field\n      const [fieldButterfly] = await db.select().from(schema.fieldButterflies)\n        .where(and(\n          eq(schema.fieldButterflies.userId, userId),\n          eq(schema.fieldButterflies.fieldIndex, fieldIndex)\n        ))\n        .limit(1);\n\n      if (!fieldButterfly) {\n        return { success: false };\n      }\n\n      // Check if user already has this butterfly species\n      const existingButterfly = await db.select().from(schema.userButterflies)\n        .where(and(\n          eq(schema.userButterflies.userId, userId),\n          eq(schema.userButterflies.butterflyId, fieldButterfly.butterflyId)\n        ))\n        .limit(1);\n\n      let resultButterfly: UserButterfly;\n\n      if (existingButterfly.length > 0) {\n        // Update existing butterfly quantity\n        const [updated] = await db.update(schema.userButterflies)\n          .set({ quantity: existingButterfly[0].quantity + 1 })\n          .where(eq(schema.userButterflies.id, existingButterfly[0].id))\n          .returning();\n        \n        resultButterfly = updated;\n        console.log(`🦋 NEW: Butterfly quantity increased: ${fieldButterfly.butterflyName} (total: ${resultButterfly.quantity})`);\n      } else {\n        // Create new butterfly entry\n        const [created] = await db.insert(schema.userButterflies).values({\n          userId,\n          butterflyId: fieldButterfly.butterflyId,\n          butterflyName: fieldButterfly.butterflyName,\n          butterflyRarity: fieldButterfly.butterflyRarity,\n          butterflyImageUrl: fieldButterfly.butterflyImageUrl,\n          quantity: 1,\n          createdAt: new Date()\n        }).returning();\n\n        resultButterfly = created;\n        console.log(`🦋 NEW: New butterfly collected: ${fieldButterfly.butterflyName}`);\n      }\n\n      // Remove from field\n      await db.delete(schema.fieldButterflies)\n        .where(eq(schema.fieldButterflies.id, fieldButterfly.id));\n\n      return { success: true, butterfly: resultButterfly };\n\n    } catch (error) {\n      console.error('❌ NEW Error collecting butterfly:', error);\n      return { success: false };\n    }\n  }\n\n  async getUserButterflies(userId: number): Promise<UserButterfly[]> {\n    try {\n      const butterflies = await db.select().from(schema.userButterflies)\n        .where(eq(schema.userButterflies.userId, userId))\n        .orderBy(desc(schema.userButterflies.createdAt));\n\n      return butterflies;\n    } catch (error) {\n      console.error('❌ Error getting user butterflies:', error);\n      return [];\n    }\n  }\n\n  // === EXHIBITION SYSTEM (WORKING) ===\n  async placeExhibitionButterfly(userId: number, frameId: number, slotIndex: number, butterflyId: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      // Check if frame belongs to user\n      const [frame] = await db.select().from(schema.exhibitionFrames)\n        .where(and(\n          eq(schema.exhibitionFrames.id, frameId),\n          eq(schema.exhibitionFrames.userId, userId)\n        ))\n        .limit(1);\n\n      if (!frame) {\n        return { success: false, message: 'Frame not found or not owned by user' };\n      }\n\n      // Check if slot is occupied\n      const existingPlacement = await db.select().from(schema.exhibitionButterflies)\n        .where(and(\n          eq(schema.exhibitionButterflies.frameId, frameId),\n          eq(schema.exhibitionButterflies.slotIndex, slotIndex)\n        ))\n        .limit(1);\n\n      if (existingPlacement.length > 0) {\n        return { success: false, message: 'Slot already occupied' };\n      }\n\n      // Get user's butterfly\n      const [userButterfly] = await db.select().from(schema.userButterflies)\n        .where(and(\n          eq(schema.userButterflies.userId, userId),\n          eq(schema.userButterflies.butterflyId, butterflyId)\n        ))\n        .limit(1);\n\n      if (!userButterfly || userButterfly.quantity < 1) {\n        return { success: false, message: 'Butterfly not found in inventory' };\n      }\n\n      // Place in exhibition\n      await db.insert(schema.exhibitionButterflies).values({\n        userId,\n        frameId,\n        slotIndex,\n        butterflyId: userButterfly.butterflyId,\n        butterflyName: userButterfly.butterflyName,\n        butterflyRarity: userButterfly.butterflyRarity,\n        butterflyImageUrl: userButterfly.butterflyImageUrl,\n        createdAt: new Date()\n      });\n\n      // Remove from inventory (decrease quantity or delete)\n      if (userButterfly.quantity > 1) {\n        await db.update(schema.userButterflies)\n          .set({ quantity: userButterfly.quantity - 1 })\n          .where(eq(schema.userButterflies.id, userButterfly.id));\n      } else {\n        await db.delete(schema.userButterflies)\n          .where(eq(schema.userButterflies.id, userButterfly.id));\n      }\n\n      console.log(`🖼️ NEW: Butterfly placed in exhibition: ${userButterfly.butterflyName}`);\n      return { success: true };\n\n    } catch (error) {\n      console.error('❌ NEW Error placing exhibition butterfly:', error);\n      return { success: false, message: 'Database error' };\n    }\n  }\n\n  // === AI BOUQUET NAMING (RESTORED) ===\n  async generateUniqueBouquetName(flowers: string[], butterflies: string[]): Promise<string> {\n    try {\n      // Get all existing bouquet names for uniqueness check (placeholder)\n      const existingBouquets: any[] = [];\n      const existingNames: string[] = [];\n\n      const prompt = `Create a unique, beautiful German bouquet name based on these flowers and butterflies:\n\nFlowers: ${flowers.join(', ')}\nButterflies: ${butterflies.join(', ')}\n\nRequirements:\n- German language\n- Poetic and beautiful\n- 2-4 words maximum\n- Must not be any of these existing names: ${existingNames.join(', ')}\n\nReturn only the name, no explanation.`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n        messages: [{ role: \"user\", content: prompt }],\n        max_tokens: 50,\n        temperature: 0.8\n      });\n\n      const generatedName = response.choices[0].message.content?.trim() || 'Mystischer Garten';\n      \n      // Verify uniqueness\n      if (existingNames.includes(generatedName.toLowerCase())) {\n        return `${generatedName} ${Math.floor(Math.random() * 1000)}`;\n      }\n\n      console.log(`🌸 NEW: AI-generated bouquet name: ${generatedName}`);\n      return generatedName;\n\n    } catch (error) {\n      console.error('❌ NEW Error generating bouquet name:', error);\n      return `Bouquet ${Date.now()}`;\n    }\n  }\n\n  // === SEED MANAGEMENT ===\n  async getUserSeeds(userId: number): Promise<UserSeed[]> {\n    try {\n      const userSeeds = await db.select().from(schema.userSeeds)\n        .where(eq(schema.userSeeds.userId, userId))\n        .orderBy(desc(schema.userSeeds.createdAt));\n\n      console.log(`🌱 NEW: Getting seeds for user ${userId} - found ${userSeeds.length}`);\n      return userSeeds;\n    } catch (error) {\n      console.error('❌ NEW Error getting user seeds:', error);\n      return [];\n    }\n  }\n  async getUserFlowers(userId: number): Promise<UserFlower[]> { return []; }\n  async getPlantedFields(userId: number): Promise<PlantedField[]> {\n    try {\n      const fields = await db.select().from(schema.plantedFields)\n        .where(eq(schema.plantedFields.userId, userId))\n        .orderBy(asc(schema.plantedFields.fieldIndex));\n\n      console.log(`🌱 NEW: Getting planted fields for user ${userId} - found ${fields.length}`);\n      return fields;\n    } catch (error) {\n      console.error('❌ NEW Error getting planted fields:', error);\n      return [];\n    }\n  }\n  async getFieldButterflies(userId: number): Promise<FieldButterfly[]> {\n    try {\n      const fieldButterflies = await db.select().from(schema.fieldButterflies)\n        .where(eq(schema.fieldButterflies.userId, userId))\n        .orderBy(asc(schema.fieldButterflies.fieldIndex));\n\n      console.log(`🦋 NEW: Getting field butterflies for user ${userId} - found ${fieldButterflies.length}`);\n      return fieldButterflies;\n    } catch (error) {\n      console.error('❌ NEW Error getting field butterflies:', error);\n      return [];\n    }\n  }\n  async getPlacedBouquets(userId: number): Promise<PlacedBouquet[]> {\n    try {\n      const bouquets = await db.select().from(schema.placedBouquets)\n        .where(eq(schema.placedBouquets.userId, userId))\n        .orderBy(asc(schema.placedBouquets.fieldIndex));\n\n      console.log(`🌺 NEW: Getting placed bouquets for user ${userId} - found ${bouquets.length}`);\n      return bouquets;\n    } catch (error) {\n      console.error('❌ NEW Error getting placed bouquets:', error);\n      return [];\n    }\n  }\n  async getUserBouquets(userId: number): Promise<UserBouquet[]> { return []; }\n  async getExhibitionFrames(userId: number): Promise<ExhibitionFrame[]> { return []; }\n  async getExhibitionButterflies(userId: number): Promise<ExhibitionButterfly[]> { return []; }\n  async getMarketListings(): Promise<MarketListing[]> { return []; }\n}\n\nexport const storage = new Storage();","size_bytes":13135},"client/src/stores/auth.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { User } from '../types';\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (username: string, password: string) => Promise<boolean>;\n  register: (username: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  updateCredits: (credits: number) => void;\n}\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      isAuthenticated: false,\n\n      login: async (username: string, password: string) => {\n        try {\n          const response = await fetch('/api/auth/login', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ username, password }),\n          });\n\n          if (response.ok) {\n            const data = await response.json();\n            set({ user: data.user, isAuthenticated: true });\n            console.log('🦋 Login erfolgreich:', data.user.username);\n            return true;\n          }\n          return false;\n        } catch (error) {\n          console.error('❌ Login-Fehler:', error);\n          return false;\n        }\n      },\n\n      register: async (username: string, password: string) => {\n        try {\n          const response = await fetch('/api/auth/register', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ username, password }),\n          });\n\n          if (response.ok) {\n            const data = await response.json();\n            set({ user: data.user, isAuthenticated: true });\n            console.log('🦋 Registrierung erfolgreich:', data.user.username);\n            return true;\n          }\n          return false;\n        } catch (error) {\n          console.error('❌ Registrierung-Fehler:', error);\n          return false;\n        }\n      },\n\n      logout: () => {\n        set({ user: null, isAuthenticated: false });\n        console.log('🦋 Logout erfolgreich');\n      },\n\n      updateCredits: (credits: number) => {\n        const { user } = get();\n        if (user) {\n          set({ user: { ...user, credits } });\n        }\n      },\n    }),\n    {\n      name: 'mariposa-auth',\n      partialize: (state) => ({ user: state.user, isAuthenticated: state.isAuthenticated }),\n    }\n  )\n);","size_bytes":2368},"client/src/stores/game.ts":{"content":"import { create } from 'zustand';\nimport { Seed, PlantedField, UserFlower, UserButterfly, FieldButterfly, ExhibitionFrame, UnlockedField } from '../types';\n\ninterface GameState {\n  // Data\n  seeds: Seed[];\n  plantedFields: PlantedField[];\n  flowers: UserFlower[];\n  butterflies: UserButterfly[];\n  fieldButterflies: FieldButterfly[];\n  exhibitionFrames: ExhibitionFrame[];\n  unlockedFields: UnlockedField[];\n  nextUnlockCost: number;\n  \n  // Loading states\n  loading: boolean;\n  \n  // Actions\n  fetchGameData: (userId: number) => Promise<void>;\n  plantSeed: (userId: number, fieldIndex: number, seedId: number) => Promise<boolean>;\n  harvestFlower: (userId: number, fieldIndex: number) => Promise<boolean>;\n  collectButterfly: (userId: number, fieldIndex: number) => Promise<boolean>;\n  unlockField: (userId: number, fieldIndex: number) => Promise<boolean>;\n  \n  // Setters for optimistic updates\n  setSeeds: (seeds: Seed[]) => void;\n  setPlantedFields: (fields: PlantedField[]) => void;\n  setFlowers: (flowers: UserFlower[]) => void;\n  setButterflies: (butterflies: UserButterfly[]) => void;\n  setFieldButterflies: (butterflies: FieldButterfly[]) => void;\n  setUnlockedFields: (fields: UnlockedField[]) => void;\n}\n\nexport const useGameStore = create<GameState>((set, get) => ({\n  // Initial state\n  seeds: [],\n  plantedFields: [],\n  flowers: [],\n  butterflies: [],\n  fieldButterflies: [],\n  exhibitionFrames: [],\n  unlockedFields: [],\n  nextUnlockCost: 1000,\n  loading: false,\n\n  // Fetch all game data\n  fetchGameData: async (userId: number) => {\n    set({ loading: true });\n    try {\n      const [seedsRes, fieldsRes, flowersRes, butterfliesRes, unlockedRes, costRes] = await Promise.all([\n        fetch(`/api/user/${userId}/seeds`),\n        fetch(`/api/garden/fields/${userId}`),\n        fetch(`/api/user/${userId}/flowers`),\n        fetch(`/api/user/${userId}/butterflies`),\n        fetch(`/api/garden/unlocked/${userId}`),\n        fetch(`/api/garden/unlock-cost/${userId}`),\n      ]);\n\n      const [seedsData, fieldsData, flowersData, butterfliesData, unlockedData, costData] = await Promise.all([\n        seedsRes.json(),\n        fieldsRes.json(),\n        flowersRes.json(),\n        butterfliesRes.json(),\n        unlockedRes.json(),\n        costRes.json(),\n      ]);\n\n      set({\n        seeds: seedsData.seeds || [],\n        plantedFields: fieldsData.fields || [],\n        flowers: flowersData.flowers || [],\n        butterflies: butterfliesData.butterflies || [],\n        unlockedFields: unlockedData.unlockedFields || [],\n        nextUnlockCost: costData.cost || 1000,\n        loading: false,\n      });\n\n      // Data loaded successfully - debug logs removed to prevent re-rendering\n    } catch (error) {\n      console.error('❌ Error fetching game data:', error);\n      set({ loading: false });\n    }\n  },\n\n  // Plant a seed\n  plantSeed: async (userId: number, fieldIndex: number, seedId: number) => {\n    try {\n      const response = await fetch('/api/garden/plant', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId, fieldIndex, seedId }),\n      });\n\n      if (response.ok) {\n        // Refresh data after successful planting\n        await get().fetchGameData(userId);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('❌ Error planting seed:', error);\n      return false;\n    }\n  },\n\n  // Harvest a flower\n  harvestFlower: async (userId: number, fieldIndex: number) => {\n    try {\n      const response = await fetch('/api/garden/harvest', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId, fieldIndex }),\n      });\n\n      if (response.ok) {\n        // Refresh data after successful harvest\n        await get().fetchGameData(userId);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('❌ Error harvesting flower:', error);\n      return false;\n    }\n  },\n\n  // Collect butterfly (placeholder)\n  collectButterfly: async (userId: number, fieldIndex: number) => {\n    // TODO: Implement butterfly collection\n    console.log('🦋 Collecting butterfly from field', fieldIndex);\n    return true;\n  },\n\n  // Unlock a field\n  unlockField: async (userId: number, fieldIndex: number) => {\n    try {\n      const response = await fetch('/api/garden/unlock', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId, fieldIndex }),\n      });\n\n      if (response.ok) {\n        // Refresh data after successful unlock\n        await get().fetchGameData(userId);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('❌ Error unlocking field:', error);\n      return false;\n    }\n  },\n\n  // Setters\n  setSeeds: (seeds) => set({ seeds }),\n  setPlantedFields: (plantedFields) => set({ plantedFields }),\n  setFlowers: (flowers) => set({ flowers }),\n  setButterflies: (butterflies) => set({ butterflies }),\n  setFieldButterflies: (fieldButterflies) => set({ fieldButterflies }),\n  setUnlockedFields: (unlockedFields) => set({ unlockedFields }),\n}));","size_bytes":5172},"client/src/types/index.ts":{"content":"// === MARIPOSA TYPE DEFINITIONS ===\n\nexport interface User {\n  id: number;\n  username: string;\n  credits: number;\n}\n\nexport interface Seed {\n  id: number;\n  userId: number;\n  seedId: number; // 1-7 for rarity\n  quantity: number;\n  createdAt: string;\n}\n\nexport interface PlantedField {\n  id: number;\n  userId: number;\n  fieldIndex: number; // 0-24\n  seedId: number;\n  plantedAt: string;\n  harvestAt: string;\n  isReady: boolean;\n}\n\nexport interface UserFlower {\n  id: number;\n  userId: number;\n  flowerId: number; // 1-200\n  rarity: number; // 1-7\n  quantity: number;\n  createdAt: string;\n}\n\nexport interface FieldButterfly {\n  id: number;\n  userId: number;\n  fieldIndex: number;\n  butterflyId: number; // 1-1000\n  rarity: number;\n  spawnedAt: string;\n  despawnAt: string;\n}\n\nexport interface UserButterfly {\n  id: number;\n  userId: number;\n  butterflyId: number;\n  rarity: number;\n  quantity: number;\n  collectedAt: string;\n}\n\nexport interface Bouquet {\n  id: number;\n  userId: number;\n  name: string;\n  flower1Id: number;\n  flower2Id?: number;\n  flower3Id?: number;\n  totalRarity: number;\n  createdAt: string;\n}\n\nexport interface PlacedBouquet {\n  id: number;\n  userId: number;\n  bouquetId: number;\n  fieldIndex: number;\n  placedAt: string;\n  expiresAt: string;\n}\n\nexport interface ExhibitionFrame {\n  id: number;\n  userId: number;\n  frameIndex: number; // 0-24\n  butterflyId?: number;\n  rarity?: number;\n  placedAt?: string;\n}\n\nexport interface UnlockedField {\n  id: number;\n  userId: number;\n  fieldIndex: number; // 0-49\n  unlockedAt: string;\n  unlockCost: number;\n}\n\n// === RARITY SYSTEM ===\nexport const RARITY_CONFIG = {\n  1: { name: 'Common', color: '#FFD700', weight: 45, growthTime: 75 }, // gelb/yellow\n  2: { name: 'Uncommon', color: '#32CD32', weight: 30, growthTime: 120 }, // grün/green\n  3: { name: 'Rare', color: '#1E90FF', weight: 15, growthTime: 180 }, // blau/blue\n  4: { name: 'Super-rare', color: '#40E0D0', weight: 7, growthTime: 300 }, // türkis/turquoise\n  5: { name: 'Epic', color: '#9370DB', weight: 2.5, growthTime: 450 }, // lila/purple\n  6: { name: 'Legendary', color: '#FF8C00', weight: 0.4, growthTime: 540 }, // orange\n  7: { name: 'Mythical', color: '#DC143C', weight: 0.1, growthTime: 600 }, // rot/red\n} as const;","size_bytes":2251},"server/postgresStorage.ts":{"content":"import { \n  users, \n  seeds, \n  userSeeds, \n  marketListings,\n  plantedFields,\n  userFlowers,\n  bouquets,\n  userBouquets,\n  bouquetRecipes,\n  placedBouquets,\n  userButterflies,\n  userFish,\n  userCaterpillars,\n  fieldButterflies,\n  fieldFlowers,\n  fieldCaterpillars,\n  fedCaterpillars as fedCaterpillarsTable,\n  userVipButterflies,\n  exhibitionFrames,\n  exhibitionButterflies,\n  exhibitionVipButterflies,\n  passiveIncomeLog,\n  exhibitionFrameLikes,\n  weeklyChallenges,\n  weeklyChallengeProgress,\n  challengeDonations,\n  challengeRewards,\n  unlockedFields,\n  sunSpawns,\n  pondFeedingProgressTable,\n  fieldFish,\n  aquariumTanks,\n  aquariumFish,\n  mariePosaTracker,\n  dailyItems,\n  dailyRedemptions,\n  castleUnlockedParts,\n  castleGridState,\n  userUnlockedFeatures,\n  collectionStats,\n  userNotifications,\n  type User, \n  type Seed, \n  type UserSeed, \n  type MarketListing,\n  type PlantedField,\n  type CreateMarketListingRequest,\n  type BuyListingRequest,\n  type PlantSeedRequest,\n  type HarvestFieldRequest,\n  type UserFlower,\n  type Bouquet,\n  type UserBouquet,\n  type BouquetRecipe,\n  type PlacedBouquet,\n  type UserButterfly,\n  type UserFish,\n  type UserCaterpillar,\n  type FieldButterfly,\n  type UserVipButterfly,\n  type ExhibitionFrame,\n  type ExhibitionButterfly,\n  type ExhibitionVipButterfly,\n  type PassiveIncomeLog,\n  type CreateBouquetRequest,\n  type PlaceBouquetRequest,\n  type UnlockedField,\n  type UnlockFieldRequest,\n  type WeeklyChallenge,\n  type ChallengeDonation,\n  type ChallengeReward,\n  type DonateChallengeFlowerRequest,\n  type AquariumTank,\n  type AquariumFish,\n  type DailyItems,\n  type CastleUnlockedPart,\n  type NewCastleUnlockedPart,\n  type CollectionStats,\n  type NewCollectionStats,\n  type CastleGridState,\n  type NewCastleGridState,\n  type UserNotification,\n  insertUserSchema\n} from \"@shared/schema\";\nimport { eq, ilike, and, lt, gt, inArray, sql, desc } from \"drizzle-orm\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { generateRandomFlower, generateRandomButterfly, getGrowthTime, getRandomRarity, generateLatinFlowerName, generateGermanButterflyName, generateLatinCaterpillarName, generateLatinFishName, type RarityTier } from \"@shared/rarity\";\nimport { generateBouquetName, calculateAverageRarity, getBouquetSeedDrop } from './bouquet';\nimport { initializeCreatureSystems, generateRandomFish, generateRandomCaterpillar, getFishRarity, getCaterpillarRarity, getRandomRarity as getRandomCreatureRarity } from './creatures';\n\n/**\n * PostgreSQL-only Storage Implementation\n * Direct database operations without memory caching\n */\nexport class PostgresStorage {\n  private db: any;\n\n  constructor() {\n    if (!process.env.DATABASE_URL) {\n      throw new Error('DATABASE_URL is required for PostgreSQL storage');\n    }\n    const sql = neon(process.env.DATABASE_URL);\n    this.db = drizzle(sql);\n    console.log('🗄️ PostgreSQL-only storage initialized');\n    \n    // Initialize basic seeds if they don't exist\n    this.initializeSeeds();\n    \n    // Initialize starter fields for existing users\n    this.initializeStarterFields();\n    \n    // Initialize creature systems (Fish and Caterpillars)\n    this.initializeCreaturesSystems();\n    \n    // Start butterfly lifecycle service\n  }\n\n  /**\n   * Update collection statistics when a user obtains an item\n   * This tracks lifetime acquisition counts for the encyclopedia\n   * Uses UPSERT to handle race conditions safely\n   */\n  private async updateCollectionStats(\n    userId: number, \n    itemType: 'flowers' | 'butterflies' | 'caterpillars' | 'fish', // Using plural forms to match schema\n    itemId: number,\n    quantity: number = 1\n  ): Promise<void> {\n    try {\n      const now = new Date();\n      \n      // Use UPSERT to handle race conditions safely\n      await this.db\n        .insert(collectionStats)\n        .values({\n          userId,\n          itemType,\n          itemId,\n          totalObtained: quantity,\n          firstObtainedAt: now,\n          lastObtainedAt: now\n        })\n        .onConflictDoUpdate({\n          target: [collectionStats.userId, collectionStats.itemType, collectionStats.itemId],\n          set: {\n            totalObtained: sql`${collectionStats.totalObtained} + ${quantity}`,\n            lastObtainedAt: now,\n            updatedAt: now\n          }\n        });\n    } catch (error) {\n      console.error(`Failed to update collection stats for ${itemType} ${itemId}:`, error);\n    }\n  }\n\n  /**\n   * Idempotent collection stats update for backfill operations\n   * Sets totalObtained to current inventory value instead of incrementing\n   * Safe to run multiple times without inflating counts\n   */\n  private async updateCollectionStatsForBackfill(\n    userId: number, \n    itemType: 'flowers' | 'butterflies' | 'caterpillars' | 'fish',\n    itemId: number,\n    currentInventoryQuantity: number\n  ): Promise<void> {\n    try {\n      const now = new Date();\n      \n      // Use UPSERT with GREATEST to ensure we don't decrease existing higher values\n      // This handles edge cases where collection stats might already have higher values\n      await this.db\n        .insert(collectionStats)\n        .values({\n          userId,\n          itemType,\n          itemId,\n          totalObtained: currentInventoryQuantity,\n          firstObtainedAt: now,\n          lastObtainedAt: now\n        })\n        .onConflictDoUpdate({\n          target: [collectionStats.userId, collectionStats.itemType, collectionStats.itemId],\n          set: {\n            // Use GREATEST to ensure we don't decrease existing values in case of legitimate higher counts\n            totalObtained: sql`GREATEST(${collectionStats.totalObtained}, ${currentInventoryQuantity})`,\n            lastObtainedAt: now,\n            updatedAt: now\n          }\n        });\n    } catch (error) {\n      console.error(`Failed to update collection stats for backfill ${itemType} ${itemId}:`, error);\n    }\n  }\n\n  /**\n   * Get user's lifetime collection statistics for encyclopedia\n   */\n  async getUserCollectionStats(userId: number, itemType?: string): Promise<CollectionStats[]> {\n    try {\n      let query = this.db\n        .select()\n        .from(collectionStats)\n        .where(eq(collectionStats.userId, userId));\n\n      // Filter by item type if provided\n      if (itemType && ['flowers', 'butterflies', 'caterpillars', 'fish'].includes(itemType)) {\n        query = query.where(and(\n          eq(collectionStats.userId, userId),\n          eq(collectionStats.itemType, itemType)\n        ));\n      }\n\n      const stats = await query;\n      console.log(`📊 Found ${stats.length} collection stats for user ${userId}, type: ${itemType || 'all'}`);\n      return stats;\n    } catch (error) {\n      console.error('📊 Error getting collection stats:', error);\n      return [];\n    }\n  }\n\n  private async initializeSeeds() {\n    try {\n      // Check if seeds exist\n      const existingSeeds = await this.db.select().from(seeds);\n      \n      if (existingSeeds.length === 0) {\n        console.log('🌱 Initializing basic seeds...');\n        \n        // Create basic seeds for all rarity tiers\n        const basicSeeds = [\n          { name: 'Gelbe Samen', rarity: 'common', price: 10, description: 'Gewöhnliche gelbe Samen' },\n          { name: 'Grüne Samen', rarity: 'uncommon', price: 25, description: 'Ungewöhnliche grüne Samen' },\n          { name: 'Blaue Samen', rarity: 'rare', price: 50, description: 'Seltene blaue Samen' },\n          { name: 'Türkise Samen', rarity: 'super-rare', price: 100, description: 'Super seltene türkise Samen' },\n          { name: 'Lila Samen', rarity: 'epic', price: 200, description: 'Epische lila Samen' },\n          { name: 'Orange Samen', rarity: 'legendary', price: 500, description: 'Legendäre orange Samen' },\n          { name: 'Rote Samen', rarity: 'mythical', price: 1000, description: 'Mythische rote Samen' }\n        ];\n        \n        await this.db.insert(seeds).values(basicSeeds);\n        console.log(`🌱 Created ${basicSeeds.length} basic seeds in database`);\n      }\n    } catch (error) {\n      console.error('Failed to initialize seeds:', error);\n    }\n  }\n\n  private async initializeStarterFields() {\n    try {\n      // Check if unlocked_fields table exists and initialize starter fields\n      // Exclude lastActiveAt until migration completes\n      const allUsers = await this.db.select({\n        id: users.id,\n        username: users.username,\n        credits: users.credits,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        lastPassiveIncomeAt: users.lastPassiveIncomeAt\n      }).from(users);\n      \n      for (const user of allUsers) {\n        const existingUnlockedFields = await this.db\n          .select()\n          .from(unlockedFields)\n          .where(eq(unlockedFields.userId, user.id));\n        \n        // If user has no unlocked fields, give them starter fields (0, 1, 10, 11)\n        if (existingUnlockedFields.length === 0) {\n          const starterFields = [0, 1, 10, 11]; // Field indices 0,1,10,11 = Field IDs 1,2,11,12\n          \n          for (const fieldIndex of starterFields) {\n            await this.db.insert(unlockedFields).values({\n              userId: user.id,\n              fieldIndex,\n              cost: 0, // Free starter fields\n            });\n          }\n          \n          console.log(`🌱 Initialized starter fields for user ${user.username} (ID: ${user.id})`);\n        }\n      }\n    } catch (error) {\n      console.error('Error initializing starter fields:', error);\n      // This is OK if table doesn't exist yet\n    }\n  }\n\n  private async initializeCreaturesSystems() {\n    try {\n      console.log('🌊 Initializing Fish and Caterpillar systems...');\n      await initializeCreatureSystems();\n      console.log('🌊 Creature systems initialization complete');\n    } catch (error) {\n      console.error('Failed to initialize creature systems:', error);\n    }\n  }\n\n  async canSellCaterpillar(caterpillarId: number): Promise<{ canSell: boolean; timeRemainingMs: number }> {\n    try {\n      // Get caterpillar from user_caterpillars (regular caterpillars)\n      const caterpillar = await this.db\n        .select()\n        .from(userCaterpillars)\n        .where(eq(userCaterpillars.id, caterpillarId));\n      \n      if (caterpillar.length === 0) {\n        return { canSell: false, timeRemainingMs: 0 };\n      }\n      \n      // Regular caterpillars can be sold immediately (no waiting time)\n      // Only field caterpillars from pond feeding would have waiting time\n      return {\n        canSell: true,\n        timeRemainingMs: 0\n      };\n    } catch (error) {\n      console.error('🐛 Error checking caterpillar sell status:', error);\n      return { canSell: false, timeRemainingMs: 0 };\n    }\n  }\n\n  async sellCaterpillar(userId: number, caterpillarId: number): Promise<{ success: boolean; message?: string; creditsEarned?: number }> {\n    try {\n      console.log(`🐛 Selling caterpillar ${caterpillarId} for user ${userId}`);\n      \n      // Check if caterpillar can be sold\n      const sellStatus = await this.canSellCaterpillar(caterpillarId);\n      if (!sellStatus.canSell) {\n        return { success: false, message: 'Raupe kann noch nicht verkauft werden!' };\n      }\n      \n      // Get caterpillar data\n      const caterpillar = await this.db\n        .select()\n        .from(userCaterpillars)\n        .where(and(\n          eq(userCaterpillars.id, caterpillarId),\n          eq(userCaterpillars.userId, userId)\n        ));\n      \n      if (caterpillar.length === 0) {\n        return { success: false, message: 'Raupe nicht gefunden!' };\n      }\n      \n      const caterpillarData = caterpillar[0];\n      \n      // Calculate price (85% of butterfly prices)\n      const price = this.getCaterpillarSellPrice(caterpillarData.caterpillarRarity);\n      \n      // Decrease quantity or remove if quantity reaches 0\n      const newQuantity = caterpillarData.quantity - 1;\n      \n      if (newQuantity <= 0) {\n        // Remove caterpillar completely\n        await this.db\n          .delete(userCaterpillars)\n          .where(eq(userCaterpillars.id, caterpillarId));\n      } else {\n        // Decrease quantity\n        await this.db\n          .update(userCaterpillars)\n          .set({ quantity: newQuantity })\n          .where(eq(userCaterpillars.id, caterpillarId));\n      }\n      \n      // Add credits to user\n      const user = await this.db\n        .select()\n        .from(users)\n        .where(eq(users.id, userId));\n      \n      if (user.length > 0) {\n        await this.db\n          .update(users)\n          .set({ credits: user[0].credits + price })\n          .where(eq(users.id, userId));\n      }\n      \n      console.log(`🐛 Caterpillar ${caterpillarData.caterpillarName} sold for ${price} credits`);\n      return { success: true, creditsEarned: price };\n    } catch (error) {\n      console.error('🐛 Error selling caterpillar:', error);\n      return { success: false, message: 'Datenbankfehler beim Verkauf' };\n    }\n  }\n\n  // ==================== FISH MANAGEMENT ====================\n\n  async addFishToUser(userId: number, fishId: number): Promise<UserFish | null> {\n    try {\n      const fishData = await generateRandomFish(getFishRarity(fishId));\n      \n      // Add to inventory with UPSERT to prevent race conditions\n      try {\n        // Try to insert first (most common case)\n        const [newFish] = await this.db\n          .insert(userFish)\n          .values({\n            userId,\n            fishId: fishData.id,\n            fishName: fishData.name,\n            fishRarity: getFishRarity(fishData.id),\n            fishImageUrl: fishData.imageUrl,\n            quantity: 1\n          })\n          .returning();\n        console.log(`🐟 Created new fish inventory entry: ${fishData.name}`);\n        \n        // Update collection stats\n        await this.updateCollectionStats(userId, 'fish', fishData.id, 1);\n        \n        return newFish;\n      } catch (error) {\n        // If fish already exists (constraint violation), increment quantity\n        const existingFish = await this.db\n          .select()\n          .from(userFish)\n          .where(and(\n            eq(userFish.userId, userId),\n            eq(userFish.fishId, fishData.id)\n          ));\n\n        if (existingFish.length > 0) {\n          const [updatedFish] = await this.db\n            .update(userFish)\n            .set({ quantity: existingFish[0].quantity + 1 })\n            .where(eq(userFish.id, existingFish[0].id))\n            .returning();\n          console.log(`🐟 Incremented existing fish ${fishData.name} quantity to ${existingFish[0].quantity + 1}`);\n          \n          // Update collection stats\n          await this.updateCollectionStats(userId, 'fish', fishData.id, 1);\n          \n          return updatedFish;\n        } else {\n          // Fallback: re-throw error if not a constraint violation\n          throw error;\n        }\n      }\n    } catch (error) {\n      console.error('Failed to add fish to user:', error);\n      return null;\n    }\n  }\n\n  async getUserFish(userId: number): Promise<UserFish[]> {\n    return await this.db\n      .select()\n      .from(userFish)\n      .where(eq(userFish.userId, userId));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await this.db.select().from(users);\n  }\n\n  async updateFishQuantity(fishEntryId: number, newQuantity: number): Promise<void> {\n    await this.db\n      .update(userFish)\n      .set({ quantity: newQuantity })\n      .where(eq(userFish.id, fishEntryId));\n  }\n\n  async deleteFishEntry(fishEntryId: number): Promise<void> {\n    await this.db\n      .delete(userFish)\n      .where(eq(userFish.id, fishEntryId));\n  }\n\n  async consumeFish(userId: number, fishId: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      console.log(`🐟 Consuming fish ${fishId} for user ${userId}`);\n      \n      const fish = await this.db.select().from(userFish).where(\n        and(\n          eq(userFish.userId, userId),\n          eq(userFish.id, fishId)\n        )\n      ).limit(1);\n      \n      if (fish.length === 0) {\n        return { success: false, message: 'Fisch nicht gefunden' };\n      }\n      \n      const fishData = fish[0];\n      \n      if (fishData.quantity <= 0) {\n        return { success: false, message: 'Nicht genügend Fische im Inventar' };\n      }\n\n      if (fishData.quantity > 1) {\n        // Reduce quantity by 1\n        await this.db\n          .update(userFish)\n          .set({ quantity: fishData.quantity - 1 })\n          .where(eq(userFish.id, fishId));\n        console.log(`🐟 Reduced fish ${fishData.fishName} quantity to ${fishData.quantity - 1}`);\n      } else {\n        // Remove completely if quantity is 1\n        await this.db\n          .delete(userFish)\n          .where(eq(userFish.id, fishId));\n        console.log(`🐟 Removed fish ${fishData.fishName} from inventory`);\n      }\n      \n      return { success: true };\n    } catch (error) {\n      console.error('🐟 Error consuming fish:', error);\n      return { success: false, message: 'Datenbankfehler beim Verbrauchen' };\n    }\n  }\n\n  async consumeSeed(userId: number, seedId: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      console.log(`🌱 Consuming seed ${seedId} for user ${userId}`);\n      \n      const seed = await this.db.select().from(userSeeds).where(\n        and(\n          eq(userSeeds.userId, userId),\n          eq(userSeeds.id, seedId)\n        )\n      ).limit(1);\n      \n      if (seed.length === 0) {\n        return { success: false, message: 'Samen nicht gefunden' };\n      }\n      \n      const seedData = seed[0];\n      \n      if (seedData.quantity <= 0) {\n        return { success: false, message: 'Nicht genügend Samen im Inventar' };\n      }\n\n      if (seedData.quantity > 1) {\n        // Reduce quantity by 1\n        await this.db\n          .update(userSeeds)\n          .set({ quantity: seedData.quantity - 1 })\n          .where(eq(userSeeds.id, seedId));\n        console.log(`🌱 Reduced seed quantity to ${seedData.quantity - 1}`);\n      } else {\n        // Remove completely if quantity is 1\n        await this.db\n          .delete(userSeeds)\n          .where(eq(userSeeds.id, seedId));\n        console.log(`🌱 Removed seed from inventory`);\n      }\n      \n      return { success: true };\n    } catch (error) {\n      console.error('🌱 Error consuming seed:', error);\n      return { success: false, message: 'Datenbankfehler beim Verbrauchen' };\n    }\n  }\n\n  async consumeFlower(userId: number, flowerId: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      console.log(`🌸 Consuming flower ${flowerId} for user ${userId}`);\n      \n      const flower = await this.db.select().from(userFlowers).where(\n        and(\n          eq(userFlowers.userId, userId),\n          eq(userFlowers.id, flowerId)\n        )\n      ).limit(1);\n      \n      if (flower.length === 0) {\n        return { success: false, message: 'Blume nicht gefunden' };\n      }\n      \n      const flowerData = flower[0];\n      \n      if (flowerData.quantity <= 0) {\n        return { success: false, message: 'Nicht genügend Blumen im Inventar' };\n      }\n\n      if (flowerData.quantity > 1) {\n        // Reduce quantity by 1\n        await this.db\n          .update(userFlowers)\n          .set({ quantity: flowerData.quantity - 1 })\n          .where(eq(userFlowers.id, flowerId));\n        console.log(`🌸 Reduced flower ${flowerData.flowerName} quantity to ${flowerData.quantity - 1}`);\n      } else {\n        // Remove completely if quantity is 1\n        await this.db\n          .delete(userFlowers)\n          .where(eq(userFlowers.id, flowerId));\n        console.log(`🌸 Removed flower ${flowerData.flowerName} from inventory`);\n      }\n      \n      return { success: true };\n    } catch (error) {\n      console.error('🌸 Error consuming flower:', error);\n      return { success: false, message: 'Datenbankfehler beim Verbrauchen' };\n    }\n  }\n\n  // ==================== CATERPILLAR MANAGEMENT ====================\n\n  async addCaterpillarToUser(userId: number, caterpillarId: number): Promise<UserCaterpillar | null> {\n    try {\n      const caterpillarData = await generateRandomCaterpillar(getCaterpillarRarity(caterpillarId));\n      \n      // Check if user already has this caterpillar\n      const existingCaterpillar = await this.db\n        .select()\n        .from(userCaterpillars)\n        .where(and(\n          eq(userCaterpillars.userId, userId),\n          eq(userCaterpillars.caterpillarId, caterpillarData.id)\n        ));\n      \n      if (existingCaterpillar.length > 0) {\n        // Update quantity\n        const [updatedCaterpillar] = await this.db\n          .update(userCaterpillars)\n          .set({ quantity: existingCaterpillar[0].quantity + 1 })\n          .where(eq(userCaterpillars.id, existingCaterpillar[0].id))\n          .returning();\n        \n        // Update collection stats\n        await this.updateCollectionStats(userId, 'caterpillars', caterpillarData.id, 1);\n        \n        return updatedCaterpillar;\n      } else {\n        // Add new caterpillar\n        const [newCaterpillar] = await this.db\n          .insert(userCaterpillars)\n          .values({\n            userId,\n            caterpillarId: caterpillarData.id,\n            caterpillarName: caterpillarData.name,\n            caterpillarRarity: getCaterpillarRarity(caterpillarData.id),\n            caterpillarImageUrl: caterpillarData.imageUrl,\n            quantity: 1\n          })\n          .returning();\n        \n        // Update collection stats\n        await this.updateCollectionStats(userId, 'caterpillars', caterpillarData.id, 1);\n        \n        return newCaterpillar;\n      }\n    } catch (error) {\n      console.error('Failed to add caterpillar to user:', error);\n      return null;\n    }\n  }\n\n  async getUserCaterpillars(userId: number): Promise<UserCaterpillar[]> {\n    return await this.db\n      .select()\n      .from(userCaterpillars)\n      .where(eq(userCaterpillars.userId, userId));\n  }\n\n  async removeCaterpillarFromUser(userId: number, caterpillarId: number, quantity: number = 1): Promise<boolean> {\n    try {\n      console.log(`🐛 Removing ${quantity} of caterpillar ${caterpillarId} from user ${userId}`);\n      \n      // Find the user's caterpillar\n      const [userCaterpillar] = await this.db\n        .select()\n        .from(userCaterpillars)\n        .where(and(\n          eq(userCaterpillars.userId, userId),\n          eq(userCaterpillars.caterpillarId, caterpillarId)\n        ));\n\n      if (!userCaterpillar) {\n        console.log('🐛 Caterpillar not found in user inventory');\n        return false;\n      }\n\n      if (userCaterpillar.quantity < quantity) {\n        console.log('🐛 Not enough caterpillars in inventory');\n        return false;\n      }\n\n      if (userCaterpillar.quantity === quantity) {\n        // Remove the entire entry\n        await this.db\n          .delete(userCaterpillars)\n          .where(eq(userCaterpillars.id, userCaterpillar.id));\n        console.log('🐛 Removed entire caterpillar entry');\n      } else {\n        // Decrease quantity\n        await this.db\n          .update(userCaterpillars)\n          .set({ quantity: userCaterpillar.quantity - quantity })\n          .where(eq(userCaterpillars.id, userCaterpillar.id));\n        console.log(`🐛 Decreased caterpillar quantity by ${quantity}`);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to remove caterpillar from user:', error);\n      return false;\n    }\n  }\n\n  async spawnRandomFish(userId: number, fieldIndex: number): Promise<{ fishName: string; fishRarity: string }> {\n    try {\n      console.log(`🐟 Spawning fish on field ${fieldIndex} for user ${userId}`);\n      \n      // Import creatures system for proper fish generation\n      const { generateRandomFishByDistribution, getRandomRarity } = await import('./creatures');\n      const { RARITY_NAMES_DE } = await import('../shared/rarity');\n      \n      // Get random rarity based on proper distribution\n      const rarity = getRandomRarity();\n      \n      // Generate fish with correct rarity distribution\n      const fishData = await generateRandomFishByDistribution(rarity);\n      \n      // Add fish to user inventory\n      const existingFish = await this.db\n        .select()\n        .from(userFish)\n        .where(and(\n          eq(userFish.userId, userId),\n          eq(userFish.fishId, fishData.id)\n        ));\n\n      if (existingFish.length > 0) {\n        // Fish already exists, increment quantity\n        await this.db\n          .update(userFish)\n          .set({ \n            quantity: existingFish[0].quantity + 1\n          })\n          .where(eq(userFish.id, existingFish[0].id));\n        console.log(`🐟 Incremented existing fish ${fishData.name} quantity to ${existingFish[0].quantity + 1}`);\n      } else {\n        // New fish, create entry\n        await this.db.insert(userFish).values({\n          userId,\n          fishId: fishData.id,\n          fishName: fishData.name,\n          fishRarity: rarity,\n          fishImageUrl: fishData.imageUrl,\n          quantity: 1\n        });\n        console.log(`🐟 Created new fish entry: ${fishData.name} (${rarity})`);\n      }\n      \n      console.log(`🐟 Successfully spawned and saved ${fishData.name} (${rarity}) to user ${userId} inventory`);\n      \n      return {\n        fishName: fishData.name,\n        fishRarity: rarity\n      };\n    } catch (error) {\n      console.error('Failed to spawn random fish:', error);\n      return {\n        fishName: 'Unknown Fish',\n        fishRarity: 'common'\n      };\n    }\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    // Exclude lastActiveAt until database migration completes\n    const result = await this.db.select({\n      id: users.id,\n      username: users.username,\n      credits: users.credits,\n      suns: users.suns,\n      dna: users.dna,\n      tickets: users.tickets,\n      hearts: users.hearts,\n      createdAt: users.createdAt,\n      updatedAt: users.updatedAt,\n      lastPassiveIncomeAt: users.lastPassiveIncomeAt\n    }).from(users).where(eq(users.id, id));\n    return result[0] as User | undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    // Include password field for authentication - needed for login validation\n    const result = await this.db.select({\n      id: users.id,\n      username: users.username,\n      password: users.password, // 🔒 FIXED: Include password field for login validation\n      credits: users.credits,\n      createdAt: users.createdAt,\n      updatedAt: users.updatedAt,\n      lastPassiveIncomeAt: users.lastPassiveIncomeAt\n    }).from(users).where(ilike(users.username, username));\n    return result[0] as User | undefined;\n  }\n\n  async createUser(user: typeof users.$inferInsert): Promise<User> {\n    const result = await this.db.insert(users).values(user).returning();\n    const newUser = result[0] as User;\n    \n    console.log(`💾 Created new user \"${user.username}\" in PostgreSQL (ID: ${newUser.id})`);\n    \n    // Give starter seeds to new user (5 common + 3 rare seeds)\n    try {\n      await this.addSeedToInventory(newUser.id, 'common' as RarityTier, 5);\n      await this.addSeedToInventory(newUser.id, 'rare' as RarityTier, 3);\n      console.log(`🌱 Gave starter seeds to new user ${newUser.username}: 5 Common + 3 Rare`);\n    } catch (error) {\n      console.error(`Failed to give starter seeds to user ${newUser.id}:`, error);\n    }\n    \n    // Give starter fields to new user (field indices 0, 1, 10, 11)\n    try {\n      const starterFields = [0, 1, 10, 11]; // Field indices 0,1,10,11 = Field IDs 1,2,11,12\n      \n      for (const fieldIndex of starterFields) {\n        await this.db.insert(unlockedFields).values({\n          userId: newUser.id,\n          fieldIndex,\n          cost: 0, // Free starter fields\n        });\n      }\n      \n      console.log(`🌱 Gave starter fields to new user ${newUser.username}: Fields 1,2,11,12 (indices 0,1,10,11)`);\n    } catch (error) {\n      console.error(`Failed to give starter fields to user ${newUser.id}:`, error);\n    }\n    \n    return newUser;\n  }\n\n  async updateUserCredits(id: number, amount: number): Promise<User | undefined> {\n    // First get current credits\n    const currentUser = await this.getUser(id);\n    if (!currentUser) {\n      throw new Error(`User ${id} not found`);\n    }\n    \n    const newCredits = currentUser.credits + amount; // amount is a delta (change), not absolute\n    console.log(`💰 Credit Update: User ${id} hatte ${currentUser.credits} Cr, ${amount >= 0 ? '+' : ''}${amount} Cr = ${newCredits} Cr`);\n    \n    const result = await this.db\n      .update(users)\n      .set({ credits: newCredits })\n      .where(eq(users.id, id))\n      .returning({\n        id: users.id,\n        username: users.username,\n        credits: users.credits,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        lastPassiveIncomeAt: users.lastPassiveIncomeAt\n      });\n    return result[0] as User | undefined;\n  }\n\n  async updateUserSuns(id: number, amount: number): Promise<User | undefined> {\n    // First get current suns\n    const currentUser = await this.getUser(id);\n    if (!currentUser) {\n      throw new Error(`User ${id} not found`);\n    }\n    \n    const currentSuns = currentUser.suns || 100; // Default to 100 if null\n    const newSuns = currentSuns + amount; // amount is a delta (change), not absolute\n    console.log(`☀️ Suns Update: User ${id} hatte ${currentSuns} ☀️, ${amount >= 0 ? '+' : ''}${amount} ☀️ = ${newSuns} ☀️`);\n    \n    const result = await this.db\n      .update(users)\n      .set({ suns: newSuns })\n      .where(eq(users.id, id))\n      .returning({\n        id: users.id,\n        username: users.username,\n        credits: users.credits,\n        suns: users.suns,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        lastPassiveIncomeAt: users.lastPassiveIncomeAt\n      });\n    return result[0] as User | undefined;\n  }\n\n  async updateUserDna(id: number, amount: number): Promise<User | undefined> {\n    // First get current DNA\n    const currentUser = await this.getUser(id);\n    if (!currentUser) {\n      throw new Error(`User ${id} not found`);\n    }\n    \n    const currentDna = currentUser.dna || 0; // Default to 0 if null\n    const newDna = currentDna + amount; // amount is a delta (change), not absolute\n    console.log(`🧬 DNA Update: User ${id} hatte ${currentDna} DNA, ${amount >= 0 ? '+' : ''}${amount} DNA = ${newDna} DNA`);\n    \n    const result = await this.db\n      .update(users)\n      .set({ dna: newDna })\n      .where(eq(users.id, id))\n      .returning({\n        id: users.id,\n        username: users.username,\n        credits: users.credits,\n        dna: users.dna,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        lastPassiveIncomeAt: users.lastPassiveIncomeAt\n      });\n    return result[0] as User | undefined;\n  }\n\n  async updateUserTickets(id: number, amount: number): Promise<User | undefined> {\n    // First get current tickets\n    const currentUser = await this.getUser(id);\n    if (!currentUser) {\n      throw new Error(`User ${id} not found`);\n    }\n    \n    const currentTickets = currentUser.tickets || 0; // Default to 0 if null\n    const newTickets = currentTickets + amount; // amount is a delta (change), not absolute\n    console.log(`🎫 Tickets Update: User ${id} hatte ${currentTickets} Tickets, ${amount >= 0 ? '+' : ''}${amount} Tickets = ${newTickets} Tickets`);\n    \n    const result = await this.db\n      .update(users)\n      .set({ tickets: newTickets })\n      .where(eq(users.id, id))\n      .returning({\n        id: users.id,\n        username: users.username,\n        credits: users.credits,\n        tickets: users.tickets,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        lastPassiveIncomeAt: users.lastPassiveIncomeAt\n      });\n    return result[0] as User | undefined;\n  }\n\n  async updateUserHearts(id: number, amount: number): Promise<User | undefined> {\n    // First get current hearts\n    const currentUser = await this.getUser(id);\n    if (!currentUser) {\n      throw new Error(`User ${id} not found`);\n    }\n    \n    const currentHearts = currentUser.hearts || 0; // Default to 0 if null\n    const newHearts = currentHearts + amount; // amount is a delta (change), not absolute\n    console.log(`💖 Hearts Update: User ${id} hatte ${currentHearts} Herzen, ${amount >= 0 ? '+' : ''}${amount} Herzen = ${newHearts} Herzen`);\n    \n    const result = await this.db\n      .update(users)\n      .set({ hearts: newHearts })\n      .where(eq(users.id, id))\n      .returning({\n        id: users.id,\n        username: users.username,\n        credits: users.credits,\n        hearts: users.hearts,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        lastPassiveIncomeAt: users.lastPassiveIncomeAt\n      });\n    return result[0] as User | undefined;\n  }\n\n  // Market methods\n  async getMarketListings(): Promise<any[]> {\n    // Get all market listings with their copied data - only one JOIN needed for seller username\n    const listings = await this.db\n      .select({\n        id: marketListings.id,\n        sellerId: marketListings.sellerId,\n        itemType: marketListings.itemType,\n        seedId: marketListings.seedId,\n        caterpillarId: marketListings.caterpillarId,\n        flowerId: marketListings.flowerId,\n        butterflyId: marketListings.butterflyId,\n        fishId: marketListings.fishId,\n        quantity: marketListings.quantity,\n        pricePerUnit: marketListings.pricePerUnit,\n        totalPrice: marketListings.totalPrice,\n        createdAt: marketListings.createdAt,\n        sellerUsername: users.username,\n        // Item data (directly stored in market_listings - no inventory JOINs needed!)\n        seedName: marketListings.seedName,\n        seedRarity: marketListings.seedRarity,\n        caterpillarName: marketListings.caterpillarName,\n        caterpillarRarity: marketListings.caterpillarRarity,\n        caterpillarImageUrl: marketListings.caterpillarImageUrl,\n        caterpillarIdOriginal: marketListings.caterpillarIdOriginal,\n        flowerName: marketListings.flowerName,\n        flowerRarity: marketListings.flowerRarity,\n        flowerImageUrl: marketListings.flowerImageUrl,\n        flowerIdOriginal: marketListings.flowerIdOriginal,\n        butterflyName: marketListings.butterflyName,\n        butterflyRarity: marketListings.butterflyRarity,\n        butterflyImageUrl: marketListings.butterflyImageUrl,\n        butterflyIdOriginal: marketListings.butterflyIdOriginal,\n        fishName: marketListings.fishName,\n        fishRarity: marketListings.fishRarity,\n        fishImageUrl: marketListings.fishImageUrl,\n        fishIdOriginal: marketListings.fishIdOriginal,\n      })\n      .from(marketListings)\n      .leftJoin(users, eq(marketListings.sellerId, users.id))\n      .where(eq(marketListings.isActive, true));\n    \n    return listings;\n  }\n\n  async createMarketListing(sellerId: number, data: CreateMarketListingRequest): Promise<any> {\n    if (data.itemType === \"seed\") {\n      // Check if user has enough seeds\n      const userSeedsResult = await this.db\n        .select()\n        .from(userSeeds)\n        .where(and(eq(userSeeds.userId, sellerId), eq(userSeeds.seedId, data.seedId!)));\n      \n      if (userSeedsResult.length === 0 || userSeedsResult[0].quantity < data.quantity) {\n        throw new Error('Insufficient seeds');\n      }\n\n      // Create seed listing\n      const listing = await this.db.insert(marketListings).values({\n        sellerId,\n        itemType: \"seed\",\n        seedId: data.seedId!,\n        caterpillarId: null,\n        quantity: data.quantity,\n        pricePerUnit: data.pricePerUnit,\n        totalPrice: data.pricePerUnit * data.quantity\n      }).returning();\n\n      // Deduct seeds from seller\n      await this.db\n        .update(userSeeds)\n        .set({ quantity: userSeedsResult[0].quantity - data.quantity })\n        .where(and(eq(userSeeds.userId, sellerId), eq(userSeeds.seedId, data.seedId!)));\n\n      return listing[0];\n    } else if (data.itemType === \"caterpillar\") {\n      // Check if user has enough caterpillars\n      const caterpillarResult = await this.db\n        .select()\n        .from(userCaterpillars)\n        .where(and(eq(userCaterpillars.userId, sellerId), eq(userCaterpillars.id, data.caterpillarId!)));\n      \n      if (caterpillarResult.length === 0) {\n        throw new Error('Caterpillar not found');\n      }\n\n      if (caterpillarResult[0].quantity < data.quantity) {\n        throw new Error('Insufficient caterpillars');\n      }\n\n      const caterpillar = caterpillarResult[0];\n\n      // Create caterpillar listing with COPIED data (no more JOINs needed!)\n      const listing = await this.db.insert(marketListings).values({\n        sellerId,\n        itemType: \"caterpillar\",\n        quantity: data.quantity,\n        pricePerUnit: data.pricePerUnit,\n        totalPrice: data.pricePerUnit * data.quantity,\n        // Copy caterpillar data directly into listing\n        caterpillarId: data.caterpillarId!,\n        caterpillarName: caterpillar.caterpillarName,\n        caterpillarRarity: caterpillar.caterpillarRarity,\n        caterpillarImageUrl: caterpillar.caterpillarImageUrl,\n        caterpillarIdOriginal: caterpillar.caterpillarId, // Game ID\n        // Set other item fields to null\n        seedId: null,\n        seedName: null,\n        seedRarity: null,\n        flowerId: null,\n        flowerName: null,\n        flowerRarity: null,\n        flowerImageUrl: null,\n        flowerIdOriginal: null,\n        butterflyId: null,\n        butterflyName: null,\n        butterflyRarity: null,\n        butterflyImageUrl: null,\n        butterflyIdOriginal: null,\n        fishId: null,\n        fishName: null,\n        fishRarity: null,\n        fishImageUrl: null,\n        fishIdOriginal: null,\n      }).returning();\n\n      // Update caterpillar quantity in seller's inventory\n      const newQuantity = caterpillar.quantity - data.quantity;\n      if (newQuantity <= 0) {\n        // Remove caterpillar entirely if no more left\n        await this.db\n          .delete(userCaterpillars)\n          .where(eq(userCaterpillars.id, data.caterpillarId!));\n      } else {\n        // Update quantity\n        await this.db\n          .update(userCaterpillars)\n          .set({ quantity: newQuantity })\n          .where(eq(userCaterpillars.id, data.caterpillarId!));\n      }\n\n      return listing[0];\n    } else if (data.itemType === \"flower\") {\n      // Check if user has the flower\n      const flowerResult = await this.db\n        .select()\n        .from(userFlowers)\n        .where(and(eq(userFlowers.userId, sellerId), eq(userFlowers.id, data.flowerId!)));\n      \n      if (flowerResult.length === 0) {\n        throw new Error('Flower not found');\n      }\n\n      if (flowerResult[0].quantity < data.quantity) {\n        throw new Error('Insufficient flowers');\n      }\n\n      const flower = flowerResult[0];\n\n      // Create flower listing with COPIED data\n      const listing = await this.db.insert(marketListings).values({\n        sellerId,\n        itemType: \"flower\",\n        quantity: data.quantity,\n        pricePerUnit: data.pricePerUnit,\n        totalPrice: data.pricePerUnit * data.quantity,\n        // Copy flower data directly into listing\n        flowerId: data.flowerId!,\n        flowerName: flower.flowerName,\n        flowerRarity: flower.flowerRarity,\n        flowerImageUrl: flower.flowerImageUrl,\n        flowerIdOriginal: flower.flowerId, // Game ID\n        // Set other item fields to null\n        seedId: null,\n        seedName: null,\n        seedRarity: null,\n        caterpillarId: null,\n        caterpillarName: null,\n        caterpillarRarity: null,\n        caterpillarImageUrl: null,\n        caterpillarIdOriginal: null,\n        butterflyId: null,\n        butterflyName: null,\n        butterflyRarity: null,\n        butterflyImageUrl: null,\n        butterflyIdOriginal: null,\n        fishId: null,\n        fishName: null,\n        fishRarity: null,\n        fishImageUrl: null,\n        fishIdOriginal: null,\n      }).returning();\n\n      // Update flower quantity\n      const newQuantity = flower.quantity - data.quantity;\n      if (newQuantity <= 0) {\n        await this.db\n          .delete(userFlowers)\n          .where(eq(userFlowers.id, data.flowerId!));\n      } else {\n        await this.db\n          .update(userFlowers)\n          .set({ quantity: newQuantity })\n          .where(eq(userFlowers.id, data.flowerId!));\n      }\n\n      return listing[0];\n    } else if (data.itemType === \"butterfly\") {\n      // Check if user has the butterfly (from inventory, not exhibition)\n      const butterflyResult = await this.db\n        .select()\n        .from(userButterflies)\n        .where(and(eq(userButterflies.userId, sellerId), eq(userButterflies.id, data.butterflyId!)));\n      \n      if (butterflyResult.length === 0) {\n        throw new Error('Butterfly not found or in exhibition');\n      }\n\n      // Butterflies are unique items (quantity = 1)\n      if (data.quantity !== 1) {\n        throw new Error('Butterflies can only be sold one at a time');\n      }\n\n      const butterfly = butterflyResult[0];\n\n      // Create butterfly listing with COPIED data\n      const listing = await this.db.insert(marketListings).values({\n        sellerId,\n        itemType: \"butterfly\",\n        quantity: 1,\n        pricePerUnit: data.pricePerUnit,\n        totalPrice: data.pricePerUnit,\n        // Copy butterfly data directly into listing\n        butterflyId: data.butterflyId!,\n        butterflyName: butterfly.butterflyName,\n        butterflyRarity: butterfly.butterflyRarity,\n        butterflyImageUrl: butterfly.butterflyImageUrl,\n        butterflyIdOriginal: butterfly.butterflyId, // Game ID\n        // Set other item fields to null\n        seedId: null,\n        seedName: null,\n        seedRarity: null,\n        caterpillarId: null,\n        caterpillarName: null,\n        caterpillarRarity: null,\n        caterpillarImageUrl: null,\n        caterpillarIdOriginal: null,\n        flowerId: null,\n        flowerName: null,\n        flowerRarity: null,\n        flowerImageUrl: null,\n        flowerIdOriginal: null,\n        fishId: null,\n        fishName: null,\n        fishRarity: null,\n        fishImageUrl: null,\n        fishIdOriginal: null,\n      }).returning();\n\n      // Remove butterfly from seller's inventory\n      await this.db\n        .delete(userButterflies)\n        .where(eq(userButterflies.id, data.butterflyId!));\n\n      return listing[0];\n    } else if (data.itemType === \"fish\") {\n      // Check if user has the fish\n      const fishResult = await this.db\n        .select()\n        .from(userFish)\n        .where(and(eq(userFish.userId, sellerId), eq(userFish.id, data.fishId!)));\n      \n      if (fishResult.length === 0) {\n        throw new Error('Fish not found');\n      }\n\n      if (fishResult[0].quantity < data.quantity) {\n        throw new Error('Insufficient fish');\n      }\n\n      const fish = fishResult[0];\n\n      // Create fish listing with COPIED data\n      const listing = await this.db.insert(marketListings).values({\n        sellerId,\n        itemType: \"fish\",\n        quantity: data.quantity,\n        pricePerUnit: data.pricePerUnit,\n        totalPrice: data.pricePerUnit * data.quantity,\n        // Copy fish data directly into listing\n        fishId: data.fishId!,\n        fishName: fish.fishName,\n        fishRarity: fish.fishRarity,\n        fishImageUrl: fish.fishImageUrl,\n        fishIdOriginal: fish.fishId, // Game ID\n        // Set other item fields to null\n        seedId: null,\n        seedName: null,\n        seedRarity: null,\n        caterpillarId: null,\n        caterpillarName: null,\n        caterpillarRarity: null,\n        caterpillarImageUrl: null,\n        caterpillarIdOriginal: null,\n        flowerId: null,\n        flowerName: null,\n        flowerRarity: null,\n        flowerImageUrl: null,\n        flowerIdOriginal: null,\n        butterflyId: null,\n        butterflyName: null,\n        butterflyRarity: null,\n        butterflyImageUrl: null,\n        butterflyIdOriginal: null,\n      }).returning();\n\n      // Update fish quantity\n      const newQuantity = fish.quantity - data.quantity;\n      if (newQuantity <= 0) {\n        await this.db\n          .delete(userFish)\n          .where(eq(userFish.id, data.fishId!));\n      } else {\n        await this.db\n          .update(userFish)\n          .set({ quantity: newQuantity })\n          .where(eq(userFish.id, data.fishId!));\n      }\n\n      return listing[0];\n    } else {\n      throw new Error('Invalid item type');\n    }\n  }\n\n  async buyMarketListing(buyerId: number, data: BuyListingRequest): Promise<{ success: boolean; message?: string }> {\n    try {\n      console.log(`🛒 Buying listing ${data.listingId} for user ${buyerId}, quantity: ${data.quantity}`);\n      \n      // Step 1: Get listing\n      const listings = await this.db\n        .select()\n        .from(marketListings)\n        .where(eq(marketListings.id, data.listingId));\n\n      if (listings.length === 0) {\n        console.log(`❌ Listing ${data.listingId} not found`);\n        return { success: false, message: 'Listing not found' };\n      }\n\n      const listing = listings[0];\n      const totalPrice = listing.pricePerUnit * data.quantity;\n      \n      console.log(`💰 Total price: ${totalPrice} credits for ${data.quantity} ${listing.itemType}(s)`);\n\n      // Step 2: Validate buyer credits\n      const buyer = await this.getUser(buyerId);\n      if (!buyer) {\n        return { success: false, message: 'Buyer not found' };\n      }\n      \n      if (buyer.credits < totalPrice) {\n        return { success: false, message: 'Insufficient credits' };\n      }\n\n      // Step 3: Validate listing data completeness\n      const validationResult = this.validateListingData(listing);\n      if (!validationResult.isValid) {\n        return { success: false, message: validationResult.message };\n      }\n\n      // Step 4: Process the purchase\n      const purchaseResult = await this.processPurchase(listing, buyerId, data.quantity, totalPrice, buyer);\n      if (!purchaseResult.success) {\n        return purchaseResult;\n      }\n\n      // Step 5: Update or remove listing\n      await this.updateListingAfterPurchase(listing, data.quantity);\n\n      console.log(`✅ Purchase completed successfully`);\n      return { success: true };\n\n    } catch (error) {\n      console.error('❌ Error in buyMarketListing:', error);\n      return { success: false, message: 'Purchase failed due to system error' };\n    }\n  }\n\n  private validateListingData(listing: any): { isValid: boolean; message?: string } {\n    switch (listing.itemType) {\n      case \"seed\":\n        if (!listing.seedName || !listing.seedRarity) {\n          return { isValid: false, message: 'Seed data incomplete' };\n        }\n        break;\n      case \"caterpillar\":\n        if (!listing.caterpillarName || !listing.caterpillarRarity) {\n          return { isValid: false, message: 'Caterpillar data incomplete' };\n        }\n        break;\n      case \"flower\":\n        if (!listing.flowerName || !listing.flowerRarity) {\n          return { isValid: false, message: 'Flower data incomplete' };\n        }\n        break;\n      case \"butterfly\":\n        if (!listing.butterflyName || !listing.butterflyRarity) {\n          return { isValid: false, message: 'Butterfly data incomplete' };\n        }\n        break;\n      case \"fish\":\n        if (!listing.fishName || !listing.fishRarity) {\n          return { isValid: false, message: 'Fish data incomplete' };\n        }\n        break;\n      default:\n        return { isValid: false, message: 'Unknown item type' };\n    }\n    return { isValid: true };\n  }\n\n  private async processPurchase(listing: any, buyerId: number, quantity: number, totalPrice: number, buyer: any): Promise<{ success: boolean; message?: string }> {\n    try {\n      // Transfer credits between seller and buyer (skip if self-purchase)\n      if (listing.sellerId === buyerId) {\n        console.log(`🔄 Self-purchase detected: No credit transfer needed`);\n      } else {\n        await this.transferCredits(listing.sellerId, buyerId, totalPrice, buyer);\n      }\n\n      // Add item to buyer's inventory based on type\n      switch (listing.itemType) {\n        case \"seed\":\n          // Check if user already has this seed type\n          const existingSeed = await this.db.select()\n            .from(userSeeds)\n            .where(and(eq(userSeeds.userId, buyerId), eq(userSeeds.seedId, listing.seedId || 0)))\n            .limit(1);\n          \n          if (existingSeed.length > 0) {\n            // Update existing seed quantity\n            await this.db.update(userSeeds)\n              .set({ quantity: existingSeed[0].quantity + quantity })\n              .where(eq(userSeeds.id, existingSeed[0].id));\n          } else {\n            // Create new seed entry\n            await this.db.insert(userSeeds).values({\n              userId: buyerId,\n              seedId: listing.seedId || 0,\n              quantity: quantity\n            });\n          }\n          break;\n          \n        case \"caterpillar\":\n          if (quantity !== 1) {\n            return { success: false, message: 'Caterpillars can only be purchased one at a time' };\n          }\n          await this.db.insert(userCaterpillars).values({\n            userId: buyerId,\n            caterpillarId: listing.caterpillarIdOriginal || 0,\n            caterpillarName: listing.caterpillarName,\n            caterpillarRarity: listing.caterpillarRarity,\n            caterpillarImageUrl: listing.caterpillarImageUrl || '',\n            quantity: 1\n          });\n          \n          // Update collection stats for purchased caterpillar\n          await this.updateCollectionStats(buyerId, 'caterpillars', listing.caterpillarIdOriginal || 0, 1);\n          break;\n          \n        case \"flower\":\n          await this.addFlowerToInventoryWithQuantity(\n            buyerId, \n            listing.flowerIdOriginal || 0, \n            listing.flowerName, \n            listing.flowerRarity, \n            listing.flowerImageUrl || '', \n            quantity\n          );\n          break;\n          \n        case \"butterfly\":\n          if (quantity !== 1) {\n            return { success: false, message: 'Butterflies can only be purchased one at a time' };\n          }\n          await this.db.insert(userButterflies).values({\n            userId: buyerId,\n            butterflyId: listing.butterflyIdOriginal || 0,\n            butterflyName: listing.butterflyName,\n            butterflyRarity: listing.butterflyRarity,\n            butterflyImageUrl: listing.butterflyImageUrl || '',\n            quantity: 1\n          });\n          \n          // Update collection stats for purchased butterfly\n          await this.updateCollectionStats(buyerId, 'butterflies', listing.butterflyIdOriginal || 0, 1);\n          break;\n          \n        case \"fish\":\n          await this.addFishToInventoryWithQuantity(\n            buyerId, \n            listing.fishIdOriginal || 0, \n            listing.fishName, \n            listing.fishRarity, \n            listing.fishImageUrl || '', \n            quantity\n          );\n          break;\n          \n        default:\n          return { success: false, message: 'Unsupported item type' };\n      }\n\n      console.log(`📦 Added ${quantity} ${listing.itemType}(s) to buyer ${buyerId}`);\n      return { success: true };\n\n    } catch (error) {\n      console.error('❌ Error processing purchase:', error);\n      return { success: false, message: 'Failed to process purchase' };\n    }\n  }\n\n  private async transferCredits(sellerId: number, buyerId: number, amount: number, buyer: any): Promise<void> {\n    // Add credits to seller\n    const seller = await this.getUser(sellerId);\n    if (seller) {\n      await this.db\n        .update(users)\n        .set({ credits: seller.credits + amount })\n        .where(eq(users.id, sellerId));\n      console.log(`💰 Seller ${sellerId}: +${amount} credits`);\n    }\n\n    // Deduct credits from buyer\n    await this.db\n      .update(users)\n      .set({ credits: buyer.credits - amount })\n      .where(eq(users.id, buyerId));\n    console.log(`💰 Buyer ${buyerId}: -${amount} credits`);\n  }\n\n  private async updateListingAfterPurchase(listing: any, purchaseQuantity: number): Promise<void> {\n    if (listing.quantity > purchaseQuantity) {\n      // Partial purchase - update quantity\n      await this.db\n        .update(marketListings)\n        .set({ quantity: listing.quantity - purchaseQuantity })\n        .where(eq(marketListings.id, listing.id));\n      console.log(`📋 Updated listing ${listing.id}: quantity ${listing.quantity} → ${listing.quantity - purchaseQuantity}`);\n    } else {\n      // Complete purchase - remove listing\n      await this.db\n        .delete(marketListings)\n        .where(eq(marketListings.id, listing.id));\n      console.log(`🗑️ Removed completed listing ${listing.id}`);\n    }\n  }\n\n  async getUserSeeds(userId: number): Promise<any[]> {\n    const result = await this.db\n      .select({\n        id: userSeeds.id,\n        userId: userSeeds.userId,\n        seedId: userSeeds.seedId,\n        quantity: userSeeds.quantity,\n        createdAt: userSeeds.createdAt,\n        seedName: seeds.name,\n        seedRarity: seeds.rarity,\n        seedPrice: seeds.price,\n        seedDescription: seeds.description,\n        seedImageUrl: seeds.imageUrl\n      })\n      .from(userSeeds)\n      .leftJoin(seeds, eq(userSeeds.seedId, seeds.id))\n      .where(eq(userSeeds.userId, userId));\n    \n    return result;\n  }\n\n  // Garden methods\n  async plantSeed(userId: number, data: PlantSeedRequest): Promise<{ success: boolean; message?: string }> {\n    // Frontend handles pond field restrictions - backend just processes the request\n    \n    // Check if user has seeds\n    const userSeedsResult = await this.db\n      .select()\n      .from(userSeeds)\n      .where(and(eq(userSeeds.userId, userId), eq(userSeeds.seedId, data.seedId)));\n\n    if (userSeedsResult.length === 0 || userSeedsResult[0].quantity < 1) {\n      return { success: false, message: 'No seeds available' };\n    }\n\n    // Check if field is empty\n    const existingField = await this.db\n      .select()\n      .from(plantedFields)\n      .where(and(eq(plantedFields.userId, userId), eq(plantedFields.fieldIndex, data.fieldIndex)));\n\n    if (existingField.length > 0) {\n      return { success: false, message: 'Field already occupied' };\n    }\n\n    // Get seed info for random flower generation\n    const seedInfo = await this.db\n      .select()\n      .from(seeds)\n      .where(eq(seeds.id, data.seedId));\n\n    if (seedInfo.length === 0) {\n      return { success: false, message: 'Invalid seed' };\n    }\n\n    // Generate random flower\n    const randomFlower = generateRandomFlower(seedInfo[0].rarity as RarityTier);\n    \n    if (!randomFlower) {\n      return { success: false, message: 'Failed to generate flower' };\n    }\n\n    // Plant seed\n    await this.db.insert(plantedFields).values({\n      userId,\n      fieldIndex: data.fieldIndex,\n      seedId: data.seedId,\n      seedRarity: seedInfo[0].rarity,\n      plantedAt: new Date(),\n      isGrown: false,\n      flowerId: randomFlower.id,\n      flowerName: randomFlower.name,\n      flowerImageUrl: randomFlower.imageUrl\n    });\n\n    // Deduct seed\n    await this.db\n      .update(userSeeds)\n      .set({ quantity: userSeedsResult[0].quantity - 1 })\n      .where(and(eq(userSeeds.userId, userId), eq(userSeeds.seedId, data.seedId)));\n\n    return { success: true };\n  }\n\n  async getPlantedFields(userId: number): Promise<PlantedField[]> {\n    const result = await this.db\n      .select()\n      .from(plantedFields)\n      .where(eq(plantedFields.userId, userId));\n    \n    return result;\n  }\n\n  async harvestField(userId: number, data: HarvestFieldRequest): Promise<{ success: boolean; message?: string }> {\n    const field = await this.db\n      .select()\n      .from(plantedFields)\n      .where(and(eq(plantedFields.userId, userId), eq(plantedFields.fieldIndex, data.fieldIndex)));\n\n    if (field.length === 0) {\n      return { success: false, message: 'No planted field found' };\n    }\n\n    const plantedField = field[0];\n    const growthTime = getGrowthTime(plantedField.seedRarity as RarityTier);\n    const now = new Date();\n    const plantedTime = new Date(plantedField.plantedAt);\n    const isGrown = (now.getTime() - plantedTime.getTime()) >= growthTime * 1000;\n\n    if (!isGrown) {\n      return { success: false, message: 'Flower is not ready for harvest yet' };\n    }\n\n    // Add flower to inventory\n    await this.addFlowerToInventory(\n      userId,\n      plantedField.flowerId!,\n      plantedField.flowerName!,\n      plantedField.seedRarity!,\n      plantedField.flowerImageUrl!\n    );\n\n    // Remove planted field\n    await this.db\n      .delete(plantedFields)\n      .where(and(eq(plantedFields.userId, userId), eq(plantedFields.fieldIndex, data.fieldIndex)));\n\n    return { success: true };\n  }\n\n  // Flower inventory methods\n  async getUserFlowers(userId: number): Promise<UserFlower[]> {\n    const result = await this.db\n      .select()\n      .from(userFlowers)\n      .where(eq(userFlowers.userId, userId));\n    \n    return result;\n  }\n\n  async addFlowerToInventory(userId: number, flowerId: number, flowerName: string, flowerRarity: string, flowerImageUrl: string): Promise<void> {\n    // Check if user already has this flower\n    const existingFlower = await this.db\n      .select()\n      .from(userFlowers)\n      .where(and(eq(userFlowers.userId, userId), eq(userFlowers.flowerId, flowerId)))\n      .limit(1);\n\n    if (existingFlower.length > 0) {\n      // Increase quantity of existing flower\n      await this.db\n        .update(userFlowers)\n        .set({ quantity: existingFlower[0].quantity + 1 })\n        .where(eq(userFlowers.id, existingFlower[0].id));\n      \n      console.log(`💾 Increased ${flowerName} quantity to ${existingFlower[0].quantity + 1} for user ${userId}`);\n      \n      // Update collection stats\n      await this.updateCollectionStats(userId, 'flowers', flowerId, 1);\n    } else {\n      // Create new flower entry\n      await this.db.insert(userFlowers).values({\n        userId,\n        flowerId,\n        rarity: this.getRarityInteger(flowerRarity),\n        flowerName,\n        flowerRarity,\n        flowerImageUrl,\n        quantity: 1\n      });\n      console.log(`💾 Added new flower ${flowerName} for user ${userId} to PostgreSQL`);\n      \n      // Update collection stats\n      await this.updateCollectionStats(userId, 'flowers', flowerId, 1);\n    }\n  }\n\n  async addFlowerToInventoryWithQuantity(userId: number, flowerId: number, flowerName: string, flowerRarity: string, flowerImageUrl: string, quantity: number): Promise<void> {\n    // Check if user already has this flower\n    const existingFlower = await this.db\n      .select()\n      .from(userFlowers)\n      .where(and(eq(userFlowers.userId, userId), eq(userFlowers.flowerId, flowerId)))\n      .limit(1);\n\n    if (existingFlower.length > 0) {\n      // Increase quantity of existing flower\n      await this.db\n        .update(userFlowers)\n        .set({ quantity: existingFlower[0].quantity + quantity })\n        .where(eq(userFlowers.id, existingFlower[0].id));\n      \n      console.log(`💾 Increased ${flowerName} quantity to ${existingFlower[0].quantity + quantity} for user ${userId}`);\n      \n      // Update collection stats\n      await this.updateCollectionStats(userId, 'flowers', flowerId, quantity);\n    } else {\n      // Add new flower to inventory\n      await this.db\n        .insert(userFlowers)\n        .values({\n          userId,\n          flowerId,\n          rarity: this.getRarityInteger(flowerRarity),\n          flowerName,\n          flowerRarity,\n          flowerImageUrl,\n          quantity\n        });\n      \n      console.log(`💾 Added new flower ${flowerName} (x${quantity}) to user ${userId} inventory`);\n      \n      // Update collection stats\n      await this.updateCollectionStats(userId, 'flowers', flowerId, quantity);\n    }\n  }\n\n  async addFishToInventoryWithQuantity(userId: number, fishId: number, fishName: string, fishRarity: string, fishImageUrl: string, quantity: number): Promise<void> {\n    // Check if user already has this fish type\n    const existingFish = await this.db\n      .select()\n      .from(userFish)\n      .where(and(eq(userFish.userId, userId), eq(userFish.fishId, fishId)))\n      .limit(1);\n\n    if (existingFish.length > 0) {\n      // Increase quantity of existing fish\n      await this.db\n        .update(userFish)\n        .set({ quantity: existingFish[0].quantity + quantity })\n        .where(eq(userFish.id, existingFish[0].id));\n      \n      console.log(`🐟 Increased ${fishName} quantity to ${existingFish[0].quantity + quantity} for user ${userId}`);\n      \n      // Update collection stats\n      await this.updateCollectionStats(userId, 'fish', fishId, quantity);\n    } else {\n      // Add new fish to inventory\n      await this.db\n        .insert(userFish)\n        .values({\n          userId,\n          fishId,\n          fishName,\n          fishRarity,\n          fishImageUrl,\n          quantity\n        });\n      \n      console.log(`🐟 Added new fish ${fishName} (x${quantity}) to user ${userId} inventory`);\n      \n      // Update collection stats\n      await this.updateCollectionStats(userId, 'fish', fishId, quantity);\n    }\n  }\n\n  private getRarityInteger(rarity: string): number {\n    switch (rarity.toLowerCase()) {\n      case 'common': return 1;\n      case 'uncommon': return 2;\n      case 'rare': return 3;\n      case 'super-rare': return 4;\n      case 'epic': return 5;\n      case 'legendary': return 6;\n      case 'mythical': return 7;\n      default: return 1; // Default to common\n    }\n  }\n\n  // NEW: Implement correct addSeedToInventory from interface\n  async addSeedToInventory(userId: number, rarity: RarityTier, quantity: number): Promise<void> {\n    // Find seed ID by rarity\n    const seedResult = await this.db\n      .select()\n      .from(seeds)\n      .where(eq(seeds.rarity, rarity));\n    \n    if (seedResult.length === 0) {\n      throw new Error(`No seed found for rarity: ${rarity}`);\n    }\n    \n    const seedId = seedResult[0].id;\n    await this.addSeedToInventoryById(userId, seedId, quantity);\n  }\n\n  async addSeedToInventoryById(userId: number, seedId: number, quantity: number): Promise<void> {\n    // Check if user already has this seed type\n    const existing = await this.db\n      .select()\n      .from(userSeeds)\n      .where(and(eq(userSeeds.userId, userId), eq(userSeeds.seedId, seedId)));\n\n    if (existing.length > 0) {\n      // Update quantity\n      await this.db\n        .update(userSeeds)\n        .set({ quantity: existing[0].quantity + quantity })\n        .where(and(eq(userSeeds.userId, userId), eq(userSeeds.seedId, seedId)));\n    } else {\n      // Create new entry\n      await this.db.insert(userSeeds).values({\n        userId,\n        seedId,\n        quantity\n      });\n    }\n  }\n\n  // Create bouquet from 3 flowers\n  async createBouquet(userId: number, data: CreateBouquetRequest, skipCreditDeduction: boolean = false): Promise<{ success: boolean; message?: string; bouquet?: Bouquet }> {\n    try {\n      console.log(`🔍 Creating bouquet for user ${userId} with flowers:`, data);\n      \n      // Get all flowers for this user\n      const allUserFlowers = await this.db\n        .select()\n        .from(userFlowers)\n        .where(eq(userFlowers.userId, userId));\n\n      console.log(`🔍 Available flowers:`, allUserFlowers.map(f => ({ id: f.id, flowerId: f.flowerId, name: f.flowerName })));\n\n      // Find the specific flowers by flowerId (not by id)\n      const flower1 = allUserFlowers.find((f: any) => f.flowerId === data.flowerId1);\n      const flower2 = allUserFlowers.find((f: any) => f.flowerId === data.flowerId2);\n      const flower3 = allUserFlowers.find((f: any) => f.flowerId === data.flowerId3);\n\n      console.log(`🔍 Found flowers:`, { \n        flower1: flower1 ? { id: flower1.id, name: flower1.flowerName } : 'NOT FOUND',\n        flower2: flower2 ? { id: flower2.id, name: flower2.flowerName } : 'NOT FOUND',\n        flower3: flower3 ? { id: flower3.id, name: flower3.flowerName } : 'NOT FOUND'\n      });\n\n      if (!flower1 || !flower2 || !flower3) {\n        return { success: false, message: 'Eine oder mehrere Blumen nicht gefunden' };\n      }\n\n      // Calculate average rarity\n      const rarity1 = flower1.flowerRarity as RarityTier;\n      const rarity2 = flower2.flowerRarity as RarityTier;\n      const rarity3 = flower3.flowerRarity as RarityTier;\n      const avgRarity = calculateAverageRarity(rarity1, rarity2, rarity3);\n\n      // Generate or use provided name and check uniqueness\n      let bouquetName: string;\n      if (data.name) {\n        // Manual name provided - check if it's unique\n        if (await this.isBouquetNameTaken(data.name)) {\n          return { success: false, message: \"Dieser Bouquet-Name existiert bereits. Bitte wählen Sie einen anderen Namen.\" };\n        }\n        bouquetName = data.name;\n      } else if (data.generateName) {\n        // Generate unique AI name\n        bouquetName = await this.generateUniqueBouquetName(avgRarity);\n      } else {\n        // Default fallback name - ensure uniqueness\n        let baseName = `${flower1.flowerName} Bouquet`;\n        bouquetName = await this.ensureUniqueName(baseName);\n      }\n\n      // Create bouquet\n      const newBouquet = await this.db.insert(bouquets).values({\n        name: bouquetName,\n        rarity: avgRarity,\n        imageUrl: \"/Blumen/bouquet.jpg\",\n        createdByUserId: userId\n      }).returning();\n\n      // Create recipe\n      await this.db.insert(bouquetRecipes).values({\n        bouquetId: newBouquet[0].id,\n        flowerId1: flower1.flowerId,\n        flowerId2: flower2.flowerId,\n        flowerId3: flower3.flowerId\n      });\n\n      // Add to user inventory\n      await this.db.insert(userBouquets).values({\n        userId,\n        bouquetId: newBouquet[0].id,\n        quantity: 1,\n        bouquetName: bouquetName,\n        bouquetRarity: avgRarity,\n        bouquetImageUrl: \"/Blumen/bouquet.jpg\"\n      });\n\n      // Remove flowers from inventory (decrease quantity or delete if quantity becomes 0)\n      \n      // Handle flower1\n      if (flower1.quantity > 1) {\n        console.log(`🌸 Reducing flower1 (${flower1.flowerName}) quantity from ${flower1.quantity} to ${flower1.quantity - 1}`);\n        await this.db\n          .update(userFlowers)\n          .set({ quantity: flower1.quantity - 1 })\n          .where(eq(userFlowers.id, flower1.id));\n      } else {\n        console.log(`🌸 Deleting flower1 (${flower1.flowerName}) completely`);\n        await this.db.delete(userFlowers).where(eq(userFlowers.id, flower1.id));\n      }\n      \n      // Handle flower2\n      if (flower2.quantity > 1) {\n        console.log(`🌸 Reducing flower2 (${flower2.flowerName}) quantity from ${flower2.quantity} to ${flower2.quantity - 1}`);\n        await this.db\n          .update(userFlowers)\n          .set({ quantity: flower2.quantity - 1 })\n          .where(eq(userFlowers.id, flower2.id));\n      } else {\n        console.log(`🌸 Deleting flower2 (${flower2.flowerName}) completely`);\n        await this.db.delete(userFlowers).where(eq(userFlowers.id, flower2.id));\n      }\n      \n      // Handle flower3\n      if (flower3.quantity > 1) {\n        console.log(`🌸 Reducing flower3 (${flower3.flowerName}) quantity from ${flower3.quantity} to ${flower3.quantity - 1}`);\n        await this.db\n          .update(userFlowers)\n          .set({ quantity: flower3.quantity - 1 })\n          .where(eq(userFlowers.id, flower3.id));\n      } else {\n        console.log(`🌸 Deleting flower3 (${flower3.flowerName}) completely`);\n        await this.db.delete(userFlowers).where(eq(userFlowers.id, flower3.id));\n      }\n\n      // Deduct 30 credits for bouquet creation (unless skipped for recreation)\n      if (!skipCreditDeduction) {\n        const user = await this.getUser(userId);\n        if (user && user.credits >= 30) {\n          await this.updateUserCredits(userId, -30); // Deduct 30 credits (negative delta)\n          console.log(`💰 Deducted 30 credits for bouquet creation. User ${userId} credits: ${user.credits} -> ${user.credits - 30}`);\n        } else {\n          console.log(`⚠️ Warning: User ${userId} has insufficient credits (${user?.credits || 0}) for bouquet creation, but bouquet was still created`);\n        }\n      } else {\n        console.log(`🆓 Skipped credit deduction for bouquet recreation (free recreation)`);\n      }\n\n      console.log(`💐 Created bouquet \"${bouquetName}\" for user ${userId}`);\n      return { success: true, bouquet: newBouquet[0] };\n\n    } catch (error) {\n      console.error('Failed to create bouquet:', error);\n      return { success: false, message: 'Fehler beim Erstellen des Bouquets' };\n    }\n  }\n\n  async getUserBouquets(userId: number): Promise<UserBouquet[]> {\n    const result = await this.db\n      .select()\n      .from(userBouquets)\n      .where(eq(userBouquets.userId, userId));\n    \n    return result;\n  }\n\n  async getBouquetRecipes(): Promise<BouquetRecipe[]> {\n    const result = await this.db.select().from(bouquetRecipes);\n    return result;\n  }\n\n  async getUserCreatedBouquetRecipes(userId: number): Promise<any[]> {\n    // Get all bouquets created by this user with their recipes\n    const result = await this.db\n      .select({\n        bouquetId: bouquets.id,\n        bouquetName: bouquets.name,\n        bouquetRarity: bouquets.rarity,\n        bouquetImageUrl: bouquets.imageUrl,\n        createdAt: bouquets.createdAt,\n        flowerId1: bouquetRecipes.flowerId1,\n        flowerId2: bouquetRecipes.flowerId2,\n        flowerId3: bouquetRecipes.flowerId3\n      })\n      .from(bouquets)\n      .leftJoin(bouquetRecipes, eq(bouquets.id, bouquetRecipes.bouquetId))\n      .where(eq(bouquets.createdByUserId, userId))\n      .orderBy(bouquets.createdAt);\n    \n    return result;\n  }\n\n  async getBouquetRecipe(bouquetId: number): Promise<BouquetRecipe | null> {\n    const result = await this.db\n      .select()\n      .from(bouquetRecipes)\n      .where(eq(bouquetRecipes.bouquetId, bouquetId));\n    \n    return result[0] || null;\n  }\n\n  async placeBouquet(userId: number, data: PlaceBouquetRequest): Promise<{ success: boolean; message?: string }> {\n    try {\n      // Check if user has the bouquet\n      const userBouquet = await this.db\n        .select()\n        .from(userBouquets)\n        .where(and(eq(userBouquets.userId, userId), eq(userBouquets.bouquetId, data.bouquetId)))\n        .limit(1);\n\n      if (userBouquet.length === 0) {\n        return { success: false, message: 'Bouquet nicht gefunden' };\n      }\n\n      // Check if field is already occupied\n      const existingField = await this.db\n        .select()\n        .from(placedBouquets)\n        .where(and(eq(placedBouquets.userId, userId), eq(placedBouquets.fieldIndex, data.fieldIndex)))\n        .limit(1);\n\n      if (existingField.length > 0) {\n        return { success: false, message: 'Feld ist bereits belegt' };\n      }\n\n      // Calculate spawn timing (4 butterflies over 21 minutes)\n      const now = new Date();\n      const expiresAt = new Date(now.getTime() + 21 * 60 * 1000); // 21 minutes\n      const nextSpawnAt = new Date(now.getTime() + 5.25 * 60 * 1000); // First spawn in 5.25 minutes\n\n      // Place bouquet\n      await this.db.insert(placedBouquets).values({\n        userId,\n        bouquetId: data.bouquetId,\n        fieldIndex: data.fieldIndex,\n        placedAt: now,\n        expiresAt: expiresAt,\n        nextSpawnAt: nextSpawnAt,\n        currentSpawnSlot: 1\n      });\n\n      // Remove bouquet from user inventory\n      if (userBouquet[0].quantity > 1) {\n        await this.db\n          .update(userBouquets)\n          .set({ quantity: userBouquet[0].quantity - 1 })\n          .where(and(eq(userBouquets.userId, userId), eq(userBouquets.bouquetId, data.bouquetId)));\n      } else {\n        await this.db\n          .delete(userBouquets)\n          .where(and(eq(userBouquets.userId, userId), eq(userBouquets.bouquetId, data.bouquetId)));\n      }\n\n      console.log(`💐 Placed bouquet ${data.bouquetId} on field ${data.fieldIndex} for user ${userId}`);\n      return { success: true };\n    } catch (error) {\n      console.error('Failed to place bouquet:', error);\n      return { success: false, message: 'Fehler beim Platzieren des Bouquets' };\n    }\n  }\n\n  async getPlacedBouquets(userId: number): Promise<PlacedBouquet[]> {\n    const result = await this.db\n      .select({\n        id: placedBouquets.id,\n        userId: placedBouquets.userId,\n        bouquetId: placedBouquets.bouquetId,\n        fieldIndex: placedBouquets.fieldIndex,\n        placedAt: placedBouquets.placedAt,\n        expiresAt: placedBouquets.expiresAt,\n        nextSpawnAt: placedBouquets.nextSpawnAt,\n        currentSpawnSlot: placedBouquets.currentSpawnSlot,\n        createdAt: placedBouquets.createdAt,\n        bouquetName: bouquets.name,\n        bouquetRarity: bouquets.rarity\n      })\n      .from(placedBouquets)\n      .leftJoin(bouquets, eq(placedBouquets.bouquetId, bouquets.id))\n      .where(eq(placedBouquets.userId, userId));\n    \n    console.log(`💾 Retrieved placed bouquets for user ${userId}:`, result.map((r: any) => ({ fieldIndex: r.fieldIndex, rarity: r.bouquetRarity, name: r.bouquetName })));\n    \n    return result as any;\n  }\n\n  async getUserButterflies(userId: number): Promise<UserButterfly[]> {\n    const result = await this.db\n      .select()\n      .from(userButterflies)\n      .where(eq(userButterflies.userId, userId));\n    \n    return result;\n  }\n\n  async addButterflyToInventory(userId: number, rarity: RarityTier, quantity: number = 1): Promise<{ success: boolean; butterfly?: UserButterfly }> {\n    try {\n      console.log(`🦋 Adding ${quantity} butterfly(s) of rarity ${rarity} to user ${userId} inventory`);\n      \n      // Generate random butterfly using the existing system\n      const { generateRandomButterfly } = await import('./bouquet');\n      const butterflyData = await generateRandomButterfly(rarity);\n      \n      // Check if user already has this butterfly type\n      const existing = await this.db\n        .select()\n        .from(userButterflies)\n        .where(and(eq(userButterflies.userId, userId), eq(userButterflies.butterflyId, butterflyData.id)));\n\n      let result: UserButterfly;\n      \n      if (existing.length > 0) {\n        // Increase quantity\n        console.log(`🦋 Increasing quantity from ${existing[0].quantity} to ${existing[0].quantity + quantity}`);\n        const updated = await this.db\n          .update(userButterflies)\n          .set({ quantity: existing[0].quantity + quantity })\n          .where(and(eq(userButterflies.userId, userId), eq(userButterflies.butterflyId, butterflyData.id)))\n          .returning();\n        result = updated[0];\n        \n        // Update collection stats for existing butterfly\n        await this.updateCollectionStats(userId, 'butterflies', butterflyData.id, quantity);\n      } else {\n        // Add new butterfly to inventory  \n        console.log(`🦋 Adding new butterfly to inventory`);\n        const newButterfly = await this.db.insert(userButterflies).values({\n          userId,\n          butterflyId: butterflyData.id,\n          butterflyName: butterflyData.name,\n          butterflyRarity: rarity,\n          butterflyImageUrl: butterflyData.imageUrl,\n          quantity\n        }).returning();\n        result = newButterfly[0];\n        \n        // Update collection stats for new butterfly\n        await this.updateCollectionStats(userId, 'butterflies', butterflyData.id, quantity);\n      }\n\n      console.log(`🦋 Successfully added butterfly: ${result.butterflyName} (${rarity}) to user ${userId}`);\n      return { success: true, butterfly: result };\n    } catch (error) {\n      console.error('🦋 Error adding butterfly to inventory:', error);\n      return { success: false };\n    }\n  }\n\n  // VIP Butterfly methods\n  async getUserVipButterflies(userId: number): Promise<UserVipButterfly[]> {\n    const result = await this.db\n      .select()\n      .from(userVipButterflies)\n      .where(eq(userVipButterflies.userId, userId));\n    \n    return result;\n  }\n\n  async addVipButterflyToInventory(userId: number, vipButterflyId: number, vipButterflyName: string, vipButterflyImageUrl: string): Promise<void> {\n    // Check if user already has this VIP butterfly\n    const existing = await this.db\n      .select()\n      .from(userVipButterflies)\n      .where(and(eq(userVipButterflies.userId, userId), eq(userVipButterflies.vipButterflyId, vipButterflyId)));\n\n    if (existing.length > 0) {\n      // Increase quantity\n      await this.db\n        .update(userVipButterflies)\n        .set({ quantity: existing[0].quantity + 1 })\n        .where(eq(userVipButterflies.id, existing[0].id));\n      \n      // Update collection stats for VIP butterfly\n      await this.updateCollectionStats(userId, 'butterflies', vipButterflyId, 1);\n    } else {\n      // Add new VIP butterfly\n      await this.db.insert(userVipButterflies).values({\n        userId,\n        vipButterflyId,\n        vipButterflyName,\n        vipButterflyImageUrl,\n        quantity: 1\n      });\n      \n      // Update collection stats for VIP butterfly\n      await this.updateCollectionStats(userId, 'butterflies', vipButterflyId, 1);\n    }\n    \n    console.log(`✨ Added VIP butterfly ${vipButterflyName} to user ${userId}'s inventory`);\n  }\n\n  // VIP Exhibition methods\n  async getExhibitionVipButterflies(userId: number): Promise<ExhibitionVipButterfly[]> {\n    const result = await this.db\n      .select()\n      .from(exhibitionVipButterflies)\n      .where(eq(exhibitionVipButterflies.userId, userId));\n    \n    return result;\n  }\n\n  // 🚀 PERFORMANCE: Get single VIP butterfly by ID (much faster than loading all)\n  async getExhibitionVipButterflyById(userId: number, vipButterflyId: number): Promise<ExhibitionVipButterfly | null> {\n    const result = await this.db\n      .select()\n      .from(exhibitionVipButterflies)\n      .where(and(\n        eq(exhibitionVipButterflies.userId, userId),\n        eq(exhibitionVipButterflies.id, vipButterflyId)\n      ))\n      .limit(1);\n    \n    return result.length > 0 ? result[0] : null;\n  }\n\n  async placeVipButterflyInExhibition(userId: number, frameId: number, slotIndex: number, vipButterflyId: number): Promise<{ success: boolean; message?: string }> {\n    // Check if user has this VIP butterfly\n    const userVipButterfly = await this.db\n      .select()\n      .from(userVipButterflies)\n      .where(and(eq(userVipButterflies.userId, userId), eq(userVipButterflies.vipButterflyId, vipButterflyId)));\n\n    if (userVipButterfly.length === 0) {\n      return { success: false, message: \"VIP-Schmetterling nicht gefunden\" };\n    }\n\n    // Check if slot is already occupied\n    const existingPlacement = await this.db\n      .select()\n      .from(exhibitionVipButterflies)\n      .where(and(eq(exhibitionVipButterflies.frameId, frameId), eq(exhibitionVipButterflies.slotIndex, slotIndex)));\n\n    if (existingPlacement.length > 0) {\n      return { success: false, message: \"Slot bereits belegt\" };\n    }\n\n    const vipButterfly = userVipButterfly[0];\n\n    // Place VIP butterfly in exhibition\n    await this.db.insert(exhibitionVipButterflies).values({\n      userId,\n      frameId,\n      slotIndex,\n      vipButterflyId: vipButterfly.vipButterflyId,\n      vipButterflyName: vipButterfly.vipButterflyName,\n      vipButterflyImageUrl: vipButterfly.vipButterflyImageUrl\n    });\n\n    // Remove from user inventory (or decrease quantity)\n    if (vipButterfly.quantity > 1) {\n      await this.db\n        .update(userVipButterflies)\n        .set({ quantity: vipButterfly.quantity - 1 })\n        .where(eq(userVipButterflies.id, vipButterfly.id));\n    } else {\n      await this.db\n        .delete(userVipButterflies)\n        .where(eq(userVipButterflies.id, vipButterfly.id));\n    }\n\n    console.log(`✨ Placed VIP butterfly ${vipButterfly.vipButterflyName} in frame ${frameId}, slot ${slotIndex}`);\n    return { success: true };\n  }\n\n  async removeVipButterflyFromExhibition(userId: number, frameId: number, slotIndex: number): Promise<{ success: boolean; message?: string }> {\n    // Find the VIP butterfly in the exhibition\n    const exhibitionVipButterfly = await this.db\n      .select()\n      .from(exhibitionVipButterflies)\n      .where(and(\n        eq(exhibitionVipButterflies.userId, userId),\n        eq(exhibitionVipButterflies.frameId, frameId),\n        eq(exhibitionVipButterflies.slotIndex, slotIndex)\n      ));\n\n    if (exhibitionVipButterfly.length === 0) {\n      return { success: false, message: \"Kein VIP-Schmetterling in diesem Slot gefunden\" };\n    }\n\n    const vipButterfly = exhibitionVipButterfly[0];\n\n    // Remove from exhibition\n    await this.db\n      .delete(exhibitionVipButterflies)\n      .where(eq(exhibitionVipButterflies.id, vipButterfly.id));\n\n    // Return to user inventory\n    await this.addVipButterflyToInventory(\n      userId,\n      vipButterfly.vipButterflyId,\n      vipButterfly.vipButterflyName,\n      vipButterfly.vipButterflyImageUrl\n    );\n\n    console.log(`✨ Removed VIP butterfly ${vipButterfly.vipButterflyName} from frame ${frameId}, slot ${slotIndex}`);\n    return { success: true };\n  }\n\n  // Field butterfly methods\n  async getFieldButterflies(userId: number): Promise<FieldButterfly[]> {\n    const result = await this.db\n      .select()\n      .from(fieldButterflies)\n      .where(eq(fieldButterflies.userId, userId));\n    \n    return result;\n  }\n\n  /**\n   * Get field caterpillars for a user\n   */\n  async getFieldCaterpillars(userId: number): Promise<any[]> {\n    const result = await this.db\n      .select()\n      .from(fieldCaterpillars)\n      .where(eq(fieldCaterpillars.userId, userId));\n    \n    return result;\n  }\n\n  /**\n   * Collect a field caterpillar (remove from field and add to inventory)\n   */\n  async collectFieldCaterpillar(userId: number, fieldIndex: number): Promise<{ success: boolean; caterpillar?: UserCaterpillar }> {\n    console.log(`🐛 🔥 COLLECT-START: Collecting field caterpillar for user ${userId} on field ${fieldIndex}`);\n    \n    // ATOMIC: Delete and return the caterpillar in one operation\n    const deletedCaterpillar = await this.db\n      .delete(fieldCaterpillars)\n      .where(and(eq(fieldCaterpillars.userId, userId), eq(fieldCaterpillars.fieldIndex, fieldIndex)))\n      .returning();\n\n    if (deletedCaterpillar.length === 0) {\n      console.log(`🐛 No caterpillar found on field ${fieldIndex} for user ${userId}`);\n      return { success: false };\n    }\n\n    const fieldCaterpillar = deletedCaterpillar[0];\n    console.log(`🐛 Found field caterpillar: ${fieldCaterpillar.caterpillarName} (ID: ${fieldCaterpillar.caterpillarId})`);\n    console.log(`🐛 Field caterpillar rarity: ${fieldCaterpillar.caterpillarRarity}`);\n    console.log(`🐛 Removed caterpillar from field ${fieldIndex}`);\n\n    // Add to user inventory - group by caterpillarId AND caterpillarRarity\n    console.log(`🐛 Looking for existing caterpillar with ID ${fieldCaterpillar.caterpillarId} and rarity ${fieldCaterpillar.caterpillarRarity}`);\n    const existing = await this.db\n      .select()\n      .from(userCaterpillars)\n      .where(and(\n        eq(userCaterpillars.userId, userId), \n        eq(userCaterpillars.caterpillarId, fieldCaterpillar.caterpillarId),\n        eq(userCaterpillars.caterpillarRarity, fieldCaterpillar.caterpillarRarity)\n      ));\n    \n    console.log(`🐛 Found ${existing.length} existing caterpillars with same ID and rarity`);\n\n    let result: UserCaterpillar;\n    \n    try {\n      if (existing.length > 0) {\n        // Increase quantity by exactly 1\n        console.log(`🐛 🔥 CRITICAL: Increasing quantity from ${existing[0].quantity} to ${existing[0].quantity + 1}`);\n        const updated = await this.db\n          .update(userCaterpillars)\n          .set({ quantity: existing[0].quantity + 1 })\n          .where(and(\n            eq(userCaterpillars.userId, userId), \n            eq(userCaterpillars.caterpillarId, fieldCaterpillar.caterpillarId),\n            eq(userCaterpillars.caterpillarRarity, fieldCaterpillar.caterpillarRarity)\n          ))\n          .returning();\n        result = updated[0];\n      } else {\n        // Add new caterpillar to inventory  \n        console.log(`🐛 Adding new caterpillar to inventory`);\n        const newCaterpillar = await this.db.insert(userCaterpillars).values({\n          userId,\n          caterpillarId: fieldCaterpillar.caterpillarId,\n          caterpillarName: fieldCaterpillar.caterpillarName,\n          caterpillarRarity: fieldCaterpillar.caterpillarRarity,\n          caterpillarImageUrl: fieldCaterpillar.caterpillarImageUrl,\n          quantity: 1\n        }).returning();\n        result = newCaterpillar[0];\n      }\n    } catch (error: any) {\n      console.error('🐛 Error adding caterpillar to inventory:', error);\n      return { success: false };\n    }\n\n    // Update collection stats for acquired caterpillar\n    await this.updateCollectionStats(userId, 'caterpillars', fieldCaterpillar.caterpillarId, 1);\n\n    console.log(`🐛 Successfully collected caterpillar ${fieldCaterpillar.caterpillarName} for user ${userId}`);\n    return { success: true, caterpillar: result };\n  }\n\n  async placeButterflyOnField(userId: number, fieldIndex: number, butterflyId: number): Promise<{ success: boolean; message?: string; butterfly?: any }> {\n    console.log(`🦋 Placing butterfly ${butterflyId} on field ${fieldIndex} for user ${userId}`);\n    \n    // Check if user has this butterfly\n    const userButterfly = await this.db\n      .select()\n      .from(userButterflies)\n      .where(and(eq(userButterflies.userId, userId), eq(userButterflies.id, butterflyId)));\n\n    if (userButterfly.length === 0) {\n      return { success: false, message: \"Schmetterling nicht gefunden\" };\n    }\n\n    // Check if field already has a butterfly\n    const existingButterfly = await this.db\n      .select()\n      .from(fieldButterflies)\n      .where(and(eq(fieldButterflies.userId, userId), eq(fieldButterflies.fieldIndex, fieldIndex)));\n\n    if (existingButterfly.length > 0) {\n      return { success: false, message: \"Auf diesem Feld ist bereits ein Schmetterling platziert\" };\n    }\n\n    const butterfly = userButterfly[0];\n\n    if (butterfly.quantity <= 0) {\n      return { success: false, message: \"Nicht genügend Schmetterlinge im Inventar\" };\n    }\n\n    try {\n      // Place butterfly on field (no bouquet required for this system)\n      const placedButterfly = await this.db.insert(fieldButterflies).values({\n        userId,\n        fieldIndex,\n        butterflyId: butterfly.butterflyId,\n        butterflyName: butterfly.butterflyName,\n        butterflyRarity: butterfly.butterflyRarity,\n        butterflyImageUrl: butterfly.butterflyImageUrl,\n        bouquetId: 1 // Dummy bouquet ID since the schema requires it\n      }).returning();\n\n      // Remove from user inventory (or decrease quantity)\n      if (butterfly.quantity > 1) {\n        await this.db\n          .update(userButterflies)\n          .set({ quantity: butterfly.quantity - 1 })\n          .where(eq(userButterflies.id, butterfly.id));\n      } else {\n        await this.db\n          .delete(userButterflies)\n          .where(eq(userButterflies.id, butterfly.id));\n      }\n\n      console.log(`🦋 Successfully placed butterfly ${butterfly.butterflyName} on field ${fieldIndex}`);\n      return { success: true, butterfly: placedButterfly[0] };\n    } catch (error) {\n      console.error('🦋 Error placing butterfly on field:', error);\n      return { success: false, message: 'Datenbankfehler beim Platzieren' };\n    }\n  }\n\n  async removeFieldButterfly(userId: number, fieldIndex: number): Promise<{ success: boolean; message?: string }> {\n    console.log(`🦋 Removing field butterfly on field ${fieldIndex} for user ${userId}`);\n    \n    try {\n      // First, let's see what butterflies exist\n      const existing = await this.db\n        .select()\n        .from(fieldButterflies)\n        .where(and(eq(fieldButterflies.userId, userId), eq(fieldButterflies.fieldIndex, fieldIndex)));\n      \n      console.log(`🦋 Found ${existing.length} existing butterflies on field ${fieldIndex}:`, existing.map(b => ({ id: b.id, name: b.butterflyName })));\n\n      const result = await this.db\n        .delete(fieldButterflies)\n        .where(and(eq(fieldButterflies.userId, userId), eq(fieldButterflies.fieldIndex, fieldIndex)))\n        .returning();\n\n      console.log(`🦋 Deletion result: ${result.length} rows deleted`);\n\n      if (result.length === 0) {\n        return { success: false, message: 'No butterfly found on field' };\n      }\n\n      console.log(`🦋 Successfully removed butterfly from field ${fieldIndex}:`, result[0].butterflyName);\n      return { success: true };\n    } catch (error) {\n      console.error('🦋 Error removing field butterfly:', error);\n      return { success: false, message: 'Database error' };\n    }\n  }\n\n  async spawnCaterpillarOnField(userId: number, fieldIndex: number, parentRarity: string): Promise<{ success: boolean; message?: string; caterpillar?: any }> {\n    console.log(`🐛 Spawning caterpillar on field ${fieldIndex} with parent rarity ${parentRarity}`);\n    \n    // Rarity inheritance system: 50% same, 30% lower, 20% higher\n    const inheritedRarity = this.inheritCaterpillarRarity(parentRarity);\n    \n    // Get random caterpillar for the inherited rarity\n    const caterpillar = await this.getRandomCaterpillarByRarity(inheritedRarity);\n    \n    if (!caterpillar) {\n      return { success: false, message: `No caterpillar found for rarity ${inheritedRarity}` };\n    }\n\n    try {\n      // 🐛 🔥 FIX: Only place caterpillar on field - do NOT add to inventory yet!\n      // User gets caterpillar in inventory when they click to collect it\n      \n      // Place caterpillar permanently on the field (blocks field until collected)\n      await this.db.insert(fieldCaterpillars).values({\n        userId,\n        fieldIndex,\n        caterpillarId: caterpillar.id,\n        caterpillarName: caterpillar.name,\n        caterpillarRarity: inheritedRarity,\n        caterpillarImageUrl: caterpillar.imageUrl,\n        spawnedAt: new Date()\n      });\n\n      console.log(`🐛 Successfully spawned caterpillar ${caterpillar.name} (${inheritedRarity}) from butterfly (${parentRarity})`);\n      console.log(`🐛 Caterpillar placed permanently on field ${fieldIndex} - blocks until user clicks to collect!`);\n      return { success: true, caterpillar };\n    } catch (error) {\n      console.error('🐛 Error spawning caterpillar:', error);\n      return { success: false, message: 'Database error spawning caterpillar' };\n    }\n  }\n\n  private inheritCaterpillarRarity(parentRarity: string): string {\n    const rarities = ['common', 'uncommon', 'rare', 'super-rare', 'epic', 'legendary', 'mythical'];\n    const currentIndex = rarities.indexOf(parentRarity);\n    \n    if (currentIndex === -1) return 'common';\n    \n    const roll = Math.random();\n    \n    if (roll < 0.5) {\n      // 50% same rarity\n      return parentRarity;\n    } else if (roll < 0.8) {\n      // 30% lower rarity\n      return currentIndex > 0 ? rarities[currentIndex - 1] : rarities[0];\n    } else {\n      // 20% higher rarity\n      return currentIndex < rarities.length - 1 ? rarities[currentIndex + 1] : rarities[rarities.length - 1];\n    }\n  }\n\n  private async addCaterpillarToInventory(userId: number, caterpillarId: number, caterpillarName: string, rarity: string, imageUrl: string): Promise<void> {\n    console.log(`🐛 Adding caterpillar ${caterpillarName} (${rarity}) to user ${userId} inventory`);\n    \n    try {\n      // Check if user already has this caterpillar type\n      const existingCaterpillar = await this.db\n        .select()\n        .from(userCaterpillars)\n        .where(and(\n          eq(userCaterpillars.userId, userId),\n          eq(userCaterpillars.caterpillarId, caterpillarId)\n        ));\n\n      if (existingCaterpillar.length > 0) {\n        // Update quantity\n        await this.db\n          .update(userCaterpillars)\n          .set({ quantity: existingCaterpillar[0].quantity + 1 })\n          .where(eq(userCaterpillars.id, existingCaterpillar[0].id));\n        \n        console.log(`🐛 Updated caterpillar quantity: ${existingCaterpillar[0].quantity + 1}`);\n      } else {\n        // Add new caterpillar with quantity=1 \n        console.log(`🐛 CREATING new caterpillar ${caterpillarName} with quantity=1`);\n        const result = await this.db\n          .insert(userCaterpillars)\n          .values({\n            userId,\n            caterpillarId,\n            caterpillarName,\n            caterpillarRarity: rarity,\n            caterpillarImageUrl: imageUrl,\n            quantity: 1\n          })\n          .returning();\n        \n        console.log(`🐛 NEW CATERPILLAR CREATED:`, result[0]);\n        console.log(`🐛 ✅ Confirmed: Created with quantity=${result[0].quantity}`);\n      }\n    } catch (error) {\n      console.error('🐛 Database error adding caterpillar to inventory:', error);\n      throw error;\n    }\n  }\n\n  private async getRandomCaterpillarByRarity(rarity: string) {\n    // Use the professional system from creatures.ts with beautiful Latin names!\n    const { generateRandomCaterpillar } = await import('./creatures');\n    return await generateRandomCaterpillar(rarity as any);\n  }\n\n  private mapRarityToNumber(rarity: string): number {\n    const rarityMap: { [key: string]: number } = {\n      'common': 1,\n      'uncommon': 2, \n      'rare': 3,\n      'super-rare': 4,\n      'epic': 5,\n      'legendary': 6,\n      'mythical': 7\n    };\n    return rarityMap[rarity] || 1; // Default to common if unknown\n  }\n\n  async collectFieldButterfly(userId: number, fieldIndex: number): Promise<{ success: boolean; butterfly?: UserButterfly }> {\n    console.log(`🦋 Collecting butterfly for user ${userId} on field ${fieldIndex}`);\n    \n    // ATOMIC: Delete and return the butterfly in one operation - only one request can succeed\n    const deletedButterfly = await this.db\n      .delete(fieldButterflies)\n      .where(and(eq(fieldButterflies.userId, userId), eq(fieldButterflies.fieldIndex, fieldIndex)))\n      .returning();\n\n    if (deletedButterfly.length === 0) {\n      console.log(`🦋 No butterfly found on field ${fieldIndex} for user ${userId}`);\n      return { success: false };\n    }\n\n    const fieldButterfly = deletedButterfly[0];\n    console.log(`🦋 Found butterfly: ${fieldButterfly.butterflyName} (ID: ${fieldButterfly.butterflyId})`);\n    console.log(`🦋 Removed butterfly from field ${fieldIndex}`);\n\n    // Check if user already has this butterfly type\n    const existing = await this.db\n      .select()\n      .from(userButterflies)\n      .where(and(eq(userButterflies.userId, userId), eq(userButterflies.butterflyId, fieldButterfly.butterflyId)));\n\n    let result: UserButterfly;\n    \n    try {\n      if (existing.length > 0) {\n        // Increase quantity\n        console.log(`🦋 Increasing quantity from ${existing[0].quantity} to ${existing[0].quantity + 1}`);\n        const updated = await this.db\n          .update(userButterflies)\n          .set({ quantity: existing[0].quantity + 1 })\n          .where(and(eq(userButterflies.userId, userId), eq(userButterflies.butterflyId, fieldButterfly.butterflyId)))\n          .returning();\n        result = updated[0];\n      } else {\n        // Add new butterfly to inventory  \n        console.log(`🦋 Adding new butterfly to inventory`);\n        const newButterfly = await this.db.insert(userButterflies).values({\n          userId,\n          butterflyId: fieldButterfly.butterflyId,\n          butterflyName: fieldButterfly.butterflyName,\n          butterflyRarity: fieldButterfly.butterflyRarity,\n          butterflyImageUrl: fieldButterfly.butterflyImageUrl,\n          quantity: 1\n        }).returning();\n        result = newButterfly[0];\n      }\n    } catch (error: any) {\n      // Handle unique constraint violation (race condition)\n      if (error.code === '23505') {\n        console.log(`🦋 Race condition detected, retrying with quantity update`);\n        const existingRetry = await this.db\n          .select()\n          .from(userButterflies)\n          .where(and(eq(userButterflies.userId, userId), eq(userButterflies.butterflyId, fieldButterfly.butterflyId)));\n        \n        const updated = await this.db\n          .update(userButterflies)\n          .set({ quantity: existingRetry[0].quantity + 1 })\n          .where(and(eq(userButterflies.userId, userId), eq(userButterflies.butterflyId, fieldButterfly.butterflyId)))\n          .returning();\n        result = updated[0];\n      } else {\n        throw error;\n      }\n    }\n\n    // Update collection stats for acquired butterfly\n    await this.updateCollectionStats(userId, 'butterflies', fieldButterfly.butterflyId, 1);\n\n    console.log(`🦋 Successfully collected butterfly: ${result.butterflyName}`);\n    return { success: true, butterfly: result };\n  }\n\n  // Exhibition methods\n  async getExhibitionFrames(userId: number): Promise<ExhibitionFrame[]> {\n    const result = await this.db\n      .select()\n      .from(exhibitionFrames)\n      .where(eq(exhibitionFrames.userId, userId));\n    \n    return result;\n  }\n\n  async purchaseExhibitionFrame(userId: number): Promise<{ success: boolean; message?: string; newCredits?: number; frame?: ExhibitionFrame }> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      return { success: false, message: 'User not found' };\n    }\n\n    // Get current frame count to determine next frame number\n    const existingFrames = await this.getExhibitionFrames(userId);\n    const frameNumber = existingFrames.length + 1;\n    \n    // Calculate cost - first frame is free, subsequent frames increase exponentially\n    let cost = 0;\n    if (frameNumber > 1) {\n      // First frame is free, subsequent frames cost credits with exponential scaling\n      cost = Math.round(500 * Math.pow(1.6, frameNumber - 2));\n    }\n\n    if (user.credits < cost) {\n      return { success: false, message: 'Insufficient credits' };\n    }\n\n    // Create frame\n    const newFrame = await this.db.insert(exhibitionFrames).values({\n      userId,\n      frameNumber\n    }).returning();\n\n    // Deduct credits (only if cost > 0)\n    let updatedUser = user;\n    if (cost > 0) {\n      const creditResult = await this.updateUserCredits(userId, -cost); // Use negative delta to deduct credits\n      if (creditResult) {\n        updatedUser = creditResult;\n      }\n    }\n\n    console.log(`🖼️ User ${userId} purchased frame ${frameNumber} for ${cost} credits`);\n\n    return { \n      success: true, \n      newCredits: updatedUser?.credits || user.credits,\n      frame: newFrame[0]\n    };\n  }\n\n  async getExhibitionButterflies(userId: number): Promise<ExhibitionButterfly[]> {\n    const result = await this.db\n      .select()\n      .from(exhibitionButterflies)\n      .where(eq(exhibitionButterflies.userId, userId));\n    \n    return result;\n  }\n\n  // 🚀 PERFORMANCE: Get single butterfly by ID (much faster than loading all)\n  async getExhibitionButterflyById(userId: number, butterflyId: number): Promise<ExhibitionButterfly | null> {\n    const result = await this.db\n      .select()\n      .from(exhibitionButterflies)\n      .where(and(\n        eq(exhibitionButterflies.userId, userId),\n        eq(exhibitionButterflies.id, butterflyId)\n      ))\n      .limit(1);\n    \n    return result.length > 0 ? result[0] : null;\n  }\n\n  async placeExhibitionButterfly(userId: number, frameId: number, slotIndex: number, butterflyId: number): Promise<{ success: boolean; message?: string }> {\n    // Check if user has the butterfly\n    const userButterfly = await this.db\n      .select()\n      .from(userButterflies)\n      .where(and(eq(userButterflies.userId, userId), eq(userButterflies.butterflyId, butterflyId)));\n\n    if (userButterfly.length === 0) {\n      return { success: false, message: 'Butterfly not found' };\n    }\n\n    // Check if slot is empty\n    const existingSlot = await this.db\n      .select()\n      .from(exhibitionButterflies)\n      .where(and(eq(exhibitionButterflies.frameId, frameId), eq(exhibitionButterflies.slotIndex, slotIndex)));\n\n    if (existingSlot.length > 0) {\n      return { success: false, message: 'Slot already occupied' };\n    }\n\n    // Place butterfly\n    await this.db.insert(exhibitionButterflies).values({\n      userId,\n      frameId,\n      slotIndex,\n      butterflyId: userButterfly[0].butterflyId,\n      butterflyName: userButterfly[0].butterflyName,\n      butterflyRarity: userButterfly[0].butterflyRarity,\n      butterflyImageUrl: userButterfly[0].butterflyImageUrl\n    });\n\n    // Remove from inventory\n    if (userButterfly[0].quantity > 1) {\n      await this.db\n        .update(userButterflies)\n        .set({ quantity: userButterfly[0].quantity - 1 })\n        .where(and(eq(userButterflies.userId, userId), eq(userButterflies.butterflyId, butterflyId)));\n    } else {\n      await this.db\n        .delete(userButterflies)\n        .where(and(eq(userButterflies.userId, userId), eq(userButterflies.butterflyId, butterflyId)));\n    }\n\n    return { success: true };\n  }\n\n  async removeExhibitionButterfly(userId: number, frameId: number, slotIndex: number): Promise<{ success: boolean; message?: string }> {\n    const butterfly = await this.db\n      .select()\n      .from(exhibitionButterflies)\n      .where(and(eq(exhibitionButterflies.userId, userId), eq(exhibitionButterflies.frameId, frameId), eq(exhibitionButterflies.slotIndex, slotIndex)));\n\n    if (butterfly.length === 0) {\n      return { success: false, message: 'No butterfly in slot' };\n    }\n\n    // Return to inventory\n    const existing = await this.db\n      .select()\n      .from(userButterflies)\n      .where(and(eq(userButterflies.userId, userId), eq(userButterflies.butterflyId, butterfly[0].butterflyId)));\n\n    if (existing.length > 0) {\n      await this.db\n        .update(userButterflies)\n        .set({ quantity: existing[0].quantity + 1 })\n        .where(and(eq(userButterflies.userId, userId), eq(userButterflies.butterflyId, butterfly[0].butterflyId)));\n    } else {\n      await this.db.insert(userButterflies).values({\n        userId,\n        butterflyId: butterfly[0].butterflyId,\n        butterflyName: butterfly[0].butterflyName,\n        butterflyRarity: butterfly[0].butterflyRarity,\n        butterflyImageUrl: butterfly[0].butterflyImageUrl,\n        quantity: 1\n      });\n    }\n\n    // Remove from exhibition\n    await this.db\n      .delete(exhibitionButterflies)\n      .where(and(eq(exhibitionButterflies.userId, userId), eq(exhibitionButterflies.frameId, frameId), eq(exhibitionButterflies.slotIndex, slotIndex)));\n\n    return { success: true };\n  }\n\n  // Additional methods that may be needed\n  async collectExpiredBouquet(userId: number, fieldIndex: number): Promise<{ success: boolean; seedDrop?: { rarity: RarityTier; quantity: number } }> {\n    try {\n      // Find expired bouquet on this field with bouquet details\n      const expiredBouquet = await this.db\n        .select({\n          id: placedBouquets.id,\n          bouquetId: placedBouquets.bouquetId,\n          bouquetRarity: bouquets.rarity\n        })\n        .from(placedBouquets)\n        .leftJoin(bouquets, eq(placedBouquets.bouquetId, bouquets.id))\n        .where(and(\n          eq(placedBouquets.userId, userId), \n          eq(placedBouquets.fieldIndex, fieldIndex),\n          lt(placedBouquets.expiresAt, new Date()) // Must be expired\n        ))\n        .limit(1);\n\n      if (expiredBouquet.length === 0) {\n        return { success: false };\n      }\n\n      const bouquetRarity = expiredBouquet[0].bouquetRarity as RarityTier || 'common';\n\n      // Generate seed drop based on bouquet rarity (1-3 seeds, more for better bouquets)\n      const seedQuantity = this.getBouquetSeedQuantity(bouquetRarity);\n      const seedRarity = this.getBouquetInfluencedSeedRarity(bouquetRarity);\n\n      // Get a random seed ID of this rarity\n      const availableSeeds = await this.db\n        .select()\n        .from(seeds)\n        .where(eq(seeds.rarity, seedRarity));\n\n      if (availableSeeds.length === 0) {\n        return { success: false };\n      }\n\n      const randomSeed = availableSeeds[Math.floor(Math.random() * availableSeeds.length)];\n\n      // Add seeds to user inventory\n      await this.addSeedToInventoryById(userId, randomSeed.id, seedQuantity);\n\n      // Remove the expired bouquet\n      await this.db\n        .delete(placedBouquets)\n        .where(and(\n          eq(placedBouquets.userId, userId),\n          eq(placedBouquets.fieldIndex, fieldIndex)\n        ));\n\n      console.log(`💧 Collected expired ${bouquetRarity} bouquet on field ${fieldIndex} for user ${userId}, got ${seedQuantity}x ${seedRarity} seeds`);\n\n      return { \n        success: true, \n        seedDrop: { \n          rarity: seedRarity, \n          quantity: seedQuantity \n        } \n      };\n    } catch (error) {\n      console.error('Failed to collect expired bouquet:', error);\n      return { success: false };\n    }\n  }\n\n  // Bouquet name uniqueness methods\n  async isBouquetNameTaken(name: string): Promise<boolean> {\n    const existing = await this.db\n      .select()\n      .from(bouquets)\n      .where(eq(bouquets.name, name))\n      .limit(1);\n    return existing.length > 0;\n  }\n\n  // Generate unique bouquet name using AI with retry logic\n  async generateUniqueBouquetName(rarity: RarityTier): Promise<string> {\n    const { generateBouquetName } = await import('./bouquet');\n    const maxAttempts = 5;\n    \n    console.log(`🌹 Generating unique bouquet name for rarity: ${rarity}`);\n    \n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      console.log(`🌹 Attempt ${attempt}/${maxAttempts}: Calling OpenAI API...`);\n      const generatedName = await generateBouquetName(rarity);\n      \n      console.log(`🌹 Generated name: \"${generatedName}\", checking availability...`);\n      const isNameTaken = await this.isBouquetNameTaken(generatedName);\n      \n      if (!isNameTaken) {\n        console.log(`🌹 ✅ Name \"${generatedName}\" is available!`);\n        return generatedName;\n      }\n      \n      console.log(`🌹 ❌ Name \"${generatedName}\" already exists (attempt ${attempt}/${maxAttempts})`);\n      \n      // If first attempt failed, show better error logging\n      if (attempt === 1) {\n        console.log(`🌹 🔄 First generated name was taken, retrying with ${maxAttempts - 1} more attempts...`);\n      }\n    }\n    \n    // If all AI attempts failed, create a fallback unique name\n    console.log(`🌹 ⚠️ All ${maxAttempts} OpenAI attempts produced duplicate names, using fallback strategy`);\n    const fallbackName = await this.ensureUniqueName(`Seltene ${rarity} Kollektion`);\n    console.log(`🌹 📝 Fallback name generated: \"${fallbackName}\"`);\n    return fallbackName;\n  }\n\n  // Ensure name is unique by adding number suffix if needed\n  async ensureUniqueName(baseName: string): Promise<string> {\n    let candidateName = baseName;\n    let counter = 1;\n    \n    while (await this.isBouquetNameTaken(candidateName)) {\n      candidateName = `${baseName} ${counter}`;\n      counter++;\n    }\n    \n    return candidateName;\n  }\n\n  // Helper method to determine seed quantity based on bouquet rarity\n  private getBouquetSeedQuantity(bouquetRarity: RarityTier): number {\n    const rarityMultipliers = {\n      'common': 1,\n      'uncommon': 1.2,\n      'rare': 1.4,\n      'super-rare': 1.6,\n      'epic': 1.8,\n      'legendary': 2.0,\n      'mythical': 2.5\n    };\n\n    const baseSeeds = Math.floor(Math.random() * 3) + 1; // 1-3 base seeds\n    const multiplier = rarityMultipliers[bouquetRarity as keyof typeof rarityMultipliers] || 1;\n    \n    return Math.min(5, Math.floor(baseSeeds * multiplier)); // Max 5 seeds\n  }\n\n  // Helper method to get rarity-influenced seed drop based on bouquet quality\n  private getBouquetInfluencedSeedRarity(bouquetRarity: RarityTier): RarityTier {\n    // Create modified weights based on bouquet rarity\n    const baseWeights = {\n      'common': 45,\n      'uncommon': 30,\n      'rare': 15,\n      'super-rare': 7,\n      'epic': 2.5,\n      'legendary': 0.4,\n      'mythical': 0.1\n    };\n\n    // Boost better rarities based on bouquet quality\n    const rarityBoostFactors = {\n      'common': { 'rare': 1, 'super-rare': 1, 'epic': 1, 'legendary': 1, 'mythical': 1 },\n      'uncommon': { 'rare': 1.5, 'super-rare': 1.2, 'epic': 1.1, 'legendary': 1, 'mythical': 1 },\n      'rare': { 'rare': 2, 'super-rare': 1.8, 'epic': 1.5, 'legendary': 1.2, 'mythical': 1 },\n      'super-rare': { 'rare': 2.5, 'super-rare': 2.2, 'epic': 2, 'legendary': 1.5, 'mythical': 1.2 },\n      'epic': { 'rare': 3, 'super-rare': 2.8, 'epic': 2.5, 'legendary': 2, 'mythical': 1.5 },\n      'legendary': { 'rare': 4, 'super-rare': 3.5, 'epic': 3, 'legendary': 2.5, 'mythical': 2 },\n      'mythical': { 'rare': 5, 'super-rare': 4.5, 'epic': 4, 'legendary': 3.5, 'mythical': 3 }\n    };\n\n    const boostFactors = rarityBoostFactors[bouquetRarity as keyof typeof rarityBoostFactors] || rarityBoostFactors['common'];\n\n    // Apply boosts to weights\n    const modifiedWeights = {\n      'common': baseWeights.common * 0.8, // Slightly reduce common chance for all bouquets\n      'uncommon': baseWeights.uncommon * 0.9, // Slightly reduce uncommon chance\n      'rare': baseWeights.rare * (boostFactors['rare'] || 1),\n      'super-rare': baseWeights['super-rare'] * (boostFactors['super-rare'] || 1),\n      'epic': baseWeights.epic * (boostFactors['epic'] || 1),\n      'legendary': baseWeights.legendary * (boostFactors['legendary'] || 1),\n      'mythical': baseWeights.mythical * (boostFactors['mythical'] || 1)\n    };\n\n    // Calculate total weight\n    const totalWeight = Object.values(modifiedWeights).reduce((sum, weight) => sum + weight, 0);\n    const random = Math.random() * totalWeight;\n\n    // Select rarity based on modified weights\n    let currentWeight = 0;\n    for (const [rarity, weight] of Object.entries(modifiedWeights)) {\n      currentWeight += weight;\n      if (random <= currentWeight) {\n        return rarity as RarityTier;\n      }\n    }\n\n    return 'common'; // Fallback\n  }\n\n  // Field Unlocking System\n  async getUnlockedFields(userId: number): Promise<UnlockedField[]> {\n    const result = await this.db\n      .select()\n      .from(unlockedFields)\n      .where(eq(unlockedFields.userId, userId));\n    \n    return result;\n  }\n\n  async isFieldUnlocked(userId: number, fieldIndex: number): Promise<boolean> {\n    const result = await this.db\n      .select()\n      .from(unlockedFields)\n      .where(and(eq(unlockedFields.userId, userId), eq(unlockedFields.fieldIndex, fieldIndex)));\n    \n    return result.length > 0;\n  }\n\n  async unlockField(userId: number, data: UnlockFieldRequest, cost: number): Promise<{ success: boolean; message?: string }> {\n    // Check if field is already unlocked\n    const isUnlocked = await this.isFieldUnlocked(userId, data.fieldIndex);\n    if (isUnlocked) {\n      return { success: false, message: \"Field is already unlocked\" };\n    }\n\n    // Check if user has enough credits\n    const user = await this.getUser(userId);\n    if (!user || user.credits < cost) {\n      return { success: false, message: \"Not enough credits\" };\n    }\n\n    try {\n      // Deduct credits and unlock field in a transaction-like manner\n      await this.updateUserCredits(userId, -cost);\n      \n      await this.db.insert(unlockedFields).values({\n        userId,\n        fieldIndex: data.fieldIndex,\n        cost,\n      });\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error unlocking field:', error);\n      return { success: false, message: \"Failed to unlock field\" };\n    }\n  }\n\n  /**\n   * Get all available fields for butterfly spawning (only unlocked & free fields)\n   */\n  // Check if a field is in the pond area (Teich)\n  private isPondField(fieldIndex: number): boolean {\n    const fieldId = fieldIndex + 1; // Convert 0-indexed to 1-indexed\n    const row = Math.floor((fieldId - 1) / 10);\n    const col = (fieldId - 1) % 10;\n    \n    // Pond area: rows 1-3, columns 1-8 (0-indexed)\n    return row >= 1 && row <= 3 && col >= 1 && col <= 8;\n  }\n\n  async getAvailableFieldsForButterflies(userId: number): Promise<number[]> {\n    // Get all occupied fields for this user in parallel\n    const [userPlantedFields, userPlacedBouquets, userExistingButterflies, userUnlockedFields] = await Promise.all([\n      this.db.select({ fieldIndex: plantedFields.fieldIndex }).from(plantedFields).where(eq(plantedFields.userId, userId)),\n      this.db.select({ fieldIndex: placedBouquets.fieldIndex }).from(placedBouquets).where(eq(placedBouquets.userId, userId)),\n      this.db.select({ fieldIndex: fieldButterflies.fieldIndex }).from(fieldButterflies).where(eq(fieldButterflies.userId, userId)),\n      this.db.select({ fieldIndex: unlockedFields.fieldIndex }).from(unlockedFields).where(eq(unlockedFields.userId, userId))\n    ]);\n\n    // Collect all occupied field indices\n    const occupiedFields = new Set([\n      ...userPlantedFields.map((f: { fieldIndex: number }) => f.fieldIndex),\n      ...userPlacedBouquets.map((f: { fieldIndex: number }) => f.fieldIndex),\n      ...userExistingButterflies.map((f: { fieldIndex: number }) => f.fieldIndex)\n    ]);\n\n    // Get unlocked field indices\n    const unlockedFieldIndices = new Set(\n      userUnlockedFields.map((f: { fieldIndex: number }) => f.fieldIndex)\n    );\n\n    // Find available fields (unlocked AND free AND NOT pond fields)\n    const availableFields = Array.from(unlockedFieldIndices).filter(fieldIndex => \n      !occupiedFields.has(fieldIndex) && !this.isPondField(fieldIndex)\n    );\n    \n    console.log(`🦋 GARDEN/TEICH SEPARATION: Available butterfly fields for user ${userId}:`, availableFields, '(pond fields excluded)');\n    \n    return availableFields;\n  }\n\n  async spawnButterflyOnField(userId: number, bouquetId: number, bouquetRarity: RarityTier): Promise<{ success: boolean; fieldButterfly?: FieldButterfly; fieldIndex?: number }> {\n    try {\n      // Find the placed bouquet to get the field index\n      const placedBouquet = await this.db\n        .select()\n        .from(placedBouquets)\n        .where(and(eq(placedBouquets.userId, userId), eq(placedBouquets.bouquetId, bouquetId)))\n        .limit(1);\n\n      if (placedBouquet.length === 0) {\n        return { success: false };\n      }\n\n      // Find all available fields for butterfly spawning\n      const availableFields = await this.getAvailableFieldsForButterflies(userId);\n\n      if (availableFields.length === 0) {\n        console.log(`🦋 No available fields for butterfly spawn for user ${userId} (garden full)`);\n        return { success: false };\n      }\n\n      // Select random available field from entire garden\n      const fieldIndex = availableFields[Math.floor(Math.random() * availableFields.length)];\n\n      // Generate random butterfly based on bouquet rarity\n      const { generateRandomButterfly } = await import('./bouquet');\n      const butterflyData = await generateRandomButterfly(bouquetRarity);\n\n      // Create field butterfly with 24-hour despawn time\n      const spawnTime = new Date();\n      const despawnTime = new Date(spawnTime.getTime() + 24 * 60 * 60 * 1000); // 24 hours later\n      \n      const newFieldButterfly = await this.db.insert(fieldButterflies).values({\n        userId,\n        fieldIndex,\n        butterflyId: butterflyData.id,\n        butterflyName: butterflyData.name,\n        butterflyRarity: bouquetRarity,\n        butterflyImageUrl: butterflyData.imageUrl,\n        bouquetId: bouquetId,\n        spawnedAt: spawnTime,\n        despawnAt: despawnTime\n      }).returning();\n\n      console.log(`🦋 Spawned butterfly \"${butterflyData.name}\" on field ${fieldIndex} for user ${userId}`);\n      console.log(`🔍 DEBUG: Random spawn from ${availableFields.length} available fields: [${availableFields.join(', ')}]`);\n      \n      return { \n        success: true, \n        fieldButterfly: newFieldButterfly[0],\n        fieldIndex: fieldIndex\n      };\n      \n    } catch (error) {\n      console.error('Failed to spawn butterfly:', error);\n      return { success: false };\n    }\n  }\n\n  // Additional exhibition methods (from routes usage)\n  async canSellButterfly(userId: number, exhibitionButterflyId: number): Promise<boolean> {\n    const timeRemaining = await this.getTimeUntilSellable(userId, exhibitionButterflyId);\n    return timeRemaining === 0;\n  }\n\n  // OPTIMIZED: Batch sell-status for multiple butterflies in single query\n  async getBatchSellStatus(userId: number, butterflyIds: number[], vipButterflyIds: number[]): Promise<{\n    normal: Array<{ id: number, canSell: boolean, timeRemainingMs: number, likesCount: number }>,\n    vip: Array<{ id: number, canSell: boolean, timeRemainingMs: number, likesCount: number }>\n  }> {\n    const now = new Date();\n    const baseTimeMs = 72 * 60 * 60 * 1000; // 72 hours\n    const result: {\n      normal: Array<{ id: number, canSell: boolean, timeRemainingMs: number, likesCount: number }>,\n      vip: Array<{ id: number, canSell: boolean, timeRemainingMs: number, likesCount: number }>\n    } = { normal: [], vip: [] };\n\n    // Get all normal butterflies in one query\n    if (butterflyIds.length > 0) {\n      const normalButterflies = await this.db\n        .select({ \n          id: exhibitionButterflies.id, \n          placedAt: exhibitionButterflies.placedAt,\n          frameId: exhibitionButterflies.frameId\n        })\n        .from(exhibitionButterflies)\n        .where(\n          and(\n            eq(exhibitionButterflies.userId, userId),\n            inArray(exhibitionButterflies.id, butterflyIds)\n          )\n        );\n\n      // Get likes counts for frames in one query\n      const frameIds = normalButterflies.map(b => b.frameId).filter(Boolean);\n      const frameLikesData = frameIds.length > 0 ? await this.db\n        .select({\n          frameId: exhibitionFrameLikes.frameId,\n          count: sql`count(*)`\n        })\n        .from(exhibitionFrameLikes)\n        .where(inArray(exhibitionFrameLikes.frameId, frameIds))\n        .groupBy(exhibitionFrameLikes.frameId) : [];\n\n      const likesMap = new Map(frameLikesData.map(item => [item.frameId, Number(item.count)]));\n\n      // Calculate status for each butterfly\n      for (const butterfly of normalButterflies) {\n        const placedAt = new Date(butterfly.placedAt);\n        const msElapsed = now.getTime() - placedAt.getTime();\n        const remainingMs = Math.max(0, baseTimeMs - msElapsed);\n        const likesCount = likesMap.get(butterfly.frameId) || 0;\n        \n        result.normal.push({\n          id: butterfly.id,\n          canSell: remainingMs === 0,\n          timeRemainingMs: remainingMs,\n          likesCount\n        });\n      }\n    }\n\n    // Get all VIP butterflies in one query\n    if (vipButterflyIds.length > 0) {\n      const vipButterflies = await this.db\n        .select({ \n          id: exhibitionVipButterflies.id, \n          placedAt: exhibitionVipButterflies.placedAt,\n          frameId: exhibitionVipButterflies.frameId\n        })\n        .from(exhibitionVipButterflies)\n        .where(\n          and(\n            eq(exhibitionVipButterflies.userId, userId),\n            inArray(exhibitionVipButterflies.id, vipButterflyIds)\n          )\n        );\n\n      // Get VIP frame likes\n      const vipFrameIds = vipButterflies.map(b => b.frameId).filter(Boolean);\n      const vipFrameLikesData = vipFrameIds.length > 0 ? await this.db\n        .select({\n          frameId: exhibitionFrameLikes.frameId,\n          count: sql`count(*)`\n        })\n        .from(exhibitionFrameLikes)\n        .where(inArray(exhibitionFrameLikes.frameId, vipFrameIds))\n        .groupBy(exhibitionFrameLikes.frameId) : [];\n\n      const vipLikesMap = new Map(vipFrameLikesData.map(item => [item.frameId, Number(item.count)]));\n\n      // Calculate status for each VIP butterfly\n      for (const vipButterfly of vipButterflies) {\n        const placedAt = new Date(vipButterfly.placedAt);\n        const msElapsed = now.getTime() - placedAt.getTime();\n        const remainingMs = Math.max(0, baseTimeMs - msElapsed);\n        const likesCount = vipLikesMap.get(vipButterfly.frameId) || 0;\n        \n        result.vip.push({\n          id: vipButterfly.id,\n          canSell: remainingMs === 0,\n          timeRemainingMs: remainingMs,\n          likesCount\n        });\n      }\n    }\n\n    return result;\n  }\n\n  async getTimeUntilSellable(userId: number, exhibitionButterflyId: number): Promise<number> {\n    // 🚀 PERFORMANCE: Use optimized single butterfly query\n    const butterfly = await this.getExhibitionButterflyById(userId, exhibitionButterflyId);\n    \n    if (!butterfly) return 0;\n    \n    const now = new Date();\n    const placedAt = new Date(butterfly.placedAt);\n    const msElapsed = now.getTime() - placedAt.getTime();\n    \n    // Base time: 72 hours for production (no more likes time reduction)\n    const baseTimeMs = 72 * 60 * 60 * 1000; // = 259,200,000 ms (72 hours)\n    \n    // No more likes time reduction - always 72 hours for selling\n    const requiredTimeMs = baseTimeMs;\n    \n    // Time remaining = required time - elapsed time\n    const remainingMs = Math.max(0, requiredTimeMs - msElapsed);\n    \n    \n    return remainingMs;\n  }\n\n  async getUserFrameLikes(userId: number): Promise<any[]> {\n    // Simple approach: get all likes and group manually\n    const allLikes = await this.db\n      .select()\n      .from(exhibitionFrameLikes)\n      .where(eq(exhibitionFrameLikes.frameOwnerId, userId));\n    \n    // Group by frameId and count\n    const frameGroups = allLikes.reduce((groups: any, like: any) => {\n      const frameId = like.frameId;\n      if (!groups[frameId]) {\n        groups[frameId] = { frameId, totalLikes: 0 };\n      }\n      groups[frameId].totalLikes++;\n      return groups;\n    }, {});\n    \n    return Object.values(frameGroups);\n  }\n\n  async getFrameLikesForUser(likerId: number, frameOwnerId: number): Promise<any[]> {\n    // Get all butterflies (frames) owned by frameOwnerId\n    const ownerButterflies = await this.db\n      .select()\n      .from(exhibitionButterflies)\n      .where(eq(exhibitionButterflies.userId, frameOwnerId));\n\n    // Get all likes for the frame owner's frames\n    const allLikes = await this.db\n      .select()\n      .from(exhibitionFrameLikes)\n      .where(eq(exhibitionFrameLikes.frameOwnerId, frameOwnerId));\n    \n    // Get unique frame IDs\n    const uniqueFrameIds = [...new Set(ownerButterflies.map(b => b.frameId))];\n    \n    // Create a result for each frame\n    const result: any[] = [];\n    \n    for (const frameId of uniqueFrameIds) {\n      const frameLikes = allLikes.filter(like => like.frameId === frameId);\n      \n      result.push({\n        frameId,\n        totalLikes: frameLikes.length,\n        isLiked: frameLikes.some(like => like.likerId === likerId)\n      });\n    }\n    \n    return result;\n  }\n\n  async sellExhibitionButterfly(userId: number, exhibitionButterflyId: number): Promise<{ success: boolean; message?: string; creditsEarned?: number }> {\n    const canSell = await this.canSellButterfly(userId, exhibitionButterflyId);\n    if (!canSell) {\n      return { success: false, message: 'Butterfly not ready for sale yet' };\n    }\n\n    const butterfly = await this.db\n      .select()\n      .from(exhibitionButterflies)\n      .where(and(eq(exhibitionButterflies.userId, userId), eq(exhibitionButterflies.id, exhibitionButterflyId)));\n    \n    if (butterfly.length === 0) {\n      return { success: false, message: 'Butterfly not found' };\n    }\n\n    const butterflyData = butterfly[0];\n    const frameId = butterflyData.frameId;\n\n    // Calculate credits based on rarity\n    const rarityValues = { common: 10, uncommon: 25, rare: 50, 'super-rare': 100, epic: 200, legendary: 500, mythical: 1000 };\n    const creditsEarned = rarityValues[butterflyData.butterflyRarity as keyof typeof rarityValues] || 10;\n\n    // Remove all likes for this frame when butterfly is sold\n    await this.db\n      .delete(exhibitionFrameLikes)\n      .where(eq(exhibitionFrameLikes.frameId, frameId));\n\n    console.log(`💔 Removed all likes for frame ${frameId} due to butterfly sale`);\n\n    // Remove butterfly\n    await this.db\n      .delete(exhibitionButterflies)\n      .where(and(eq(exhibitionButterflies.userId, userId), eq(exhibitionButterflies.id, exhibitionButterflyId)));\n\n    // Add credits\n    await this.updateUserCredits(userId, creditsEarned);\n\n    return { success: true, creditsEarned };\n  }\n\n  async canSellVipButterfly(userId: number, exhibitionVipButterflyId: number): Promise<boolean> {\n    const timeRemaining = await this.getTimeUntilVipSellable(userId, exhibitionVipButterflyId);\n    return timeRemaining === 0;\n  }\n\n  async getTimeUntilVipSellable(userId: number, exhibitionVipButterflyId: number): Promise<number> {\n    // 🚀 PERFORMANCE: Use optimized single VIP butterfly query\n    const vipButterfly = await this.getExhibitionVipButterflyById(userId, exhibitionVipButterflyId);\n    \n    if (!vipButterfly) return 0;\n    \n    const now = new Date();\n    const placedAt = new Date(vipButterfly.placedAt);\n    const msElapsed = now.getTime() - placedAt.getTime();\n    \n    // Base time: 72 hours for production (no more likes time reduction)\n    const baseTimeMs = 72 * 60 * 60 * 1000; // = 259,200,000 ms (72 hours)\n    \n    // No more likes time reduction - always 72 hours for selling\n    const requiredTimeMs = baseTimeMs;\n    \n    // Time remaining = required time - elapsed time\n    const remainingMs = Math.max(0, requiredTimeMs - msElapsed);\n    \n    \n    return remainingMs;\n  }\n\n  async sellExhibitionVipButterfly(userId: number, exhibitionVipButterflyId: number): Promise<{ success: boolean; message?: string; creditsEarned?: number }> {\n    const canSell = await this.canSellVipButterfly(userId, exhibitionVipButterflyId);\n    if (!canSell) {\n      return { success: false, message: 'VIP Butterfly not ready for sale yet' };\n    }\n\n    const vipButterfly = await this.db\n      .select()\n      .from(exhibitionVipButterflies)\n      .where(and(eq(exhibitionVipButterflies.userId, userId), eq(exhibitionVipButterflies.id, exhibitionVipButterflyId)));\n    \n    if (vipButterfly.length === 0) {\n      return { success: false, message: 'VIP Butterfly not found' };\n    }\n\n    const vipButterflyData = vipButterfly[0];\n    const frameId = vipButterflyData.frameId;\n\n    // VIP butterflies are worth much more! Fixed high value\n    const creditsEarned = 2500; // VIP butterflies are super valuable\n\n    // Remove all likes for this frame when VIP butterfly is sold\n    await this.db\n      .delete(exhibitionFrameLikes)\n      .where(eq(exhibitionFrameLikes.frameId, frameId));\n\n    console.log(`💔 Removed all likes for frame ${frameId} due to VIP butterfly sale`);\n\n    // Remove VIP butterfly from exhibition\n    await this.db\n      .delete(exhibitionVipButterflies)\n      .where(and(eq(exhibitionVipButterflies.userId, userId), eq(exhibitionVipButterflies.id, exhibitionVipButterflyId)));\n\n    // Add credits\n    await this.updateUserCredits(userId, creditsEarned);\n\n    console.log(`✨ Sold VIP butterfly ${vipButterflyData.vipButterflyName} for ${creditsEarned} credits`);\n    return { success: true, creditsEarned };\n  }\n\n  async applyButterflyTimeBoost(userId: number, exhibitionButterflyId: number, minutes: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      // Check if butterfly exists and belongs to user\n      const butterfly = await this.db\n        .select()\n        .from(exhibitionButterflies)\n        .where(and(eq(exhibitionButterflies.userId, userId), eq(exhibitionButterflies.id, exhibitionButterflyId)));\n      \n      if (butterfly.length === 0) {\n        return { success: false, message: 'Schmetterling nicht gefunden oder gehört dir nicht' };\n      }\n\n      // Check if already sellable\n      const canSell = await this.canSellButterfly(userId, exhibitionButterflyId);\n      if (canSell) {\n        return { success: false, message: 'Schmetterling ist bereits verkaufbar' };\n      }\n\n      // Calculate new placedAt date (move it back by the specified minutes)\n      const currentPlacedAt = new Date(butterfly[0].placedAt);\n      const newPlacedAt = new Date(currentPlacedAt.getTime() - (minutes * 60 * 1000));\n\n      // Update the placedAt time\n      await this.db\n        .update(exhibitionButterflies)\n        .set({ placedAt: newPlacedAt })\n        .where(and(eq(exhibitionButterflies.userId, userId), eq(exhibitionButterflies.id, exhibitionButterflyId)));\n\n      console.log(`☀️ Time Boost: User ${userId} butterfly ${exhibitionButterflyId} placedAt moved back ${minutes} minutes`);\n      \n      return { success: true, message: `Countdown um ${minutes} Minuten verkürzt` };\n    } catch (error) {\n      console.error('Error applying butterfly time boost:', error);\n      return { success: false, message: 'Fehler beim Anwenden des Zeit-Boosts' };\n    }\n  }\n\n  async processPassiveIncome(userId: number): Promise<{ success: boolean; creditsEarned?: number }> {\n    console.log(`🔍 Processing passive income for user ${userId}...`);\n    \n    // Get all exhibition butterflies (normal + VIP) for this user\n    const normalButterflies = await this.getExhibitionButterflies(userId);\n    const vipButterflies = await this.getExhibitionVipButterflies(userId);\n    \n    console.log(`🔍 User ${userId}: ${normalButterflies.length} normal butterflies, ${vipButterflies.length} VIP butterflies`);\n    \n    if (normalButterflies.length === 0 && vipButterflies.length === 0) {\n      console.log(`🔍 User ${userId}: No exhibition butterflies, skipping passive income`);\n      return { success: true, creditsEarned: 0 };\n    }\n    \n    // Get user's last passive income time\n    const user = await this.getUser(userId);\n    if (!user) {\n      return { success: false };\n    }\n    \n    const now = new Date();\n    let lastIncomeTime: Date;\n    let minutesElapsed: number;\n    \n    if (user.lastPassiveIncomeAt) {\n      // Normal case: use actual last income time\n      lastIncomeTime = user.lastPassiveIncomeAt;\n      minutesElapsed = Math.floor((now.getTime() - lastIncomeTime.getTime()) / (1000 * 60));\n    } else {\n      // First time or null case: check when first butterfly was placed\n      const firstButterflyTime = await this.getFirstButterflyPlacedTime(userId);\n      if (firstButterflyTime) {\n        lastIncomeTime = firstButterflyTime;\n        minutesElapsed = Math.floor((now.getTime() - firstButterflyTime.getTime()) / (1000 * 60));\n        console.log(`🔍 User ${userId}: First time passive income - using first butterfly time ${firstButterflyTime.toISOString()}`);\n      } else {\n        // Fallback: 1 minute ago\n        lastIncomeTime = new Date(now.getTime() - 60 * 1000);\n        minutesElapsed = 1;\n      }\n    }\n    \n    console.log(`🔍 User ${userId}: lastPassiveIncomeAt=${user.lastPassiveIncomeAt}, minutesElapsed=${minutesElapsed}`);\n    \n    // Don't process if less than 1 minute has passed\n    if (minutesElapsed < 1) {\n      console.log(`🔍 User ${userId}: Only ${minutesElapsed} minutes elapsed, skipping (need >=1 minute)`);\n      return { success: true, creditsEarned: 0 };\n    }\n    \n    // Calculate total hourly income from ALL butterflies with degradation\n    let totalHourlyIncome = 0;\n    \n    // Get all frame likes for this user to calculate like bonuses\n    const userFrameLikes = await this.getUserFrameLikes(userId);\n    \n    // Helper function to calculate degraded income for a butterfly with like bonus\n    const calculateDegradedIncome = (rarity: string, isVip: boolean, placedAt: Date, frameId: number): number => {\n      let baseValue: number;\n      \n      if (isVip) {\n        // VIP butterflies: 60 Cr/h → 6 Cr/h over 72 hours\n        baseValue = this.calculateDegradedValue(60, 6, placedAt);\n      } else {\n        const rarityValues: Record<string, { start: number; min: number }> = {\n          'common': { start: 1, min: 1 },       // No degradation for Common\n          'uncommon': { start: 2, min: 1 },     // 2 → 1 Cr/h\n          'rare': { start: 5, min: 1 },         // 5 → 1 Cr/h  \n          'super-rare': { start: 10, min: 1 },  // 10 → 1 Cr/h\n          'epic': { start: 20, min: 2 },        // 20 → 2 Cr/h\n          'legendary': { start: 50, min: 5 },   // 50 → 5 Cr/h\n          'mythical': { start: 100, min: 10 }   // 100 → 10 Cr/h\n        };\n\n        const values = rarityValues[rarity] || { start: 1, min: 1 };\n        baseValue = this.calculateDegradedValue(values.start, values.min, placedAt);\n      }\n      \n      // Apply like bonus: 2% per like for 72 hours\n      const frameWithLikes = userFrameLikes.find((f: any) => f.frameId === frameId);\n      const likesCount = frameWithLikes ? frameWithLikes.totalLikes : 0;\n      const likeBonus = 1 + (likesCount * 0.02); // 2% per like\n      \n      return Math.round(baseValue * likeBonus);\n    };\n    \n    // Add income from normal butterflies (with degradation and like bonus)\n    for (const butterfly of normalButterflies) {\n      const degradedIncome = calculateDegradedIncome(butterfly.butterflyRarity, false, butterfly.placedAt, butterfly.frameId);\n      totalHourlyIncome += degradedIncome;\n    }\n    \n    // Add income from VIP butterflies (with degradation and like bonus)\n    for (const vipButterfly of vipButterflies) {\n      const degradedIncome = calculateDegradedIncome('vip', true, vipButterfly.placedAt, vipButterfly.frameId);\n      totalHourlyIncome += degradedIncome;\n    }\n    \n    if (totalHourlyIncome === 0) {\n      return { success: true, creditsEarned: 0 };\n    }\n    \n    // Calculate how many credits can be awarded based on total hourly income\n    const minutesPerCredit = 60 / totalHourlyIncome;\n    const totalCredits = Math.floor(minutesElapsed / minutesPerCredit);\n    \n    if (totalCredits > 0) {\n      // Update user credits\n      await this.updateUserCredits(userId, totalCredits);\n      \n      // Log passive income (single log entry for all butterflies)\n      await this.db.insert(passiveIncomeLog).values({\n        userId,\n        amount: totalCredits,\n        sourceType: 'exhibition',\n        sourceDetails: `${normalButterflies.length + vipButterflies.length} butterflies, ${totalHourlyIncome}cr/h`\n      });\n      \n      // Update timestamp by the exact time consumed for the awarded credits\n      const minutesConsumed = totalCredits * minutesPerCredit;\n      const newLastIncomeTime = new Date(lastIncomeTime.getTime() + minutesConsumed * 60 * 1000);\n      await this.db.update(users)\n        .set({ lastPassiveIncomeAt: newLastIncomeTime })\n        .where(eq(users.id, userId));\n      \n      console.log(`💰 User ${userId} earned ${totalCredits} credits from exhibition (${totalHourlyIncome}cr/h, ${minutesPerCredit.toFixed(1)}min/cr)`);\n    }\n    \n    return { success: true, creditsEarned: totalCredits };\n  }\n\n  async updateUserActivity(userId: number): Promise<void> {\n    try {\n      // Update user's last activity timestamp to current time\n      await this.db.update(users)\n        .set({ updatedAt: new Date() })\n        .where(eq(users.id, userId));\n      \n      console.log(`✅ User ${userId} activity timestamp updated`);\n    } catch (error) {\n      console.error(`❌ Failed to update user ${userId} activity:`, error);\n    }\n  }\n\n  async updateUserLastActive(userId: number, lastActiveAt: Date = new Date()): Promise<void> {\n    // Temporarily disabled until database migration completes\n    // TODO: Re-enable after lastActiveAt column is properly added\n    try {\n      console.log(`⏰ Would update lastActive for user ${userId} (temporarily disabled)`);\n      // await this.db.update(users)\n      //   .set({ lastActiveAt })\n      //   .where(eq(users.id, userId));\n      \n      // console.log(`❤️ User ${userId} heartbeat recorded`);\n    } catch (error) {\n      console.error(`❌ Failed to update user ${userId} lastActive:`, error);\n      throw error;\n    }\n  }\n\n  // Emergency system methods\n  async giveUserSeed(userId: number, seedId: number, quantity: number): Promise<void> {\n    console.log(`🎁 Giving ${quantity} seeds (ID: ${seedId}) to user ${userId}`);\n    \n    // Check if user already has this seed type\n    const existingUserSeed = await this.db\n      .select()\n      .from(userSeeds)\n      .where(and(eq(userSeeds.userId, userId), eq(userSeeds.seedId, seedId)));\n    \n    if (existingUserSeed.length > 0) {\n      // Update existing quantity\n      const newQuantity = existingUserSeed[0].quantity + quantity;\n      await this.db\n        .update(userSeeds)\n        .set({ quantity: newQuantity })\n        .where(and(eq(userSeeds.userId, userId), eq(userSeeds.seedId, seedId)));\n      \n      console.log(`🎁 Updated existing seed: User ${userId} now has ${newQuantity} seeds (ID: ${seedId})`);\n    } else {\n      // Create new seed entry\n      await this.db.insert(userSeeds).values({\n        userId,\n        seedId,\n        quantity,\n        createdAt: new Date()\n      });\n      \n      console.log(`🎁 Created new seed entry: User ${userId} received ${quantity} seeds (ID: ${seedId})`);\n    }\n  }\n\n  async checkEmergencyQualification(userId: number): Promise<{ eligible: boolean; reason?: string }> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      return { eligible: false, reason: \"User not found\" };\n    }\n\n    // Check 1: User has 0 credits\n    if (user.credits > 0) {\n      return { eligible: false, reason: \"Du hast noch Credits verfügbar\" };\n    }\n\n    // Check 2: User has no seeds\n    const userSeedsList = await this.getUserSeeds(userId);\n    const totalSeeds = userSeedsList.reduce((sum, seed) => sum + seed.quantity, 0);\n    if (totalSeeds > 0) {\n      return { eligible: false, reason: \"Du hast noch Samen verfügbar\" };\n    }\n\n    // Check 3: User has less than 3 flowers for bouquet\n    const userFlowersList = await this.getUserFlowers(userId);\n    if (userFlowersList.length >= 3) {\n      return { eligible: false, reason: \"Du hast genug Blumen für ein Bouquet\" };\n    }\n\n    // Check 4: User has no bouquets\n    const userBouquetsList = await this.getUserBouquets(userId);\n    if (userBouquetsList.length > 0) {\n      return { eligible: false, reason: \"Du hast noch Bouquets verfügbar\" };\n    }\n\n    // Check 5: User has no passive income (no exhibition butterflies)\n    const exhibitionButterfliesList = await this.getExhibitionButterflies(userId);\n    const vipButterfliesList = await this.getExhibitionVipButterflies(userId);\n    \n    if (exhibitionButterfliesList.length > 0 || vipButterfliesList.length > 0) {\n      return { eligible: false, reason: \"Du hast passives Einkommen durch Ausstellungs-Schmetterlinge\" };\n    }\n\n    // User qualifies for emergency seeds!\n    return { eligible: true };\n  }\n\n  async getAllUsersWithStatus(excludeUserId?: number): Promise<Array<{\n    id: number;\n    username: string;\n    isOnline: boolean;\n    exhibitionButterflies: number;\n    lastSeen: string;\n    totalLikes: number;\n  }>> {\n    console.log('🔍 PostgreSQL getAllUsersWithStatus: Finding users for user list');\n    \n    // Get all users (excluding lastActiveAt until migration completes)\n    const allUsers = await this.db.select({\n      id: users.id,\n      username: users.username,\n      credits: users.credits,\n      createdAt: users.createdAt,\n      updatedAt: users.updatedAt,\n      lastPassiveIncomeAt: users.lastPassiveIncomeAt\n    }).from(users);\n    console.log(`🔍 Found ${allUsers.length} users total`);\n    \n    const userList = [];\n    \n    for (const user of allUsers) {\n      // Skip demo users and current user if specified\n      if (user.id === 99 || (excludeUserId && user.id === excludeUserId)) continue;\n      \n      // Count exhibition butterflies for this user\n      const butterflyCountResult = await this.db\n        .select({ count: sql<number>`count(*)` })\n        .from(exhibitionButterflies)\n        .where(eq(exhibitionButterflies.userId, user.id));\n      \n      const butterflyCount = butterflyCountResult[0]?.count || 0;\n      \n      // Calculate online status based on updatedAt timestamp\n      const now = new Date();\n      const lastActivity = user.updatedAt || user.createdAt;\n      const timeDiff = now.getTime() - lastActivity.getTime();\n      const minutesDiff = Math.floor(timeDiff / (1000 * 60));\n      \n      // Consider user online if last activity was within 5 minutes\n      const isOnline = minutesDiff < 5;\n      \n      // Format last seen\n      let lastSeen = '';\n      if (!isOnline) {\n        if (minutesDiff < 60) {\n          lastSeen = `vor ${minutesDiff} Min`;\n        } else if (minutesDiff < 1440) { // 24 hours\n          const hours = Math.floor(minutesDiff / 60);\n          lastSeen = `vor ${hours} Std`;\n        } else {\n          const days = Math.floor(minutesDiff / 1440);\n          lastSeen = `vor ${days} Tag${days === 1 ? '' : 'en'}`;\n        }\n      }\n      \n      // Calculate total likes for this user's exhibition\n      const totalLikesResult = await this.db\n        .select({ count: sql<number>`count(*)` })\n        .from(exhibitionFrameLikes)\n        .where(eq(exhibitionFrameLikes.frameOwnerId, user.id));\n      \n      const totalLikes = totalLikesResult[0]?.count || 0;\n      \n      userList.push({\n        id: user.id,\n        username: user.username,\n        isOnline,\n        exhibitionButterflies: butterflyCount,\n        lastSeen,\n        totalLikes\n      });\n    }\n    \n    // Sort by online status first, then by username\n    userList.sort((a, b) => {\n      if (a.isOnline !== b.isOnline) {\n        return b.isOnline ? 1 : -1; // Online users first\n      }\n      return a.username.localeCompare(b.username);\n    });\n    \n    console.log(`🔍 Processed ${userList.length} users for user list display`);\n    return userList;\n  }\n\n  async likeExhibitionFrame(userId: number, frameOwnerId: number, frameId: number): Promise<{ success: boolean; message?: string }> {\n    // Can't like your own frame\n    if (userId === frameOwnerId) {\n      return { success: false, message: 'Cannot like your own frame' };\n    }\n\n    // Check if frame is full (6 butterflies)\n    const frameButterflies = await this.db\n      .select()\n      .from(exhibitionButterflies)\n      .where(and(eq(exhibitionButterflies.userId, frameOwnerId), eq(exhibitionButterflies.frameId, frameId)));\n    \n    if (frameButterflies.length < 6) {\n      return { success: false, message: 'Only full frames can be liked' };\n    }\n\n    // Check if already liked\n    const existing = await this.db\n      .select()\n      .from(exhibitionFrameLikes)\n      .where(and(\n        eq(exhibitionFrameLikes.likerId, userId),\n        eq(exhibitionFrameLikes.frameOwnerId, frameOwnerId),\n        eq(exhibitionFrameLikes.frameId, frameId)\n      ));\n\n    if (existing.length > 0) {\n      return { success: false, message: 'Already liked' };\n    }\n\n    await this.db.insert(exhibitionFrameLikes).values({\n      frameOwnerId,\n      likerId: userId,\n      frameId\n    });\n\n    return { success: true };\n  }\n\n  async unlikeExhibitionFrame(userId: number, frameOwnerId: number, frameId: number): Promise<{ success: boolean; message?: string }> {\n    const result = await this.db\n      .delete(exhibitionFrameLikes)\n      .where(and(\n        eq(exhibitionFrameLikes.likerId, userId),\n        eq(exhibitionFrameLikes.frameOwnerId, frameOwnerId),\n        eq(exhibitionFrameLikes.frameId, frameId)\n      ));\n\n    return { success: true };\n  }\n\n  async getForeignExhibitionButterflies(frameOwnerId: number): Promise<any[]> {\n    const result = await this.db\n      .select()\n      .from(exhibitionButterflies)\n      .where(eq(exhibitionButterflies.userId, frameOwnerId));\n    \n    return result;\n  }\n\n  async getForeignExhibitionFrames(frameOwnerId: number): Promise<any[]> {\n    const result = await this.db\n      .select()\n      .from(exhibitionFrames)\n      .where(eq(exhibitionFrames.userId, frameOwnerId));\n    \n    return result;\n  }\n\n  async getForeignExhibitionVipButterflies(frameOwnerId: number): Promise<any[]> {\n    const result = await this.db\n      .select()\n      .from(exhibitionVipButterflies)\n      .where(eq(exhibitionVipButterflies.userId, frameOwnerId));\n    \n    return result;\n  }\n\n  async getForeignAquariumFish(ownerId: number): Promise<any[]> {\n    const result = await this.db\n      .select()\n      .from(aquariumFish)\n      .where(eq(aquariumFish.userId, ownerId));\n    \n    return result;\n  }\n\n  async getForeignAquariumTanks(ownerId: number): Promise<any[]> {\n    const result = await this.db\n      .select()\n      .from(aquariumTanks)\n      .where(eq(aquariumTanks.userId, ownerId));\n    \n    return result;\n  }\n\n  // Bouquet timing methods for butterfly spawner\n  async updateBouquetNextSpawnTime(userId: number, fieldIndex: number, nextSpawnAt: Date): Promise<void> {\n    // Get current spawn slot for this bouquet\n    const currentBouquet = await this.db\n      .select()\n      .from(placedBouquets)\n      .where(and(eq(placedBouquets.userId, userId), eq(placedBouquets.fieldIndex, fieldIndex)))\n      .limit(1);\n\n    if (currentBouquet.length === 0) return;\n\n    const currentSlot = (currentBouquet[0] as any).currentSpawnSlot || 1;\n    const nextSlot = currentSlot + 1;\n    \n    // Generate random spawn interval (1-5 minutes)\n    const { getRandomSpawnInterval } = await import('./bouquet');\n    const randomInterval = getRandomSpawnInterval();\n    const actualNextSpawnAt = new Date(Date.now() + randomInterval);\n\n    console.log(`🦋 Bouquet #${currentBouquet[0].bouquetId}: Advancing from slot ${currentSlot} to ${nextSlot} (${nextSlot > 4 ? 'COMPLETED' : 'Active'})`);\n    \n    await this.db\n      .update(placedBouquets)\n      .set({ \n        nextSpawnAt: actualNextSpawnAt,\n        currentSpawnSlot: nextSlot \n      })\n      .where(and(eq(placedBouquets.userId, userId), eq(placedBouquets.fieldIndex, fieldIndex)));\n  }\n\n  // ========== WEEKLY CHALLENGE SYSTEM ==========\n\n  async getCurrentWeeklyChallenge(): Promise<WeeklyChallenge | null> {\n    try {\n      const now = new Date();\n      \n      const challenge = await this.db\n        .select()\n        .from(weeklyChallenges)\n        .where(eq(weeklyChallenges.isActive, true))\n        .limit(1);\n\n      console.log('🌸 Retrieved weekly challenge:', challenge[0] || 'No active challenge');\n      return challenge[0] || null;\n    } catch (error) {\n      console.error('Error retrieving weekly challenge:', error);\n      throw error;\n    }\n  }\n\n  async createWeeklyChallenge(): Promise<WeeklyChallenge> {\n    // Get current Monday 0:00\n    const now = new Date();\n    const monday = new Date(now);\n    monday.setDate(monday.getDate() - (monday.getDay() === 0 ? 6 : monday.getDay() - 1));\n    monday.setHours(0, 0, 0, 0);\n    \n    // Sunday 18:00 \n    const sunday = new Date(monday);\n    sunday.setDate(sunday.getDate() + 6);\n    sunday.setHours(18, 0, 0, 0);\n\n    // Generate week number (YYYY-WW format)\n    const year = monday.getFullYear();\n    const firstDayOfYear = new Date(year, 0, 1);\n    const pastDaysOfYear = (monday.getTime() - firstDayOfYear.getTime()) / 86400000;\n    const weekNumber = Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n\n    // Generate 6 random flowers: 2 uncommon, 2 rare, 2 super-rare\n    const flowerIds = {\n      uncommon1: this.getRandomFlowerByRarity(\"uncommon\"),\n      uncommon2: this.getRandomFlowerByRarity(\"uncommon\"), \n      rare1: this.getRandomFlowerByRarity(\"rare\"),\n      rare2: this.getRandomFlowerByRarity(\"rare\"),\n      superrare1: this.getRandomFlowerByRarity(\"super-rare\"),\n      superrare2: this.getRandomFlowerByRarity(\"super-rare\")\n    };\n\n    const challengeData = {\n      weekNumber: parseInt(`${year}${weekNumber.toString().padStart(2, '0')}`),\n      year,\n      startTime: monday,\n      endTime: sunday,\n      isActive: true,\n      flowerId1: flowerIds.uncommon1,\n      flowerId2: flowerIds.uncommon2,\n      flowerId3: flowerIds.rare1,\n      flowerId4: flowerIds.rare2,\n      flowerId5: flowerIds.superrare1,\n      flowerId6: flowerIds.superrare2\n    };\n\n    const result = await this.db.insert(weeklyChallenges).values(challengeData).returning();\n    console.log('🌸 Created new weekly challenge:', challengeData);\n    \n    // Initialize all users with 0 points (invisible until they donate)\n    await this.initializeUsersForChallenge(result[0].id);\n    \n    return result[0];\n  }\n\n  async deactivateChallenge(challengeId: number): Promise<void> {\n    try {\n      await this.db\n        .update(weeklyChallenges)\n        .set({ isActive: false })\n        .where(eq(weeklyChallenges.id, challengeId));\n      \n      console.log(`🌸 Deactivated challenge ${challengeId}`);\n    } catch (error) {\n      console.error('Error deactivating challenge:', error);\n      throw error;\n    }\n  }\n\n  private getRandomFlowerByRarity(targetRarity: string): number {\n    // Based on rarity distribution from replit.md:\n    // Uncommon: 56-100, Rare: 101-135, Super-rare: 136-160\n    const ranges = {\n      \"uncommon\": { min: 56, max: 100 },\n      \"rare\": { min: 101, max: 135 }, \n      \"super-rare\": { min: 136, max: 160 }\n    };\n    \n    const range = ranges[targetRarity as keyof typeof ranges];\n    if (!range) return 1; // fallback\n    \n    return Math.floor(Math.random() * (range.max - range.min + 1)) + range.min;\n  }\n\n  async donateFlowerToChallenge(userId: number, donation: DonateChallengeFlowerRequest): Promise<{ success: boolean; message?: string; seedsReceived?: number }> {\n    // Check if user has enough flowers\n    const userFlower = await this.db\n      .select()\n      .from(userFlowers)\n      .where(and(\n        eq(userFlowers.userId, userId),\n        eq(userFlowers.flowerId, donation.flowerId)\n      ))\n      .limit(1);\n\n    if (!userFlower[0] || userFlower[0].quantity < donation.quantity) {\n      return { success: false, message: \"Nicht genügend Blumen vorhanden\" };\n    }\n\n    // Deduct flowers from user\n    const newQuantity = userFlower[0].quantity - donation.quantity;\n    if (newQuantity === 0) {\n      await this.db\n        .delete(userFlowers)\n        .where(and(\n          eq(userFlowers.userId, userId),\n          eq(userFlowers.flowerId, donation.flowerId)\n        ));\n    } else {\n      await this.db\n        .update(userFlowers)\n        .set({ quantity: newQuantity })\n        .where(and(\n          eq(userFlowers.userId, userId),\n          eq(userFlowers.flowerId, donation.flowerId)\n        ));\n    }\n\n    // Record donation\n    await this.db.insert(challengeDonations).values({\n      challengeId: donation.challengeId,\n      userId,\n      flowerId: donation.flowerId,\n      quantity: donation.quantity\n    });\n\n    // Give seeds (ALWAYS 1 seed per donated flower: 50% same rarity, 50% one tier higher)\n    let seedsReceived = 0;\n    for (let i = 0; i < donation.quantity; i++) {\n      const rewardSeed = this.getChallengeRewardSeed(userFlower[0].flowerRarity || \"common\");\n      await this.giveUserSeed(userId, rewardSeed, 1);\n      seedsReceived++;\n    }\n\n    console.log(`🌸 User ${userId} donated ${donation.quantity}x flower ${donation.flowerId}, received ${seedsReceived} seeds`);\n    \n    return { \n      success: true, \n      message: `${donation.quantity} Blumen gespendet!`,\n      seedsReceived \n    };\n  }\n\n  private getChallengeRewardSeed(currentRarity: string): number {\n    // 50% same rarity, 50% one tier higher (never lower!)\n    const sameRarity = Math.random() < 0.5;\n    \n    const rarityToSeedMap = {\n      \"common\": 1,\n      \"uncommon\": 2,\n      \"rare\": 3,\n      \"super-rare\": 4,\n      \"epic\": 5,\n      \"legendary\": 5, // legendary can't go higher, stays legendary\n      \"mythical\": 5  // mythical can't go higher, stays legendary\n    };\n    \n    const currentSeedId = rarityToSeedMap[currentRarity as keyof typeof rarityToSeedMap] || 1;\n    \n    if (sameRarity) {\n      return currentSeedId; // Same rarity as donated flower\n    } else {\n      // One tier higher (max legendary = seedId 5)\n      return Math.min(currentSeedId + 1, 5);\n    }\n  }\n\n  async getChallengeLeaderboard(challengeId: number): Promise<any[]> {\n    const donations = await this.db\n      .select({\n        userId: challengeDonations.userId,\n        totalDonations: challengeDonations.quantity\n      })\n      .from(challengeDonations)\n      .where(eq(challengeDonations.challengeId, challengeId));\n\n    // Group by user and sum donations\n    const userTotals = new Map();\n    donations.forEach((d: any) => {\n      const current = userTotals.get(d.userId) || 0;\n      userTotals.set(d.userId, current + d.totalDonations);\n    });\n\n    // Get user details and sort by total donations - ONLY show users with > 0 donations\n    const leaderboard = [];\n    for (const [userId, total] of userTotals) {\n      if (total > 0) { // Only show users who actually donated\n        const user = await this.getUser(userId);\n        if (user) {\n          leaderboard.push({\n            userId,\n            username: user.username,\n            totalDonations: total\n          });\n        }\n      }\n    }\n\n    return leaderboard.sort((a, b) => b.totalDonations - a.totalDonations);\n  }\n\n  /**\n   * Create a notification for challenge reward winners\n   */\n  async createChallengeRewardNotification(\n    userId: number, \n    challengeId: number, \n    challengeRank: number,\n    rewardType: string,\n    rewardItemId?: number,\n    rewardItemName?: string,\n    rewardItemRarity?: string,\n    rewardAmount?: number\n  ): Promise<void> {\n    const rank = challengeRank;\n    const getOrdinal = (num: number) => {\n      const suffix = [\"ter\", \"ter\", \"ter\"]; // German ordinals\n      if (num === 1) return \"1.\";\n      if (num === 2) return \"2.\";\n      if (num === 3) return \"3.\";\n      return num + \".\";\n    };\n\n    let title = \"\";\n    let message = \"\";\n    \n    if (rank <= 3) {\n      title = `🏆 Challenge ${getOrdinal(rank)} Platz!`;\n      if (rewardType === 'vip_butterfly') {\n        title = `🌟 Challenge Gewonnen!`;\n        message = `Herzlichen Glückwunsch! Du hast Platz ${rank} in der Weekly Challenge erreicht und einen VIP-Schmetterling gewonnen: ${rewardItemName} (${rewardItemRarity})`;\n      } else if (rewardType === 'butterfly') {\n        message = `Herzlichen Glückwunsch! Du hast Platz ${rank} in der Weekly Challenge erreicht und einen Schmetterling gewonnen: ${rewardItemName} (${rewardItemRarity})`;\n      } else if (rewardType === 'credits') {\n        message = `Herzlichen Glückwunsch! Du hast Platz ${rank} in der Weekly Challenge erreicht und ${rewardAmount} Credits gewonnen!`;\n      }\n    } else {\n      title = `🎁 Challenge Belohnung!`;\n      if (rewardType === 'butterfly') {\n        message = `Du hast an der Weekly Challenge teilgenommen und Platz ${rank} erreicht! Als Belohnung erhältst du: ${rewardItemName} (${rewardItemRarity})`;\n      } else if (rewardType === 'credits') {\n        message = `Du hast an der Weekly Challenge teilgenommen und Platz ${rank} erreicht! Als Belohnung erhältst du: ${rewardAmount} Credits`;\n      }\n    }\n\n    await this.db.insert(userNotifications).values({\n      userId,\n      type: 'challenge_reward',\n      title,\n      message,\n      isRead: false,\n      rewardType,\n      rewardItemId,\n      rewardItemName,\n      rewardItemRarity,\n      rewardAmount,\n      challengeId,\n      challengeRank: rank,\n    });\n\n    console.log(`📨 Created challenge reward notification for user ${userId}, rank ${rank}: ${title}`);\n  }\n\n  /**\n   * Get unread notifications for a user\n   */\n  async getUserNotifications(userId: number): Promise<UserNotification[]> {\n    const notifications = await this.db\n      .select()\n      .from(userNotifications)\n      .where(and(\n        eq(userNotifications.userId, userId),\n        eq(userNotifications.isRead, false)\n      ))\n      .orderBy(desc(userNotifications.createdAt));\n\n    console.log(`📨 Found ${notifications.length} unread notifications for user ${userId}`);\n    return notifications;\n  }\n\n  /**\n   * Mark a notification as read\n   */\n  async markNotificationAsRead(notificationId: number, userId: number): Promise<void> {\n    await this.db\n      .update(userNotifications)\n      .set({ \n        isRead: true, \n        readAt: sql`now()` \n      })\n      .where(and(\n        eq(userNotifications.id, notificationId),\n        eq(userNotifications.userId, userId)\n      ));\n\n    console.log(`📨 Marked notification ${notificationId} as read for user ${userId}`);\n  }\n\n  /**\n   * Mark all notifications as read for a user\n   */\n  async markAllNotificationsAsRead(userId: number): Promise<void> {\n    await this.db\n      .update(userNotifications)\n      .set({ \n        isRead: true, \n        readAt: sql`now()` \n      })\n      .where(and(\n        eq(userNotifications.userId, userId),\n        eq(userNotifications.isRead, false)\n      ));\n\n    console.log(`📨 Marked all notifications as read for user ${userId}`);\n  }\n\n  async processChallengeRewards(challengeId: number): Promise<void> {\n    const leaderboard = await this.getChallengeLeaderboard(challengeId);\n    \n    for (let rank = 1; rank <= Math.min(10, leaderboard.length); rank++) {\n      const user = leaderboard[rank - 1];\n      let butterfly;\n      let isAnimated = false;\n      let passiveIncome = 0;\n\n      if (rank === 1) {\n        // VIP Animated butterfly with passive income - use real VIP system\n        // Get available VIP files dynamically\n        const availableVipIds = await this.getAvailableVipIds();\n        const randomVipId = availableVipIds[Math.floor(Math.random() * availableVipIds.length)];\n        const vipButterflyName = `VIP Mariposa ${this.getVipName(randomVipId)}`;\n        \n        // Add VIP butterfly to user's collection using VIP system\n        await this.addVipButterflyToInventory(user.userId, randomVipId, vipButterflyName, `/VIP/VIP${randomVipId}.gif`);\n        \n        console.log(`🏆 Winner ${user.username} received VIP butterfly: ${vipButterflyName}`);\n        \n        // Record VIP reward in challenge rewards (modify structure for VIP)\n        await this.db.insert(challengeRewards).values({\n          challengeId,\n          userId: user.userId,\n          rank,\n          totalDonations: user.totalDonations,\n          butterflyId: randomVipId,\n          butterflyName: vipButterflyName,\n          butterflyRarity: \"vip\",\n          butterflyImageUrl: `/VIP/VIP${randomVipId}.gif`,\n          isAnimated: true,\n          passiveIncome: 60\n        });\n        \n        // Create notification for VIP butterfly winner\n        await this.createChallengeRewardNotification(\n          user.userId,\n          challengeId,\n          rank,\n          'vip_butterfly',\n          randomVipId,\n          vipButterflyName,\n          'VIP',\n          undefined\n        );\n        \n        continue; // Skip normal butterfly processing for rank 1\n      } else if (rank === 2) {\n        butterfly = this.getRandomButterflyByRarity(\"epic\");\n      } else if (rank === 3) {\n        butterfly = this.getRandomButterflyByRarity(\"super-rare\");\n      } else {\n        butterfly = this.getRandomButterflyByRarity(\"rare\");\n      }\n\n      // Add butterfly to user's collection\n      await this.db.insert(userButterflies).values({\n        userId: user.userId,\n        butterflyId: butterfly.id,\n        butterflyName: butterfly.name,\n        butterflyRarity: butterfly.rarity,\n        butterflyImageUrl: butterfly.imageUrl,\n        isAnimated,\n        passiveIncome\n      });\n\n      // Record reward\n      await this.db.insert(challengeRewards).values({\n        challengeId,\n        userId: user.userId,\n        rank,\n        totalDonations: user.totalDonations,\n        butterflyId: butterfly.id,\n        butterflyName: butterfly.name,\n        butterflyRarity: butterfly.rarity,\n        butterflyImageUrl: butterfly.imageUrl,\n        isAnimated,\n        passiveIncome\n      });\n\n      // Create notification for butterfly winner\n      await this.createChallengeRewardNotification(\n        user.userId,\n        challengeId,\n        rank,\n        'butterfly',\n        butterfly.id,\n        butterfly.name,\n        butterfly.rarity,\n        undefined\n      );\n    }\n\n    console.log(`🏆 Processed rewards for challenge ${challengeId}, ${leaderboard.length} participants`);\n    \n    // Reset all users to 0 points after processing rewards\n    await this.resetAllUsersForNewChallenge();\n  }\n\n  async initializeUsersForChallenge(challengeId: number): Promise<void> {\n    try {\n      // Get all existing users\n      const allUsers = await this.db.select({ id: users.id }).from(users);\n      \n      // Create 0-donation entries for all users (invisible until they donate)\n      const initialEntries = allUsers.map((user: any) => ({\n        challengeId,\n        userId: user.id,\n        flowerId: 1, // Dummy flower ID for initialization\n        quantity: 0,\n        createdAt: new Date()\n      }));\n      \n      if (initialEntries.length > 0) {\n        await this.db.insert(challengeDonations).values(initialEntries);\n        console.log(`🌸 Initialized ${initialEntries.length} users with 0 points for challenge ${challengeId}`);\n      }\n    } catch (error) {\n      console.error('🌸 Error initializing users for challenge:', error);\n    }\n  }\n\n  async resetAllUsersForNewChallenge(): Promise<void> {\n    try {\n      // This happens naturally when a new challenge is created with 0-point entries\n      console.log('🌸 User points will be reset with next challenge creation');\n    } catch (error) {\n      console.error('🌸 Error resetting users for new challenge:', error);\n    }\n  }\n\n  private getRandomButterflyByRarity(targetRarity: string): any {\n    return generateRandomButterfly(targetRarity as RarityTier);\n  }\n\n  private async getAvailableVipIds(): Promise<number[]> {\n    try {\n      const fs = await import('fs/promises');\n      const path = await import('path');\n      \n      const vipDir = path.join(process.cwd(), 'client/public/VIP');\n      const files = await fs.readdir(vipDir);\n      \n      // Extract VIP numbers from VIPx.gif files\n      const vipIds: number[] = [];\n      files.forEach(file => {\n        const match = file.match(/^VIP(\\d+)\\.gif$/i);\n        if (match) {\n          const vipId = parseInt(match[1]);\n          if (!isNaN(vipId)) {\n            vipIds.push(vipId);\n          }\n        }\n      });\n      \n      // Sort and return available VIP IDs\n      const sortedIds = vipIds.sort((a, b) => a - b);\n      console.log(`🦋 Found ${sortedIds.length} VIP butterfly files: VIP${sortedIds.join('.gif, VIP')}.gif`);\n      \n      return sortedIds.length > 0 ? sortedIds : [1]; // Fallback to VIP1 if none found\n    } catch (error) {\n      console.error('🦋 Error reading VIP directory:', error);\n      return [1]; // Fallback to VIP1\n    }\n  }\n\n  private getVipName(vipId: number): string {\n    const vipNames = [\n      'Dorada',     // VIP1\n      'Platinada',  // VIP2  \n      'Diamante',   // VIP3\n      'Celestial',  // VIP4\n      'Imperial',   // VIP5\n      'Divina',     // VIP6\n      'Suprema',    // VIP7\n      'Legendaria', // VIP8\n      'Mística',    // VIP9\n      'Eterna'      // VIP10\n    ];\n    \n    // Return name based on VIP ID, with fallback pattern for higher numbers\n    if (vipId <= vipNames.length) {\n      return vipNames[vipId - 1];\n    } else {\n      return `Extraordinaria ${vipId}`;\n    }\n  }\n\n\n  /**\n   * Get the time when the first exhibition butterfly was placed for a user\n   */\n  async getFirstButterflyPlacedTime(userId: number): Promise<Date | null> {\n    try {\n      // Check both normal and VIP exhibition butterflies\n      const normalButterflies = await this.db\n        .select()\n        .from(exhibitionButterflies)\n        .where(eq(exhibitionButterflies.userId, userId))\n        .orderBy(exhibitionButterflies.placedAt)\n        .limit(1);\n        \n      const vipButterflies = await this.db\n        .select()\n        .from(exhibitionVipButterflies)\n        .where(eq(exhibitionVipButterflies.userId, userId))\n        .orderBy(exhibitionVipButterflies.placedAt)\n        .limit(1);\n      \n      const firstNormal = normalButterflies[0]?.placedAt;\n      const firstVip = vipButterflies[0]?.placedAt;\n      \n      if (!firstNormal && !firstVip) {\n        return null;\n      }\n      \n      if (!firstNormal) return new Date(firstVip);\n      if (!firstVip) return new Date(firstNormal);\n      \n      // Return whichever came first\n      return new Date(firstNormal) < new Date(firstVip) \n        ? new Date(firstNormal) \n        : new Date(firstVip);\n        \n    } catch (error) {\n      console.error('Error getting first butterfly placed time:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 🔧 ADMIN: Fix passive income time bug for a user\n   * Resets lastPassiveIncomeAt to NULL, allowing the system to use current time\n   */\n  async fixPassiveIncomeTime(userId: number): Promise<void> {\n    console.log(`🔧 Fixing passive income time for user ${userId}`);\n    \n    await this.db\n      .update(users)\n      .set({ lastPassiveIncomeAt: null })\n      .where(eq(users.id, userId));\n      \n    console.log(`✅ Passive income time fixed for user ${userId}`);\n  }\n\n  // Sun Spawn Management\n  /**\n   * Get all active sun spawns\n   */\n  async getActiveSunSpawns(): Promise<any[]> {\n    const now = new Date();\n    return await this.db\n      .select()\n      .from(sunSpawns)\n      .where(and(\n        eq(sunSpawns.isActive, true),\n        gt(sunSpawns.expiresAt, now) // Still active (not expired yet)\n      ));\n  }\n\n  /**\n   * Get active sun spawns for a specific user\n   */\n  async getActiveSunSpawnsForUser(userId: number): Promise<any[]> {\n    const now = new Date();\n    \n    return await this.db\n      .select()\n      .from(sunSpawns)\n      .where(and(\n        eq(sunSpawns.userId, userId), // Only return suns that belong to this user\n        eq(sunSpawns.isActive, true),\n        gt(sunSpawns.expiresAt, now) // Still active (not expired yet)\n      ));\n  }\n\n  /**\n   * Spawn a new sun on a field for a specific user\n   */\n  async spawnSun(fieldIndex: number, userId: number): Promise<{ success: boolean; sunAmount: number }> {\n    const now = new Date();\n    const expiresAt = new Date(now.getTime() + 30 * 1000); // 30 seconds\n    const sunAmount = Math.floor(Math.random() * 3) + 1; // 1-3 suns\n\n    try {\n      console.log(`☀️ Spawning ${sunAmount} suns on field ${fieldIndex} for user ${userId}`);\n      \n      await this.db\n        .insert(sunSpawns)\n        .values({\n          userId,\n          fieldIndex,\n          spawnedAt: now,\n          expiresAt,\n          sunAmount,\n          isActive: true\n        });\n\n      return { success: true, sunAmount };\n    } catch (error) {\n      console.error('Error spawning sun:', error);\n      return { success: false, sunAmount: 0 };\n    }\n  }\n\n  /**\n   * Collect sun from a field\n   */\n  async collectSun(fieldIndex: number): Promise<{ success: boolean; sunAmount: number; message: string }> {\n    const now = new Date();\n    \n    try {\n      // Find active sun spawn on this field\n      const activeSun = await this.db\n        .select()\n        .from(sunSpawns)\n        .where(and(\n          eq(sunSpawns.fieldIndex, fieldIndex),\n          eq(sunSpawns.isActive, true),\n          gt(sunSpawns.expiresAt, now) // Not expired yet\n        ))\n        .limit(1);\n\n      if (activeSun.length === 0) {\n        return { success: false, sunAmount: 0, message: 'Keine Sonne zum Einsammeln gefunden' };\n      }\n\n      const sun = activeSun[0];\n      \n      // Deactivate the sun spawn\n      await this.db\n        .update(sunSpawns)\n        .set({ isActive: false })\n        .where(eq(sunSpawns.id, sun.id));\n\n      console.log(`☀️ Collected ${sun.sunAmount} suns from field ${fieldIndex}`);\n      \n      return { \n        success: true, \n        sunAmount: sun.sunAmount, \n        message: `${sun.sunAmount} Sonnen eingesammelt!` \n      };\n    } catch (error) {\n      console.error('Error collecting sun:', error);\n      return { success: false, sunAmount: 0, message: 'Fehler beim Einsammeln der Sonne' };\n    }\n  }\n\n  /**\n   * Clean up expired sun spawns\n   */\n  async cleanupExpiredSuns(): Promise<void> {\n    const now = new Date();\n    \n    try {\n      const result = await this.db\n        .update(sunSpawns)\n        .set({ isActive: false })\n        .where(and(\n          eq(sunSpawns.isActive, true),\n          lt(sunSpawns.expiresAt, now)\n        ));\n\n      console.log(`☀️ Cleaned up expired sun spawns`);\n    } catch (error) {\n      console.error('Error cleaning up expired suns:', error);\n    }\n  }\n\n\n  /**\n   * Check for active sun on specific field\n   */\n  async getActiveSunOnField(fieldIndex: number): Promise<any | null> {\n    const now = new Date();\n    \n    try {\n      const activeSun = await this.db\n        .select()\n        .from(sunSpawns)\n        .where(and(\n          eq(sunSpawns.fieldIndex, fieldIndex),\n          eq(sunSpawns.isActive, true),\n          gt(sunSpawns.expiresAt, now)\n        ))\n        .limit(1);\n\n      return activeSun.length > 0 ? activeSun[0] : null;\n    } catch (error) {\n      console.error('Error checking active sun on field:', error);\n      return null;\n    }\n  }\n\n  // REMOVED: Duplicate updateUserSuns function (exists on line 437)\n\n  /**\n   * Get butterfly sell price for suns (direct sale from inventory)\n   */\n  getButterflyToSunsPrice(rarity: string): number {\n    const prices = {\n      'common': 30,\n      'uncommon': 45,\n      'rare': 70,\n      'super-rare': 100,\n      'epic': 150,\n      'legendary': 250,\n      'mythical': 500\n    };\n    return prices[rarity as keyof typeof prices] || 30;\n  }\n\n  /**\n   * Sell butterfly from inventory directly for suns\n   */\n  async sellButterflyForSuns(userId: number, butterflyId: number): Promise<{ success: boolean; message?: string; sunsEarned?: number }> {\n    try {\n      // Find the butterfly in user's collection\n      const userButterfliesData = await this.getUserButterflies(userId);\n      const butterfly = userButterfliesData.find(b => b.id === butterflyId);\n      \n      if (!butterfly) {\n        return { success: false, message: \"Schmetterling nicht gefunden\" };\n      }\n\n      // Check ownership\n      if (butterfly.userId !== userId) {\n        return { success: false, message: \"Dieser Schmetterling gehört dir nicht\" };\n      }\n\n      // Calculate suns earned\n      const sunsEarned = this.getButterflyToSunsPrice(butterfly.butterflyRarity);\n\n      // Remove butterfly from user's collection (reduce quantity by 1)\n      if (butterfly.quantity <= 1) {\n        // Remove completely if only 1 left\n        await this.db\n          .delete(userButterflies)\n          .where(eq(userButterflies.id, butterflyId));\n      } else {\n        // Reduce quantity by 1\n        await this.db\n          .update(userButterflies)\n          .set({ quantity: butterfly.quantity - 1 })\n          .where(eq(userButterflies.id, butterflyId));\n      }\n\n      // Add suns to user\n      const user = await this.updateUserSuns(userId, sunsEarned);\n      if (user) {\n        console.log(`☀️ Suns Update: User ${userId} +${sunsEarned} ☀️ = ${user.suns} ☀️`);\n      }\n\n      console.log(`☀️ Sold ${butterfly.butterflyName} for ${sunsEarned} suns`);\n      return { success: true, sunsEarned };\n    } catch (error) {\n      console.error('Error selling butterfly for suns:', error);\n      return { success: false, message: \"Fehler beim Verkauf des Schmetterlings\" };\n    }\n  }\n\n  // Enhanced system: Spawn butterfly on a garden field with slot-based guarantee system\n  async spawnButterflyOnFieldWithSlot(userId: number, bouquetId: number, bouquetRarity: RarityTier, currentSlot: number, totalSlots: number, alreadySpawnedCount: number): Promise<{ success: boolean; fieldButterfly?: FieldButterfly; fieldIndex?: number }> {\n    const { generateRandomButterfly, shouldSpawnButterfly } = await import('./bouquet');\n    \n    // For all bouquets: guarantee at least 1 spawn if this is the final slot and none spawned yet\n    const shouldGuaranteeSpawn = currentSlot === totalSlots && alreadySpawnedCount === 0;\n    \n    // Check if butterfly should spawn based on rarity (with guarantee logic)\n    if (!shouldGuaranteeSpawn && !shouldSpawnButterfly(bouquetRarity, currentSlot, totalSlots)) {\n      return { success: false };\n    }\n\n    return this.spawnButterflyOnField(userId, bouquetId, bouquetRarity);\n  }\n  \n  /**\n   * Pond feeding progress methods for persistent storage\n   */\n  async updatePondFeedingProgress(userId: number, fieldIndex: number): Promise<number> {\n    try {\n      console.log(`🐟 Updating pond feeding progress for user ${userId} field ${fieldIndex}`);\n      \n      // Check if feeding progress already exists for this user-field combination\n      const existing = await this.db.select().from(pondFeedingProgressTable).where(\n        and(\n          eq(pondFeedingProgressTable.userId, userId),\n          eq(pondFeedingProgressTable.fieldIndex, fieldIndex)\n        )\n      );\n      \n      if (existing.length > 0) {\n        // Increment existing progress\n        const newCount = existing[0].feedingCount + 1;\n        \n        if (newCount >= 3) {\n          // DON'T delete progress here! Update to 3 and let caller handle fish creation and cleanup  \n          await this.db\n            .update(pondFeedingProgressTable)\n            .set({ \n              feedingCount: 3,\n              lastFedAt: new Date()\n            })\n            .where(eq(pondFeedingProgressTable.id, existing[0].id));\n          console.log(`🐟 Updated feeding progress to 3 for user ${userId} field ${fieldIndex} - ready for fish creation`);\n          return 3; // Return 3 to indicate fish creation needed\n        } else {\n          // Update progress\n          await this.db\n            .update(pondFeedingProgressTable)\n            .set({ \n              feedingCount: newCount,\n              lastFedAt: new Date()\n            })\n            .where(eq(pondFeedingProgressTable.id, existing[0].id));\n          console.log(`🐟 Updated feeding progress to ${newCount} for user ${userId} field ${fieldIndex}`);\n          return newCount;\n        }\n      } else {\n        // Create new progress entry\n        await this.db.insert(pondFeedingProgressTable).values({\n          userId,\n          fieldIndex,\n          feedingCount: 1,\n          lastFedAt: new Date()\n        });\n        console.log(`🐟 Created new feeding progress (1) for user ${userId} field ${fieldIndex}`);\n        return 1;\n      }\n      \n    } catch (error) {\n      console.error('🐟 Error updating pond feeding progress:', error);\n      throw error;\n    }\n  }\n  \n  async getUserPondProgress(userId: number): Promise<Record<number, number>> {\n    try {\n      console.log(`🐟 Getting pond progress for user ${userId}`);\n      \n      const progressEntries = await this.db.select().from(pondFeedingProgressTable).where(\n        eq(pondFeedingProgressTable.userId, userId)\n      );\n      \n      const userProgress: Record<number, number> = {};\n      for (const entry of progressEntries) {\n        userProgress[entry.fieldIndex] = entry.feedingCount;\n      }\n      \n      console.log(`🐟 Retrieved pond progress for user ${userId}:`, userProgress);\n      return userProgress;\n      \n    } catch (error) {\n      console.error('🐟 Error getting user pond progress:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Field Fish system methods\n   */\n  async spawnFishOnField(userId: number, pondFieldIndex: number, customRarity?: string): Promise<{ fishName: string, fishRarity: RarityTier }> {\n    try {\n      console.log(`🐟 SPAWNING FISH: field ${pondFieldIndex} for user ${userId}${customRarity ? ` with custom rarity: ${customRarity}` : ''}`);\n      \n      // Check if a fish already exists on this field and remove it first\n      const existingFish = await this.db\n        .select()\n        .from(fieldFish)\n        .where(and(\n          eq(fieldFish.userId, userId),\n          eq(fieldFish.fieldIndex, pondFieldIndex)\n        ))\n        .limit(1);\n      \n      if (existingFish.length > 0) {\n        console.log(`🐟 WARNING: Fish already exists on field ${pondFieldIndex}, removing old fish first`);\n        await this.db\n          .delete(fieldFish)\n          .where(and(\n            eq(fieldFish.userId, userId),\n            eq(fieldFish.fieldIndex, pondFieldIndex)\n          ));\n        console.log(`🐟 Removed existing fish from field ${pondFieldIndex}`);\n      }\n      \n      // Use custom rarity if provided, otherwise generate random\n      const rarity = (customRarity as RarityTier) || getRandomCreatureRarity();\n      const fishData = await generateRandomFish(rarity);\n      \n      console.log(`🐟 Generated fish: ${fishData.name} (${rarity}) - ID: ${fishData.id} for field ${pondFieldIndex}`);\n      \n      // Spawn fish on field first (not directly in inventory)\n      await this.db.insert(fieldFish).values({\n        userId,\n        fieldIndex: pondFieldIndex,\n        fishId: fishData.id,\n        fishName: fishData.name,\n        fishRarity: rarity,\n        fishImageUrl: fishData.imageUrl,\n        spawnedAt: new Date(),\n        isShrinking: false\n      });\n      \n      console.log(`🐟 ✅ FISH SPAWNED SUCCESSFULLY: ${fishData.name} (${rarity}) on pond field ${pondFieldIndex}`);\n      return { fishName: fishData.name, fishRarity: rarity };\n      \n    } catch (error) {\n      console.error('🐟 Error spawning fish on field:', error);\n      throw error;\n    }\n  }\n\n  // REMOVED: In-memory storage - using PostgreSQL-only storage per replit.md requirements\n  \n\n  // Get current average rarity of fed caterpillars for a field from PostgreSQL\n  async getCurrentFeedingAverageRarity(userId: number, fieldIndex: number): Promise<string> {\n    try {\n      // Get fed caterpillars from PostgreSQL for this field\n      const fedCaterpillars = await this.db\n        .select()\n        .from(fedCaterpillarsTable)\n        .where(and(\n          eq(fedCaterpillarsTable.userId, userId),\n          eq(fedCaterpillarsTable.fieldIndex, fieldIndex)\n        ))\n        .orderBy(fedCaterpillarsTable.fedAt);\n      \n      const rarities = fedCaterpillars.map(c => c.caterpillarRarity);\n      console.log(`🐟 DEBUG: Getting average for field ${fieldIndex}, PostgreSQL rarities:`, rarities);\n      \n      if (rarities.length === 0) {\n        console.log(`🐟 DEBUG: No rarities in PostgreSQL, returning 'common'`);\n        return 'common'; // Default if no caterpillars fed yet\n      }\n      \n      const averageRarity = this.calculateAverageRarity(rarities);\n      console.log(`🐟 DEBUG: Calculated average from [${rarities.join(', ')}] = ${averageRarity}`);\n      return averageRarity;\n    } catch (error) {\n      console.error('🐟 Error getting current feeding average rarity:', error);\n      return 'common';\n    }\n  }\n  \n  // Complete fish feeding with caterpillar - handles average calculation and fish creation\n  async feedFishWithCaterpillar(userId: number, fieldIndex: number, caterpillarRarity: string): Promise<any> {\n    try {\n      // Get fed caterpillars from PostgreSQL for this field\n      const fedCaterpillars = await this.db\n        .select()\n        .from(fedCaterpillarsTable)\n        .where(and(\n          eq(fedCaterpillarsTable.userId, userId),\n          eq(fedCaterpillarsTable.fieldIndex, fieldIndex)\n        ))\n        .orderBy(fedCaterpillarsTable.fedAt);\n      \n      const rarities = fedCaterpillars.map(c => c.caterpillarRarity);\n      console.log(`🐟 Fed caterpillar rarities from PostgreSQL for field ${fieldIndex}:`, rarities);\n      \n      if (rarities.length < 3) {\n        throw new Error(`Not enough caterpillars fed (${rarities.length}/3)`);\n      }\n      \n      // Calculate average rarity\n      const averageRarity = this.calculateAverageRarity(rarities);\n      console.log(`🐟 Calculated average rarity from [${rarities.join(', ')}] = ${averageRarity}`);\n      \n      // Spawn fish with calculated average rarity\n      console.log(`🐟 CALLING spawnFishOnField with fieldIndex: ${fieldIndex}`);\n      const fishResult = await this.spawnFishOnField(userId, fieldIndex, averageRarity);\n      console.log('🐟 FISH SPAWNED SUCCESS with CALCULATED AVERAGE RARITY:', fishResult);\n      \n      // Clean up fed caterpillars AND pond progress from PostgreSQL after fish creation  \n      await this.db\n        .delete(fedCaterpillarsTable)\n        .where(and(\n          eq(fedCaterpillarsTable.userId, userId),\n          eq(fedCaterpillarsTable.fieldIndex, fieldIndex)\n        ));\n      \n      await this.db\n        .delete(pondFeedingProgressTable)\n        .where(and(\n          eq(pondFeedingProgressTable.userId, userId),\n          eq(pondFeedingProgressTable.fieldIndex, fieldIndex)\n        ));\n      \n      console.log(`🐟 Cleaned up fed caterpillars AND pond progress from PostgreSQL for field ${fieldIndex}`);\n      \n      return {\n        feedingCount: 3,\n        fishCreated: true,\n        fishName: fishResult.fishName,\n        fishRarity: fishResult.fishRarity\n      };\n      \n    } catch (error) {\n      console.error('🐟 Error in feedFishWithCaterpillar:', error);\n      throw error;\n    }\n  }\n\n  async addFedCaterpillar(userId: number, fieldIndex: number, caterpillarRarity: string): Promise<void> {\n    try {\n      console.log(`🐟 Adding fed caterpillar to PostgreSQL: user ${userId}, field ${fieldIndex}, rarity ${caterpillarRarity}`);\n      \n      await this.db.insert(fedCaterpillarsTable).values({\n        userId: userId,\n        fieldIndex: fieldIndex,\n        caterpillarId: 0, // Not used for fish feeding tracking\n        caterpillarRarity: caterpillarRarity,\n        fedAt: new Date()\n      });\n      \n      console.log(`🐟 Successfully stored fed caterpillar for field ${fieldIndex}`);\n      \n    } catch (error) {\n      console.error('🐟 Error adding fed caterpillar:', error);\n      throw error;\n    }\n  }\n\n  async updatePondFeedingProgressWithTracking(userId: number, fieldIndex: number, caterpillarRarity: string): Promise<number> {\n    // ATOMIC TRANSACTION to prevent synchronization issues\n    return await this.db.transaction(async (tx) => {\n      console.log(`🐟 🔐 ATOMIC: Updating pond feeding progress for user ${userId}, field ${fieldIndex} with caterpillar rarity: ${caterpillarRarity}`);\n      \n      // 1. Store caterpillar rarity in PostgreSQL fedCaterpillars table\n      await tx.insert(fedCaterpillarsTable).values({\n        userId: userId,\n        fieldIndex: fieldIndex,\n        caterpillarId: 0, // Not used for fish feeding, only for tracking\n        caterpillarRarity: caterpillarRarity,\n        fedAt: new Date()\n      });\n      console.log(`🐟 🔐 ATOMIC: Fed caterpillar inserted successfully`);\n      \n      // 2. Get current fed caterpillars count from PostgreSQL (within transaction)\n      const fedCaterpillars = await tx\n        .select()\n        .from(fedCaterpillarsTable)\n        .where(and(\n          eq(fedCaterpillarsTable.userId, userId),\n          eq(fedCaterpillarsTable.fieldIndex, fieldIndex)\n        ));\n      \n      const feedingCount = fedCaterpillars.length;\n      console.log(`🐟 🔐 ATOMIC: Fed caterpillars count from PostgreSQL for field ${fieldIndex}: ${feedingCount}`);\n      console.log(`🐟 🔐 ATOMIC: Fed caterpillar rarities:`, fedCaterpillars.map(c => c.caterpillarRarity));\n      \n      // 3. Update feeding progress within same transaction\n      const existingProgress = await tx\n        .select()\n        .from(pondFeedingProgressTable)\n        .where(and(\n          eq(pondFeedingProgressTable.userId, userId),\n          eq(pondFeedingProgressTable.fieldIndex, fieldIndex)\n        ));\n      \n      let newProgress: number;\n      if (existingProgress.length > 0) {\n        // Update existing progress\n        await tx\n          .update(pondFeedingProgressTable)\n          .set({ feedingCount: feedingCount, updatedAt: new Date() })\n          .where(and(\n            eq(pondFeedingProgressTable.userId, userId),\n            eq(pondFeedingProgressTable.fieldIndex, fieldIndex)\n          ));\n        newProgress = feedingCount;\n      } else {\n        // Create new progress entry\n        await tx.insert(pondFeedingProgressTable).values({\n          userId: userId,\n          fieldIndex: fieldIndex,\n          feedingCount: feedingCount,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        });\n        newProgress = feedingCount;\n      }\n      \n      console.log(`🐟 🔐 ATOMIC: Updated feeding progress to ${newProgress} for user ${userId} field ${fieldIndex}`);\n      \n      // If fish is created (3 feedings), log that we're ready\n      if (newProgress >= 3) {\n        console.log(`🐟 🔐 ATOMIC: Fish will be created, rarities ready for average:`, fedCaterpillars.map(c => c.caterpillarRarity));\n      }\n      \n      return newProgress;\n    });\n  }\n\n  async spawnFishOnFieldWithAverageRarity(userId: number, pondFieldIndex: number): Promise<{ fishName: string, fishRarity: RarityTier }> {\n    try {\n      console.log(`🐟 Spawning fish on field ${pondFieldIndex} for user ${userId} with AVERAGE rarity`);\n      \n      // Get stored caterpillar rarities for this field from database\n      const fedCaterpillars = await this.getFieldCaterpillars(userId);\n      const pondCaterpillars = fedCaterpillars.filter(c => c.fieldIndex === pondFieldIndex);\n      const rarities = pondCaterpillars.map(c => c.caterpillarRarity);\n      \n      console.log(`🐟 Fed caterpillar rarities for average calculation:`, rarities);\n      \n      if (rarities.length === 0) {\n        // Fallback to random if no rarities stored (shouldn't happen)\n        console.warn('🐟 No fed caterpillar rarities found, using random rarity');\n        const fishRarity = getRandomCreatureRarity();\n        const fishData = await generateRandomFish(fishRarity);\n        \n        await this.db.insert(fieldFish).values({\n          userId,\n          fieldIndex: pondFieldIndex,\n          fishId: fishData.id,\n          fishName: fishData.name,\n          fishRarity: fishRarity,\n          fishImageUrl: fishData.imageUrl,\n          spawnedAt: new Date(),\n          isShrinking: false\n        });\n        \n        return { fishName: fishData.name, fishRarity: fishRarity };\n      }\n      \n      // Calculate average rarity from fed caterpillars\n      const averageRarity = this.calculateAverageRarity(rarities);\n      console.log(`🐟 Calculated average rarity from [${rarities.join(', ')}] = ${averageRarity}`);\n      \n      const fishData = await generateRandomFish(averageRarity);\n      \n      console.log(`🐟 Generated fish: ${fishData.name} (${averageRarity}) from average of caterpillars - ID: ${fishData.id}`);\n      \n      // Spawn fish on field first (not directly in inventory)\n      await this.db.insert(fieldFish).values({\n        userId,\n        fieldIndex: pondFieldIndex,\n        fishId: fishData.id,\n        fishName: fishData.name,\n        fishRarity: averageRarity,\n        fishImageUrl: fishData.imageUrl,\n        spawnedAt: new Date(),\n        isShrinking: false\n      });\n      \n      // Clean up fed caterpillars after creating fish  \n      await this.db.delete(fieldCaterpillars)\n        .where(and(\n          eq(fieldCaterpillars.userId, userId),\n          eq(fieldCaterpillars.fieldIndex, pondFieldIndex)\n        ));\n      console.log(`🐟 Cleaned up stored caterpillar rarities for field ${pondFieldIndex}`);\n      \n      console.log(`🐟 Successfully spawned ${fishData.name} (${averageRarity}) on pond field ${pondFieldIndex} based on average caterpillar rarity`);\n      return { fishName: fishData.name, fishRarity: averageRarity };\n      \n    } catch (error) {\n      console.error('🐟 Error spawning fish on field with average rarity:', error);\n      throw error;\n    }\n  }\n\n  private calculateAverageRarity(rarities: string[]): RarityTier {\n    // Map rarities to numeric values for averaging\n    const rarityValues: Record<string, number> = {\n      'common': 0,\n      'uncommon': 1, \n      'rare': 2,\n      'super-rare': 3,\n      'epic': 4,\n      'legendary': 5,\n      'mythical': 6\n    };\n    \n    const valueToRarity: RarityTier[] = [\n      'common',\n      'uncommon', \n      'rare',\n      'super-rare',\n      'epic',\n      'legendary',\n      'mythical'\n    ];\n    \n    // Calculate average numeric value\n    const totalValue = rarities.reduce((sum, rarity) => {\n      return sum + (rarityValues[rarity] || 0);\n    }, 0);\n    \n    const averageValue = Math.round(totalValue / rarities.length);\n    const clampedValue = Math.max(0, Math.min(6, averageValue));\n    \n    const result = valueToRarity[clampedValue];\n    console.log(`🐟 Average calculation: [${rarities.join(', ')}] → values [${rarities.map(r => rarityValues[r] || 0).join(', ')}] → avg ${totalValue}/${rarities.length} = ${averageValue} → ${result}`);\n    \n    return result;\n  }\n  \n  async getFieldFish(userId: number): Promise<any[]> {\n    try {\n      console.log(`🐟 Getting field fish for user: ${userId}`);\n      \n      const fieldFishList = await this.db.select().from(fieldFish).where(\n        eq(fieldFish.userId, userId)\n      );\n      \n      console.log(`🐟 Found field fish: ${fieldFishList.length}`);\n      return fieldFishList;\n    } catch (error) {\n      console.error('🐟 Error getting field fish:', error);\n      throw error;\n    }\n  }\n  \n  async collectFieldFish(userId: number, fieldFishId: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      console.log(`🐟 Collecting field fish ${fieldFishId} for user ${userId}`);\n      \n      // Get the field fish data\n      const fieldFishData = await this.db.select().from(fieldFish).where(\n        and(\n          eq(fieldFish.id, fieldFishId),\n          eq(fieldFish.userId, userId)\n        )\n      ).limit(1);\n      \n      if (fieldFishData.length === 0) {\n        return { success: false, message: 'Fisch nicht gefunden' };\n      }\n      \n      const fish = fieldFishData[0];\n      \n      // Add to inventory with UPSERT to prevent race conditions\n      try {\n        // Try to insert first (most common case)\n        await this.db.insert(userFish).values({\n          userId,\n          fishId: fish.fishId,\n          fishName: fish.fishName,\n          fishRarity: fish.fishRarity,\n          fishImageUrl: fish.fishImageUrl,\n          quantity: 1\n        });\n        console.log(`🐟 Created new fish inventory entry: ${fish.fishName}`);\n      } catch (error) {\n        // If fish already exists (constraint violation), increment quantity\n        const existingFish = await this.db.select().from(userFish).where(\n          and(\n            eq(userFish.userId, userId),\n            eq(userFish.fishId, fish.fishId)\n          )\n        );\n\n        if (existingFish.length > 0) {\n          await this.db\n            .update(userFish)\n            .set({ \n              quantity: existingFish[0].quantity + 1\n            })\n            .where(eq(userFish.id, existingFish[0].id));\n          console.log(`🐟 Incremented existing fish ${fish.fishName} quantity to ${existingFish[0].quantity + 1}`);\n        } else {\n          // Fallback: re-throw error if not a constraint violation\n          throw error;\n        }\n      }\n      \n      // Update collection stats for acquired fish\n      await this.updateCollectionStats(userId, 'fish', fish.fishId, 1);\n      \n      // Remove fish from field\n      await this.db.delete(fieldFish).where(eq(fieldFish.id, fieldFishId));\n      console.log(`🐟 Removed field fish from field ${fish.fieldIndex}`);\n      \n      return { success: true };\n      \n    } catch (error) {\n      console.error('🐟 Error collecting field fish:', error);\n      return { success: false, message: 'Fehler beim Sammeln des Fisches' };\n    }\n  }\n\n  async getUserButterfly(userId: number, butterflyId: number): Promise<any | null> {\n    try {\n      console.log(`🦋 Getting butterfly ${butterflyId} for user ${userId}`);\n      \n      const butterfly = await this.db.select().from(userButterflies).where(\n        and(\n          eq(userButterflies.userId, userId),\n          eq(userButterflies.id, butterflyId)\n        )\n      ).limit(1);\n      \n      if (butterfly.length === 0) {\n        console.log(`🦋 Butterfly ${butterflyId} not found for user ${userId}`);\n        return null;\n      }\n      \n      console.log(`🦋 Found butterfly: ${butterfly[0].butterflyName} (quantity: ${butterfly[0].quantity})`);\n      return butterfly[0];\n    } catch (error) {\n      console.error('🦋 Error getting user butterfly:', error);\n      return null;\n    }\n  }\n\n  async consumeButterfly(userId: number, butterflyId: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      console.log(`🦋 Consuming butterfly ${butterflyId} for user ${userId}`);\n      \n      const butterfly = await this.db.select().from(userButterflies).where(\n        and(\n          eq(userButterflies.userId, userId),\n          eq(userButterflies.id, butterflyId)\n        )\n      ).limit(1);\n      \n      if (butterfly.length === 0) {\n        return { success: false, message: 'Schmetterling nicht gefunden' };\n      }\n      \n      const butterflyData = butterfly[0];\n      \n      if (butterflyData.quantity <= 0) {\n        return { success: false, message: 'Nicht genügend Schmetterlinge im Inventar' };\n      }\n\n      if (butterflyData.quantity > 1) {\n        // Reduce quantity by 1\n        await this.db\n          .update(userButterflies)\n          .set({ quantity: butterflyData.quantity - 1 })\n          .where(eq(userButterflies.id, butterflyId));\n        console.log(`🦋 Reduced butterfly ${butterflyData.butterflyName} quantity to ${butterflyData.quantity - 1}`);\n      } else {\n        // Remove completely if quantity is 1\n        await this.db\n          .delete(userButterflies)\n          .where(eq(userButterflies.id, butterflyId));\n        console.log(`🦋 Removed butterfly ${butterflyData.butterflyName} from inventory`);\n      }\n      \n      return { success: true };\n    } catch (error) {\n      console.error('🦋 Error consuming butterfly:', error);\n      return { success: false, message: 'Datenbankfehler beim Verbrauchen' };\n    }\n  }\n\n  // AQUARIUM SYSTEM METHODS\n  // ======================\n\n  async getAquariumTanks(userId: number): Promise<AquariumTank[]> {\n    try {\n      const tanks = await this.db\n        .select()\n        .from(aquariumTanks)\n        .where(eq(aquariumTanks.userId, userId))\n        .orderBy(aquariumTanks.tankNumber);\n      \n      console.log(`🐟 Found ${tanks.length} aquarium tanks for user ${userId}`);\n      return tanks;\n    } catch (error) {\n      console.error('🐟 Error getting aquarium tanks:', error);\n      return [];\n    }\n  }\n\n  async getAquariumFish(userId: number): Promise<AquariumFish[]> {\n    try {\n      const fish = await this.db\n        .select()\n        .from(aquariumFish)\n        .where(eq(aquariumFish.userId, userId))\n        .orderBy(aquariumFish.tankId, aquariumFish.slotIndex);\n      \n      console.log(`🐟 Found ${fish.length} aquarium fish for user ${userId}`);\n      return fish;\n    } catch (error) {\n      console.error('🐟 Error getting aquarium fish:', error);\n      return [];\n    }\n  }\n\n  async purchaseAquariumTank(userId: number, tankNumber: number): Promise<{ success: boolean; message?: string; tank?: AquariumTank }> {\n    try {\n      console.log(`🐟 User ${userId} purchasing aquarium tank ${tankNumber}`);\n      \n      // Check if tank already exists\n      const existingTank = await this.db\n        .select()\n        .from(aquariumTanks)\n        .where(and(\n          eq(aquariumTanks.userId, userId),\n          eq(aquariumTanks.tankNumber, tankNumber)\n        ));\n      \n      if (existingTank.length > 0) {\n        return { success: false, message: 'Aquarium bereits gekauft!' };\n      }\n      \n      // Calculate cost: Tank 1 = free, Tank 2 = 2500, each further x1.5\n      let cost = 0;\n      if (tankNumber === 1) {\n        cost = 0; // First aquarium is free\n      } else {\n        // Tank 2 = 2500, Tank 3 = 2500*1.5 = 3750, Tank 4 = 3750*1.5 = 5625, etc.\n        cost = Math.round(2500 * Math.pow(2.5, tankNumber - 2));\n      }\n      \n      // Check user credits\n      const user = await this.getUser(userId);\n      if (!user || user.credits < cost) {\n        return { success: false, message: `Nicht genügend Credits! Benötigt: ${cost}` };\n      }\n      \n      // Deduct credits and create tank (no transaction needed for Neon)\n      // Deduct credits first\n      await this.db\n        .update(users)\n        .set({ credits: user.credits - cost })\n        .where(eq(users.id, userId));\n      \n      // Create tank\n      await this.db\n        .insert(aquariumTanks)\n        .values({\n          userId,\n          tankNumber\n        });\n      \n      console.log(`🐟 Tank ${tankNumber} purchased for ${cost} credits`);\n      \n      // Return the new tank\n      const newTank = await this.db\n        .select()\n        .from(aquariumTanks)\n        .where(and(\n          eq(aquariumTanks.userId, userId),\n          eq(aquariumTanks.tankNumber, tankNumber)\n        ));\n      \n      return { success: true, tank: newTank[0] };\n    } catch (error) {\n      console.error('🐟 Error purchasing aquarium tank:', error);\n      return { success: false, message: 'Datenbankfehler beim Kauf' };\n    }\n  }\n\n  async placeAquariumFish(userId: number, tankNumber: number, slotIndex: number, userFishId: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      console.log(`🐟 Placing fish ${userFishId} in tank ${tankNumber}, slot ${slotIndex} for user ${userId}`);\n      \n      // Check if tank exists and belongs to user\n      const tank = await this.db\n        .select()\n        .from(aquariumTanks)\n        .where(and(\n          eq(aquariumTanks.userId, userId),\n          eq(aquariumTanks.tankNumber, tankNumber)\n        ));\n      \n      if (tank.length === 0) {\n        return { success: false, message: 'Aquarium nicht gefunden!' };\n      }\n      \n      // Check if slot is already occupied\n      const existingFish = await this.db\n        .select()\n        .from(aquariumFish)\n        .where(and(\n          eq(aquariumFish.tankId, tank[0].id),\n          eq(aquariumFish.slotIndex, slotIndex)\n        ));\n      \n      if (existingFish.length > 0) {\n        return { success: false, message: 'Platz bereits belegt!' };\n      }\n      \n      // Check if user has the fish\n      const fish = await this.db\n        .select()\n        .from(userFish)\n        .where(and(\n          eq(userFish.userId, userId),\n          eq(userFish.id, userFishId)\n        ));\n      \n      if (fish.length === 0 || fish[0].quantity <= 0) {\n        return { success: false, message: 'Fisch nicht im Inventar!' };\n      }\n      \n      const fishData = fish[0];\n      \n      // Place fish in aquarium and reduce inventory (no transaction for Neon)\n      // Place fish in aquarium first\n      await this.db\n        .insert(aquariumFish)\n        .values({\n          userId,\n          tankId: tank[0].id,\n          slotIndex,\n          fishId: fishData.fishId,\n          fishName: fishData.fishName,\n          fishRarity: fishData.fishRarity,\n          fishImageUrl: fishData.fishImageUrl\n        });\n      \n      // Reduce fish quantity in inventory\n      if (fishData.quantity > 1) {\n        await this.db\n          .update(userFish)\n          .set({ quantity: fishData.quantity - 1 })\n          .where(eq(userFish.id, userFishId));\n      } else {\n        await this.db\n          .delete(userFish)\n          .where(eq(userFish.id, userFishId));\n      }\n      \n      console.log(`🐟 Fish ${fishData.fishName} placed in aquarium`);\n      return { success: true };\n    } catch (error) {\n      console.error('🐟 Error placing aquarium fish:', error);\n      return { success: false, message: 'Datenbankfehler beim Platzieren' };\n    }\n  }\n\n  async removeAquariumFish(userId: number, aquariumFishId: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      console.log(`🐟 Removing aquarium fish ${aquariumFishId} for user ${userId}`);\n      \n      // Get the fish to remove\n      const fish = await this.db\n        .select()\n        .from(aquariumFish)\n        .where(and(\n          eq(aquariumFish.id, aquariumFishId),\n          eq(aquariumFish.userId, userId)\n        ));\n      \n      if (fish.length === 0) {\n        return { success: false, message: 'Fisch nicht gefunden!' };\n      }\n      \n      const fishData = fish[0];\n      \n      // Remove from aquarium and add back to inventory (no transaction for Neon)\n      // Remove from aquarium first\n      await this.db\n        .delete(aquariumFish)\n        .where(eq(aquariumFish.id, aquariumFishId));\n      \n      // Add back to inventory\n      const existingFish = await this.db\n        .select()\n        .from(userFish)\n        .where(and(\n          eq(userFish.userId, userId),\n          eq(userFish.fishId, fishData.fishId)\n        ));\n      \n      if (existingFish.length > 0) {\n        // Increase quantity\n        await this.db\n          .update(userFish)\n          .set({ quantity: existingFish[0].quantity + 1 })\n          .where(eq(userFish.id, existingFish[0].id));\n      } else {\n        // Add new entry\n        await this.db\n          .insert(userFish)\n          .values({\n            userId,\n            fishId: fishData.fishId,\n            fishName: fishData.fishName,\n            fishRarity: fishData.fishRarity,\n            fishImageUrl: fishData.fishImageUrl,\n            quantity: 1\n          });\n      }\n      \n      console.log(`🐟 Fish ${fishData.fishName} removed from aquarium and returned to inventory`);\n      return { success: true };\n    } catch (error) {\n      console.error('🐟 Error removing aquarium fish:', error);\n      return { success: false, message: 'Datenbankfehler beim Entfernen' };\n    }\n  }\n\n  async canSellAquariumFish(aquariumFishId: number): Promise<{ canSell: boolean; timeRemainingMs: number }> {\n    try {\n      const fish = await this.db\n        .select()\n        .from(aquariumFish)\n        .where(eq(aquariumFish.id, aquariumFishId));\n      \n      if (fish.length === 0) {\n        return { canSell: false, timeRemainingMs: 0 };\n      }\n      \n      const placedTime = new Date(fish[0].placedAt).getTime();\n      const now = new Date().getTime();\n      const timeSincePlacement = now - placedTime;\n      \n      // Fish can be sold after 24 hours (vs 72 hours for butterflies)\n      const TWENTY_FOUR_HOURS = 24 * 60 * 60 * 1000;\n      const timeRemaining = TWENTY_FOUR_HOURS - timeSincePlacement;\n      \n      return {\n        canSell: timeRemaining <= 0,\n        timeRemainingMs: Math.max(0, timeRemaining)\n      };\n    } catch (error) {\n      console.error('🐟 Error checking fish sell status:', error);\n      return { canSell: false, timeRemainingMs: 0 };\n    }\n  }\n\n  async sellAquariumFish(userId: number, aquariumFishId: number): Promise<{ success: boolean; message?: string; creditsEarned?: number }> {\n    try {\n      console.log(`🐟 Selling aquarium fish ${aquariumFishId} for user ${userId}`);\n      \n      // Check if fish can be sold\n      const sellStatus = await this.canSellAquariumFish(aquariumFishId);\n      if (!sellStatus.canSell) {\n        return { success: false, message: 'Fisch kann noch nicht verkauft werden!' };\n      }\n      \n      // Get the fish\n      const fish = await this.db\n        .select()\n        .from(aquariumFish)\n        .where(and(\n          eq(aquariumFish.id, aquariumFishId),\n          eq(aquariumFish.userId, userId)\n        ));\n      \n      if (fish.length === 0) {\n        return { success: false, message: 'Fisch nicht gefunden!' };\n      }\n      \n      const fishData = fish[0];\n      \n      // Calculate price - full market value for aquarium direct sales\n      const price = this.getAquariumFishPrice(fishData.fishRarity);\n      \n      // Remove fish and add credits (no transaction for Neon)\n      // Remove fish from aquarium first\n      await this.db\n        .delete(aquariumFish)\n        .where(eq(aquariumFish.id, aquariumFishId));\n      \n      // Add credits to user\n      const user = await this.db\n        .select()\n        .from(users)\n        .where(eq(users.id, userId));\n      \n      if (user.length > 0) {\n        await this.db\n          .update(users)\n          .set({ credits: user[0].credits + price })\n          .where(eq(users.id, userId));\n      }\n      \n      console.log(`🐟 Fish ${fishData.fishName} sold for ${price} credits`);\n      return { success: true, creditsEarned: price };\n    } catch (error) {\n      console.error('🐟 Error selling aquarium fish:', error);\n      return { success: false, message: 'Datenbankfehler beim Verkauf' };\n    }\n  }\n\n  async applyAquariumSunBoost(userId: number, aquariumFishId: number, minutes: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      console.log(`🐟 Applying ${minutes} minute sun boost to fish ${aquariumFishId} for user ${userId}`);\n      \n      const sunCost = minutes; // 1 sun = 1 minute\n      \n      // Check user suns\n      const user = await this.getUser(userId);\n      if (!user || user.suns < sunCost) {\n        return { success: false, message: 'Nicht genügend Sonnen!' };\n      }\n      \n      // Get the fish\n      const fish = await this.db\n        .select()\n        .from(aquariumFish)\n        .where(and(\n          eq(aquariumFish.id, aquariumFishId),\n          eq(aquariumFish.userId, userId)\n        ));\n      \n      if (fish.length === 0) {\n        return { success: false, message: 'Fisch nicht gefunden!' };\n      }\n      \n      const fishData = fish[0];\n      const currentPlacedAt = new Date(fishData.placedAt);\n      const newPlacedAt = new Date(currentPlacedAt.getTime() - (minutes * 60 * 1000));\n      \n      // Update fish placement time and deduct suns (no transaction for Neon)\n      // Update fish placed time first\n      await this.db\n        .update(aquariumFish)\n        .set({ placedAt: newPlacedAt })\n        .where(eq(aquariumFish.id, aquariumFishId));\n      \n      // Deduct suns\n      await this.db\n        .update(users)\n        .set({ suns: user.suns - sunCost })\n        .where(eq(users.id, userId));\n      \n      console.log(`🐟 Applied ${minutes} minute boost to fish ${fishData.fishName}`);\n      return { success: true };\n    } catch (error) {\n      console.error('🐟 Error applying sun boost:', error);\n      return { success: false, message: 'Datenbankfehler beim Boost' };\n    }\n  }\n\n  private getAquariumFishPrice(rarity: string): number {\n    // Aquarium direct sale - full market value (100%)\n    const basePrice = (() => {\n      switch (rarity) {\n        case 'common': return 40;\n        case 'uncommon': return 100;\n        case 'rare': return 225;\n        case 'super-rare': return 470;\n        case 'epic': return 750;\n        case 'legendary': return 1100;\n        case 'mythical': return 2000;\n        default: return 40;\n      }\n    })();\n    \n    return basePrice; // Aquarium pays full market value\n  }\n\n  private getFishSellPrice(rarity: string): number {\n    // Fish prices - Marie Posa pays 50% of market value\n    const basePrice = (() => {\n      switch (rarity) {\n        case 'common': return 40;\n        case 'uncommon': return 100;\n        case 'rare': return 225;\n        case 'super-rare': return 470;\n        case 'epic': return 750;\n        case 'legendary': return 1100;\n        case 'mythical': return 2000;\n        default: return 40;\n      }\n    })();\n    \n    return Math.floor(basePrice * 0.5); // Marie Posa pays 50% of market value\n  }\n\n  private getFlowerSellPrice(rarity: string): number {\n    // Flower prices for Marie Posa - consistent with Exhibition system\n    // Marie Posa pays 50% of Exhibition market value\n    const exhibitionPrice = (() => {\n      switch (rarity) {\n        case 'common': return 8;\n        case 'uncommon': return 20;\n        case 'rare': return 40;\n        case 'super-rare': return 80;\n        case 'epic': return 160;\n        case 'legendary': return 400;\n        case 'mythical': return 800;\n        default: return 8;\n      }\n    })();\n    \n    return Math.floor(exhibitionPrice * 0.5); // Marie Posa pays 50% of Exhibition value\n  }\n\n  private getCaterpillarSellPrice(rarity: string): number {\n    // Raupenpreise = 40% der Fischpreise (Marie Posa zahlt 50% vom Fisch-Marktpreis)\n    // First get the fish market price for this rarity\n    const fishMarketPrice = (() => {\n      switch (rarity) {\n        case 'common': return 80;\n        case 'uncommon': return 200;\n        case 'rare': return 450;\n        case 'super-rare': return 940;\n        case 'epic': return 1500;\n        case 'legendary': return 2200;\n        case 'mythical': return 4000;\n        default: return 80;\n      }\n    })();\n    \n    // Return 40% of fish market price, then Marie Posa pays 50% of that (= 20% of fish market price)\n    const caterpillarMarketPrice = Math.floor(fishMarketPrice * 0.4);\n    return Math.floor(caterpillarMarketPrice * 0.5);\n  }\n\n  private getButterflySellPrice(rarity: string): number {\n    // Butterfly prices for Marie Posa - consistent with Exhibition system\n    // Marie Posa pays 50% of Exhibition market value\n    const exhibitionPrice = (() => {\n      switch (rarity) {\n        case 'common': return 10;\n        case 'uncommon': return 25;\n        case 'rare': return 50;\n        case 'super-rare': return 100;\n        case 'epic': return 200;\n        case 'legendary': return 500;\n        case 'mythical': return 1000;\n        default: return 10;\n      }\n    })();\n    \n    return Math.floor(exhibitionPrice * 0.5); // Marie Posa pays 50% of Exhibition value\n  }\n\n  // Marie Posa trading system functions\n  async getMariePosaLastTrade(userId: number): Promise<{ lastTradeAt: Date | null }> {\n    try {\n      const result = await this.db\n        .select()\n        .from(mariePosaTracker)\n        .where(eq(mariePosaTracker.userId, userId))\n        .orderBy(desc(mariePosaTracker.lastTradeAt))\n        .limit(1);\n\n      return { \n        lastTradeAt: result.length > 0 ? result[0].lastTradeAt : null \n      };\n    } catch (error) {\n      console.error('Error getting Marie Posa last trade:', error);\n      return { lastTradeAt: null };\n    }\n  }\n\n  async processMariePosaSale(userId: number, items: Array<{type: string, originalId: number, sellPrice: number}>): Promise<{\n    success: boolean;\n    message?: string;\n    totalEarned?: number;\n    itemsSold?: number;\n  }> {\n    try {\n      if (!items || items.length === 0 || items.length > 4) {\n        return { success: false, message: 'Ungültige Item-Auswahl' };\n      }\n\n      let totalEarned = 0;\n      let itemsSold = 0;\n\n      // Begin transaction to ensure all operations succeed or fail together\n      for (const item of items) {\n        let deleteResult = false;\n        let actualSellPrice = 0;\n        \n        // FIRST: Calculate sell price based on item data BEFORE deletion\n        switch (item.type) {\n          case 'flower':\n            const flowerData = await this.db\n              .select()\n              .from(userFlowers)\n              .where(and(\n                eq(userFlowers.id, item.originalId),\n                eq(userFlowers.userId, userId)\n              ))\n              .limit(1);\n            if (flowerData.length > 0) {\n              const { getFlowerRarityById } = await import('../shared/rarity');\n              const flowerRarity = getFlowerRarityById(flowerData[0].flowerId);\n              actualSellPrice = this.getFlowerSellPrice(flowerRarity);\n            }\n            break;\n            \n          case 'butterfly':\n            const butterflyData = await this.db\n              .select()\n              .from(userButterflies)\n              .where(and(\n                eq(userButterflies.id, item.originalId),\n                eq(userButterflies.userId, userId)\n              ))\n              .limit(1);\n            if (butterflyData.length > 0) {\n              actualSellPrice = this.getButterflySellPrice(butterflyData[0].butterflyRarity);\n            }\n            break;\n            \n          case 'fish':\n            const fishDataForPrice = await this.db\n              .select()\n              .from(userFish)\n              .where(and(\n                eq(userFish.id, item.originalId),\n                eq(userFish.userId, userId)\n              ))\n              .limit(1);\n            if (fishDataForPrice.length > 0) {\n              const fishRarity = getFishRarity(fishDataForPrice[0].fishId);\n              actualSellPrice = this.getFishSellPrice(fishRarity);\n            }\n            break;\n            \n          case 'caterpillar':\n            const caterpillarDataForPrice = await this.db\n              .select()\n              .from(userCaterpillars)\n              .where(and(\n                eq(userCaterpillars.id, item.originalId),\n                eq(userCaterpillars.userId, userId)\n              ))\n              .limit(1);\n            if (caterpillarDataForPrice.length > 0) {\n              actualSellPrice = this.getCaterpillarSellPrice(caterpillarDataForPrice[0].caterpillarRarity);\n            }\n            break;\n            \n          default:\n            console.warn(`Unknown item type for price calculation: ${item.type}`);\n            actualSellPrice = item.sellPrice; // Fallback to client price\n            break;\n        }\n        \n        // SECOND: Delete the item from user's inventory based on type\n        switch (item.type) {\n          case 'flower':\n            const flowerResult = await this.db\n              .delete(userFlowers)\n              .where(and(\n                eq(userFlowers.id, item.originalId),\n                eq(userFlowers.userId, userId)\n              ))\n              .returning();\n            deleteResult = flowerResult.length > 0;\n            break;\n            \n          case 'butterfly':\n            const butterflyResult = await this.db\n              .delete(userButterflies)\n              .where(and(\n                eq(userButterflies.id, item.originalId),\n                eq(userButterflies.userId, userId)\n              ))\n              .returning();\n            deleteResult = butterflyResult.length > 0;\n            break;\n            \n          case 'fish':\n            // Handle fish differently - check if quantity > 1, decrease quantity instead of deleting\n            const fishData = await this.db\n              .select()\n              .from(userFish)\n              .where(and(\n                eq(userFish.id, item.originalId),\n                eq(userFish.userId, userId)\n              ))\n              .limit(1);\n\n            if (fishData.length > 0) {\n              if (fishData[0].quantity > 1) {\n                // Decrease quantity by 1\n                await this.db\n                  .update(userFish)\n                  .set({ quantity: fishData[0].quantity - 1 })\n                  .where(eq(userFish.id, item.originalId));\n                deleteResult = true;\n              } else {\n                // Delete if quantity is 1\n                const fishResult = await this.db\n                  .delete(userFish)\n                  .where(and(\n                    eq(userFish.id, item.originalId),\n                    eq(userFish.userId, userId)\n                  ))\n                  .returning();\n                deleteResult = fishResult.length > 0;\n              }\n            }\n            break;\n            \n          case 'caterpillar':\n            console.log(`🐛 Marie Posa: Processing caterpillar sale for item ID ${item.originalId}, user ${userId}`);\n            // Handle caterpillars like fish - check if quantity > 1, decrease quantity instead of deleting\n            const caterpillarData = await this.db\n              .select()\n              .from(userCaterpillars)\n              .where(and(\n                eq(userCaterpillars.id, item.originalId),\n                eq(userCaterpillars.userId, userId)\n              ))\n              .limit(1);\n\n            console.log(`🐛 Marie Posa: Found caterpillar data:`, caterpillarData);\n\n            if (caterpillarData.length > 0) {\n              console.log(`🐛 Marie Posa: Caterpillar quantity: ${caterpillarData[0].quantity}`);\n              if (caterpillarData[0].quantity > 1) {\n                console.log(`🐛 Marie Posa: Decreasing quantity from ${caterpillarData[0].quantity} to ${caterpillarData[0].quantity - 1}`);\n                // Decrease quantity by 1\n                await this.db\n                  .update(userCaterpillars)\n                  .set({ quantity: caterpillarData[0].quantity - 1 })\n                  .where(eq(userCaterpillars.id, item.originalId));\n                deleteResult = true;\n                console.log(`🐛 Marie Posa: Successfully decreased caterpillar quantity`);\n              } else {\n                console.log(`🐛 Marie Posa: Deleting caterpillar completely (quantity is 1)`);\n                // Delete if quantity is 1\n                const caterpillarResult = await this.db\n                  .delete(userCaterpillars)\n                  .where(and(\n                    eq(userCaterpillars.id, item.originalId),\n                    eq(userCaterpillars.userId, userId)\n                  ))\n                  .returning();\n                deleteResult = caterpillarResult.length > 0;\n                console.log(`🐛 Marie Posa: Delete result:`, caterpillarResult, `deleteResult: ${deleteResult}`);\n              }\n            } else {\n              console.log(`🐛 Marie Posa: ERROR - No caterpillar found with ID ${item.originalId} for user ${userId}`);\n            }\n            break;\n            \n          default:\n            console.warn(`Unknown item type: ${item.type}`);\n            continue;\n        }\n\n        if (deleteResult) {\n          totalEarned += actualSellPrice;\n          itemsSold++;\n          console.log(`👑 Marie Posa: Sold ${item.type} (ID: ${item.originalId}) for ${actualSellPrice} credits`);\n        } else {\n          console.warn(`Failed to delete item ${item.originalId} of type ${item.type} for user ${userId}`);\n        }\n      }\n\n      if (itemsSold === 0) {\n        return { success: false, message: 'Keine Items konnten verkauft werden' };\n      }\n\n      // Add credits to user\n      await this.db\n        .update(users)\n        .set({ \n          credits: sql`credits + ${totalEarned}`,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n\n      // Record this trade - check if entry exists for this user\n      const existingEntry = await this.db\n        .select()\n        .from(mariePosaTracker)\n        .where(eq(mariePosaTracker.userId, userId))\n        .limit(1);\n\n      if (existingEntry.length > 0) {\n        // Update existing entry\n        await this.db\n          .update(mariePosaTracker)\n          .set({ lastTradeAt: new Date() })\n          .where(eq(mariePosaTracker.userId, userId));\n      } else {\n        // Insert new entry\n        await this.db\n          .insert(mariePosaTracker)\n          .values({\n            userId,\n            lastTradeAt: new Date(),\n            createdAt: new Date()\n          });\n      }\n\n      console.log(`👑 Marie Posa: User ${userId} sold ${itemsSold} items for ${totalEarned} credits`);\n      \n      return {\n        success: true,\n        totalEarned,\n        itemsSold\n      };\n    } catch (error) {\n      console.error('Error processing Marie Posa sale:', error);\n      return { success: false, message: 'Datenbankfehler beim Verkauf' };\n    }\n  }\n\n  // ========== TOP 100 RANKINGS METHODS ==========\n\n  async getTop100ByCredits(currentUserId: number): Promise<any[]> {\n    const allUsers = await this.db\n      .select({\n        id: users.id,\n        username: users.username,\n        credits: users.credits\n      })\n      .from(users)\n      .orderBy(desc(users.credits))\n      .limit(100);\n\n    return this.formatRankingResults(allUsers, 'credits', currentUserId);\n  }\n\n  async getTop100ByPassiveIncome(currentUserId: number): Promise<any[]> {\n    try {\n      // Get all users and calculate their actual passive income\n      const allUsers = await this.db\n        .select({\n          id: users.id,\n          username: users.username\n        })\n        .from(users);\n\n      // Calculate actual passive income for each user\n      const userStatsWithIncome = await Promise.all(\n        allUsers.map(async (user) => {\n          const exhibitionButterflies = await this.getExhibitionButterflies(user.id);\n          \n          // Sum up actual passive income from all butterflies\n          let totalPassiveIncome = 0;\n          for (const butterfly of exhibitionButterflies) {\n            // Get frame likes for this butterfly's frame\n            const frameLikes = await this.getFrameLikesCount(butterfly.frameId);\n            \n            totalPassiveIncome += this.getCurrentCrPerHour(\n              butterfly.butterflyRarity || 'common',\n              false, // isVip - handled by rarity\n              new Date(butterfly.placedAt || butterfly.createdAt),\n              frameLikes\n            );\n          }\n          \n          // Add VIP butterflies if they exist\n          const vipButterflies = await this.getExhibitionVipButterflies(user.id);\n          for (const vipButterfly of vipButterflies) {\n            const frameLikes = await this.getFrameLikesCount(vipButterfly.frameId);\n            \n            totalPassiveIncome += this.getCurrentCrPerHour(\n              'vip',\n              true,\n              new Date(vipButterfly.placedAt || vipButterfly.createdAt),\n              frameLikes\n            );\n          }\n          \n          return {\n            id: user.id,\n            username: user.username,\n            passiveIncome: Math.round(totalPassiveIncome) // Round to whole numbers\n          };\n        })\n      );\n\n      // Sort by passive income descending and limit to 100\n      const sortedUsers = userStatsWithIncome\n        .sort((a, b) => b.passiveIncome - a.passiveIncome)\n        .slice(0, 100);\n\n      return this.formatRankingResults(sortedUsers, 'passiveIncome', currentUserId);\n    } catch (error) {\n      console.error('🏆 Error in getTop100ByPassiveIncome:', error);\n      return [];\n    }\n  }\n\n  async getTop100BySuns(currentUserId: number): Promise<any[]> {\n    const allUsers = await this.db\n      .select({\n        id: users.id,\n        username: users.username,\n        suns: users.suns\n      })\n      .from(users)\n      .orderBy(desc(users.suns))\n      .limit(100);\n\n    return this.formatRankingResults(allUsers, 'suns', currentUserId);\n  }\n\n  async getTop100ByDna(currentUserId: number): Promise<any[]> {\n    const allUsers = await this.db\n      .select({\n        id: users.id,\n        username: users.username,\n        dna: users.dna\n      })\n      .from(users)\n      .orderBy(desc(users.dna))\n      .limit(100);\n\n    return this.formatRankingResults(allUsers, 'dna', currentUserId);\n  }\n\n  async getTop100ByLikes(currentUserId: number): Promise<any[]> {\n    try {\n      // Calculate total likes from exhibition_frame_likes table\n      const userStats = await this.db\n        .select({\n          id: users.id,\n          username: users.username,\n          likes: sql<number>`COALESCE(COUNT(${exhibitionFrameLikes.id}), 0)`\n        })\n        .from(users)\n        .leftJoin(exhibitionFrameLikes, eq(users.id, exhibitionFrameLikes.frameOwnerId))\n        .groupBy(users.id, users.username)\n        .orderBy(desc(sql`COALESCE(COUNT(${exhibitionFrameLikes.id}), 0)`))\n        .limit(100);\n\n      return this.formatRankingResults(userStats, 'likes', currentUserId);\n    } catch (error) {\n      console.error('🏆 Error in getTop100ByLikes:', error);\n      return [];\n    }\n  }\n\n  async getTop100BySeeds(currentUserId: number): Promise<any[]> {\n    try {\n      const userStats = await this.db\n        .select({\n          id: users.id,\n          username: users.username,\n          seeds: sql<number>`COALESCE(SUM(${userSeeds.quantity}), 0)`\n        })\n        .from(users)\n        .leftJoin(userSeeds, eq(users.id, userSeeds.userId))\n        .groupBy(users.id, users.username)\n        .orderBy(desc(sql`COALESCE(SUM(${userSeeds.quantity}), 0)`))\n        .limit(100);\n\n      return this.formatRankingResults(userStats, 'seeds', currentUserId);\n    } catch (error) {\n      console.error('🏆 Error in getTop100BySeeds:', error);\n      return [];\n    }\n  }\n\n  async getTop100ByFlowers(currentUserId: number): Promise<any[]> {\n    try {\n      const userStats = await this.db\n        .select({\n          id: users.id,\n          username: users.username,\n          flowers: sql<number>`COALESCE(SUM(${userFlowers.quantity}), 0)`\n        })\n        .from(users)\n        .leftJoin(userFlowers, eq(users.id, userFlowers.userId))\n        .groupBy(users.id, users.username)\n        .orderBy(desc(sql`COALESCE(SUM(${userFlowers.quantity}), 0)`))\n        .limit(100);\n\n      return this.formatRankingResults(userStats, 'flowers', currentUserId);\n    } catch (error) {\n      console.error('🏆 Error in getTop100ByFlowers:', error);\n      return [];\n    }\n  }\n\n  async getTop100ByBouquets(currentUserId: number): Promise<any[]> {\n    try {\n      const userStats = await this.db\n        .select({\n          id: users.id,\n          username: users.username,\n          bouquets: sql<number>`COALESCE(COUNT(${userBouquets.id}), 0)`\n        })\n        .from(users)\n        .leftJoin(userBouquets, eq(users.id, userBouquets.userId))\n        .groupBy(users.id, users.username)\n        .orderBy(desc(sql`COALESCE(COUNT(${userBouquets.id}), 0)`))\n        .limit(100);\n\n      return this.formatRankingResults(userStats, 'bouquets', currentUserId);\n    } catch (error) {\n      console.error('🏆 Error in getTop100ByBouquets:', error);\n      return [];\n    }\n  }\n\n  async getTop100ByHearts(currentUserId: number): Promise<any[]> {\n    try {\n      const userStats = await this.db\n        .select({\n          id: users.id,\n          username: users.username,\n          hearts: users.hearts\n        })\n        .from(users)\n        .orderBy(desc(users.hearts))\n        .limit(100);\n\n      return this.formatRankingResults(userStats, 'hearts', currentUserId);\n    } catch (error) {\n      console.error('🏆 Error in getTop100ByHearts:', error);\n      return [];\n    }\n  }\n\n  async getTop100ByButterflies(currentUserId: number): Promise<any[]> {\n    try {\n      const userStats = await this.db\n        .select({\n          id: users.id,\n          username: users.username,\n          butterflies: sql<number>`COALESCE(COUNT(${userButterflies.id}), 0)`\n        })\n        .from(users)\n        .leftJoin(userButterflies, eq(users.id, userButterflies.userId))\n        .groupBy(users.id, users.username)\n        .orderBy(desc(sql`COALESCE(COUNT(${userButterflies.id}), 0)`))\n        .limit(100);\n\n      return this.formatRankingResults(userStats, 'butterflies', currentUserId);\n    } catch (error) {\n      console.error('🏆 Error in getTop100ByButterflies:', error);\n      return [];\n    }\n  }\n\n  async getTop100ByCaterpillars(currentUserId: number): Promise<any[]> {\n    try {\n      const userStats = await this.db\n        .select({\n          id: users.id,\n          username: users.username,\n          caterpillars: sql<number>`COALESCE(COUNT(${userCaterpillars.id}), 0)`\n        })\n        .from(users)\n        .leftJoin(userCaterpillars, eq(users.id, userCaterpillars.userId))\n        .groupBy(users.id, users.username)\n        .orderBy(desc(sql`COALESCE(COUNT(${userCaterpillars.id}), 0)`))\n        .limit(100);\n\n      return this.formatRankingResults(userStats, 'caterpillars', currentUserId);\n    } catch (error) {\n      console.error('🏆 Error in getTop100ByCaterpillars:', error);\n      return [];\n    }\n  }\n\n  async getTop100ByFish(currentUserId: number): Promise<any[]> {\n    try {\n      const userStats = await this.db\n        .select({\n          id: users.id,\n          username: users.username,\n          fish: sql<number>`COALESCE(COUNT(${userFish.id}), 0)`\n        })\n        .from(users)\n        .leftJoin(userFish, eq(users.id, userFish.userId))\n        .groupBy(users.id, users.username)\n        .orderBy(desc(sql`COALESCE(COUNT(${userFish.id}), 0)`))\n        .limit(100);\n\n      return this.formatRankingResults(userStats, 'fish', currentUserId);\n    } catch (error) {\n      console.error('🏆 Error in getTop100ByFish:', error);\n      return [];\n    }\n  }\n\n  async getTop100ByExhibitionButterflies(currentUserId: number): Promise<any[]> {\n    try {\n      const userStats = await this.db\n        .select({\n          id: users.id,\n          username: users.username,\n          exhibitionButterflies: sql<number>`COALESCE(COUNT(${exhibitionButterflies.id}), 0)`\n        })\n        .from(users)\n        .leftJoin(exhibitionButterflies, eq(users.id, exhibitionButterflies.userId))\n        .groupBy(users.id, users.username)\n        .orderBy(desc(sql`COALESCE(COUNT(${exhibitionButterflies.id}), 0)`))\n        .limit(100);\n\n      return this.formatRankingResults(userStats, 'exhibitionButterflies', currentUserId);\n    } catch (error) {\n      console.error('🏆 Error in getTop100ByExhibitionButterflies:', error);\n      return [];\n    }\n  }\n\n  async getTop100ByExhibitionFish(currentUserId: number): Promise<any[]> {\n    try {\n      const userStats = await this.db\n        .select({\n          id: users.id,\n          username: users.username,\n          exhibitionFish: sql<number>`COALESCE(COUNT(${aquariumFish.id}), 0)`\n        })\n        .from(users)\n        .leftJoin(aquariumFish, eq(users.id, aquariumFish.userId))\n        .groupBy(users.id, users.username)\n        .orderBy(desc(sql`COALESCE(COUNT(${aquariumFish.id}), 0)`))\n        .limit(100);\n\n      return this.formatRankingResults(userStats, 'exhibitionFish', currentUserId);\n    } catch (error) {\n      console.error('🏆 Error in getTop100ByExhibitionFish:', error);\n      return [];\n    }\n  }\n\n  async getTop100ByBouquetRecipes(currentUserId: number): Promise<any[]> {\n    try {\n      // Count bouquet recipes created by each user\n      const userStats = await this.db\n        .select({\n          id: users.id,\n          username: users.username,\n          bouquetRecipes: sql<number>`COALESCE(COUNT(${bouquets.id}), 0)`\n        })\n        .from(users)\n        .leftJoin(bouquets, eq(users.id, bouquets.createdByUserId))\n        .groupBy(users.id, users.username)\n        .orderBy(desc(sql`COALESCE(COUNT(${bouquets.id}), 0)`))\n        .limit(100);\n\n      return this.formatRankingResults(userStats, 'bouquetRecipes', currentUserId);\n    } catch (error) {\n      console.error('🏆 Error in getTop100ByBouquetRecipes:', error);\n      return [];\n    }\n  }\n\n  private formatRankingResults(results: any[], valueKey: string, currentUserId: number): any[] {\n    console.log(`🏆 formatRankingResults: ${valueKey}, results:`, results);\n    return results.map((user, index) => ({\n      id: user.id || user.userId,\n      username: user.username,\n      value: user[valueKey] || 0,\n      rank: index + 1,\n      isCurrentUser: (user.id === currentUserId) || (user.userId === currentUserId)\n    }));\n  }\n\n  // Helper function to get frame likes count\n  async getFrameLikesCount(frameId: number): Promise<number> {\n    try {\n      const result = await this.db\n        .select({ count: sql<number>`COUNT(*)` })\n        .from(exhibitionFrameLikes)\n        .where(eq(exhibitionFrameLikes.frameId, frameId));\n      \n      return Number(result[0]?.count) || 0;\n    } catch (error) {\n      console.error('Error getting frame likes count:', error);\n      return 0;\n    }\n  }\n\n  // Calculate current Cr/h based on degradation over 72 hours with like bonus\n  private getCurrentCrPerHour(rarity: string, isVip: boolean, placedAt: Date, likesCount: number = 0): number {\n    let baseValue: number;\n    \n    if (isVip || rarity === 'vip') {\n      // VIP butterflies: 60 Cr/h → 6 Cr/h over 72 hours\n      const startValue = 60;\n      const minValue = 6;\n      baseValue = this.calculateDegradedValue(startValue, minValue, placedAt);\n    } else {\n      const rarityValues: Record<string, { start: number; min: number }> = {\n        'common': { start: 1, min: 1 },       // No degradation for Common\n        'uncommon': { start: 2, min: 1 },     // 2 → 1 Cr/h\n        'rare': { start: 5, min: 1 },         // 5 → 1 Cr/h  \n        'super-rare': { start: 10, min: 1 },  // 10 → 1 Cr/h\n        'epic': { start: 20, min: 2 },        // 20 → 2 Cr/h\n        'legendary': { start: 50, min: 5 },   // 50 → 5 Cr/h\n        'mythical': { start: 100, min: 10 }   // 100 → 10 Cr/h\n      };\n\n      const values = rarityValues[rarity] || { start: 1, min: 1 };\n      baseValue = this.calculateDegradedValue(values.start, values.min, placedAt);\n    }\n    \n    // Apply like bonus: 2% per like\n    const likeBonus = 1 + (likesCount * 0.02); // 2% per like\n    baseValue = Math.round(baseValue * likeBonus);\n    \n    return baseValue;\n  }\n\n  // Calculate degraded value over 72 hours\n  private calculateDegradedValue(startValue: number, minValue: number, placedAt: Date): number {\n    const placedTime = placedAt.getTime();\n    const now = new Date().getTime();\n    const timeSincePlacement = now - placedTime;\n    const SEVENTY_TWO_HOURS = 72 * 60 * 60 * 1000;\n\n    // If less than 72 hours have passed, calculate degradation\n    if (timeSincePlacement < SEVENTY_TWO_HOURS) {\n      const degradationProgress = timeSincePlacement / SEVENTY_TWO_HOURS; // 0 to 1\n      const valueRange = startValue - minValue;\n      const currentValue = startValue - (valueRange * degradationProgress);\n      return Math.max(Math.round(currentValue), minValue);\n    }\n\n    // After 72 hours, return minimum value\n    return minValue;\n  }\n\n  // ==================== FIELD FLOWERS MANAGEMENT (for Pond Caterpillar Spawning) ====================\n\n  async getUserFlower(userId: number, flowerId: number): Promise<any | null> {\n    try {\n      console.log(`🌸 Getting flower ${flowerId} for user ${userId}`);\n      \n      const flower = await this.db.select().from(userFlowers).where(\n        and(\n          eq(userFlowers.userId, userId),\n          eq(userFlowers.id, flowerId)\n        )\n      ).limit(1);\n      \n      if (flower.length === 0) {\n        console.log(`🌸 Flower ${flowerId} not found for user ${userId}`);\n        return null;\n      }\n      \n      console.log(`🌸 Found flower: ${flower[0].flowerName} (quantity: ${flower[0].quantity})`);\n      return flower[0];\n    } catch (error) {\n      console.error('🌸 Error getting user flower:', error);\n      return null;\n    }\n  }\n\n  async getFieldFlower(userId: number, fieldIndex: number): Promise<any | null> {\n    try {\n      const flower = await this.db.select().from(fieldFlowers).where(\n        and(\n          eq(fieldFlowers.userId, userId),\n          eq(fieldFlowers.fieldIndex, fieldIndex)\n        )\n      ).limit(1);\n      \n      return flower.length > 0 ? flower[0] : null;\n    } catch (error) {\n      console.error('🌸 Error getting field flower:', error);\n      return null;\n    }\n  }\n\n  async placeFlowerOnField(userId: number, fieldIndex: number, flowerId: number): Promise<{ success: boolean; message?: string; flower?: any }> {\n    console.log(`🌸 Placing flower ${flowerId} on field ${fieldIndex} for user ${userId}`);\n    \n    try {\n      // Check if user has this flower\n      const userFlower = await this.db\n        .select()\n        .from(userFlowers)\n        .where(and(eq(userFlowers.userId, userId), eq(userFlowers.id, flowerId)));\n\n      if (userFlower.length === 0) {\n        return { success: false, message: \"Blume nicht gefunden\" };\n      }\n\n      if (userFlower[0].quantity <= 0) {\n        return { success: false, message: \"Nicht genügend Blumen im Inventar\" };\n      }\n\n      // Check if field already has a flower\n      const existingFlower = await this.db\n        .select()\n        .from(fieldFlowers)\n        .where(and(eq(fieldFlowers.userId, userId), eq(fieldFlowers.fieldIndex, fieldIndex)));\n\n      if (existingFlower.length > 0) {\n        return { success: false, message: \"Auf diesem Feld ist bereits eine Blume platziert\" };\n      }\n\n      // Place flower on field\n      await this.db.insert(fieldFlowers).values({\n        userId: userId,\n        fieldIndex: fieldIndex,\n        flowerId: userFlower[0].flowerId,\n        flowerName: userFlower[0].flowerName,\n        flowerRarity: userFlower[0].flowerRarity,\n        flowerImageUrl: userFlower[0].flowerImageUrl,\n        isShrinking: false\n      });\n\n      // Consume flower from user inventory\n      const newQuantity = userFlower[0].quantity - 1;\n      if (newQuantity <= 0) {\n        await this.db\n          .delete(userFlowers)\n          .where(eq(userFlowers.id, flowerId));\n      } else {\n        await this.db\n          .update(userFlowers)\n          .set({ quantity: newQuantity })\n          .where(eq(userFlowers.id, flowerId));\n      }\n\n      console.log(`🌸 Flower ${userFlower[0].flowerName} placed on field ${fieldIndex}`);\n      return { success: true, flower: userFlower[0] };\n    } catch (error) {\n      console.error('🌸 Error placing flower on field:', error);\n      return { success: false, message: \"Datenbankfehler beim Platzieren der Blume\" };\n    }\n  }\n\n  async getFieldFlowers(userId: number): Promise<any[]> {\n    try {\n      console.log(`🌸 Getting field flowers for user ${userId}`);\n      \n      const flowers = await this.db\n        .select()\n        .from(fieldFlowers)\n        .where(sql`user_id = ${userId}`)\n        .orderBy(fieldFlowers.fieldIndex);\n      \n      console.log(`🌸 Found ${flowers.length} field flowers for user ${userId}`);\n      return flowers;\n    } catch (error) {\n      console.error('🌸 Error getting field flowers:', error);\n      return [];\n    }\n  }\n\n  async removeFieldFlower(userId: number, fieldIndex: number): Promise<{ success: boolean; message?: string }> {\n    console.log(`🌸 Removing field flower on field ${fieldIndex} for user ${userId}`);\n    \n    try {\n      const result = await this.db\n        .delete(fieldFlowers)\n        .where(and(eq(fieldFlowers.userId, userId), eq(fieldFlowers.fieldIndex, fieldIndex)))\n        .returning();\n\n      console.log(`🌸 Deletion result: ${result.length} rows deleted`);\n\n      if (result.length === 0) {\n        return { success: false, message: 'No flower found on field' };\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error('🌸 Error removing field flower:', error);\n      return { success: false, message: \"Datenbankfehler beim Entfernen der Blume\" };\n    }\n  }\n  // Daily Items System\n  async getDailyItems(): Promise<DailyItems | null> {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      \n      let [dailyItemsRecord] = await this.db\n        .select()\n        .from(dailyItems)\n        .where(eq(dailyItems.date, today))\n        .limit(1);\n\n      if (!dailyItemsRecord) {\n        // Generate new daily items for today\n        dailyItemsRecord = await this.generateDailyItems(today);\n      }\n\n      return dailyItemsRecord;\n    } catch (error) {\n      console.error('Failed to get daily items:', error);\n      return null;\n    }\n  }\n\n  async getDailyItemsWithRedemptions(userId?: number): Promise<(DailyItems & { redemptions?: Record<string, boolean> }) | null> {\n    try {\n      const dailyItemsData = await this.getDailyItems();\n      if (!dailyItemsData || !userId) {\n        return dailyItemsData;\n      }\n\n      // Get redemption status for each daily prize type\n      const prizeTypes = ['daily-flower', 'daily-butterfly', 'daily-caterpillar', 'daily-fish', 'daily-credits'];\n      const redemptions: Record<string, boolean> = {};\n\n      for (const prizeType of prizeTypes) {\n        redemptions[prizeType] = await this.checkDailyRedemption(userId, prizeType);\n      }\n\n      return {\n        ...dailyItemsData,\n        redemptions\n      };\n    } catch (error) {\n      console.error('Failed to get daily items with redemptions:', error);\n      return null;\n    }\n  }\n\n  private async generateDailyItems(date: string): Promise<DailyItems> {\n    // Generate ONLY rare items (rarity 2)\n    const getRandomRareId = (max: number) => Math.floor(Math.random() * max);\n    const getRareRarity = () => 2; // Always rare (2)\n\n    const newDailyItems = {\n      date,\n      flowerId: getRandomRareId(200),\n      flowerRarity: getRareRarity(),\n      butterflyId: getRandomRareId(960),\n      butterflyRarity: getRareRarity(),\n      caterpillarId: getRandomRareId(124),\n      caterpillarRarity: getRareRarity(),\n      fishId: getRandomRareId(278),\n      fishRarity: getRareRarity(),\n    };\n\n    const [inserted] = await this.db\n      .insert(dailyItems)\n      .values(newDailyItems)\n      .returning();\n\n    return inserted;\n  }\n\n  // Daily Redemption System\n  async checkDailyRedemption(userId: number, prizeType: string): Promise<boolean> {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      \n      const [existing] = await this.db\n        .select()\n        .from(dailyRedemptions)\n        .where(\n          and(\n            eq(dailyRedemptions.userId, userId),\n            eq(dailyRedemptions.date, today),\n            eq(dailyRedemptions.prizeType, prizeType)\n          )\n        )\n        .limit(1);\n      \n      return !!existing; // Return true if already redeemed today\n    } catch (error) {\n      console.error('Failed to check daily redemption:', error);\n      return false;\n    }\n  }\n\n  async recordDailyRedemption(userId: number, prizeType: string): Promise<boolean> {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      \n      await this.db\n        .insert(dailyRedemptions)\n        .values({\n          userId,\n          date: today,\n          prizeType\n        });\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to record daily redemption:', error);\n      return false;\n    }\n  }\n\n  // Ticket Redemption System\n  async redeemTickets(userId: number, prizeType: string, cost: number): Promise<{ success: boolean; message: string }> {\n    try {\n      // Check if this is a daily prize that can only be redeemed once per day\n      const isDailyPrize = ['daily-flower', 'daily-butterfly', 'daily-caterpillar', 'daily-fish', 'daily-credits'].includes(prizeType);\n      \n      if (isDailyPrize) {\n        const alreadyRedeemed = await this.checkDailyRedemption(userId, prizeType);\n        if (alreadyRedeemed) {\n          return { success: false, message: \"Du hast diesen Preis heute bereits eingelöst. Komm morgen wieder!\" };\n        }\n      }\n\n      const userResult = await this.db\n        .select()\n        .from(users)\n        .where(eq(users.id, userId))\n        .limit(1);\n      \n      if (userResult.length === 0) {\n        return { success: false, message: \"User not found\" };\n      }\n      \n      const user = userResult[0];\n\n      if (user.tickets < cost) {\n        return { success: false, message: `Nicht genügend Lose. Du hast ${user.tickets}, brauchst aber ${cost}.` };\n      }\n\n      // Deduct tickets\n      await this.db\n        .update(users)\n        .set({ tickets: user.tickets - cost })\n        .where(eq(users.id, userId));\n\n      // Award prize based on type\n      switch (prizeType) {\n        case 'seed':\n        case 'common-seed':\n          await this.addSeedToUser(userId, 1, 1); // Common seed\n          break;\n        case 'suns':\n          await this.addSunsToUser(userId, 5); // Updated to match frontend description\n          break;\n        case 'rare-seed':\n          await this.addSeedToUser(userId, 3, 1); // Rare seed (seedId 3 = rare)\n          break;\n        case 'dna':\n          await this.updateUserDna(userId, 15);\n          break;\n        case 'credits':\n          await this.addCreditsToUser(userId, 500); // 500 credits prize\n          break;\n        case 'daily-credits':\n          await this.addCreditsToUser(userId, 800);\n          break;\n        case 'daily-flower':\n          const dailyItemsForFlower = await this.getDailyItems();\n          if (dailyItemsForFlower) {\n            // Convert integer rarity to string rarity name\n            const rarityNames = ['common', 'uncommon', 'rare', 'super-rare', 'epic', 'legendary', 'mythical'];\n            const rarityName = rarityNames[dailyItemsForFlower.flowerRarity] || 'common';\n            await this.addFlowerToUser(userId, dailyItemsForFlower.flowerId, rarityName);\n          }\n          break;\n        case 'daily-butterfly':\n          const dailyItemsForButterfly = await this.getDailyItems();\n          if (dailyItemsForButterfly) {\n            // Convert integer rarity to string rarity name\n            const rarityNames = ['common', 'uncommon', 'rare', 'super-rare', 'epic', 'legendary', 'mythical'];\n            const rarityName = rarityNames[dailyItemsForButterfly.butterflyRarity] || 'common';\n            await this.addButterflyToUser(userId, dailyItemsForButterfly.butterflyId, rarityName);\n          }\n          break;\n        case 'daily-caterpillar':\n          const dailyItemsForCaterpillar = await this.getDailyItems();\n          if (dailyItemsForCaterpillar) {\n            // Convert integer rarity to string rarity name\n            const rarityNames = ['common', 'uncommon', 'rare', 'super-rare', 'epic', 'legendary', 'mythical'];\n            const rarityName = rarityNames[dailyItemsForCaterpillar.caterpillarRarity] || 'common';\n            await this.addCaterpillarForRedemption(userId, dailyItemsForCaterpillar.caterpillarId, rarityName);\n          }\n          break;\n        case 'daily-fish':\n          const dailyItemsForFish = await this.getDailyItems();\n          if (dailyItemsForFish) {\n            // Convert integer rarity to string rarity name\n            const rarityNames = ['common', 'uncommon', 'rare', 'super-rare', 'epic', 'legendary', 'mythical'];\n            const rarityName = rarityNames[dailyItemsForFish.fishRarity] || 'common';\n            await this.addDailyFishToUser(userId, dailyItemsForFish.fishId, rarityName);\n          }\n          break;\n        default:\n          return { success: false, message: \"Unbekannter Preistyp\" };\n      }\n\n      // Record daily redemption for daily prizes\n      if (isDailyPrize) {\n        await this.recordDailyRedemption(userId, prizeType);\n      }\n\n      return { success: true, message: \"Preis erfolgreich eingelöst!\" };\n    } catch (error) {\n      console.error('Failed to redeem tickets:', error);\n      return { success: false, message: \"Fehler beim Einlösen\" };\n    }\n  }\n\n  // Helper method to add seeds to user\n  private async addSeedToUser(userId: number, seedId: number, quantity: number): Promise<void> {\n    const existing = await this.db\n      .select()\n      .from(userSeeds)\n      .where(and(eq(userSeeds.userId, userId), eq(userSeeds.seedId, seedId)))\n      .limit(1);\n\n    if (existing.length > 0) {\n      await this.db\n        .update(userSeeds)\n        .set({ quantity: existing[0].quantity + quantity })\n        .where(eq(userSeeds.id, existing[0].id));\n      \n      // Collection stats are not tracked for seeds - only for collectible items like flowers, butterflies, fish, caterpillars\n    } else {\n      await this.db.insert(userSeeds).values({\n        userId,\n        seedId,\n        quantity\n      });\n      \n      // Collection stats are not tracked for seeds - only for collectible items like flowers, butterflies, fish, caterpillars\n    }\n  }\n\n  // Helper method to add suns to user\n  private async addSunsToUser(userId: number, amount: number): Promise<void> {\n    await this.db\n      .update(users)\n      .set({ suns: sql`${users.suns} + ${amount}` })\n      .where(eq(users.id, userId));\n  }\n\n  // Helper method to add credits to user\n  private async addCreditsToUser(userId: number, amount: number): Promise<void> {\n    await this.db\n      .update(users)\n      .set({ credits: sql`${users.credits} + ${amount}` })\n      .where(eq(users.id, userId));\n  }\n\n  // Helper method to add flower to user with UPSERT logic\n  private async addFlowerToUser(userId: number, flowerId: number, rarity: string): Promise<void> {\n    // Generate flower name using flowerId as seed for consistency with dialog\n    const flowerName = generateLatinFlowerName(flowerId);\n    \n    // Convert string rarity to integer for database\n    const rarityNames = ['common', 'uncommon', 'rare', 'super-rare', 'epic', 'legendary', 'mythical'];\n    const rarityInteger = rarityNames.indexOf(rarity);\n    \n    try {\n      // Try to insert first (most common case)\n      await this.db.insert(userFlowers).values({\n        userId,\n        flowerId,\n        flowerName,\n        rarity: rarityInteger >= 0 ? rarityInteger : 0, // Integer rarity for DB constraint\n        flowerRarity: rarity,                            // String rarity for display\n        flowerImageUrl: `/Blumen/${flowerId}.jpg`,\n        quantity: 1\n      });\n      console.log(`🌸 Created new flower inventory entry: ${flowerName}`);\n      \n      // Update collection stats for new flower\n      await this.updateCollectionStats(userId, 'flowers', flowerId, 1);\n    } catch (error) {\n      // If flower already exists (constraint violation), increment quantity\n      const existingFlower = await this.db\n        .select()\n        .from(userFlowers)\n        .where(and(\n          eq(userFlowers.userId, userId),\n          eq(userFlowers.flowerId, flowerId)\n        ));\n\n      if (existingFlower.length > 0) {\n        await this.db\n          .update(userFlowers)\n          .set({ quantity: existingFlower[0].quantity + 1 })\n          .where(eq(userFlowers.id, existingFlower[0].id));\n        console.log(`🌸 Incremented existing flower ${flowerName} quantity to ${existingFlower[0].quantity + 1}`);\n        \n        // Update collection stats for existing flower\n        await this.updateCollectionStats(userId, 'flowers', flowerId, 1);\n      } else {\n        throw error; // Re-throw if it's not a constraint violation we can handle\n      }\n    }\n  }\n\n  // Helper method to add butterfly to user with UPSERT logic\n  private async addButterflyToUser(userId: number, butterflyId: number, rarity: string): Promise<void> {\n    // Generate consistent butterfly name using fixed ID as seed\n    const butterflyName = generateGermanButterflyName(butterflyId);\n    \n    try {\n      // Try to insert first (most common case)\n      await this.db.insert(userButterflies).values({\n        userId,\n        butterflyId,\n        butterflyName,\n        butterflyRarity: rarity,\n        butterflyImageUrl: `/Schmetterlinge/${String(butterflyId).padStart(3, '0')}.jpg`,\n        quantity: 1\n      });\n      console.log(`🦋 Created new butterfly inventory entry: ${butterflyName}`);\n      \n      // Update collection stats for new butterfly\n      await this.updateCollectionStats(userId, 'butterflies', butterflyId, 1);\n    } catch (error) {\n      // If butterfly already exists (constraint violation), increment quantity\n      const existingButterfly = await this.db\n        .select()\n        .from(userButterflies)\n        .where(and(\n          eq(userButterflies.userId, userId),\n          eq(userButterflies.butterflyId, butterflyId)\n        ));\n\n      if (existingButterfly.length > 0) {\n        await this.db\n          .update(userButterflies)\n          .set({ quantity: existingButterfly[0].quantity + 1 })\n          .where(eq(userButterflies.id, existingButterfly[0].id));\n        console.log(`🦋 Incremented existing butterfly ${butterflyName} quantity to ${existingButterfly[0].quantity + 1}`);\n        \n        // Update collection stats for existing butterfly\n        await this.updateCollectionStats(userId, 'butterflies', butterflyId, 1);\n      } else {\n        throw error; // Re-throw if it's not a constraint violation we can handle\n      }\n    }\n  }\n\n  // Helper method to add caterpillar to user (for ticket redemption)\n  private async addCaterpillarForRedemption(userId: number, caterpillarId: number, rarity: string): Promise<void> {\n    console.log(`🎫 TICKET-REDEMPTION: Adding caterpillar ${caterpillarId} (${rarity}) to user ${userId}`);\n    // Generate consistent caterpillar name using fixed ID as seed\n    const caterpillarName = generateLatinCaterpillarName(caterpillarId);\n    \n    console.log(`🎫 TICKET-REDEMPTION: About to INSERT caterpillar with quantity=1`);\n    const result = await this.db.insert(userCaterpillars).values({\n      userId,\n      caterpillarId,\n      caterpillarName,\n      caterpillarRarity: rarity,\n      caterpillarImageUrl: `/Raupen/${caterpillarId}.jpg`,\n      quantity: 1\n    }).returning();\n    \n    console.log(`🎫 TICKET-REDEMPTION: ✅ RESULT: Created caterpillar with quantity=${result[0]?.quantity}`);\n    \n    // Update collection stats for redeemed caterpillar\n    await this.updateCollectionStats(userId, 'caterpillars', caterpillarId, 1);\n  }\n\n  // Helper method to add fish to user for daily redemption\n  private async addDailyFishToUser(userId: number, fishId: number, rarity: string): Promise<void> {\n    // Generate consistent fish name using fixed ID as seed\n    const fishName = generateLatinFishName(fishId);\n    \n    await this.db.insert(userFish).values({\n      userId,\n      fishId,\n      fishName,\n      fishRarity: rarity,\n      fishImageUrl: `/Fische/${fishId}.jpg`,\n      quantity: 1\n    });\n    \n    // Update collection stats for daily fish\n    await this.updateCollectionStats(userId, 'fish', fishId, 1);\n  }\n\n  // =============================================\n  // CASTLE GARDEN METHODS\n  // =============================================\n\n  // Get unlocked parts for a user\n  async getCastleUnlockedParts(userId: number): Promise<CastleUnlockedPart[]> {\n    return await this.db\n      .select()\n      .from(castleUnlockedParts)\n      .where(eq(castleUnlockedParts.userId, userId));\n  }\n\n  // Unlock a new part for a user\n  async unlockCastlePart(userId: number, partName: string, price: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      // Check if user has enough credits\n      const user = await this.getUser(userId);\n      if (!user) {\n        return { success: false, message: 'Benutzer nicht gefunden' };\n      }\n\n      if (user.credits < price) {\n        return { success: false, message: 'Nicht genügend Credits' };\n      }\n\n      // Check if part is already unlocked\n      const existing = await this.db\n        .select()\n        .from(castleUnlockedParts)\n        .where(and(eq(castleUnlockedParts.userId, userId), eq(castleUnlockedParts.partName, partName)));\n\n      if (existing.length > 0) {\n        return { success: false, message: 'Bauteil bereits freigeschaltet' };\n      }\n\n      // Deduct credits and unlock part\n      await this.updateUserCredits(userId, -price);\n      await this.db.insert(castleUnlockedParts).values({\n        userId,\n        partName,\n        price\n      });\n\n      console.log(`🏰 User ${userId} unlocked castle part: ${partName} for ${price} credits`);\n      return { success: true };\n    } catch (error) {\n      console.error('Failed to unlock castle part:', error);\n      return { success: false, message: 'Fehler beim Freischalten des Bauteils' };\n    }\n  }\n\n  // Get grid state for a user\n  async getCastleGridState(userId: number): Promise<CastleGridState[]> {\n    return await this.db\n      .select()\n      .from(castleGridState)\n      .where(eq(castleGridState.userId, userId));\n  }\n\n  // Place/update a part on the grid\n  async placeCastlePart(userId: number, gridX: number, gridY: number, partName: string): Promise<{ success: boolean; message?: string }> {\n    try {\n      // Check if user has the part unlocked\n      const unlockedParts = await this.getCastleUnlockedParts(userId);\n      const hasUnlockedPart = unlockedParts.some(part => part.partName === partName);\n\n      if (!hasUnlockedPart) {\n        return { success: false, message: 'Bauteil nicht freigeschaltet' };\n      }\n\n      // Check if position is already occupied\n      const existing = await this.db\n        .select()\n        .from(castleGridState)\n        .where(and(\n          eq(castleGridState.userId, userId),\n          eq(castleGridState.gridX, gridX),\n          eq(castleGridState.gridY, gridY)\n        ));\n\n      if (existing.length > 0) {\n        // Update existing position\n        await this.db\n          .update(castleGridState)\n          .set({ partName })\n          .where(and(\n            eq(castleGridState.userId, userId),\n            eq(castleGridState.gridX, gridX),\n            eq(castleGridState.gridY, gridY)\n          ));\n      } else {\n        // Insert new position\n        await this.db.insert(castleGridState).values({\n          userId,\n          gridX,\n          gridY,\n          partName\n        });\n      }\n\n      console.log(`🏰 User ${userId} placed ${partName} at position (${gridX}, ${gridY})`);\n      return { success: true };\n    } catch (error) {\n      console.error('Failed to place castle part:', error);\n      return { success: false, message: 'Fehler beim Platzieren des Bauteils' };\n    }\n  }\n\n  // Remove a part from the grid\n  async removeCastlePart(userId: number, gridX: number, gridY: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      const result = await this.db\n        .delete(castleGridState)\n        .where(and(\n          eq(castleGridState.userId, userId),\n          eq(castleGridState.gridX, gridX),\n          eq(castleGridState.gridY, gridY)\n        ));\n\n      console.log(`🏰 User ${userId} removed part from position (${gridX}, ${gridY})`);\n      return { success: true };\n    } catch (error) {\n      console.error('Failed to remove castle part:', error);\n      return { success: false, message: 'Fehler beim Entfernen des Bauteils' };\n    }\n  }\n\n  // Feature unlocking functions\n  async getUnlockedFeatures(userId: number) {\n    try {\n      const unlockedFeatures = await this.db\n        .select()\n        .from(userUnlockedFeatures)\n        .where(eq(userUnlockedFeatures.userId, userId));\n      \n      return unlockedFeatures.map(f => f.featureName);\n    } catch (error) {\n      console.error(`💾 Failed to get unlocked features for user ${userId}:`, error);\n      throw error;\n    }\n  }\n\n  async unlockFeature(userId: number, featureName: string, creditsRequired: number) {\n    try {\n      // Get current user credits\n      const user = await this.db\n        .select({ credits: users.credits })\n        .from(users)\n        .where(eq(users.id, userId))\n        .limit(1);\n\n      if (!user[0]) {\n        throw new Error('User not found');\n      }\n\n      if (user[0].credits < creditsRequired) {\n        throw new Error('Insufficient credits');\n      }\n\n      // Check if feature is already unlocked\n      const existing = await this.db\n        .select()\n        .from(userUnlockedFeatures)\n        .where(\n          and(\n            eq(userUnlockedFeatures.userId, userId),\n            eq(userUnlockedFeatures.featureName, featureName)\n          )\n        )\n        .limit(1);\n\n      if (existing.length > 0) {\n        throw new Error('Feature already unlocked');\n      }\n\n      // Deduct credits\n      await this.db\n        .update(users)\n        .set({ \n          credits: user[0].credits - creditsRequired,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n\n      // Unlock feature\n      await this.db\n        .insert(userUnlockedFeatures)\n        .values({\n          userId,\n          featureName,\n          creditsSpent: creditsRequired,\n        });\n\n      console.log(`✅ Feature ${featureName} unlocked for user ${userId} for ${creditsRequired} credits`);\n      return { success: true, newCredits: user[0].credits - creditsRequired };\n    } catch (error) {\n      console.error(`💾 Failed to unlock feature ${featureName} for user ${userId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Backfill collection statistics for existing users from their current inventories\n   * This populates the collection_stats table with lifetime acquisition data\n   */\n  async backfillCollectionStats(): Promise<{ success: boolean; stats: any }> {\n    try {\n      console.log('📊 Starting collection stats backfill...');\n      \n      // Get all users\n      const allUsers = await this.db.select({ id: users.id }).from(users);\n      console.log(`📊 Found ${allUsers.length} users to backfill`);\n      \n      let totalInserted = 0;\n      const typeStats = { flowers: 0, butterflies: 0, caterpillars: 0, fish: 0 };\n      \n      for (const user of allUsers) {\n        const userId = user.id;\n        console.log(`📊 Processing user ${userId}...`);\n        \n        // Backfill flowers\n        const userFlowersData = await this.db\n          .select()\n          .from(userFlowers)\n          .where(eq(userFlowers.userId, userId));\n        \n        for (const flower of userFlowersData) {\n          await this.updateCollectionStatsForBackfill(userId, 'flowers', flower.flowerId, flower.quantity);\n          totalInserted++;\n          typeStats.flowers++;\n        }\n        \n        // Backfill butterflies (regular)\n        const userButterfliesData = await this.db\n          .select()\n          .from(userButterflies)\n          .where(eq(userButterflies.userId, userId));\n        \n        for (const butterfly of userButterfliesData) {\n          await this.updateCollectionStatsForBackfill(userId, 'butterflies', butterfly.butterflyId, butterfly.quantity);\n          totalInserted++;\n          typeStats.butterflies++;\n        }\n        \n        // Backfill VIP butterflies\n        const userVipButterfliesData = await this.db\n          .select()\n          .from(userVipButterflies)\n          .where(eq(userVipButterflies.userId, userId));\n        \n        for (const vipButterfly of userVipButterfliesData) {\n          await this.updateCollectionStatsForBackfill(userId, 'butterflies', vipButterfly.vipButterflyId, vipButterfly.quantity);\n          totalInserted++;\n          typeStats.butterflies++;\n        }\n        \n        // Backfill caterpillars\n        const userCaterpillarsData = await this.db\n          .select()\n          .from(userCaterpillars)\n          .where(eq(userCaterpillars.userId, userId));\n        \n        for (const caterpillar of userCaterpillarsData) {\n          await this.updateCollectionStatsForBackfill(userId, 'caterpillars', caterpillar.caterpillarId, caterpillar.quantity);\n          totalInserted++;\n          typeStats.caterpillars++;\n        }\n        \n        // Backfill fish\n        const userFishData = await this.db\n          .select()\n          .from(userFish)\n          .where(eq(userFish.userId, userId));\n        \n        for (const fish of userFishData) {\n          await this.updateCollectionStatsForBackfill(userId, 'fish', fish.fishId, fish.quantity);\n          totalInserted++;\n          typeStats.fish++;\n        }\n        \n        console.log(`📊 User ${userId} backfilled: ${userFlowersData.length} flowers, ${userButterfliesData.length + userVipButterfliesData.length} butterflies, ${userCaterpillarsData.length} caterpillars, ${userFishData.length} fish`);\n      }\n      \n      console.log(`📊 Backfill complete! Inserted ${totalInserted} collection stats entries:`, typeStats);\n      return { \n        success: true, \n        stats: { \n          totalUsers: allUsers.length, \n          totalEntries: totalInserted, \n          typeBreakdown: typeStats \n        } \n      };\n    } catch (error) {\n      console.error('📊 Backfill failed:', error);\n      return { success: false, stats: { error: error.message } };\n    }\n  }\n}\n\nexport const postgresStorage = new PostgresStorage();","size_bytes":262859},"client/src/components/FlowerpowerView.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useNotification } from \"../hooks/useNotification\";\nimport { RarityImage } from \"./RarityImage\";\nimport { Sparkles, Flower, Zap, Star, Heart, Plus, Minus, Trophy, Users, Info, Gift } from \"lucide-react\";\nimport { HelpButton } from './HelpButton';\n\ninterface WeeklyChallenge {\n  id: number;\n  weekNumber: number;\n  year: number;\n  startTime: string;\n  endTime: string;\n  isActive: boolean;\n  flowerId1: number;\n  flowerId2: number;\n  flowerId3: number;\n  flowerId4: number;\n  flowerId5: number;\n  flowerId6: number;\n}\n\ninterface LeaderboardEntry {\n  userId: number;\n  username: string;\n  totalDonations: number;\n}\n\ninterface UserFlower {\n  id: number;\n  userId: number;\n  flowerId: number;\n  flowerRarity: string;\n  quantity: number;\n  createdAt: string;\n}\n\nexport const FlowerpowerView: React.FC = () => {\n  const { user } = useAuth();\n  const { showNotification } = useNotification();\n  const [flowers, setFlowers] = useState<UserFlower[]>([]);\n  const [challenge, setChallenge] = useState<WeeklyChallenge | null>(null);\n  const [isActive, setIsActive] = useState(false);\n  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);\n  const [donationAmounts, setDonationAmounts] = useState<Record<number, number>>({});\n  const [showDonateDialog, setShowDonateDialog] = useState(false);\n  const [donateFlowerId, setDonateFlowerId] = useState<number | null>(null);\n  const [donateAmount, setDonateAmount] = useState(1);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadChallenge();\n    if (user) {\n      fetchMyFlowers();\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (challenge) {\n      loadLeaderboard();\n    }\n  }, [challenge]);\n\n  const fetchMyFlowers = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/flowers`);\n      if (response.ok) {\n        const data = await response.json();\n        setFlowers(data.flowers || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch my flowers:', error);\n    }\n  };\n\n  const loadChallenge = async () => {\n    try {\n      const response = await fetch('/api/weekly-challenge/current');\n      if (response.ok) {\n        const data = await response.json();\n        setChallenge(data.challenge);\n        setIsActive(data.isActive);\n      }\n    } catch (error) {\n      console.error('Error loading challenge:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadLeaderboard = async () => {\n    if (!challenge) return;\n    \n    try {\n      const response = await fetch(`/api/weekly-challenge/${challenge.id}/leaderboard`);\n      if (response.ok) {\n        const data = await response.json();\n        setLeaderboard(data.leaderboard);\n      }\n    } catch (error) {\n      console.error('Error loading leaderboard:', error);\n    }\n  };\n\n  const handleDonate = async () => {\n    if (!challenge || !donateFlowerId || !user) return;\n\n    try {\n      const response = await fetch('/api/weekly-challenge/donate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-user-id': user.id.toString()\n        },\n        body: JSON.stringify({\n          challengeId: challenge.id,\n          flowerId: donateFlowerId,\n          quantity: donateAmount\n        })\n      });\n\n      const data = await response.json();\n      \n      if (response.ok) {\n        setShowDonateDialog(false);\n        loadLeaderboard();\n        fetchMyFlowers(); // Refresh flowers\n      } else {\n        showNotification(data.message, 'error');\n      }\n    } catch (error) {\n      console.error('Error donating flower:', error);\n    }\n  };\n\n  const getFlowerQuantity = (flowerId: number): number => {\n    const flower = flowers.find(f => f.flowerId === flowerId);\n    return flower?.quantity || 0;\n  };\n\n  const getFlowerRarity = (flowerId: number): string => {\n    // Based on rarity distribution from replit.md\n    if (flowerId <= 55) return \"common\";\n    if (flowerId <= 100) return \"uncommon\";\n    if (flowerId <= 135) return \"rare\";\n    if (flowerId <= 160) return \"super-rare\";\n    if (flowerId <= 180) return \"epic\";\n    if (flowerId <= 195) return \"legendary\";\n    return \"mythical\";\n  };\n\n  const getRarityColor = (rarity: string): string => {\n    const colors = {\n      \"common\": \"yellow\",\n      \"uncommon\": \"green\", \n      \"rare\": \"blue\",\n      \"super-rare\": \"cyan\",\n      \"epic\": \"purple\",\n      \"legendary\": \"orange\",\n      \"mythical\": \"red\"\n    };\n    return colors[rarity as keyof typeof colors] || \"gray\";\n  };\n\n  if (!user) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <Card className=\"bg-slate-800 border-slate-700 p-8\">\n          <CardContent className=\"text-center\">\n            <Sparkles className=\"h-12 w-12 text-orange-400 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Anmeldung erforderlich</h2>\n            <p className=\"text-slate-400\">Bitte melde dich an, um Flowerpower zu nutzen.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Zap className=\"h-12 w-12 text-orange-400 mx-auto mb-4 animate-pulse\" />\n          <p className=\"text-white\">Lade Challenge...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!challenge) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <Card className=\"bg-slate-800 border-slate-700 p-8\">\n          <CardContent className=\"text-center\">\n            <Flower className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Keine aktive Challenge</h2>\n            <p className=\"text-slate-400\">Derzeit ist keine Weekly Challenge aktiv.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!isActive) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <Card className=\"bg-slate-800 border-slate-700 p-8\">\n          <CardContent className=\"text-center\">\n            <Heart className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Challenge pausiert</h2>\n            <p className=\"text-slate-400\">Die Weekly Challenge ist zwischen Sonntag 18:00 und Montag 0:00 pausiert.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const challengeFlowerIds = challenge ? [\n    challenge.flowerId1,\n    challenge.flowerId2,\n    challenge.flowerId3,\n    challenge.flowerId4,\n    challenge.flowerId5,\n    challenge.flowerId6\n  ] : [];\n\n  const openDonateDialog = (flowerId: number) => {\n    setDonateFlowerId(flowerId);\n    setDonateAmount(1);\n    setShowDonateDialog(true);\n  };\n\n  const adjustDonateAmount = (delta: number) => {\n    const maxAmount = getFlowerQuantity(donateFlowerId || 0);\n    setDonateAmount(Math.max(1, Math.min(maxAmount, donateAmount + delta)));\n  };\n\n  return (\n    <div className=\"h-full bg-slate-950 text-white overflow-y-auto\">\n      <div className=\"container mx-auto px-4 py-6 space-y-6\">\n        \n        {/* Header */}\n        <div className=\"relative mb-8\">\n          {/* HelpButton in absoluter Position rechts oben */}\n          <div className=\"absolute top-0 right-0\">\n            <HelpButton helpText=\"Bei der Flowerpower Challenge spendest du bestimmte Blumen für die Gemeinschaft! Je mehr Blumen du spendest, desto höher deine Chance auf seltene animierte Schmetterlinge als Belohnung!\" viewType=\"flowerpower\" />\n          </div>\n          \n          {/* Zentrierter Content */}\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <Zap className=\"h-10 w-10 text-orange-400 mr-3\" />\n              <h1 className=\"text-4xl font-bold bg-gradient-to-r from-orange-400 to-pink-500 bg-clip-text text-transparent\">\n                Flowerpower Challenge\n              </h1>\n            </div>\n            <p className=\"text-slate-400 text-lg\">\n              Woche {challenge?.weekNumber} • Spende Blumen und gewinne animierte Schmetterlinge!\n            </p>\n          </div>\n        </div>\n\n        {/* Main Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          \n          {/* Left: Challenge Info & Rewards */}\n          <div className=\"lg:col-span-1 space-y-4\">\n            {/* Challenge Flowers */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Star className=\"h-5 w-5 text-yellow-400 mr-2\" />\n                  Gesuchte Blumen\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  {challengeFlowerIds.map((flowerId, index) => {\n                    const rarity = getFlowerRarity(flowerId);\n                    const quantity = getFlowerQuantity(flowerId);\n                    const color = getRarityColor(rarity);\n                    \n                    return (\n                      <div key={`challenge-flower-${index}-${flowerId}`} className=\"relative\">\n                        <div className={`bg-slate-700 rounded-lg p-3 border-2 border-${color}-500`}>\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <Badge className={`bg-${color}-500/20 text-${color}-300`}>\n                              {rarity}\n                            </Badge>\n                            <span className=\"text-sm text-slate-400\">#{flowerId}</span>\n                          </div>\n                          \n                          <RarityImage\n                            src={`/Blumen/${flowerId}.jpg`}\n                            alt={`Blume ${flowerId}`}\n                            rarity={rarity}\n                            size={60}\n                          />\n                          \n                          <div className=\"mt-2 flex items-center justify-between\">\n                            <span className=\"text-xs text-slate-400\">Besitzt:</span>\n                            <span className=\"font-medium\">{quantity}</span>\n                          </div>\n                          \n                          {quantity > 0 && (\n                            <Button\n                              onClick={() => openDonateDialog(flowerId)}\n                              size=\"sm\"\n                              className=\"w-full mt-2 bg-orange-500 hover:bg-orange-600\"\n                            >\n                              <Heart className=\"h-3 w-3 mr-1\" />\n                              Spenden\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Rewards Info */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Trophy className=\"h-5 w-5 text-yellow-400 mr-2\" />\n                  Belohnungen\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center p-2 bg-gradient-to-r from-yellow-500/20 to-orange-500/20 rounded-lg border border-yellow-500/30\">\n                  <div className=\"w-8 h-8 bg-yellow-500 text-black rounded-full flex items-center justify-center font-bold mr-3\">\n                    1\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-yellow-400\">Animierter Schmetterling</p>\n                    <p className=\"text-xs text-slate-400\">60 Cr/h passives Einkommen</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center p-2 bg-purple-500/20 rounded-lg border border-purple-500/30\">\n                  <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center font-bold mr-3\">\n                    2\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-purple-400\">Epischer Schmetterling</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center p-2 bg-cyan-500/20 rounded-lg border border-cyan-500/30\">\n                  <div className=\"w-8 h-8 bg-cyan-500 rounded-full flex items-center justify-center font-bold mr-3\">\n                    3\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-cyan-400\">Super-Seltener Schmetterling</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center p-2 bg-blue-500/20 rounded-lg border border-blue-500/30\">\n                  <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center font-bold mr-3\">\n                    4-10\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-blue-400\">Seltene Schmetterlinge</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Center: Main Challenge Area */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"bg-slate-800 border-slate-700 h-full\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-center text-center\">\n                  <Gift className=\"h-6 w-6 text-pink-400 mr-2\" />\n                  Challenge Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"flex flex-col items-center justify-center space-y-6\">\n                <div className=\"text-6xl\">🌸</div>\n                \n                <div className=\"text-center\">\n                  <h3 className=\"text-2xl font-bold mb-2\">Gemeinschafts-Challenge</h3>\n                  <p className=\"text-slate-400\">\n                    Spende Blumen und erhalte im Gegenzug Samen!\n                  </p>\n                  <p className=\"text-xs text-slate-500 mt-2\">\n                    50% Chance auf einen Samen der nächstniedrigeren Seltenheitsstufe\n                  </p>\n                </div>\n\n                {challenge && (\n                  <div className=\"text-center p-4 bg-slate-700 rounded-lg\">\n                    <p className=\"text-sm text-slate-400\">Challenge endet:</p>\n                    <p className=\"font-medium\">\n                      {new Date(challenge.endTime).toLocaleDateString('de-DE', {\n                        weekday: 'long',\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right: Leaderboard */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"bg-slate-800 border-slate-700 h-full\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"h-5 w-5 text-green-400 mr-2\" />\n                  Bestenliste\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {leaderboard.length === 0 ? (\n                  <div className=\"text-center py-8 text-slate-400\">\n                    <Users className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                    <p>Noch keine Spenden</p>\n                    <p className=\"text-sm\">Sei der Erste!</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {leaderboard.slice(0, 10).map((entry, index) => (\n                      <div\n                        key={entry.userId}\n                        className={`flex items-center p-3 rounded-lg ${\n                          index === 0 ? 'bg-gradient-to-r from-yellow-500/20 to-orange-500/20 border border-yellow-500/30' :\n                          index === 1 ? 'bg-purple-500/20 border border-purple-500/30' :\n                          index === 2 ? 'bg-cyan-500/20 border border-cyan-500/30' :\n                          'bg-slate-700'\n                        }`}\n                      >\n                        <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold mr-3 ${\n                          index === 0 ? 'bg-yellow-500 text-black' :\n                          index === 1 ? 'bg-purple-500' :\n                          index === 2 ? 'bg-cyan-500' :\n                          'bg-slate-600'\n                        }`}>\n                          {index + 1}\n                        </div>\n                        \n                        <div className=\"flex-1\">\n                          <p className=\"font-medium\">{entry.username}</p>\n                          <p className=\"text-sm text-slate-400\">\n                            {entry.totalDonations} Blumen gespendet\n                          </p>\n                        </div>\n\n                        {index < 3 && (\n                          <Trophy className={`h-5 w-5 ${\n                            index === 0 ? 'text-yellow-500' :\n                            index === 1 ? 'text-purple-500' :\n                            'text-cyan-500'\n                          }`} />\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Donation Dialog */}\n        <Dialog open={showDonateDialog} onOpenChange={setShowDonateDialog}>\n          <DialogContent className=\"bg-slate-800 border-slate-700\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center\">\n                <Heart className=\"h-5 w-5 text-pink-400 mr-2\" />\n                Blume spenden\n              </DialogTitle>\n              <DialogDescription>\n                Spende deine Blumen für die wöchentliche Flowerpower Challenge und verdiene Belohnungen.\n              </DialogDescription>\n            </DialogHeader>\n            \n            {donateFlowerId && (\n              <div className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <RarityImage\n                    src={`/Blumen/${donateFlowerId}.jpg`}\n                    alt={`Blume ${donateFlowerId}`}\n                    rarity={getFlowerRarity(donateFlowerId)}\n                    size={80}\n                  />\n                  <p className=\"mt-2 text-sm text-slate-400\">\n                    Besitzt: {getFlowerQuantity(donateFlowerId)} Stück\n                  </p>\n                </div>\n\n                <div className=\"flex items-center justify-center space-x-4\">\n                  <Button\n                    onClick={() => adjustDonateAmount(-1)}\n                    disabled={donateAmount <= 1}\n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    <Minus className=\"h-4 w-4\" />\n                  </Button>\n                  \n                  <span className=\"text-2xl font-bold w-16 text-center\">\n                    {donateAmount}\n                  </span>\n                  \n                  <Button\n                    onClick={() => adjustDonateAmount(1)}\n                    disabled={donateAmount >= getFlowerQuantity(donateFlowerId)}\n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n\n                <p className=\"text-center text-sm text-slate-400\">\n                  Du erhältst möglicherweise {donateAmount} Samen zurück\n                </p>\n              </div>\n            )}\n\n            <DialogFooter>\n              <Button\n                onClick={() => setShowDonateDialog(false)}\n                variant=\"outline\"\n              >\n                Abbrechen\n              </Button>\n              <Button\n                onClick={handleDonate}\n                className=\"bg-orange-500 hover:bg-orange-600\"\n              >\n                <Heart className=\"h-4 w-4 mr-2\" />\n                Spenden\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n};","size_bytes":20981},"server/challengeManager.ts":{"content":"import { postgresStorage } from './postgresStorage';\n\nclass ChallengeManager {\n  private checkInterval: NodeJS.Timeout | null = null;\n  \n  async start() {\n    console.log('🌸 Starting weekly challenge management system...');\n    \n    // Check immediately on startup\n    await this.checkAndCreateChallenge();\n    \n    // Check every hour for new challenges needed\n    this.checkInterval = setInterval(async () => {\n      await this.checkAndCreateChallenge();\n    }, 60 * 60 * 1000); // Every hour\n    \n    console.log('🌸 Weekly challenge management system initialized');\n  }\n  \n  stop() {\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n      this.checkInterval = null;\n    }\n  }\n  \n  private async checkAndCreateChallenge() {\n    try {\n      const now = new Date();\n      const dayOfWeek = now.getDay(); // 0 = Sunday, 1 = Monday, etc.\n      \n      // Don't create new challenges on Sunday (day 0)\n      if (dayOfWeek === 0) {\n        console.log('🌸 Sunday detected - no new challenge creation');\n        return;\n      }\n      \n      // Check if there's an active challenge\n      const currentChallenge = await postgresStorage.getCurrentWeeklyChallenge();\n      \n      if (!currentChallenge) {\n        console.log('🌸 No active challenge found - creating new weekly challenge...');\n        \n        // Create a new challenge\n        const newChallenge = await postgresStorage.createWeeklyChallenge();\n        console.log(`🌸 New weekly challenge created for week ${newChallenge.weekNumber}!`);\n        console.log(`🌸 Challenge runs from ${newChallenge.startTime.toLocaleDateString()} to ${newChallenge.endTime.toLocaleDateString()}`);\n        \n        return newChallenge;\n      } else {\n        // Check if current challenge has expired\n        if (now > currentChallenge.endTime) {\n          console.log('🌸 Current challenge has expired - processing rewards and marking as inactive...');\n          \n          // Process rewards BEFORE deactivating\n          console.log('🏆 Processing challenge rewards for all participants...');\n          await postgresStorage.processChallengeRewards(currentChallenge.id);\n          console.log('🏆 Challenge rewards processing completed!');\n          \n          // Deactivate the old challenge\n          await this.deactivateChallenge(currentChallenge.id);\n          \n          // Create a new challenge (unless it's Sunday)\n          if (dayOfWeek !== 0) {\n            console.log('🌸 Creating new weekly challenge after expiration...');\n            const newChallenge = await postgresStorage.createWeeklyChallenge();\n            console.log(`🌸 New weekly challenge created for week ${newChallenge.weekNumber}!`);\n            return newChallenge;\n          }\n        } else {\n          console.log(`🌸 Active challenge found: Week ${currentChallenge.weekNumber} (ends ${currentChallenge.endTime.toLocaleDateString()})`);\n        }\n      }\n    } catch (error) {\n      console.error('🌸 Error in challenge management:', error);\n    }\n  }\n  \n  private async deactivateChallenge(challengeId: number) {\n    try {\n      await postgresStorage.deactivateChallenge(challengeId);\n    } catch (error) {\n      console.error('🌸 Error deactivating challenge:', error);\n    }\n  }\n}\n\nexport const challengeManager = new ChallengeManager();","size_bytes":3319},"client/src/components/EmergencyDialog.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { useNotification } from \"../hooks/useNotification\";\nimport { AlertTriangle, Sparkles, Sprout } from \"lucide-react\";\n\ninterface EmergencyDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSeedsReceived: () => void;\n}\n\nexport const EmergencyDialog: React.FC<EmergencyDialogProps> = ({ \n  isOpen, \n  onClose, \n  onSeedsReceived \n}) => {\n  const { user } = useAuth();\n  const { credits } = useCredits();\n  const { showNotification } = useNotification();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEligible, setIsEligible] = useState<boolean | null>(null);\n  const [eligibilityReason, setEligibilityReason] = useState<string>(\"\");\n\n  const checkEligibility = async () => {\n    if (!user) return;\n    \n    try {\n      const response = await fetch(`/api/user/${user.id}/emergency-seeds`, {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user.id.toString()\n        }\n      });\n      \n      if (response.ok) {\n        setIsEligible(true);\n      } else {\n        const error = await response.json();\n        setIsEligible(false);\n        setEligibilityReason(error.message || \"Du bist nicht berechtigt für Notfall-Samen\");\n      }\n    } catch (error) {\n      setIsEligible(false);\n      setEligibilityReason(\"Fehler beim Prüfen der Berechtigung\");\n    }\n  };\n\n  const requestEmergencySeeds = async () => {\n    if (!user) return;\n    \n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/user/${user.id}/emergency-seeds`, {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user.id.toString()\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        \n        // Check if SOS was activated\n        if (data.sosActivated) {\n          showNotification(`🆘 ${data.message}`, 'warning');\n        } else {\n          showNotification(data.message || \"Du hast 3 Notfall-Samen erhalten! 🌱\", 'success');\n        }\n        \n        onSeedsReceived();\n        onClose(); // Always close dialog on success\n      } else {\n        const error = await response.json();\n        showNotification(error.message || \"Fehler beim Empfangen der Notfall-Samen\", 'error');\n      }\n    } catch (error) {\n      showNotification(\"Fehler beim Empfangen der Notfall-Samen\", 'error');\n    }\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    if (isOpen && user) {\n      checkEligibility();\n    }\n  }, [isOpen, user]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-red-500/30 text-white max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center text-2xl font-bold text-red-300\">\n            <AlertTriangle className=\"h-8 w-8 mr-3 text-red-400 animate-pulse\" />\n            🚨 Notfall-Hilfe\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"bg-red-900/30 border border-red-500/30 rounded-lg p-4\">\n            <h3 className=\"font-bold text-red-300 mb-2\">\n              🆘 Feststecken vermeiden\n            </h3>\n            <p className=\"text-slate-300 text-sm leading-relaxed\">\n              Mariposa sorgt dafür, dass kein Spieler jemals feststeckt! \n              Wenn du keine Ressourcen mehr hast, können wir dir helfen.\n            </p>\n          </div>\n\n          {isEligible === null && (\n            <div className=\"text-center py-4\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-2\"></div>\n              <p className=\"text-slate-400\">Prüfe deine Berechtigung...</p>\n            </div>\n          )}\n\n          {isEligible === true && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-green-900/30 border border-green-500/30 rounded-lg p-4\">\n                <h3 className=\"font-bold text-green-300 mb-2 flex items-center\">\n                  <Sparkles className=\"h-5 w-5 mr-2\" />\n                  🎁 Du bist berechtigt!\n                </h3>\n                <p className=\"text-slate-300 text-sm mb-3\">\n                  Du erfüllst alle Voraussetzungen für Notfall-Samen:\n                </p>\n                <ul className=\"text-slate-400 text-xs space-y-1\">\n                  <li>✅ Keine Credits verfügbar</li>\n                  <li>✅ Keine Samen im Inventar</li>\n                  <li>✅ Weniger als 3 Blumen</li>\n                  <li>✅ Keine Bouquets</li>\n                  <li>✅ Kein passives Einkommen</li>\n                </ul>\n              </div>\n\n              <div className=\"bg-yellow-900/30 border border-yellow-500/30 rounded-lg p-4\">\n                <h4 className=\"font-bold text-yellow-300 mb-2 flex items-center\">\n                  <Sprout className=\"h-5 w-5 mr-2\" />\n                  🌱 Notfall-Paket\n                </h4>\n                <p className=\"text-slate-300 text-sm\">\n                  Du erhältst <strong className=\"text-yellow-300\">3 gewöhnliche Samen</strong> kostenlos, \n                  um wieder ins Spiel einsteigen zu können!\n                </p>\n              </div>\n\n              <Button\n                onClick={requestEmergencySeeds}\n                disabled={isLoading}\n                className=\"w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-bold py-3 text-lg\"\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"animate-spin w-5 h-5 border-2 border-white border-t-transparent rounded-full mr-2\"></div>\n                    Empfange Samen...\n                  </div>\n                ) : (\n                  \"🎁 3 Notfall-Samen empfangen\"\n                )}\n              </Button>\n            </div>\n          )}\n\n          {isEligible === false && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-orange-900/30 border border-orange-500/30 rounded-lg p-4\">\n                <h3 className=\"font-bold text-orange-300 mb-2\">\n                  ℹ️ Nicht berechtigt\n                </h3>\n                <p className=\"text-slate-300 text-sm mb-2\">\n                  {eligibilityReason}\n                </p>\n                <p className=\"text-slate-400 text-xs\">\n                  Notfall-Samen sind nur verfügbar wenn du komplett ohne Ressourcen bist.\n                </p>\n              </div>\n\n              <div className=\"bg-blue-900/30 border border-blue-500/30 rounded-lg p-4\">\n                <h4 className=\"font-bold text-blue-300 mb-2\">\n                  💡 Alternativen\n                </h4>\n                <ul className=\"text-slate-300 text-sm space-y-1\">\n                  <li>🏪 Kaufe Samen im Mariposa Shop (50 Cr/Stück)</li>\n                  <li>🦋 Nutze passives Einkommen aus der Ausstellung</li>\n                  <li>🌱 Verwende vorhandene Samen oder Blumen</li>\n                </ul>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex justify-end\">\n            <Button\n              onClick={onClose}\n              variant=\"outline\"\n              className=\"border-slate-500 text-slate-300 hover:border-slate-400\"\n            >\n              Schließen\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":7774},"client/src/lib/stores/useSuns.tsx":{"content":"import { create } from \"zustand\";\n\ninterface SunsState {\n  suns: number;\n  setSuns: (suns: number) => void;\n}\n\nexport const useSuns = create<SunsState>((set) => ({\n  suns: 100,\n  setSuns: (suns) => set({ suns }),\n}));","size_bytes":217},"server/sunSpawner.ts":{"content":"import { postgresStorage as storage } from './postgresStorage';\n\nclass SunSpawner {\n  private isRunning = false;\n  private intervalId: NodeJS.Timeout | null = null;\n\n  start() {\n    if (this.isRunning) {\n      console.log('☀️ Sun spawner already running');\n      return;\n    }\n\n    this.isRunning = true;\n    console.log('☀️ Starting sun spawning system...');\n    \n    // Start immediately, then set up intervals\n    this.scheduleNextSpawn();\n    this.startCleanupTimer();\n  }\n\n  stop() {\n    if (this.intervalId) {\n      clearTimeout(this.intervalId);\n      this.intervalId = null;\n    }\n    this.isRunning = false;\n    console.log('☀️ Sun spawning system stopped');\n  }\n\n  private scheduleNextSpawn() {\n    if (!this.isRunning) return;\n\n    // Random interval between 1-3 minutes (60-180 seconds)\n    const minInterval = 60 * 1000; // 1 minute\n    const maxInterval = 180 * 1000; // 3 minutes\n    const nextSpawnInterval = Math.floor(Math.random() * (maxInterval - minInterval + 1)) + minInterval;\n\n    console.log(`☀️ Next sun spawn in ${Math.round(nextSpawnInterval / 1000)} seconds`);\n\n    this.intervalId = setTimeout(async () => {\n      await this.attemptSunSpawn();\n      this.scheduleNextSpawn(); // Schedule the next spawn\n    }, nextSpawnInterval);\n  }\n\n  private async attemptSunSpawn() {\n    try {\n      console.log('☀️ Attempting to spawn sun...');\n\n      // Get all users with unlocked fields\n      const allUsers = await storage.getAllUsersWithStatus();\n      \n      if (allUsers.length === 0) {\n        console.log('☀️ No users found, skipping sun spawn');\n        return;\n      }\n\n      let spawnedAny = false;\n\n      // Try to spawn a sun for each user on inactive fields\n      for (const user of allUsers) {\n        try {\n          console.log(`☀️ Processing user ${user.username} (ID: ${user.id})`);\n          \n          // Get user's unlocked fields\n          const unlockedFields = await storage.getUnlockedFields(user.id);\n          const unlockedFieldIndices = unlockedFields.map(field => field.fieldIndex);\n          console.log(`☀️ User ${user.username} unlocked fields:`, unlockedFieldIndices);\n          \n          // Calculate which fields are \"unlock fields\" (adjacent to unlocked fields)\n          const unlockFieldIndices: number[] = [];\n          for (const fieldIndex of unlockedFieldIndices) {\n            // Add adjacent fields as unlock fields\n            const row = Math.floor(fieldIndex / 10);\n            const col = fieldIndex % 10;\n            \n            // Check all 8 directions (including diagonal) to match frontend logic\n            const adjacents = [\n              (row - 1) * 10 + (col - 1), // up-left\n              (row - 1) * 10 + col,       // up\n              (row - 1) * 10 + (col + 1), // up-right\n              row * 10 + (col - 1),       // left\n              row * 10 + (col + 1),       // right\n              (row + 1) * 10 + (col - 1), // down-left\n              (row + 1) * 10 + col,       // down\n              (row + 1) * 10 + (col + 1)  // down-right\n            ];\n            \n            for (const adj of adjacents) {\n              if (adj >= 0 && adj < 50 && !unlockedFieldIndices.includes(adj) && !unlockFieldIndices.includes(adj)) {\n                unlockFieldIndices.push(adj);\n              }\n            }\n          }\n          console.log(`☀️ User ${user.username} unlock fields:`, unlockFieldIndices);\n          \n          // Find inactive fields (not unlocked, not unlock fields, not pond fields - suns only in garden)\n          const inactiveFields: number[] = [];\n          for (let fieldIndex = 0; fieldIndex < 50; fieldIndex++) {\n            if (!unlockedFieldIndices.includes(fieldIndex) && \n                !unlockFieldIndices.includes(fieldIndex) &&\n                !storage.isPondField(fieldIndex)) {\n              inactiveFields.push(fieldIndex);\n            }\n          }\n          console.log(`☀️ User ${user.username} has ${inactiveFields.length} inactive fields available`);\n\n          if (inactiveFields.length === 0) {\n            console.log(`☀️ User ${user.username} has no inactive fields for sun spawn`);\n            continue;\n          }\n\n          // Check if any inactive field already has an active sun\n          const fieldsWithoutActiveSuns: number[] = [];\n          for (const fieldIndex of inactiveFields) {\n            const activeSun = await storage.getActiveSunOnField(fieldIndex);\n            if (!activeSun) {\n              fieldsWithoutActiveSuns.push(fieldIndex);\n            }\n          }\n\n          console.log(`☀️ User ${user.username} has ${fieldsWithoutActiveSuns.length} inactive fields without active suns`);\n\n          if (fieldsWithoutActiveSuns.length === 0) {\n            console.log(`☀️ User ${user.username}: All inactive fields already have active suns`);\n            continue;\n          }\n\n          // Pick a random inactive field\n          const randomFieldIndex = fieldsWithoutActiveSuns[Math.floor(Math.random() * fieldsWithoutActiveSuns.length)];\n          \n          // TRIPLE-CHECK: Ultra-safe verification system\n          const finalUnlockedFields = await storage.getUnlockedFields(user.id);\n          const finalUnlockedIndices = finalUnlockedFields.map(field => field.fieldIndex);\n          \n          // Recalculate unlock fields to be 100% sure\n          const finalUnlockFields: number[] = [];\n          for (const fieldIndex of finalUnlockedIndices) {\n            const row = Math.floor(fieldIndex / 10);\n            const col = fieldIndex % 10;\n            \n            const adjacents = [\n              (row - 1) * 10 + (col - 1), // up-left\n              (row - 1) * 10 + col,       // up\n              (row - 1) * 10 + (col + 1), // up-right\n              row * 10 + (col - 1),       // left\n              row * 10 + (col + 1),       // right\n              (row + 1) * 10 + (col - 1), // down-left\n              (row + 1) * 10 + col,       // down\n              (row + 1) * 10 + (col + 1)  // down-right\n            ];\n            \n            for (const adj of adjacents) {\n              if (adj >= 0 && adj < 50 && !finalUnlockedIndices.includes(adj) && !finalUnlockFields.includes(adj)) {\n                finalUnlockFields.push(adj);\n              }\n            }\n          }\n          \n          // ABSOLUTE FINAL CHECK: No spawn on unlocked OR unlock fields\n          if (finalUnlockedIndices.includes(randomFieldIndex)) {\n            console.log(`☀️ CRITICAL ERROR: Attempted to spawn sun on UNLOCKED field ${randomFieldIndex} for user ${user.username}! ABORT!`);\n            continue;\n          }\n          \n          if (finalUnlockFields.includes(randomFieldIndex)) {\n            console.log(`☀️ CRITICAL ERROR: Attempted to spawn sun on UNLOCK field ${randomFieldIndex} for user ${user.username}! ABORT!`);\n            console.log(`☀️ Final unlocked fields: [${finalUnlockedIndices.join(', ')}]`);\n            console.log(`☀️ Final unlock fields: [${finalUnlockFields.join(', ')}]`);\n            continue;\n          }\n          \n          console.log(`☀️ VERIFIED SAFE: Field ${randomFieldIndex} is neither unlocked nor unlock field for user ${user.username}`);\n\n          // Spawn sun on the selected inactive field\n          const result = await storage.spawnSun(randomFieldIndex, user.id);\n          \n          if (result.success) {\n            console.log(`☀️ Successfully spawned ${result.sunAmount} suns on inactive field ${randomFieldIndex} for user ${user.username}`);\n            spawnedAny = true;\n          } else {\n            console.log(`☀️ Failed to spawn sun on inactive field ${randomFieldIndex} for user ${user.username}`);\n          }\n          \n        } catch (error) {\n          console.error(`☀️ Error processing user ${user.username}:`, error);\n        }\n      }\n\n      if (!spawnedAny) {\n        console.log('☀️ No suns spawned in this cycle');\n      }\n\n    } catch (error) {\n      console.error('☀️ Error during sun spawn attempt:', error);\n    }\n  }\n\n  private startCleanupTimer() {\n    // Clean up expired suns every 30 seconds\n    const cleanupInterval = 30 * 1000; // 30 seconds\n    \n    const scheduleCleanup = () => {\n      if (!this.isRunning) return;\n      \n      setTimeout(async () => {\n        await storage.cleanupExpiredSuns();\n        scheduleCleanup(); // Schedule next cleanup\n      }, cleanupInterval);\n    };\n\n    scheduleCleanup();\n  }\n}\n\nexport const sunSpawner = new SunSpawner();","size_bytes":8480},"client/src/lib/stores/useSunSpawns.tsx":{"content":"import { create } from 'zustand';\n\ninterface SunSpawn {\n  id: number;\n  fieldIndex: number;\n  spawnedAt: string;\n  expiresAt: string;\n  sunAmount: number;\n  isActive: boolean;\n}\n\ninterface SunSpawnsStore {\n  sunSpawns: SunSpawn[];\n  setSunSpawns: (spawns: SunSpawn[]) => void;\n  removeSunSpawn: (fieldIndex: number) => void;\n  getSunSpawnOnField: (fieldIndex: number) => SunSpawn | undefined;\n  isLoading: boolean;\n  setLoading: (loading: boolean) => void;\n}\n\nexport const useSunSpawns = create<SunSpawnsStore>((set, get) => ({\n  sunSpawns: [],\n  isLoading: false,\n  \n  setSunSpawns: (spawns) => set({ sunSpawns: spawns }),\n  \n  removeSunSpawn: (fieldIndex) => set((state) => ({\n    sunSpawns: state.sunSpawns.filter(spawn => spawn.fieldIndex !== fieldIndex)\n  })),\n  \n  getSunSpawnOnField: (fieldIndex) => {\n    const { sunSpawns } = get();\n    return sunSpawns.find(spawn => spawn.fieldIndex === fieldIndex && spawn.isActive);\n  },\n  \n  setLoading: (loading) => set({ isLoading: loading }),\n}));","size_bytes":997},"client/src/components/ui/NotificationDialog.tsx":{"content":"import React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { AlertCircle, CheckCircle, XCircle, Info } from 'lucide-react';\n\ninterface NotificationDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title?: string;\n  message: string;\n  type?: 'success' | 'error' | 'warning' | 'info';\n}\n\nexport const NotificationDialog: React.FC<NotificationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  message,\n  type = 'info'\n}) => {\n  const getIcon = () => {\n    switch (type) {\n      case 'success':\n        return <CheckCircle className=\"h-6 w-6 text-green-400\" />;\n      case 'error':\n        return <XCircle className=\"h-6 w-6 text-red-400\" />;\n      case 'warning':\n        return <AlertCircle className=\"h-6 w-6 text-yellow-400\" />;\n      case 'info':\n      default:\n        return <Info className=\"h-6 w-6 text-blue-400\" />;\n    }\n  };\n\n  const getColorClasses = () => {\n    switch (type) {\n      case 'success':\n        return 'border-green-500/30 bg-gradient-to-br from-green-800/20 to-green-900/20';\n      case 'error':\n        return 'border-red-500/30 bg-gradient-to-br from-red-800/20 to-red-900/20';\n      case 'warning':\n        return 'border-yellow-500/30 bg-gradient-to-br from-yellow-800/20 to-yellow-900/20';\n      case 'info':\n      default:\n        return 'border-blue-500/30 bg-gradient-to-br from-blue-800/20 to-blue-900/20';\n    }\n  };\n\n  const getDefaultTitle = () => {\n    switch (type) {\n      case 'success':\n        return 'Erfolgreich!';\n      case 'error':\n        return 'Fehler';\n      case 'warning':\n        return 'Warnung';\n      case 'info':\n      default:\n        return 'Information';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className={`\n        ${getColorClasses()} \n        border-2 \n        text-white \n        max-w-md \n        mx-auto \n        shadow-2xl\n        backdrop-blur-sm\n      `}>\n        <DialogHeader className=\"space-y-4\">\n          <div className=\"flex items-center justify-center space-x-3\">\n            {getIcon()}\n            <DialogTitle className=\"text-xl font-bold text-center text-white\">\n              {title || getDefaultTitle()}\n            </DialogTitle>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"text-center py-4\">\n          <p className=\"text-gray-200 text-base leading-relaxed\">\n            {message}\n          </p>\n        </div>\n        \n        <div className=\"flex justify-center pt-4\">\n          <Button\n            onClick={onClose}\n            className={`\n              px-8 py-2 \n              font-semibold \n              transition-all \n              duration-200 \n              hover:scale-105 \n              ${type === 'success' \n                ? 'bg-green-600 hover:bg-green-500' \n                : type === 'error' \n                  ? 'bg-red-600 hover:bg-red-500' \n                  : type === 'warning'\n                    ? 'bg-yellow-600 hover:bg-yellow-500'\n                    : 'bg-blue-600 hover:bg-blue-500'\n              }\n            `}\n          >\n            OK\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":3243},"client/src/hooks/useNotification.tsx":{"content":"import { create } from 'zustand';\n\ninterface NotificationState {\n  isOpen: boolean;\n  title?: string;\n  message: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  showNotification: (message: string, type?: 'success' | 'error' | 'warning' | 'info', title?: string) => void;\n  closeNotification: () => void;\n}\n\nexport const useNotification = create<NotificationState>((set) => ({\n  isOpen: false,\n  title: undefined,\n  message: '',\n  type: 'info',\n  showNotification: (message: string, type = 'info', title?: string) => \n    set({ isOpen: true, message, type, title }),\n  closeNotification: () => \n    set({ isOpen: false, message: '', title: undefined, type: 'info' })\n}));","size_bytes":682},"client/src/components/HelpDialog.tsx":{"content":"import React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Badge } from './ui/badge';\nimport {\n  Sprout, Droplets, ShoppingCart, Package, Heart, Fish, Zap,\n  Trophy, Coins, Info, Star, Clock, TrendingUp, Users, Target,\n  Sparkles, Sun, Flower, Gift, DollarSign, ArrowRight,\n  CheckCircle, AlertCircle, HelpCircle\n} from 'lucide-react';\nimport { getRarityColor, getRarityBadgeStyle } from '@shared/rarity';\n\ninterface HelpDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  viewType: 'garden' | 'pond' | 'market' | 'inventory' | 'bouquets' | 'aquarium' | 'flowerpower' | 'exhibition' | 'marie-slot' | 'dna';\n}\n\nexport const HelpDialog: React.FC<HelpDialogProps> = ({ isOpen, onClose, viewType }) => {\n  const getViewInfo = () => {\n    switch (viewType) {\n      case 'garden':\n        return {\n          title: '🌱 Mariposa Garten',\n          subtitle: 'Dein Zentrum für Blumenzucht und Bouquet-Erstellung',\n          icon: <Sprout className=\"h-8 w-8 text-green-400\" />,\n          gradient: 'from-green-500/20 to-emerald-500/20',\n          border: 'border-green-400/30',\n          sections: [\n            {\n              title: '🌱 Samen pflanzen',\n              icon: <Sprout className=\"h-6 w-6 text-green-400\" />,\n              content: [\n                'Links-Klick auf ein Feld zum Samen pflanzen',\n                'Verschiedene Samen haben unterschiedliche Wachszeiten',\n                'Seltene Samen wachsen länger, bringen aber wertvollere Blumen',\n                'Du brauchst Credits um neue Felder freizuschalten'\n              ]\n            },\n            {\n              title: '🌸 Blumen ernten',\n              icon: <Flower className=\"h-6 w-6 text-pink-400\" />,\n              content: [\n                'Gewachsene Blumen automatisch harvesten durch Anklicken',\n                'Jede Blume hat eine Seltenheit (Common bis Mythical)',\n                'Seltenheitssystem: Gelb=Common, Grün=Uncommon, Blau=Rare, Türkis=Super-rare, Lila=Epic, Orange=Legendary, Rot=Mythical',\n                'Seltene Blumen sind wertvoller für Bouquets',\n                'Blumen werden in deinem Inventar gesammelt'\n              ]\n            },\n            {\n              title: '💐 Bouquets platzieren',\n              icon: <Heart className=\"h-6 w-6 text-pink-400\" />,\n              content: [\n                'Rechts-Klick auf ein Feld zum Bouquet platzieren',\n                'Bouquets locken Schmetterlinge an',\n                'Jedes Bouquet spawnt 1-4 Schmetterlinge in 21 Minuten',\n                'Bouquet-Qualität beeinflusst Schmetterlings-Seltenheit'\n              ]\n            },\n            {\n              title: '☀️ Sonnen sammeln',\n              icon: <Sun className=\"h-6 w-6 text-yellow-400\" />,\n              content: [\n                'Goldene Sonnen spawnen zufällig auf Feldern',\n                'Sonnen sind die Premium-Währung des Spiels',\n                'Verwende Sonnen für Marie-Posa Handel, Slot Machine und Ausstellung',\n                'Sonnen verschwinden nach 30 Sekunden - schnell sammeln!'\n              ]\n            }\n          ],\n          tips: [\n            'Beginne mit günstigen Samen und arbeite dich hoch',\n            'Platziere mehrere Bouquets für mehr Schmetterlinge',\n            'Sammle Sonnen sofort - sie verschwinden schnell!',\n            'Plane deine Felder strategisch für optimalen Ertrag'\n          ]\n        };\n\n      case 'pond':\n        return {\n          title: '🌊 Mariposa Teich',\n          subtitle: 'Fütterungsplatz für Schmetterlinge und Raupen-System',\n          icon: <Droplets className=\"h-8 w-8 text-blue-400\" />,\n          gradient: 'from-blue-500/20 to-cyan-500/20',\n          border: 'border-blue-400/30',\n          sections: [\n            {\n              title: '🦋 Schmetterlinge platzieren',\n              icon: <Sparkles className=\"h-6 w-6 text-purple-400\" />,\n              content: [\n                'Platziere Schmetterlinge auf Grasfeldern',\n                'Jeder Schmetterling produziert eine Raupe',\n                'Produktionszeit abhängig von Schmetterlings-Seltenheit',\n                '3 Raupen werden für die Fischzucht benötigt'\n              ]\n            },\n            {\n              title: '🐛 Raupen-System',\n              icon: <Target className=\"h-6 w-6 text-green-400\" />,\n              content: [\n                'Sammle Raupen von deinen Schmetterlingen',\n                'Jede Raupe hat die gleiche Seltenheit wie der Schmetterling',\n                'Strategisch wichtig: 3 Raupen = 1 Fisch',\n                'Durchschnittliche Raupe-Seltenheit bestimmt Fisch-Qualität'\n              ]\n            },\n            {\n              title: '🐟 Fisch-Zucht System',\n              icon: <Fish className=\"h-6 w-6 text-blue-400\" />,\n              content: [\n                'Füttere 3 Raupen an ein Teichfeld',\n                'Fisch-Seltenheit = Durchschnitt der 3 Raupen-Seltenheiten',\n                'Beispiel: Common(0) + Rare(2) + Legendary(5) = Rare Fisch',\n                'Strategie: Füttere gleichwertige Raupen für vorhersagbare Ergebnisse'\n              ]\n            },\n            {\n              title: '⏱️ Timing & Effizienz',\n              icon: <Clock className=\"h-6 w-6 text-orange-400\" />,\n              content: [\n                'Seltene Schmetterlinge brauchen länger für Raupen-Produktion',\n                'Plane voraus: 3 Schmetterlinge = 1 kompletter Fisch-Zyklus',\n                'Aquarium-Plätze sind begrenzt - wähle die besten Fische'\n              ]\n            }\n          ],\n          tips: [\n            'Verwende 3 Schmetterlinge gleicher Seltenheit für vorhersagbare Fische',\n            'Seltene Schmetterlinge lohnen sich trotz längerer Wartezeit',\n            'Plane deine Teich-Felder für kontinuierliche Produktion',\n            'Behalte immer genug Raupen für die nächste Fisch-Generation'\n          ]\n        };\n\n      case 'market':\n        return {\n          title: '🛒 Samen Markt',\n          subtitle: 'Handelszentrum für Samen und Ressourcen',\n          icon: <ShoppingCart className=\"h-8 w-8 text-purple-400\" />,\n          gradient: 'from-purple-500/20 to-pink-500/20',\n          border: 'border-purple-400/30',\n          sections: [\n            {\n              title: '🌱 Samen kaufen',\n              icon: <Sprout className=\"h-6 w-6 text-green-400\" />,\n              content: [\n                'Kaufe Samen von anderen Spielern',\n                'Preise variieren basierend auf Seltenheit und Angebot',\n                'Seltene Samen sind teurer, bringen aber wertvollere Blumen',\n                'Überprüfe Wachszeiten vor dem Kauf'\n              ]\n            },\n            {\n              title: '💰 Deine Samen verkaufen',\n              icon: <DollarSign className=\"h-6 w-6 text-yellow-400\" />,\n              content: [\n                'Verkaufe überschüssige Samen für Credits',\n                'Setze competitive Preise für schnelleren Verkauf',\n                'Seltene Samen erzielen höhere Preise',\n                'Markt-Nachfrage schwankt - beobachte Trends'\n              ]\n            },\n            {\n              title: '📊 Markt-Analyse',\n              icon: <TrendingUp className=\"h-6 w-6 text-blue-400\" />,\n              content: [\n                'Beobachte Preistrends für optimale Kauf-/Verkaufszeiten',\n                'Beliebte Samen haben höhere Nachfrage',\n                'Saisonale Schwankungen beeinflussen Preise',\n                'Investiere in unterbewertet Samen'\n              ]\n            },\n            {\n              title: '💡 Trading-Strategien',\n              icon: <Star className=\"h-6 w-6 text-orange-400\" />,\n              content: [\n                'Kaufe günstig, verkaufe teuer',\n                'Bevorre seltene Samen für langfristige Gewinne',\n                'Nutze Credits geschickt für Feld-Erweiterungen',\n                'Diversifiziere dein Samen-Portfolio'\n              ]\n            }\n          ],\n          tips: [\n            'Vergleiche Preise vor dem Kauf - Angebote variieren',\n            'Verkaufe gewöhnliche Samen günstig für schnellen Umsatz',\n            'Investiere früh in seltene Samen für langfristige Gewinne',\n            'Behalte immer genug Credits für neue Felder'\n          ]\n        };\n\n      case 'inventory':\n        return {\n          title: '🎒 Inventar',\n          subtitle: 'Übersicht aller deiner gesammelten Ressourcen',\n          icon: <Package className=\"h-8 w-8 text-slate-400\" />,\n          gradient: 'from-slate-500/20 to-gray-500/20',\n          border: 'border-slate-400/30',\n          sections: [\n            {\n              title: '🌱 Samen-Übersicht',\n              icon: <Sprout className=\"h-6 w-6 text-green-400\" />,\n              content: [\n                'Alle deine Samen nach Seltenheit sortiert',\n                'Mengen und Wachszeiten auf einen Blick',\n                'Direkter Zugang zum Markt für Verkauf',\n                'Farbkodierung nach Seltenheits-System'\n              ]\n            },\n            {\n              title: '🌸 Blumen-Sammlung',\n              icon: <Flower className=\"h-6 w-6 text-pink-400\" />,\n              content: [\n                'Komplette Blumen-Kollektion mit Bildern',\n                'Seltenheits-Filter für bessere Übersicht',\n                'Verwendung für Bouquet-Erstellung',\n                'Verkauf an Marie-Posa möglich'\n              ]\n            },\n            {\n              title: '🦋 Schmetterlinge & Raupen',\n              icon: <Sparkles className=\"h-6 w-6 text-purple-400\" />,\n              content: [\n                'Alle gefangenen Schmetterlinge verwalten',\n                'Raupen-Status und Produktions-Timer',\n                'Teich-Platzierung und Ausstellungs-Optionen',\n                'Seltenheits-basierte Organisation'\n              ]\n            },\n            {\n              title: '🐟 Fische & Aquarium',\n              icon: <Fish className=\"h-6 w-6 text-blue-400\" />,\n              content: [\n                'Gezüchtete Fische und Aquarium-Management',\n                'Tank-Platzierung und Verkaufs-Timer',\n                'Passive Einkommens-Übersicht',\n                'Fisch-Qualität und Wert-Informationen'\n              ]\n            }\n          ],\n          tips: [\n            'Nutze Filter für schnellere Navigation durch große Sammlungen',\n            'Verkaufe doppelte Items regelmäßig für Credits',\n            'Behalte seltene Items für strategische Verwendung',\n            'Plane Inventar-Platz für neue Sammel-Sessions'\n          ]\n        };\n\n      case 'bouquets':\n        return {\n          title: '💐 Bouquet Kollektion',\n          subtitle: 'Erstelle wunderschöne Bouquets für Schmetterlinge',\n          icon: <Heart className=\"h-8 w-8 text-pink-400\" />,\n          gradient: 'from-pink-500/20 to-rose-500/20',\n          border: 'border-pink-400/30',\n          sections: [\n            {\n              title: '🌸 Bouquet-Erstellung',\n              icon: <Heart className=\"h-6 w-6 text-pink-400\" />,\n              content: [\n                'Kombiniere 3 Blumen zu einem Bouquet',\n                'Bouquet-Seltenheit = Durchschnitt der 3 Blumen',\n                'Benenne dein Bouquet individuell',\n                'Jedes Bouquet ist ein Unikat'\n              ]\n            },\n            {\n              title: '🦋 Schmetterlings-Anziehung',\n              icon: <Sparkles className=\"h-6 w-6 text-purple-400\" />,\n              content: [\n                'Bouquets im Garten platzieren lockt Schmetterlinge an',\n                'Alle 21 Minuten spawnen 1-4 Schmetterlinge pro Bouquet',\n                'Bouquet-Qualität beeinflusst Schmetterlings-Seltenheit',\n                'Seltene Bouquets = seltenere Schmetterlinge'\n              ]\n            },\n            {\n              title: '📚 Rezept-System',\n              icon: <Star className=\"h-6 w-6 text-yellow-400\" />,\n              content: [\n                'Deine erstellten Bouquets werden als Rezepte gespeichert',\n                'Andere Spieler können deine Rezepte nachbauen',\n                'Teile erfolgreiche Kombinationen mit der Community',\n                'Experimentiere mit verschiedenen Blumen-Mischungen'\n              ]\n            },\n            {\n              title: '💡 Optimierungs-Tipps',\n              icon: <TrendingUp className=\"h-6 w-6 text-green-400\" />,\n              content: [\n                'Verwende Blumen ähnlicher Seltenheit für vorhersagbare Ergebnisse',\n                'Plane mehrere Bouquets für kontinuierlichen Schmetterlings-Spawn',\n                'Benenne Bouquets beschreibend für einfache Wiedererkennung',\n                'Behalte erfolgreiche Rezepte für zukünftige Verwendung'\n              ]\n            }\n          ],\n          tips: [\n            'Experimentiere mit verschiedenen Blumen-Kombinationen',\n            'Seltene Bouquets sind langfristig profitabler',\n            'Platziere mehrere Bouquets für maximalen Schmetterlings-Ertrag',\n            'Teile erfolgreiche Rezepte mit anderen Spielern'\n          ]\n        };\n\n      case 'aquarium':\n        return {\n          title: '🐟 Aquarium',\n          subtitle: 'Präsentiere deine wertvollsten Fische',\n          icon: <Fish className=\"h-8 w-8 text-blue-400\" />,\n          gradient: 'from-blue-500/20 to-teal-500/20',\n          border: 'border-blue-400/30',\n          sections: [\n            {\n              title: '🏆 Fisch-Präsentation',\n              icon: <Trophy className=\"h-6 w-6 text-yellow-400\" />,\n              content: [\n                'Zeige deine schönsten Fische in Aquarium-Tanks',\n                'Sammle deine wertvollsten Exemplare',\n                'Präsentiere seltene Fische für andere Spieler',\n                'Begrenzte Tank-Plätze - wähle weise!'\n              ]\n            },\n            {\n              title: '💰 Verkaufs-System',\n              icon: <Coins className=\"h-6 w-6 text-yellow-400\" />,\n              content: [\n                'Fische können nach 24 Stunden verkauft werden',\n                'Verkaufspreis basiert nur auf Seltenheit',\n                '☀️ Sonnen-Boost verkürzt Wartezeit',\n                'Plane Verkaufs-Timing für optimalen Gewinn'\n              ]\n            },\n            {\n              title: '🔄 Tank-Management',\n              icon: <Clock className=\"h-6 w-6 text-orange-400\" />,\n              content: [\n                'Tausche Fische strategisch aus',\n                'Neue Fische ersetzen alte nach Verkauf',\n                'Behalte deine wertvollsten Exemplare',\n                'Kontinuierliche Optimierung für bessere Präsentation'\n              ]\n            },\n          ],\n          tips: [\n            'Sammle deine seltensten Fische für die Präsentation',\n            'Nutze Sonnen-Boost nur bei sehr wertvollen Fischen',\n            'Verkaufe regelmäßig für Platz für bessere Exemplare',\n            'Plane Tank-Platzierung für optimale Ästhetik'\n          ]\n        };\n\n      case 'flowerpower':\n        return {\n          title: '⚡ Flowerpower Challenge',\n          subtitle: 'Wöchentliche Community-Challenge',\n          icon: <Zap className=\"h-8 w-8 text-yellow-400\" />,\n          gradient: 'from-yellow-500/20 to-orange-500/20',\n          border: 'border-yellow-400/30',\n          sections: [\n            {\n              title: '🏆 Wöchentliche Challenge',\n              icon: <Trophy className=\"h-6 w-6 text-yellow-400\" />,\n              content: [\n                'Jede Woche neue Challenge mit 6 spezifischen Blumen',\n                'Spende passende Blumen für Punkte',\n                'Community arbeitet zusammen für gemeinsames Ziel',\n                'Große Belohnungen bei Challenge-Erfolg'\n              ]\n            },\n            {\n              title: '🌸 Spende-System',\n              icon: <Gift className=\"h-6 w-6 text-pink-400\" />,\n              content: [\n                'Spende nur die 6 Challenge-Blumen der Woche',\n                'Blumen-Seltenheit bestimmt Punkte-Wert',\n                'Seltene Blumen geben mehr Punkte',\n                'Jede Spende zählt zum Community-Fortschritt'\n              ]\n            },\n            {\n              title: '🎁 Belohnungs-System',\n              icon: <Star className=\"h-6 w-6 text-purple-400\" />,\n              content: [\n                'Belohnungen basieren auf Community-Leistung',\n                'Alle Spieler teilen sich die Belohnungen',\n                'Höhere Challenge-Level = bessere Belohnungen',\n                'Seltene Samen und Credits als Hauptpreise'\n              ]\n            },\n            {\n              title: '👥 Community-Aspekt',\n              icon: <Users className=\"h-6 w-6 text-blue-400\" />,\n              content: [\n                'Arbeite mit anderen Spielern zusammen',\n                'Jeder Beitrag hilft der gesamten Community',\n                'Challenge-Fortschritt für alle sichtbar',\n                'Gemeinsame Ziele stärken die Spieler-Gemeinschaft'\n              ]\n            }\n          ],\n          tips: [\n            'Züchte gezielt die Challenge-Blumen der aktuellen Woche',\n            'Seltene Challenge-Blumen sind besonders wertvoll',\n            'Spende regelmäßig für kontinuierlichen Community-Fortschritt',\n            'Behalte einige Challenge-Blumen für nächste Woche'\n          ]\n        };\n\n      case 'exhibition':\n        return {\n          title: '🦋 Schmetterlingsausstellung',\n          subtitle: 'Präsentiere deine schönsten Schmetterlinge',\n          icon: <Trophy className=\"h-8 w-8 text-purple-400\" />,\n          gradient: 'from-purple-500/20 to-pink-500/20',\n          border: 'border-purple-400/30',\n          sections: [\n            {\n              title: '🖼️ Schmetterlings-Rahmen',\n              icon: <Trophy className=\"h-6 w-6 text-yellow-400\" />,\n              content: [\n                'Stelle Schmetterlinge in eleganten Rahmen aus',\n                'Jeder Rahmen generiert passives Einkommen',\n                'Schmetterlings-Seltenheit bestimmt Credits pro Stunde',\n                'VIP-Schmetterlinge bringen zusätzliche Boni'\n              ]\n            },\n            {\n              title: '💎 VIP-System',\n              icon: <Star className=\"h-6 w-6 text-orange-400\" />,\n              content: [\n                'VIP-Schmetterlinge sind besonders wertvoll',\n                'Deutlich höhere Einkommens-Rate als normale',\n                'Seltene VIPs können extremes passives Einkommen generieren',\n                'Begrenzte VIP-Plätze - wähle die wertvollsten!'\n              ]\n            },\n            {\n              title: '⏰ Verkaufs-Mechanik',\n              icon: <Clock className=\"h-6 w-6 text-blue-400\" />,\n              content: [\n                'Schmetterlinge können nach 72 Stunden verkauft werden',\n                '❤️ Likes von anderen Spielern geben +2% passives Einkommen',\n                '☀️ Sonnen-Boost für sofortige Zeit-Reduktion',\n                'Strategisches Timing maximiert Gewinne'\n              ]\n            },\n            {\n              title: '💰 Einkommens-Optimierung',\n              icon: <TrendingUp className=\"h-6 w-6 text-green-400\" />,\n              content: [\n                'Höhere Seltenheit = mehr Credits pro Stunde',\n                'VIP-Boni multiplizieren das Grundeinkommen',\n                'Regelmäßiges Ersetzen alter Schmetterlinge',\n                'Langfristige Sammler-Strategie entwickeln'\n              ]\n            }\n          ],\n          tips: [\n            'Priorisiere VIP-Schmetterlinge für maximales Einkommen',\n            'Sammle Likes für langfristige Einkommens-Boni',\n            'Tausche regelmäßig gegen bessere Schmetterlinge',\n            'Behalte deine seltensten Exemplare dauerhaft'\n          ]\n        };\n\n      case 'marie-slot':\n        return {\n          title: '🎰 Marie-Slot',\n          subtitle: 'Glücksspiel mit echten Spiel-Bildern',\n          icon: <Coins className=\"h-8 w-8 text-yellow-400\" />,\n          gradient: 'from-yellow-500/20 to-orange-500/20',\n          border: 'border-yellow-400/30',\n          sections: [\n            {\n              title: '🎲 Spielmechanik',\n              icon: <Sparkles className=\"h-6 w-6 text-purple-400\" />,\n              content: [\n                'Kosten: 5 Sonnen pro Spin',\n                '5 vertikale Rollen mit echten Blumen-Bildern',\n                'Nur die mittlere Reihe (Payline) zählt für Gewinne',\n                'Realistische Slot-Animation mit Rollen-Stopp'\n              ]\n            },\n            {\n              title: '🏆 Gewinn-Tabelle',\n              icon: <Trophy className=\"h-6 w-6 text-yellow-400\" />,\n              content: [\n                '2 gleiche Symbole = 3 Sonnen zurück',\n                '3 Sonnen-Symbole = 50 Credits (Spezial-Gewinn)',\n                '3 andere gleiche Symbole = 1 seltener Samen',\n                '4 gleiche = legendärer Schmetterling',\n                '5 gleiche = 1000 Credits (Jackpot!)'\n              ]\n            },\n            {\n              title: '🎰 Slot-Features',\n              icon: <Star className=\"h-6 w-6 text-blue-400\" />,\n              content: [\n                'Mechanischer Rückstoß-Effekt vor dem Stoppen',\n                'Gestaffelte Rollen-Stopps für Spannung',\n                'Echte Spiel-Bilder auf den Rollen',\n                'Realistische Casino-Atmosphäre'\n              ]\n            },\n            {\n              title: '💡 Spiel-Strategie',\n              icon: <TrendingUp className=\"h-6 w-6 text-green-400\" />,\n              content: [\n                'Sonnen sind wertvoll - spiele nur wenn du viele hast',\n                'Große Gewinne sind selten aber sehr wertvoll',\n                'Budget deine Sonnen für nachhaltiges Spielen',\n                'Betrachte es als Unterhaltung, nicht als Einkommens-Quelle'\n              ]\n            }\n          ],\n          tips: [\n            'Sammle viele Sonnen bevor du spielst',\n            'Setze dir ein Limit und halte dich daran',\n            'Große Gewinne sind möglich aber selten',\n            'Genieße das Spiel - Glück kommt und geht!'\n          ]\n        };\n\n      case 'dna':\n        return {\n          title: '🧬 DNA-Labor',\n          subtitle: 'Zentrum für DNA-Sequenzierung und Item-Upgrades',\n          icon: <Zap className=\"h-8 w-8 text-teal-400\" />,\n          gradient: 'from-teal-500/20 to-cyan-500/20',\n          border: 'border-teal-400/30',\n          sections: [\n            {\n              title: '🧪 DNA-Sequenzer',\n              icon: <Target className=\"h-6 w-6 text-teal-400\" />,\n              content: [\n                'Platziere Items im 3x3 Grid um DNA zu generieren',\n                'DNA Berechnung: BaseValue × (1 + Anzahl Nachbarn)',\n                'Items mit mehr Nachbarn geben exponentiell mehr DNA',\n                'Verschiedene Item-Typen haben unterschiedliche BaseValues',\n                'Strategische Platzierung maximiert DNA-Ausbeute'\n              ]\n            },\n            {\n              title: '⚡ D-Nator Upgrades',\n              icon: <TrendingUp className=\"h-6 w-6 text-purple-400\" />,\n              content: [\n                'Verwende DNA um Items auf höhere Raritäten zu upgraden',\n                'Wähle Kategorie-Filter für bessere Übersicht',\n                'Upgrade-Kosten: (Platz-Differenz)² × Rarität-Faktor + Grundwert',\n                'Höhere Raritäten kosten exponentiell mehr DNA',\n                'Upgrade-Ketten: Common → Uncommon → Rare → etc.'\n              ]\n            },\n            {\n              title: '💡 DNA-Strategien',\n              icon: <Star className=\"h-6 w-6 text-yellow-400\" />,\n              content: [\n                'Platziere Items strategisch - jeder Nachbar verdoppelt die DNA',\n                'Mitte-Felder haben bis zu 4 Nachbarn (5x DNA)',\n                'Ecken-Felder haben nur 2 Nachbarn (3x DNA)',\n                'Sammle DNA mit günstigeren Items, upgrade dann wertvollere',\n                'Rare Items haben höhere BaseValues als Common Items'\n              ]\n            }\n          ],\n          tips: [\n            'Beginne mit Common Items zum DNA sammeln',\n            'Nutze die Mitte des Grids für maximale DNA-Generation',\n            'Plane deine Upgrades - höhere Raritäten sind viel teurer',\n            'Tausche günstige Items regelmäßig aus für mehr DNA'\n          ]\n        };\n\n      default:\n        return {\n          title: '❓ Hilfe',\n          subtitle: 'Informationen über das Spiel',\n          icon: <HelpCircle className=\"h-8 w-8 text-slate-400\" />,\n          gradient: 'from-slate-500/20 to-gray-500/20',\n          border: 'border-slate-400/30',\n          sections: [],\n          tips: []\n        };\n    }\n  };\n\n  const viewInfo = getViewInfo();\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 border-2 border-orange-500/30 text-white max-w-4xl max-h-[90vh] overflow-y-auto shadow-2xl\">\n        <DialogHeader className=\"relative\">\n          {/* Enhanced Header Background */}\n          <div className={`absolute inset-0 bg-gradient-to-r ${viewInfo.gradient} rounded-t-lg -mx-6 -my-2`}></div>\n          \n          <DialogTitle className=\"flex items-center text-white relative z-10\">\n            <div className=\"relative\">\n              {viewInfo.icon}\n              <div className=\"absolute inset-0 animate-ping opacity-30\">{viewInfo.icon}</div>\n            </div>\n            <div className=\"ml-4\">\n              <span className=\"text-3xl font-bold bg-gradient-to-r from-orange-300 to-yellow-300 bg-clip-text text-transparent\">\n                {viewInfo.title}\n              </span>\n              <p className=\"text-lg text-slate-300 mt-1\">{viewInfo.subtitle}</p>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-8\">\n          {/* Main Content Sections */}\n          <div className=\"grid gap-6\">\n            {viewInfo.sections.map((section, index) => (\n              <Card key={index} className={`bg-slate-800/60 border ${viewInfo.border} shadow-lg hover:shadow-xl transition-all duration-300`}>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"flex items-center text-white\">\n                    <div className=\"relative mr-3\">\n                      {section.icon}\n                      <div className=\"absolute inset-0 animate-pulse opacity-50\">{section.icon}</div>\n                    </div>\n                    <span className=\"text-xl font-bold\">{section.title}</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-3\">\n                    {section.content.map((item, itemIndex) => (\n                      <li key={itemIndex} className=\"flex items-start text-slate-300\">\n                        <CheckCircle className=\"h-5 w-5 text-green-400 mt-0.5 mr-3 flex-shrink-0\" />\n                        <span className=\"text-lg\">{item}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Tips Section */}\n          {viewInfo.tips.length > 0 && (\n            <Card className=\"bg-gradient-to-r from-orange-800/20 to-yellow-800/20 border-2 border-orange-500/30 shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-white\">\n                  <div className=\"relative mr-3\">\n                    <Star className=\"h-6 w-6 text-yellow-400 animate-pulse\" />\n                    <div className=\"absolute inset-0 h-6 w-6 text-yellow-400 animate-ping opacity-30\"></div>\n                  </div>\n                  <span className=\"text-2xl font-bold bg-gradient-to-r from-yellow-300 to-orange-300 bg-clip-text text-transparent\">\n                    💡 Profi-Tipps\n                  </span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-4 sm:grid-cols-2\">\n                  {viewInfo.tips.map((tip, index) => (\n                    <div key={index} className=\"flex items-start bg-slate-800/50 rounded-lg p-4 border border-orange-400/20\">\n                      <Sparkles className=\"h-5 w-5 text-yellow-400 mt-0.5 mr-3 flex-shrink-0\" />\n                      <span className=\"text-slate-300 text-lg\">{tip}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Rarität-System Info für relevante Views */}\n          {(['garden', 'pond', 'market', 'inventory', 'bouquets', 'exhibition'] as const).includes(viewType) && (\n            <Card className=\"bg-gradient-to-r from-purple-800/20 to-pink-800/20 border-2 border-purple-500/30 shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-white\">\n                  <div className=\"relative mr-3\">\n                    <Trophy className=\"h-6 w-6 text-purple-400 animate-pulse\" />\n                  </div>\n                  <span className=\"text-2xl font-bold bg-gradient-to-r from-purple-300 to-pink-300 bg-clip-text text-transparent\">\n                    🌟 Seltenheits-System\n                  </span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-3 sm:grid-cols-2 lg:grid-cols-3\">\n                  {[\n                    { tier: 'common', name: 'Common', bgColor: 'bg-yellow-500/20 border-yellow-400/40' },\n                    { tier: 'uncommon', name: 'Uncommon', bgColor: 'bg-green-500/20 border-green-400/40' },\n                    { tier: 'rare', name: 'Rare', bgColor: 'bg-blue-500/20 border-blue-400/40' },\n                    { tier: 'super-rare', name: 'Super-Rare', bgColor: 'bg-cyan-500/20 border-cyan-400/40' },\n                    { tier: 'epic', name: 'Epic', bgColor: 'bg-purple-500/20 border-purple-400/40' },\n                    { tier: 'legendary', name: 'Legendary', bgColor: 'bg-amber-500/20 border-amber-400/40' },\n                    { tier: 'mythical', name: 'Mythical', bgColor: 'bg-red-500/20 border-red-400/40' }\n                  ].map((rarity) => (\n                    <div key={rarity.tier} className={`${rarity.bgColor} rounded-lg p-3 border-2 transition-all duration-300 hover:scale-105`}>\n                      <Badge className={`${getRarityBadgeStyle(rarity.tier as any)} font-bold text-sm px-3 py-1 w-full justify-center`}>\n                        {rarity.name}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n                <p className=\"text-slate-300 text-lg mt-4\">\n                  Höhere Seltenheit = bessere Belohnungen, längere Wachszeiten, wertvollere Items\n                </p>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Close Button */}\n          <div className=\"flex justify-center pt-6 pb-2\">\n            <Button\n              onClick={onClose}\n              className=\"px-8 py-3 bg-gradient-to-r from-orange-600 to-yellow-600 hover:from-orange-700 hover:to-yellow-700 text-white font-bold text-lg rounded-full shadow-lg border-2 border-orange-400/50 transition-all duration-300 hover:scale-105\"\n            >\n              <CheckCircle className=\"h-5 w-5 mr-2\" />\n              Verstanden!\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":31850},"client/src/components/TeichView.tsx":{"content":"import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { toast } from \"sonner\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useNotification } from \"../hooks/useNotification\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { useSuns } from \"@/lib/stores/useSuns\";\nimport { useSunSpawns } from \"@/lib/stores/useSunSpawns\";\nimport { SeedSelectionModal } from \"./SeedSelectionModal\";\nimport { BouquetSelectionModal } from \"./BouquetSelectionModal\";\nimport { ButterflySelectionModal } from \"./ButterflySelectionModal\";\nimport { FlowerSelectionModal } from \"./FlowerSelectionModal\";\nimport { FishSelectionModal } from \"./FishSelectionModal\";\nimport { FeedingDialog } from \"./FeedingDialog\";\nimport { FishRewardDialog } from \"./FishRewardDialog\";\n// CaterpillarSelectionModal import removed - they spawn automatically\nimport { RarityImage } from \"./RarityImage\";\nimport { FlowerHoverPreview } from \"./FlowerHoverPreview\";\nimport { ButterflyHoverPreview } from \"./ButterflyHoverPreview\";\nimport { FishHoverPreview } from \"./FishHoverPreview\";\nimport { CaterpillarHoverPreview } from \"./CaterpillarHoverPreview\";\nimport { getGrowthTime, formatTime, getRarityDisplayName, getRarityColor, calculateCaterpillarRarity, generateLatinCaterpillarName, type RarityTier } from \"@shared/rarity\";\n\n// Cache for pond field hover data to avoid repeated API calls\nconst pondHoverCache = new Map<number, { \n  data: { averageRarity: string | null; caterpillarCount: number; caterpillarRarities: string[] }; \n  timestamp: number \n}>();\nconst CACHE_TTL = 15000; // 15 seconds\n\n// German rarity translation function\nconst getRarityDisplayNameGerman = (rarity: string): string => {\n  const rarityNames = {\n    'common': 'Gewöhnlich',\n    'uncommon': 'Ungewöhnlich', \n    'rare': 'Selten',\n    'super-rare': 'Super-selten',\n    'epic': 'Episch',\n    'legendary': 'Legendär',\n    'mythical': 'Mythisch'\n  };\n  return rarityNames[rarity as keyof typeof rarityNames] || rarity;\n};\n\n// Hex color function for backgrounds (not Tailwind classes)\nconst getRarityHexColor = (rarity: string): string => {\n  const rarityColors = {\n    'common': '#FACC15',      // yellow-400\n    'uncommon': '#4ADE80',    // green-400  \n    'rare': '#60A5FA',        // blue-400\n    'super-rare': '#22D3EE',  // cyan-400\n    'epic': '#A855F7',        // purple-400\n    'legendary': '#FB923C',   // orange-400\n    'mythical': '#F87171'     // red-400\n  };\n  return rarityColors[rarity as keyof typeof rarityColors] || '#9CA3AF';\n};\n\n// PondFieldHover component with optimized performance and proper centering\nconst PondFieldHover: React.FC<{ \n  fieldId: number; \n  feedingProgress?: number;\n  userId: number;\n}> = React.memo(({ fieldId, feedingProgress, userId }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [data, setData] = useState<{ \n    averageRarity: string | null; \n    caterpillarCount: number; \n    caterpillarRarities: string[] \n  } | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const debounceRef = useRef<NodeJS.Timeout | null>(null);\n\n  const fetchHoverData = useCallback(async () => {\n    if (isLoading) return;\n    \n    // Check cache first\n    const cached = pondHoverCache.get(fieldId);\n    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {\n      setData(cached.data);\n      setIsOpen(true);\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch(`/api/user/${userId}/pond-field/${fieldId - 1}/average-rarity`);\n      \n      if (response.ok) {\n        const result = await response.json();\n        const hoverData = {\n          averageRarity: result.averageRarity,\n          caterpillarCount: result.caterpillarCount || 0,\n          caterpillarRarities: result.caterpillarRarities || []\n        };\n        \n        // Cache the result\n        pondHoverCache.set(fieldId, { data: hoverData, timestamp: Date.now() });\n        setData(hoverData);\n        setIsOpen(true);\n      }\n    } catch (error) {\n      if ((error as Error).name !== 'AbortError') {\n        console.warn('Pond hover fetch failed:', error);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [fieldId, userId, isLoading]);\n\n  const handlePointerEnter = useCallback(() => {\n    if (debounceRef.current) {\n      clearTimeout(debounceRef.current);\n    }\n    \n    debounceRef.current = setTimeout(() => {\n      fetchHoverData();\n    }, 200); // 200ms debounce\n  }, [fetchHoverData]);\n\n  const handlePointerLeave = useCallback(() => {\n    if (debounceRef.current) {\n      clearTimeout(debounceRef.current);\n    }\n    setIsOpen(false);\n  }, []);\n\n  // Only show hover for pond fields with feeding progress 1-2\n  if (!feedingProgress || feedingProgress <= 0 || feedingProgress >= 3) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Invisible hover target covering the entire field */}\n      <div \n        className=\"absolute inset-0 z-10 pointer-events-auto\"\n        onPointerEnter={handlePointerEnter}\n        onPointerLeave={handlePointerLeave}\n      />\n      \n      {/* Centered tooltip overlay */}\n      {isOpen && data && (\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 pointer-events-none\">\n          <div \n            className=\"px-4 py-3 rounded-lg text-sm font-bold text-white shadow-xl border-2\"\n            style={{ \n              backgroundColor: data.averageRarity ? getRarityHexColor(data.averageRarity.toLowerCase()) : '#6B7280',\n              borderColor: data.averageRarity ? getRarityHexColor(data.averageRarity.toLowerCase()) : '#9CA3AF',\n              opacity: 0.95,\n              minWidth: '120px',\n              textAlign: 'center' as const\n            }}\n          >\n            {data.averageRarity ? getRarityDisplayNameGerman(data.averageRarity) : 'Noch keine Raupen gefüttert'}\n          </div>\n        </div>\n      )}\n    </>\n  );\n});\nimport { \n  Flower,\n  Lock,\n  Coins,\n  Shovel,\n  Sprout,\n  Clock,\n  Heart,\n  Sparkles,\n  Sun,\n  Waves\n} from \"lucide-react\";\nimport type { UserBouquet, PlacedBouquet, FieldButterfly, FieldFish } from \"@shared/schema\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { HelpButton } from \"./HelpButton\";\n\ninterface GardenField {\n  id: number;\n  isUnlocked: boolean;\n  hasPlant: boolean;\n  plantType?: string;\n  isGrowing?: boolean;\n  plantedAt?: Date;\n  growthTimeSeconds?: number;\n  seedRarity?: string;\n  flowerId?: number;\n  flowerName?: string;\n  flowerImageUrl?: string;\n  hasBouquet?: boolean;\n  bouquetId?: number;\n  bouquetName?: string;\n  bouquetRarity?: string;\n  bouquetPlacedAt?: Date;\n  bouquetExpiresAt?: Date;\n  hasButterfly?: boolean;\n  butterflyId?: number;\n  butterflyName?: string;\n  butterflyImageUrl?: string;\n  butterflyRarity?: string;\n  hasFish?: boolean;\n  fishId?: number;\n  fishName?: string;\n  fishImageUrl?: string;\n  fishRarity?: string;\n  hasCaterpillar?: boolean;\n  caterpillarId?: number;\n  caterpillarName?: string;\n  caterpillarImageUrl?: string;\n  caterpillarRarity?: string;\n  caterpillarSpawnedAt?: Date;\n  hasSunSpawn?: boolean;\n  sunSpawnAmount?: number;\n  sunSpawnExpiresAt?: Date;\n  isPond?: boolean; // New field for pond areas\n  // Pond feeding progress tracking\n  feedingProgress?: number; // 0-3: 0=none, 1=🐟, 2=🐠, 3=fish born\n}\n\ninterface UserCaterpillar {\n  id: number;\n  userId: number;\n  caterpillarId: number;\n  caterpillarName: string;\n  caterpillarRarity: string;\n  caterpillarImageUrl: string;\n  quantity: number;\n  createdAt: string;\n}\n\ninterface UserSeed {\n  id: number;\n  seedId: number;\n  seedName: string;\n  seedRarity: string;\n  quantity: number;\n}\n\nexport const TeichView: React.FC = () => {\n  const { user } = useAuth();\n  const { credits, updateCredits } = useCredits();\n  const { suns, setSuns } = useSuns();\n  const { sunSpawns, setSunSpawns, removeSunSpawn, getSunSpawnOnField, setLoading } = useSunSpawns();\n  const { showNotification } = useNotification();\n\n  // Function to check if a field is in the pond area (middle 8x3 fields)\n  const isPondField = (fieldId: number) => {\n    const row = Math.floor((fieldId - 1) / 10);\n    const col = (fieldId - 1) % 10;\n    \n    // Pond area: rows 1-3, columns 1-8 (0-indexed)\n    return row >= 1 && row <= 3 && col >= 1 && col <= 8;\n  };\n\n  // Initialize garden fields (will be populated from backend)\n  const [gardenFields, setGardenFields] = useState<GardenField[]>(() => {\n    return Array.from({ length: 50 }, (_, i) => ({\n      id: i + 1,\n      isUnlocked: !isPondField(i + 1), // All non-pond fields are unlocked\n      hasPlant: false,\n      isPond: isPondField(i + 1)\n    }));\n  });\n\n  const [userSeeds, setUserSeeds] = useState<UserSeed[]>([]);\n  const [userBouquets, setUserBouquets] = useState<UserBouquet[]>([]);\n  const [userCaterpillars, setUserCaterpillars] = useState<UserCaterpillar[]>([]);\n  const [userButterflies, setUserButterflies] = useState<any[]>([]); // Legacy for feeding system\n  const [fieldFish, setFieldFish] = useState<FieldFish[]>([]);\n  const [fieldCaterpillars, setFieldCaterpillars] = useState<any[]>([]);\n  const [showSeedModal, setShowSeedModal] = useState(false);\n  const [showBouquetModal, setShowBouquetModal] = useState(false);\n  const [showButterflyModal, setShowButterflyModal] = useState(false);\n  const [selectedField, setSelectedField] = useState<number | null>(null);\n  const [shakingField, setShakingField] = useState<number | null>(null);\n  const [placedBouquets, setPlacedBouquets] = useState<PlacedBouquet[]>([]);\n  const [showFlowerModal, setShowFlowerModal] = useState(false);\n  const [showFishModal, setShowFishModal] = useState(false);\n  const [showFeedingDialog, setShowFeedingDialog] = useState(false);\n  const [isCollectingCaterpillar, setIsCollectingCaterpillar] = useState(false);\n  const [collectingFish, setCollectingFish] = useState<Set<number>>(new Set());\n  const [fadingFish, setFadingFish] = useState<Set<number>>(new Set());\n  \n  // Field Spinning Animation State\n  const [spinningFields, setSpinningFields] = useState<Set<number>>(new Set());\n  \n  // Fish Reward Dialog State\n  const [isFishRewardDialogOpen, setIsFishRewardDialogOpen] = useState(false);\n  const [fishRewardData, setFishRewardData] = useState<{\n    fishName: string;\n    fishImageUrl: string;\n    rarity: string;\n  } | null>(null);\n  // Caterpillar modal removed - they spawn automatically from flowers\n  const [userFlowers, setUserFlowers] = useState<any[]>([]);\n  const [fieldFlowers, setFieldFlowers] = useState<any[]>([]);\n  const [placedFlowers, setPlacedFlowers] = useState<{\n    id: number;\n    fieldId: number;\n    flowerImageUrl: string;\n    flowerName: string;\n    flowerRarity: string;\n    placedAt: Date;\n    isShimmering: boolean;\n    isDissolving: boolean;\n  }[]>([]);\n  const [placedFish, setPlacedFish] = useState<{\n    id: number;\n    fieldId: number;\n    fishImageUrl: string;\n    fishName: string;\n    fishRarity: string;\n    placedAt: Date;\n    isShrinkling: boolean;\n  }[]>([]);\n  const [placedCaterpillars, setPlacedCaterpillars] = useState<{\n    id: number;\n    fieldId: number;\n    caterpillarImageUrl: string;\n    caterpillarName: string;\n    caterpillarRarity: string;\n    placedAt: Date;\n    isShrinkling: boolean;\n    isGrowing?: boolean;\n  }[]>([]);\n\n  // State for spawning caterpillars with grow-in animation\n  const [spawnedCaterpillars, setSpawnedCaterpillars] = useState<{\n    id: number;\n    fieldId: number;\n    caterpillarImageUrl: string;\n    caterpillarName: string;\n    caterpillarRarity: string;\n    spawnedAt: Date;\n    isGrowingIn: boolean;\n  }[]>([]);\n\n\n\n  // Raritäts-Vererbungslogik 50-30-20\n  const inheritCaterpillarRarity = (parentRarity: string): string => {\n    const rarities = ['common', 'uncommon', 'rare', 'super-rare', 'epic', 'legendary', 'mythical'];\n    const currentIndex = rarities.indexOf(parentRarity);\n    \n    if (currentIndex === -1) return 'common';\n    \n    const roll = Math.random();\n    \n    if (roll < 0.5) {\n      // 50% same rarity\n      return parentRarity;\n    } else if (roll < 0.8) {\n      // 30% lower rarity  \n      return currentIndex > 0 ? rarities[currentIndex - 1] : rarities[0];\n    } else {\n      // 20% higher rarity\n      return currentIndex < rarities.length - 1 ? rarities[currentIndex + 1] : rarities[rarities.length - 1];\n    }\n  };\n\n  // Caterpillar spawning nach Burst\n  const spawnCaterpillarAfterBurst = async (fieldIndex: number, butterflyRarity: string) => {\n    if (!user) return;\n    \n    try {\n      console.log(\"🐛 CALLING API: Spawning caterpillar on field\", fieldIndex);\n      const response = await fetch('/api/garden/spawn-caterpillar', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'x-user-id': user.id.toString()\n        },\n        body: JSON.stringify({\n          fieldIndex: fieldIndex,\n          parentRarity: butterflyRarity\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log(\"🐛 SUCCESS: Caterpillar spawned!\", result);\n        \n        // Lokale grow-in animation starten\n        const caterpillarAnimId = Date.now() + Math.random();\n        const inheritedRarity = inheritCaterpillarRarity(butterflyRarity);\n        \n        // Sofort die echten Daten laden - permanente Raupe erscheint direkt\n        fetchTeichData();\n        \n      } else {\n        console.error(\"🐛 ERROR: Failed to spawn caterpillar:\", response.status);\n      }\n    } catch (error) {\n      console.error('🐛 NETWORK ERROR spawning caterpillar:', error);\n    }\n  };\n\n  const handleButterflyPlacement = (fieldId: number, butterfly: any) => {\n    setSelectedField(fieldId);\n    placeButterflyOnField(butterfly.id);\n  };\n  \n  // Handle field fish collection\n  const handleFieldFishClick = async (field: GardenField) => {\n    if (!user || !field.hasFish || !field.fishId) return;\n    \n    console.log(`🐟 Attempting to collect fish on field ${field.id}`);\n    \n    try {\n      const response = await fetch('/api/garden/collect-field-fish', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userId: user.id,\n          fieldFishId: field.fishId\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log('🐟 Fisch erfolgreich gesammelt!');\n        toast.success(`${field.fishName} gesammelt!`);\n        \n        // Refresh data to show updated state\n        fetchTeichData();\n      } else {\n        const errorData = await response.json();\n        console.error('Field fish collection failed:', errorData);\n        toast.error(errorData.message || 'Fehler beim Sammeln des Fisches.');\n      }\n    } catch (error) {\n      console.error('Field fish collection error:', error);\n      toast.error('Fehler beim Sammeln des Fisches.');\n    }\n  };\n\n  // Handle field caterpillar collection\n  const handleCaterpillarClick = async (field: GardenField) => {\n    if (!user || !field.hasCaterpillar || isCollectingCaterpillar) return;\n    \n    console.log(`🐛 Attempting to collect caterpillar on field ${field.id}`);\n    setIsCollectingCaterpillar(true);\n    \n    try {\n      const response = await fetch(`/api/user/${user.id}/collect-field-caterpillar`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fieldIndex: field.id - 1 // Convert to 0-based index\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log('🐛 Raupe erfolgreich gesammelt!');\n        toast.success(`${field.caterpillarName} gesammelt!`);\n        \n        // Refresh data to show updated state\n        fetchTeichData();\n      } else {\n        const errorData = await response.json();\n        console.error('Field caterpillar collection failed:', errorData);\n        toast.error(errorData.message || 'Fehler beim Sammeln der Raupe.');\n      }\n    } catch (error) {\n      console.error('Field caterpillar collection error:', error);\n      toast.error('Fehler beim Sammeln der Raupe.');\n    } finally {\n      setIsCollectingCaterpillar(false);\n    }\n  };\n\n  const fetchTeichData = async () => {\n    if (!user) return;\n    console.log(\"🌸 FETCHTEICHDATA: Starting to fetch pond data...\");\n\n    try {\n      // Fetch pond-specific data including feeding progress\n      const [caterpillarRes, userCaterpillarsRes, pondProgressRes, flowersRes, fieldFlowersRes, fieldFishRes] = await Promise.all([\n        fetch(`/api/user/${user.id}/field-caterpillars`),\n        fetch(`/api/user/${user.id}/caterpillars`),\n        fetch(`/api/user/${user.id}/pond-progress`),\n        fetch(`/api/user/${user.id}/flowers`),\n        fetch(`/api/user/${user.id}/field-flowers`),\n        fetch(`/api/user/${user.id}/field-fish`)\n      ]);\n\n      console.log(\"🌸 FETCHTEICHDATA: All API responses received, checking status...\");\n      if (caterpillarRes.ok && userCaterpillarsRes.ok && pondProgressRes.ok && flowersRes.ok && fieldFlowersRes.ok && fieldFishRes.ok) {\n        console.log(\"🌸 FETCHTEICHDATA: All responses OK, parsing JSON...\");\n        const [caterpillarData, userCaterpillarsData, pondProgressData, flowersData, fieldFlowersData, fieldFishData] = await Promise.all([\n          caterpillarRes.json(),\n          userCaterpillarsRes.json(),\n          pondProgressRes.json(),\n          flowersRes.json(),\n          fieldFlowersRes.json(),\n          fieldFishRes.json()\n        ]);\n        console.log(\"🌸 FETCHTEICHDATA: JSON parsed, flowersData =\", flowersData);\n        console.log(\"🌸 FETCHTEICHDATA: Starting field processing...\");\n\n        // *** EMERGENCY FIX: Try setUserFlowers in try-catch ***\n        try {\n          console.log(\"🌸 FETCHTEICHDATA: About to set userFlowers...\");\n          setUserFlowers(flowersData.flowers || []);\n          console.log(\"🌸 FETCHTEICHDATA: userFlowers SET! ✅ Length:\", flowersData.flowers?.length);\n        } catch (setError) {\n          console.error(\"🌸 ERROR setting userFlowers:\", setError);\n        }\n\n        console.log('🌊 Updating pond with field caterpillars:', caterpillarData.fieldCaterpillars);\n        \n        // 🐛 DEBUG: Check fieldCaterpillars state update\n        setFieldCaterpillars(caterpillarData.fieldCaterpillars || []);\n        console.log('🐛 fieldCaterpillars state updated with length:', caterpillarData.fieldCaterpillars?.length);\n\n        // Update pond fields with caterpillars and butterflies (no sun spawns in pond view)\n        const updatedFields = gardenFields.map((field) => {\n          const fieldIndex = field.id - 1;\n          \n          // Check for caterpillar (only on grass fields)\n          const caterpillar = !field.isPond ? caterpillarData.fieldCaterpillars.find((c: any) => c.fieldIndex === fieldIndex) : null;\n          \n          // 🐛 DEBUG: Log caterpillar check for specific fields\n          if (fieldIndex === 20 || fieldIndex === 10 || fieldIndex === 2) {\n            console.log(`🐛 Field ${field.id} (index ${fieldIndex}): isPond=${field.isPond}, caterpillar=${!!caterpillar}`);\n          }\n          \n          // Check for butterfly - should show both on grass fields AND pond fields as small colored dots\n          const butterfly = null; // No butterflies in pond view\n          \n          // Removed debug logging - bug fixed!\n          \n          // Check for field fish (only on pond fields) - BUG FIX: use fieldIndex (0-based) consistently\n          const fish = field.isPond ? fieldFishData.fieldFish.find((f: any) => f.fieldIndex === fieldIndex) : null;\n\n          return {\n            ...field,\n            // Clear all garden-related properties for pond view\n            hasPlant: false,\n            plantType: undefined,\n            isGrowing: false,\n            plantedAt: undefined,\n            growthTimeSeconds: undefined,\n            seedRarity: undefined,\n            flowerId: undefined,\n            flowerName: undefined,\n            flowerImageUrl: undefined,\n            hasBouquet: false,\n            bouquetId: undefined,\n            bouquetName: undefined,\n            bouquetRarity: undefined,\n            bouquetPlacedAt: undefined,\n            bouquetExpiresAt: undefined,\n            hasButterfly: butterfly ? true : false,\n            butterflyId: butterfly ? butterfly.butterflyId : undefined,\n            butterflyName: butterfly ? butterfly.butterflyName : undefined,\n            butterflyImageUrl: butterfly ? butterfly.butterflyImageUrl : undefined,\n            butterflyRarity: butterfly ? butterfly.butterflyRarity : undefined,\n            hasFish: !!fish,\n            fishId: fish ? fish.id : undefined,\n            fishName: fish ? fish.fishName : undefined,\n            fishImageUrl: fish ? fish.fishImageUrl : undefined,\n            fishRarity: fish ? fish.fishRarity : undefined,\n            // Only keep caterpillar data for grass fields\n            hasCaterpillar: !!caterpillar,\n            caterpillarId: caterpillar?.caterpillarId,\n            caterpillarName: caterpillar?.caterpillarName,\n            caterpillarImageUrl: caterpillar?.caterpillarImageUrl,\n            caterpillarRarity: caterpillar?.caterpillarRarity,\n            caterpillarSpawnedAt: caterpillar ? new Date(caterpillar.spawnedAt) : undefined,\n            // No sun spawns in pond view\n            hasSunSpawn: false,\n            sunSpawnAmount: undefined,\n            sunSpawnExpiresAt: undefined,\n            // Add feeding progress for pond fields from API data (only if > 0) - FIX: Use fieldIndex\n            feedingProgress: field.isPond && pondProgressData.pondProgress?.[field.id - 1] > 0 ? pondProgressData.pondProgress[field.id - 1] : undefined\n          };\n        });\n\n        console.log(\"🌸 FETCHTEICHDATA: About to setGardenFields...\");\n        setGardenFields(updatedFields);\n        console.log(\"🌸 FETCHTEICHDATA: setGardenFields DONE\");\n        // Clear garden-specific data for pond view\n        setUserSeeds([]);\n        console.log(\"🌸 FETCHTEICHDATA: setUserSeeds DONE\");\n        setUserBouquets([]);\n        console.log(\"🌸 FETCHTEICHDATA: setUserBouquets DONE\");\n        setPlacedBouquets([]);\n        console.log(\"🌸 FETCHTEICHDATA: setPlacedBouquets DONE\");\n        // No field butterflies needed in TeichView - nur pond-spezifische Daten\n        setFieldFish(fieldFishData.fieldFish || []);\n        console.log(\"🌸 FETCHTEICHDATA: setFieldFish DONE\");\n        setFieldCaterpillars(caterpillarData.fieldCaterpillars);\n        console.log(\"🌸 FETCHTEICHDATA: setFieldCaterpillars DONE\");\n        setSunSpawns([]); // No sun spawns in pond view\n        console.log(\"🌸 FETCHTEICHDATA: setSunSpawns DONE\");\n        setUserButterflies([]); // No butterflies needed in TeichView\n        console.log(\"🌸 FETCHTEICHDATA: setUserButterflies DONE\");\n        setUserCaterpillars(userCaterpillarsData.caterpillars || []);\n        console.log(\"🌸 FETCHTEICHDATA: setUserCaterpillars DONE\");\n        console.log(\"🌸 FETCHTEICHDATA: Setting userFlowers to:\", flowersData.flowers);\n        setUserFlowers(flowersData.flowers || []);  // BUGFIX: This was missing!\n        console.log(\"🌸 FETCHTEICHDATA: setUserFlowers COMPLETED ✅\");\n        setFieldFlowers(fieldFlowersData.fieldFlowers || []);  // 🔧 CRITICAL FIX: This was completely missing!\n        console.log(\"🌸 FETCHTEICHDATA: setFieldFlowers COMPLETED ✅\");\n      } else {\n        console.error(\"🌸 FETCHTEICHDATA ERROR: Some API responses failed\", {\n          caterpillar: caterpillarRes.status,\n          userCaterpillars: userCaterpillarsRes.status,\n          pondProgress: pondProgressRes.status,\n          flowers: flowersRes.status,\n          fieldFlowers: fieldFlowersRes.status,\n          fieldFish: fieldFishRes.status\n        });\n      }\n    } catch (error) {\n      console.error('🌸 FETCHTEICHDATA CATCH ERROR:', error);\n      console.error('🌸 ERROR NAME:', error?.name);\n      console.error('🌸 ERROR MESSAGE:', error?.message);\n      console.error('🌸 ERROR STACK:', error?.stack);\n    }\n  };\n\n  // Frontend only displays backend data - no lifecycle logic\n\n\n  useEffect(() => {\n    fetchTeichData();\n    const interval = setInterval(fetchTeichData, 10000);\n    return () => clearInterval(interval);\n  }, [user]);\n\n  // Pond field shaking animation system\n  useEffect(() => {\n    const startShaking = () => {\n      // Get all pond field IDs (middle 8x3 area: rows 1-3, cols 1-8)\n      const pondFields: number[] = [];\n      for (let row = 1; row <= 3; row++) {\n        for (let col = 1; col <= 8; col++) {\n          const fieldId = row * 10 + col + 1;\n          pondFields.push(fieldId);\n        }\n      }\n      \n      // Select random pond field\n      const randomField = pondFields[Math.floor(Math.random() * pondFields.length)];\n      setShakingField(randomField);\n      \n      // Stop shaking after 6 seconds\n      setTimeout(() => {\n        setShakingField(null);\n      }, 6000);\n    };\n\n    // Start first shake after random delay (10-20s)\n    const getRandomInterval = () => Math.random() * 10000 + 10000; // 10-20 seconds\n    \n    let timeoutId = setTimeout(() => {\n      startShaking();\n      \n      // Set up recurring shaking with new random interval each time\n      const scheduleNext = () => {\n        timeoutId = setTimeout(() => {\n          startShaking();\n          scheduleNext(); // Schedule the next shake\n        }, getRandomInterval());\n      };\n      \n      scheduleNext();\n    }, getRandomInterval());\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, []);\n\n\n  // Fish shrinking system\n  useEffect(() => {\n    const intervals: NodeJS.Timeout[] = [];\n    \n    placedFish.forEach((fish) => {\n      if (fish.isShrinkling) return;\n      \n      const timeAlive = Date.now() - fish.placedAt.getTime();\n      \n      // Set up shrinking for new fish only\n      if (timeAlive < 1000) { // Only set up shrinking for new fish\n        // Wait 10 seconds before starting to shrink\n        const shrinkStartTimeout = setTimeout(() => {\n          setPlacedFish(prev => \n            prev.map(f => f.id === fish.id ? { ...f, isShrinkling: true } : f)\n          );\n          \n          // Remove after shrinking animation (30-90 seconds)\n          const shrinkDuration = Math.random() * 60000 + 30000; // 30-90 seconds\n          const removeTimeout = setTimeout(() => {\n            setPlacedFish(prev => prev.filter(f => f.id !== fish.id));\n          }, shrinkDuration);\n          \n          intervals.push(removeTimeout);\n        }, 10000); // 10 seconds delay before shrinking starts\n        \n        intervals.push(shrinkStartTimeout);\n      }\n    });\n    \n    return () => {\n      intervals.forEach(clearTimeout);\n    };\n  }, [placedFish]);\n\n  // Caterpillar shrinking system\n  useEffect(() => {\n    const intervals: NodeJS.Timeout[] = [];\n    \n    placedCaterpillars.forEach((caterpillar) => {\n      if (caterpillar.isShrinkling) return;\n      \n      const timeAlive = Date.now() - caterpillar.placedAt.getTime();\n      \n      // Set up shrinking for new caterpillars only\n      if (timeAlive < 1000) { // Only set up shrinking for new caterpillars\n        // Wait 10 seconds before starting to shrink\n        const shrinkStartTimeout = setTimeout(() => {\n          setPlacedCaterpillars(prev => \n            prev.map(c => c.id === caterpillar.id ? { ...c, isShrinkling: true } : c)\n          );\n          \n          // Remove after shrinking animation (30-90 seconds)\n          const shrinkDuration = Math.random() * 60000 + 30000; // 30-90 seconds\n          const removeTimeout = setTimeout(() => {\n            setPlacedCaterpillars(prev => prev.filter(c => c.id !== caterpillar.id));\n          }, shrinkDuration);\n          \n          intervals.push(removeTimeout);\n        }, 10000); // 10 seconds delay before shrinking starts\n        \n        intervals.push(shrinkStartTimeout);\n      }\n    });\n    \n    return () => {\n      intervals.forEach(clearTimeout);\n    };\n  }, [placedCaterpillars]);\n\n  // Get butterfly border color based on rarity\n  const getButterflyBorderColor = (rarity: string) => {\n    switch (rarity.toLowerCase()) {\n      case 'common': return '#FFD700';\n      case 'uncommon': return '#00FF00';\n      case 'rare': return '#0066FF';\n      case 'super-rare': return '#00FFFF';\n      case 'epic': return '#9966FF';\n      case 'legendary': return '#FF8800';\n      case 'mythical': return '#FF0044';\n      default: return '#FFD700';\n    }\n  };\n\n  // Get fish border color based on rarity\n  const getFishBorderColor = (rarity: string) => {\n    switch (rarity.toLowerCase()) {\n      case 'common': return '#FFD700';\n      case 'uncommon': return '#00FF00';\n      case 'rare': return '#0066FF';\n      case 'super-rare': return '#00FFFF';\n      case 'epic': return '#9966FF';\n      case 'legendary': return '#FF8800';\n      case 'mythical': return '#FF0044';\n      default: return '#FFD700';\n    }\n  };\n\n  // Get caterpillar border color based on rarity\n  const getCaterpillarBorderColor = (rarity: string) => {\n    switch (rarity.toLowerCase()) {\n      case 'common': return '#FFD700';\n      case 'uncommon': return '#00FF00';\n      case 'rare': return '#0066FF';\n      case 'super-rare': return '#00FFFF';\n      case 'epic': return '#9966FF';\n      case 'legendary': return '#FF8800';\n      case 'mythical': return '#FF0044';\n      default: return '#FFD700';\n    }\n  };\n\n  const unlockField = async (fieldId: number) => {\n    if (!user) return;\n\n    const fieldIndex = fieldId - 1;\n    const cost = 10;\n\n    if (credits < cost) {\n      showNotification('Nicht genügend Credits!', 'Zum Freischalten eines Feldes benötigst du 10 Credits.', 'error');\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/garden/unlock-field', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId: user.id, fieldIndex, cost })\n      });\n\n      if (response.ok) {\n        updateCredits(credits - cost);\n        fetchTeichData();\n        showNotification('Feld freigeschaltet!', `Du hast Feld ${fieldId} für ${cost} Credits freigeschaltet.`, 'success');\n      } else {\n        const error = await response.json();\n        showNotification('Fehler', error.message || 'Feld konnte nicht freigeschaltet werden.', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to unlock field:', error);\n      showNotification('Fehler', 'Netzwerkfehler beim Freischalten des Feldes.', 'error');\n    }\n  };\n\n  const plantSeed = async (seedId: number, fieldIndex?: number) => {\n    if (!user) return;\n    const targetField = fieldIndex !== undefined ? fieldIndex : (selectedField || 1) - 1;\n\n    try {\n      const response = await fetch('/api/garden/plant', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userId: user.id,\n          fieldIndex: targetField,\n          seedId\n        })\n      });\n\n      if (response.ok) {\n        fetchTeichData();\n        showNotification('Samen gepflanzt!', 'Der Samen wurde erfolgreich gepflanzt.', 'success');\n      } else {\n        const error = await response.json();\n        showNotification('Fehler', error.message || 'Samen konnte nicht gepflanzt werden.', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to plant seed:', error);\n      showNotification('Fehler', 'Netzwerkfehler beim Pflanzen.', 'error');\n    }\n\n    setShowSeedModal(false);\n    setSelectedField(null);\n  };\n\n  const harvestField = async (fieldId: number) => {\n    if (!user) return;\n\n    console.log('Starting harvest for field:', fieldId - 1);\n\n    try {\n      const response = await fetch('/api/garden/harvest', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userId: user.id,\n          fieldIndex: fieldId - 1\n        })\n      });\n\n      if (response.ok) {\n        console.log('Blume erfolgreich geerntet!');\n        showNotification('Blume geerntet!', 'Die Blume wurde erfolgreich geerntet.', 'success');\n        fetchTeichData();\n      } else {\n        const error = await response.json();\n        showNotification('Fehler', error.message || 'Blume konnte nicht geerntet werden.', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to harvest field:', error);\n      showNotification('Fehler', 'Netzwerkfehler beim Ernten.', 'error');\n    }\n  };\n\n  const placeBouquet = async (bouquetId: number, fieldIndex?: number) => {\n    if (!user) return;\n    const targetField = fieldIndex !== undefined ? fieldIndex : (selectedField || 1) - 1;\n\n    try {\n      const response = await fetch('/api/garden/place-bouquet', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userId: user.id,\n          fieldIndex: targetField,\n          bouquetId\n        })\n      });\n\n      if (response.ok) {\n        fetchTeichData();\n        showNotification('Bouquet platziert!', 'Das Bouquet wurde erfolgreich platziert.', 'success');\n      } else {\n        const error = await response.json();\n        showNotification('Fehler', error.message || 'Bouquet konnte nicht platziert werden.', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to place bouquet:', error);\n      showNotification('Fehler', 'Netzwerkfehler beim Platzieren.', 'error');\n    }\n\n    setShowBouquetModal(false);\n    setSelectedField(null);\n  };\n\n  // Legacy butterfly function (still needed for compatibility)\n  const placeButterflyOnField = async (butterflyId: number) => {\n    console.log(\"🦋 Legacy butterfly placement - redirecting to flower system\");\n    showNotification('Verwende die neue Blumen-Platzierung!', 'info');\n    setShowButterflyModal(false);\n    setSelectedField(null);\n  };\n\n  const [isPlacingFlower, setIsPlacingFlower] = useState(false);\n\n  const placeFlowerOnField = async (flowerId: number) => {\n    if (!user || selectedField === null || isPlacingFlower) return;\n    \n    setIsPlacingFlower(true);\n    console.log(\"🌸 PLACEFLOWER: Starting with flowerId:\", flowerId, \"selectedField:\", selectedField);\n\n    const flower = userFlowers.find(f => f.id === flowerId);\n    if (!flower) {\n      console.error(\"🌸 PLACEFLOWER ERROR: Flower not found\", flowerId);\n      setIsPlacingFlower(false);\n      return;\n    }\n\n    // Check if flower quantity is available\n    if (flower.quantity <= 0) {\n      showNotification('Fehler', 'Diese Blume ist nicht mehr verfügbar.', 'error');\n      setIsPlacingFlower(false);\n      return;\n    }\n\n    // Check if field already has a placed flower (both local state and database)\n    const existingLocalFlower = placedFlowers.find(f => f.fieldId === selectedField);\n    const existingDbFlower = fieldFlowers.find(f => f.fieldIndex === selectedField - 1);\n    \n    if (existingLocalFlower || existingDbFlower) {\n      showNotification('Fehler', `Feld ${selectedField} ist bereits belegt. Wählen Sie ein leeres Grasfeld.`, 'info');\n      setIsPlacingFlower(false);\n      return;\n    }\n\n    try {\n      console.log(\"🌸 PLACEFLOWER: Starting with API call to consume flower from server inventory\");\n      \n      // ✅ NEW: Place flower and spawn caterpillar in one API call\n      const response = await fetch('/api/garden/place-flower-and-spawn-caterpillar', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'x-user-id': user.id.toString()\n        },\n        body: JSON.stringify({\n          fieldIndex: selectedField - 1,\n          flowerId: flowerId\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to place flower and spawn caterpillar');\n      }\n\n      console.log(\"🌸 PLACEFLOWER: Flower placed and caterpillar spawned in one step ✅\");\n\n      // ✅ FIX: Remove flower from client inventory IMMEDIATELY after successful server response\n      setUserFlowers(prev => prev.map(f => {\n        if (f.id === flowerId) {\n          const newQuantity = f.quantity - 1;\n          return newQuantity > 0 ? { ...f, quantity: newQuantity } : null;\n        }\n        return f;\n      }).filter(Boolean) as typeof prev); // Remove null entries\n      \n      console.log(\"🌸 PLACEFLOWER: Flower removed from client inventory immediately ✅\");\n\n      // 🌸 NEW: Blume wird platziert und spawnt später eine Raupe (temporary visual only)\n      // Add temporary visual flower that will spawn a caterpillar\n      const tempFlowerId = Date.now();\n      setPlacedFlowers(prev => [...prev, {\n        id: tempFlowerId,\n        fieldId: selectedField,\n        flowerImageUrl: flower.flowerImageUrl,\n        flowerName: flower.flowerName,\n        flowerRarity: flower.flowerRarity as RarityTier,\n        placedAt: new Date(),\n        isShimmering: true,  // ✅ FIX: Start with shimmer animation\n        isDissolving: false  // ✅ FIX: Not dissolving yet\n      }]);\n\n      // Get spawn time based on flower rarity (seltener = länger bis Raupe spawnt)\n      const getSpawnTime = (rarity: string): number => {\n        switch (rarity.toLowerCase()) {\n          case 'common': return 3000;      // 3 Sekunden - schnellstes Spawnen\n          case 'uncommon': return 5000;    // 5 Sekunden\n          case 'rare': return 8000;        // 8 Sekunden\n          case 'super-rare': return 12000; // 12 Sekunden \n          case 'epic': return 18000;       // 18 Sekunden\n          case 'legendary': return 20000;  // 20 Sekunden\n          case 'mythical': return 30000;   // 30 Sekunden - längstes Wackeln\n          default: return 3000;\n        }\n      };\n\n      const spawnTime = getSpawnTime(flower.flowerRarity);\n      \n      // Animate flower disappearing and spawn caterpillar after rarity-based time\n      setTimeout(async () => {\n          // Phase 1: Stop shimmering, start dissolving\n          setPlacedFlowers(prev => \n            prev.map(f => \n              f.id === tempFlowerId \n                ? { ...f, isShimmering: false, isDissolving: true }\n                : f\n            )\n          );\n          \n          // Phase 2: Remove flower completely after dissolve animation\n          setTimeout(() => {\n            setPlacedFlowers(prev => prev.filter(f => f.id !== tempFlowerId));\n          }, 1500); // 1.5 seconds for dissolve animation\n\n          // ✅ REMOVED: No separate caterpillar spawning needed - done in single API call above\n          console.log(`🐛 Caterpillar spawned from ${flower.flowerName} on field ${selectedField}!`);\n          \n          // Refresh data to show spawned caterpillar\n          fetchTeichData();\n        }, spawnTime);\n\n    } catch (error) {\n      console.error('🌸 PLACEFLOWER CATCH ERROR:', error);\n      showNotification('Fehler', 'Fehler beim Platzieren der Blume.', 'error');\n    } finally {\n      setIsPlacingFlower(false);\n    }\n\n    setShowFlowerModal(false);\n    setSelectedField(null);\n  };\n\n  // Fish placement and collection functions\n  const handleFishSelection = async (fishId: number, fishImageUrl: string, fishName: string, rarity: RarityTier) => {\n    if (!user || selectedField === null) return;\n    \n    const fieldIndex = selectedField - 1;\n    \n    // Add to local state immediately for visual feedback\n    setPlacedFish(prev => [...prev, {\n      id: Date.now(), // Temporary ID\n      fieldId: selectedField,\n      fishImageUrl,\n      fishName,\n      fishRarity: rarity,\n      placedAt: new Date(),\n      isShrinkling: false\n    }]);\n\n    setShowFishModal(false);\n    setSelectedField(null);\n    \n    showNotification('Fisch platziert!', `${fishName} schwimmt im Teich umher!`, 'success');\n  };\n\n  const collectFish = async (fieldId: number) => {\n    if (!user) return;\n    \n    // Prevent double-clicking/race conditions\n    if (collectingFish.has(fieldId)) {\n      console.log(`🐟 Already collecting fish on field ${fieldId}`);\n      return;\n    }\n    \n    // Find the fish on this field (using correct 0-based index conversion)\n    const fishOnField = fieldFish.find(f => f.fieldIndex === fieldId - 1);\n    if (!fishOnField) {\n      console.log(`🐟 No fish found on field ${fieldId}`);\n      return;\n    }\n    \n    console.log(`🐟 Attempting to collect fish on field ${fieldId}`, fishOnField);\n    \n    // Lock this field during collection\n    setCollectingFish(prev => new Set([...prev, fieldId]));\n    \n    try {\n      const response = await fetch('/api/garden/collect-field-fish', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userId: user.id,\n          fieldFishId: fishOnField.id  // Use the correct fish database ID\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log('🐟 Fisch erfolgreich gesammelt!');\n        \n        // Show the beautiful fish reward dialog\n        setFishRewardData({\n          fishName: fishOnField.fishName,\n          fishImageUrl: fishOnField.fishImageUrl,\n          rarity: fishOnField.fishRarity\n        });\n        setIsFishRewardDialogOpen(true);\n        \n        // Refresh data to show updated state\n        fetchTeichData();\n      } else {\n        const errorData = await response.json();\n        console.error('Field fish collection failed:', errorData);\n      }\n    } catch (error) {\n      console.error('Collect fish error:', error);\n    } finally {\n      // Always unlock the field after collection (success or failure)\n      setCollectingFish(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fieldId);\n        return newSet;\n      });\n    }\n  };\n\n  // Caterpillars spawn automatically when butterflies disappear, no manual placement\n\n\n  const collectButterfly = async (fieldId: number) => {\n    if (!user) return;\n    \n    console.log('🦋 Attempting to collect butterfly on field', fieldId - 1);\n    \n    try {\n      const response = await fetch('/api/garden/collect-butterfly', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'x-user-id': user.id.toString()\n        },\n        body: JSON.stringify({\n          fieldIndex: fieldId - 1\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log('🦋 Schmetterling erfolgreich gesammelt!');\n        showNotification('Schmetterling gesammelt!', result.message, 'success');\n        fetchTeichData();\n      } else {\n        const error = await response.json();\n        showNotification('Fehler', error.message || 'Schmetterling konnte nicht gesammelt werden.', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to collect butterfly:', error);\n      showNotification('Fehler', 'Netzwerkfehler beim Sammeln des Schmetterlings.', 'error');\n    }\n  };\n\n  // Collect field caterpillar handler\n  const collectCaterpillar = async (fieldIndex: number) => {\n    if (!user) return;\n    \n    console.log('🐛 Attempting to collect caterpillar on field', fieldIndex);\n    // Blockierung wird bereits im onClick gesetzt\n    \n    // Start spinning animation first (with image visible)\n    setSpinningFields(prev => new Set([...Array.from(prev), fieldIndex]));\n    \n    try {\n      const response = await fetch(`/api/user/${user.id}/collect-field-caterpillar`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ fieldIndex: fieldIndex })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log('🐛 Raupe erfolgreich gesammelt!');\n        \n        // Wait for 1 rotation to complete (0.8s), then clean up\n        setTimeout(() => {\n          setSpinningFields(prev => {\n            const newSet = new Set(Array.from(prev));\n            newSet.delete(fieldIndex);\n            return newSet;\n          });\n        }, 800);\n        \n        fetchTeichData();\n        \n        // Prevent butterfly dialog from opening for 1.5 seconds\n        setTimeout(() => {\n          setIsCollectingCaterpillar(false);\n        }, 1500);\n      } else {\n        const error = await response.json();\n        console.error('Collection failed:', error);\n        setIsCollectingCaterpillar(false);\n        // Clean up spinning on error\n        setSpinningFields(prev => {\n          const newSet = new Set(Array.from(prev));\n          newSet.delete(fieldIndex);\n          return newSet;\n        });\n      }\n    } catch (error) {\n      console.error('Failed to collect caterpillar:', error);\n      setIsCollectingCaterpillar(false);\n      // Clean up spinning on error\n      setSpinningFields(prev => {\n        const newSet = new Set(Array.from(prev));\n        newSet.delete(fieldIndex);\n        return newSet;\n      });\n    }\n  };\n\n  const onFeedCaterpillar = async (caterpillarId: number, fieldIndex: number) => {\n    if (!user) return;\n\n    try {\n      console.log('🐛 Feeding caterpillar to fish on field', fieldIndex);\n      \n      const response = await fetch('/api/garden/feed-fish', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userId: user.id,\n          caterpillarId,\n          fieldIndex: fieldIndex // Backend expects 0-based index (already calculated)\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log('🐟 Fish feeding result:', result);\n        \n        if (result.fishCreated) {\n          showNotification('Fisch geboren!', `Ein ${result.fishName} wurde geboren! Seltenheit: ${result.fishRarity}`, 'success');\n        } else {\n          // Use the ACTUAL server-calculated rarity, not a random one!\n          const rarityNames = {\n            'common': 'Gewöhnlich',\n            'uncommon': 'Ungewöhnlich', \n            'rare': 'Selten',\n            'super-rare': 'Super-selten',\n            'epic': 'Episch',\n            'legendary': 'Legendär',\n            'mythical': 'Mythisch'\n          };\n          const rarityName = rarityNames[result.fishRarity as keyof typeof rarityNames] || result.fishRarity;\n          \n          showNotification(\n            `Fütterung ${result.feedingCount}/3 abgeschlossen.\\n\\nAktueller Durchschnitt: ${rarityName}`, \n            'success'\n          );\n        }\n        \n        fetchTeichData(); // Refresh field data\n        setShakingField(null); // Stop shaking after feeding\n      } else {\n        const error = await response.json();\n        showNotification('Fehler', error.message || 'Fütterung fehlgeschlagen.', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to feed caterpillar:', error);\n      showNotification('Fehler', 'Netzwerkfehler beim Füttern.', 'error');\n    }\n  };\n\n  const onFeedButterfly = async (butterflyId: number, fieldIndex: number) => {\n    if (!user) return;\n\n    try {\n      console.log('🦋→🐛 Converting butterfly to caterpillar for feeding fish on field', fieldIndex);\n      \n      const response = await fetch('/api/garden/feed-butterfly', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userId: user.id,\n          butterflyId,\n          fieldIndex: fieldIndex // Backend expects 0-based index (already calculated)\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log('🦋 Butterfly feeding result:', result);\n        \n        if (result.fishCreated) {\n          showNotification('Fisch geboren!', `Ein ${result.fishName} wurde geboren! Seltenheit: ${result.fishRarity}`, 'success');\n        } else {\n          showNotification('Schmetterling → Raupe!', `Schmetterling zu Raupe konvertiert! Fütterung ${result.feedingCount}/3 abgeschlossen.`, 'success');\n        }\n        \n        fetchTeichData(); // Refresh field data\n        setShakingField(null); // Stop shaking after feeding\n      } else {\n        const error = await response.json();\n        showNotification('Fehler', error.message || 'Schmetterling-Fütterung fehlgeschlagen.', 'error');\n      }\n    } catch (error) {\n      console.error('🦋 Failed to feed butterfly:', error);\n      showNotification('Fehler', 'Netzwerkfehler beim Füttern mit Schmetterling.', 'error');\n    }\n  };\n\n  const collectSun = async (fieldId: number) => {\n    if (!user) return;\n    \n    console.log('Starting sun collection for field:', fieldId - 1);\n    setLoading(true);\n    \n    try {\n      const response = await fetch('/api/garden/collect-sun', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userId: user.id,\n          fieldIndex: fieldId - 1\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log('Sun collected successfully!', result);\n        \n        // Update suns count in global state\n        setSuns(suns + result.sunAmount);\n        \n        // Remove from local state immediately\n        removeSunSpawn(fieldId - 1);\n        \n        showNotification('Sonnen gesammelt!', result.message, 'success');\n        \n        // Refresh garden data to sync with server\n        fetchTeichData();\n      } else {\n        const error = await response.json();\n        showNotification('Fehler', error.message || 'Sonnen konnten nicht gesammelt werden.', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to collect sun:', error);\n      showNotification('Fehler', 'Netzwerkfehler beim Sammeln der Sonnen.', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"p-6 text-center\">\n        <p className=\"text-slate-400\">Bitte melde dich an, um den Teich zu besuchen.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-950 p-4 pb-20\">\n      <TooltipProvider>\n        <Card className=\"bg-gradient-to-br from-blue-900 to-teal-900 border border-blue-500/30 shadow-lg mb-6\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-white\">\n              <div className=\"relative\">\n                {/* HelpButton in absoluter Position rechts oben */}\n                <div className=\"absolute top-0 right-0\">\n                  <HelpButton helpText=\"Am Teich setzt du Schmetterlinge auf Grasfelder um Raupen zu züchten. Füttere deine Fische in den blauen Teichfeldern mit den Raupen - je höher die Rarität der Raupen, desto bessere Fische bekommst du!\" viewType=\"pond\" />\n                </div>\n                \n                {/* Zentrierter Content */}\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center gap-3\">\n                    <Waves className=\"h-6 w-6 text-blue-400\" />\n                    <span className=\"text-2xl font-bold text-blue-300\">Mariposa Teich</span>\n                    <Waves className=\"h-6 w-6 text-blue-400\" />\n                  </div>\n                  <div className=\"text-xs text-slate-400\">\n                    Setze Schmetterlinge ins Gras damit sie neue Raupen bilden und fütter deine Fische mit Ihnen - Sie da wackelt was!\n                  </div>\n                </div>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {/* Pond Panorama Background Container */}\n            <div className=\"relative\">\n              {/* Pond Panorama Background Layer */}\n              <div \n                className=\"absolute inset-0 rounded-lg overflow-hidden opacity-60\"\n                style={{\n                  backgroundImage: 'url(\"/Landschaft/Pond.png\")',\n                  backgroundSize: 'cover',\n                  backgroundPosition: 'center',\n                  zIndex: 0\n                }}\n              />\n              {/* Pond Grid with transparent backgrounds */}\n              <div className=\"relative z-10 grid grid-cols-5 sm:grid-cols-10 gap-1 sm:gap-2 garden-grid-mobile sm:garden-grid-desktop\">\n              {gardenFields.map((field) => {\n                // In TeichView, no unlock logic needed since grass fields are auto-unlocked\n                const isNextToUnlock = false;\n                \n                \n                return (\n                  <div\n                    key={field.id}\n                    className={`\n                      aspect-square border-2 rounded-lg relative flex items-center justify-center transition-all touch-target\n                      ${field.isPond \n                        ? 'border-blue-500 bg-gradient-to-br from-blue-800/40 to-teal-800/40 cursor-pointer' \n                        : field.isUnlocked \n                          ? 'border-green-500 bg-green-900/20 hover:bg-green-900/40 active:bg-green-900/60 cursor-pointer' \n                          : isNextToUnlock \n                            ? 'border-orange-500 bg-slate-800 hover:bg-slate-700 active:bg-slate-600 opacity-50 cursor-pointer' \n                            : 'border-slate-600 bg-slate-800 opacity-40'\n                      }\n                      ${spinningFields.has(field.id - 1) ? 'animate-field-spin' : ''}\n                      }\n                      ${shakingField === field.id ? 'pond-shake' : ''}\n                    `}\n                    style={{\n                      backgroundColor: field.isPond \n                        ? 'rgba(34, 118, 182, 0.2)' // Transparent blue for pond fields\n                        : 'rgba(34, 197, 94, 0.1)', // Transparent green for grass fields\n                      minHeight: '44px',\n                      minWidth: '44px',\n                      animation: shakingField === field.id ? 'pond-wobble 1.5s ease-in-out infinite' : 'none'\n                    }}\n                    onClick={() => {\n                      if (field.isPond) {\n                        // TEICHFELD: Wackelnd → Fütterungs-Dialog, sonst Fish einsammeln\n                        if (shakingField === field.id) {\n                          // Open feeding dialog if user has caterpillars (only caterpillars can feed fish)\n                          if (userCaterpillars.length > 0) {\n                            console.log(\"🐛 Opening feeding dialog for pond field\", field.id);\n                            setSelectedField(field.id);\n                            setShowFeedingDialog(true);\n                          } else {\n                            showNotification('Keine Futtermittel', 'Du hast keine Raupen zum Füttern im Inventar.', 'error');\n                          }\n                        } else {\n                          // Try to collect fish from pond field (convert field.id to 0-based index)\n                          const fishOnField = fieldFish.find(f => f.fieldIndex === field.id - 1);\n                          if (fishOnField && !collectingFish.has(field.id)) {\n                            console.log(\"🐟 Attempting to collect fish on field\", field.id);\n                            collectFish(field.id);\n                          } else if (collectingFish.has(field.id)) {\n                            console.log(\"🐟 Already collecting fish on field\", field.id);\n                          } else {\n                            console.log(\"🐟 Check for fish on pond field\", field.id);\n                          }\n                        }\n                        return;\n                      }\n                      \n                      // GRASFELD: Butterfly platzieren (KEINE Caterpillar-Logik hier - wird von Raupe onClick gehandelt)\n                      if (!field.isPond) {\n                        // Check if caterpillar is present - dann NICHT den Schmetterlings-Dialog öffnen\n                        const caterpillarOnField = fieldCaterpillars.find(c => c.fieldIndex === field.id - 1) || \n                                                  field.hasCaterpillar;\n                        \n                        if (caterpillarOnField) {\n                          console.log(\"🐛 Caterpillar present on field\", field.id, \"- ignoring field click\");\n                          return; // Caterpillar-Clicks werden von deren eigenem onClick gehandelt\n                        }\n                        \n                        // Check if temporary flower is present - dann NICHT den Dialog öffnen\n                        const temporaryFlowerOnField = placedFlowers.find(f => f.fieldId === field.id);\n                        \n                        if (temporaryFlowerOnField) {\n                          console.log(\"🌸 Temporary flower present on field\", field.id, \"- ignoring field click\");\n                          return; // Feld mit Blume soll nicht anklickbar sein\n                        }\n                        \n                        // Blumen-Auswahl Dialog öffnen für neue pond system (nur wenn keine Raupe UND keine Blume da ist)\n                        console.log(\"🌸 Debug: userFlowers.length =\", userFlowers.length, \"userButterflies.length =\", userButterflies.length);\n        console.log(\"🌸 Debug: Full userFlowers =\", userFlowers);\n                        if (!isCollectingCaterpillar && userFlowers.length > 0) {\n                          console.log(\"🌸 Opening flower selection for field\", field.id, \"with\", userFlowers.length, \"flowers\");\n                          setSelectedField(field.id);\n                          setShowFlowerModal(true);\n                        } else if (isCollectingCaterpillar) {\n                          console.log(\"🐛 Currently collecting caterpillar, skipping butterfly dialog for\", field.id);\n                        } else {\n                          showNotification('Keine Blumen', 'Du hast keine Blumen im Inventar zum Platzieren.', 'info');\n                        }\n                        return;\n                      }\n                    }}\n                    onContextMenu={(e) => {\n                      e.preventDefault();\n                      if (field.isPond) return;\n                      if (field.isUnlocked && !field.hasBouquet) {\n                        setSelectedField(field.id);\n                        setShowBouquetModal(true);\n                      }\n                    }}\n                  >\n\n                    {/* Pond indicator */}\n                    {field.isPond && (\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\n                        <Waves className=\"h-6 w-6 text-blue-300/80\" />\n                      </div>\n                    )}\n\n                    {/* No sun spawns in TeichView at all */}\n                    {false && field.hasSunSpawn && field.sunSpawnAmount && !field.isPond && (\n                      <Tooltip>\n                        <TooltipTrigger asChild>\n                          <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-yellow-400/20 rounded-lg border border-yellow-400/50 animate-pulse cursor-pointer hover:bg-yellow-400/30\">\n                            <Sun className=\"h-5 w-5 text-yellow-400\" />\n                            <span className=\"text-xs font-bold text-yellow-300\">+{field.sunSpawnAmount}</span>\n                          </div>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p>Klicken zum Einsammeln: +{field.sunSpawnAmount} Sonnen</p>\n                          {field.sunSpawnExpiresAt && (\n                            <p className=\"text-xs text-red-300\">\n                              Läuft ab in {Math.max(0, Math.ceil((field.sunSpawnExpiresAt.getTime() - Date.now()) / 1000))}s\n                            </p>\n                          )}\n                        </TooltipContent>\n                      </Tooltip>\n                    )}\n\n\n                    {/* Persistent field flowers from database (ALWAYS VISIBLE) */}\n                    {fieldFlowers.find(f => f.fieldIndex === field.id - 1) && (() => {\n                      const dbFlower = fieldFlowers.find(f => f.fieldIndex === field.id - 1)!;\n                      return (\n                        <div className=\"absolute inset-0 flex items-center justify-center cursor-pointer\">\n                          <RarityImage\n                            src={dbFlower.flowerImageUrl}\n                            alt={dbFlower.flowerName || \"Blume\"}\n                            rarity={dbFlower.flowerRarity as RarityTier || \"common\"}\n                            size=\"large\"\n                            className=\"w-full h-full\"\n                          />\n                        </div>\n                      );\n                    })()}\n\n                    {/* Local placed flowers with shimmer and dissolve animations */}\n                    {placedFlowers.find(f => f.fieldId === field.id) && (() => {\n                      const flower = placedFlowers.find(f => f.fieldId === field.id)!;\n                      return (\n                        <div \n                          className={`absolute inset-0 flex items-center justify-center cursor-pointer ${\n                            flower.isShimmering ? 'animate-shimmer' : ''\n                          } ${\n                            flower.isDissolving ? 'animate-dissolve' : ''\n                          }`}\n                        >\n                          <RarityImage\n                            src={flower.flowerImageUrl}\n                            alt={flower.flowerName || \"Blume\"}\n                            rarity={flower.flowerRarity as RarityTier || \"common\"}\n                            size=\"large\"\n                            className=\"w-full h-full\"\n                          />\n                        </div>\n                      );\n                    })()}\n\n                    {/* Butterflies are only visible in garden view, not in pond view */}\n                    {false && (\n                      <ButterflyHoverPreview\n                        butterflyId={field.butterflyId!}\n                        butterflyName={field.butterflyName!}\n                        butterflyImageUrl={field.butterflyImageUrl!}\n                        rarity={field.butterflyRarity as RarityTier}\n                      >\n                        <div \n                          className=\"absolute inset-0 flex items-center justify-center cursor-pointer hover:scale-110 transition-all\"\n                          onClick={() => collectButterfly(field.id)}\n                        >\n                          <RarityImage\n                            src={field.butterflyImageUrl!}\n                            alt={field.butterflyName || \"Schmetterling\"}\n                            rarity={field.butterflyRarity as RarityTier || \"common\"}\n                            size=\"large\"\n                            className=\"w-full h-full\"\n                          />\n                        </div>\n                      </ButterflyHoverPreview>\n                    )}\n\n                    {/* Real Field Caterpillars from Database (PERMANENT - highest priority) */}\n                    {fieldCaterpillars\n                      .filter(c => c.fieldIndex === field.id - 1)\n                      .map(caterpillar => (\n                      <CaterpillarHoverPreview\n                        key={`real-caterpillar-${caterpillar.id}`}\n                        caterpillarId={caterpillar.caterpillarId}\n                        caterpillarName={caterpillar.caterpillarName}\n                        caterpillarImageUrl={caterpillar.caterpillarImageUrl}\n                        rarity={caterpillar.caterpillarRarity as RarityTier}\n                      >\n                        <div \n                          className=\"absolute inset-0 flex items-center justify-center cursor-pointer hover:scale-110 transition-transform z-30 animate-fade-in\"\n                          onClick={(e) => {\n                            e.stopPropagation(); // Verhindert Event-Bubbling zum Feld\n                            setIsCollectingCaterpillar(true); // Sofort blockieren\n                            collectCaterpillar(field.id - 1);\n                          }}\n                        >\n                          <RarityImage\n                            src={caterpillar.caterpillarImageUrl}\n                            alt={caterpillar.caterpillarName || \"Raupe\"}\n                            rarity={caterpillar.caterpillarRarity as RarityTier || \"common\"}\n                            size=\"large\"\n                            className=\"w-full h-full field-image\"\n                          />\n                        </div>\n                      </CaterpillarHoverPreview>\n                    ))}\n\n\n                    {/* Field Caterpillar with Bounce Effect - hide during butterfly animation, local caterpillars AND spawned caterpillars */}\n                    {field.hasCaterpillar && field.caterpillarImageUrl && (\n                      <CaterpillarHoverPreview\n                        caterpillarId={field.caterpillarId!}\n                        caterpillarName={field.caterpillarName!}\n                        caterpillarImageUrl={field.caterpillarImageUrl}\n                        rarity={field.caterpillarRarity as RarityTier}\n                      >\n                        <div \n                          className=\"absolute inset-0 flex items-center justify-center cursor-pointer transition-all hover:scale-110 animate-bounce-spawn\"\n                          onClick={(e) => {\n                            e.stopPropagation(); // Verhindert Event-Bubbling zum Feld\n                            setIsCollectingCaterpillar(true); // Sofort blockieren\n                            collectCaterpillar(field.id - 1);\n                          }}\n                          style={{\n                            animation: 'bounce-spawn 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards'\n                          }}\n                        >\n                          <RarityImage\n                            src={field.caterpillarImageUrl}\n                            alt={field.caterpillarName || \"Raupe\"}\n                            rarity={field.caterpillarRarity as RarityTier || \"common\"}\n                            size=\"large\"\n                            className=\"w-full h-full field-image\"\n                          />\n                        </div>\n                      </CaterpillarHoverPreview>\n                    )}\n\n                    {/* Bouquet - disabled in TeichView */}\n                    {false && field.hasBouquet && (\n                      <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                        <RarityImage\n                          src=\"/Blumen/Bouquet.jpg\"\n                          alt={field.bouquetName || \"Bouquet\"}\n                          rarity={field.bouquetRarity as RarityTier || \"common\"}\n                          size=\"small\"\n                          className=\"w-10 h-10\"\n                        />\n                        {field.bouquetExpiresAt && (\n                          <div className=\"absolute -bottom-1 text-xs text-white/80 bg-black/60 px-1 rounded\">\n                            {Math.max(0, Math.ceil((field.bouquetExpiresAt.getTime() - Date.now()) / (1000 * 60)))}m\n                          </div>\n                        )}\n                      </div>\n                    )}\n\n                    {/* Plant/Seed */}\n                    {field.hasPlant && (\n                      <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                        {field.isGrowing ? (\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <div className=\"flex flex-col items-center\">\n                                <RarityImage\n                                  src=\"/Blumen/0.jpg\"\n                                  alt=\"Wachsender Samen\"\n                                  rarity={field.seedRarity as RarityTier || \"common\"}\n                                  size=\"small\"\n                                  className=\"w-8 h-8\"\n                                />\n                                <div className=\"text-xs text-white/80 mt-1 bg-black/60 px-1 rounded flex items-center\">\n                                  <Clock className=\"h-3 w-3 mr-1\" />\n                                  {field.plantedAt && field.growthTimeSeconds && (\n                                    <>\n                                      {(() => {\n                                        const now = Date.now();\n                                        const plantTime = field.plantedAt.getTime();\n                                        const growthMs = field.growthTimeSeconds * 1000;\n                                        const remainingMs = Math.max(0, (plantTime + growthMs) - now);\n                                        return formatTime(Math.ceil(remainingMs / 1000));\n                                      })()}\n                                    </>\n                                  )}\n                                </div>\n                              </div>\n                            </TooltipTrigger>\n                            <TooltipContent>\n                              <p>{field.flowerName || \"Unbekannte Blume\"}</p>\n                              <p className=\"text-sm text-slate-300\">\n                                Wächst noch...\n                              </p>\n                            </TooltipContent>\n                          </Tooltip>\n                        ) : (\n                          <FlowerHoverPreview\n                            flowerId={field.flowerId!}\n                            flowerName={field.flowerName!}\n                            flowerImageUrl={field.flowerImageUrl!}\n                            rarity={field.seedRarity as RarityTier}\n                          >\n                            <div className=\"flex flex-col items-center cursor-pointer hover:scale-110 transition-transform\">\n                              <RarityImage\n                                src={field.flowerImageUrl!}\n                                alt={field.flowerName || \"Blume\"}\n                                rarity={field.seedRarity as RarityTier || \"common\"}\n                                size=\"small\"\n                                className=\"w-10 h-10\"\n                              />\n                              <div className=\"absolute -bottom-2 bg-green-600 text-white text-xs px-2 py-0.5 rounded-full flex items-center animate-bounce\">\n                                <Flower className=\"h-3 w-3 mr-1\" />\n                                +1 Blume!\n                              </div>\n                            </div>\n                          </FlowerHoverPreview>\n                        )}\n                      </div>\n                    )}\n\n\n                    {/* Placed Fish Display */}\n                    {placedFish\n                      .filter(fish => fish.fieldId === field.id)\n                      .map(fish => (\n                        <div\n                          key={fish.id}\n                          className={`absolute inset-0 flex items-center justify-center transition-all duration-500 ${\n                            fish.isShrinkling ? 'animate-pulse opacity-50 scale-75' : 'opacity-100 scale-100'\n                          }`}\n                          style={{\n                            transform: fish.isShrinkling ? 'scale(0.7)' : 'scale(1)',\n                            transition: 'all 0.5s ease-in-out'\n                          }}\n                        >\n                          <FishHoverPreview\n                            fishImageUrl={fish.fishImageUrl}\n                            fishName={fish.fishName}\n                            rarity={fish.fishRarity as RarityTier}\n                          >\n                            <div\n                              className=\"w-8 h-8 rounded-full border-2 cursor-pointer hover:scale-110 transition-transform\"\n                              style={{ borderColor: getFishBorderColor(fish.fishRarity) }}\n                            >\n                              <img\n                                src={fish.fishImageUrl}\n                                alt={fish.fishName}\n                                className=\"w-full h-full object-cover rounded-full\"\n                                onError={(e) => {\n                                  e.currentTarget.style.display = 'none';\n                                  e.currentTarget.nextElementSibling!.style.display = 'block';\n                                }}\n                              />\n                              <div\n                                className=\"w-full h-full bg-blue-500 rounded-full flex items-center justify-center\"\n                                style={{ display: 'none' }}\n                              >\n                                🐟\n                              </div>\n                            </div>\n                          </FishHoverPreview>\n                        </div>\n                      ))}\n\n                    {/* Field Fish - Spawned from feeding (bouncing animation) */}\n                    {field.hasFish && (\n                      <div \n                        className={`absolute inset-0 flex items-center justify-center cursor-pointer group z-30 ${\n                          collectingFish.has(field.id) \n                            ? 'opacity-0 scale-50 transition-all duration-300' \n                            : 'animate-bounce opacity-100 scale-100'\n                        }`}\n                        onClick={(e) => {\n                          e.stopPropagation(); // Prevent field click handler from also firing\n                          if (!collectingFish.has(field.id)) {\n                            collectFish(field.id);\n                          }\n                        }}\n                      >\n                        <div className={`relative transform transition-transform duration-200 ${\n                          collectingFish.has(field.id) ? '' : 'group-hover:scale-110'\n                        }`}>\n                          <RarityImage \n                            src={field.fishImageUrl!}\n                            alt={field.fishName || \"Fisch\"}\n                            rarity={field.fishRarity as RarityTier || \"common\"}\n                            size=\"large\"\n                            className=\"w-full h-full\"\n                          />\n                          <div className={`absolute -top-1 -right-1 bg-cyan-400 text-white text-xs px-1 py-0.5 rounded-full flex items-center transition-opacity duration-300 ${\n                            collectingFish.has(field.id) ? 'opacity-0' : 'animate-pulse opacity-100'\n                          }`}>\n                            🐟\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Field Caterpillars - Spawned from butterflies (full field size) */}\n                    {field.hasCaterpillar && (\n                      <div \n                        className=\"absolute inset-0 flex items-center justify-center cursor-pointer group animate-pulse z-30\"\n                        onClick={() => handleCaterpillarClick(field)}\n                      >\n                        <CaterpillarHoverPreview\n                          caterpillarImageUrl={field.caterpillarImageUrl!}\n                          caterpillarName={field.caterpillarName!}\n                          rarity={field.caterpillarRarity as RarityTier}\n                          className=\"z-10\"\n                        >\n                          <div className=\"relative transform group-hover:scale-110 transition-transform duration-200\">\n                            <RarityImage \n                              src={field.caterpillarImageUrl!}\n                              alt={field.caterpillarName || \"Raupe\"}\n                              rarity={field.caterpillarRarity as RarityTier || \"common\"}\n                              size=\"large\"\n                              className=\"w-full h-full\"\n                            />\n                            <div className=\"absolute -top-1 -right-1 bg-green-400 text-white text-xs px-1 py-0.5 rounded-full flex items-center animate-bounce\">\n                              🐛\n                            </div>\n                          </div>\n                        </CaterpillarHoverPreview>\n                      </div>\n                    )}\n\n                    {/* Pond Feeding Progress Icons - Show fish symbols for feeding progress */}\n                    {field.isPond && field.feedingProgress && field.feedingProgress > 0 && field.feedingProgress < 3 && (\n                      <div className=\"absolute inset-0 flex items-center justify-center z-20 pointer-events-none\">\n                        {field.feedingProgress === 1 && (\n                          <div className=\"text-6xl animate-pulse drop-shadow-lg filter drop-shadow-[0_2px_8px_rgba(59,130,246,0.5)]\">🐟</div>\n                        )}\n                        {field.feedingProgress === 2 && (\n                          <div className=\"text-6xl animate-bounce drop-shadow-lg filter drop-shadow-[0_2px_8px_rgba(34,197,94,0.5)]\">🐠</div>\n                        )}\n                      </div>\n                    )}\n\n                    {/* Optimized pond field hover with performance and centering fixes */}\n                    {field.isPond && user && (\n                      <PondFieldHover \n                        fieldId={field.id}\n                        feedingProgress={field.feedingProgress}\n                        userId={user.id}\n                      />\n                    )}\n\n\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          </CardContent>\n        </Card>\n\n        {/* Modals */}\n        <SeedSelectionModal\n          isOpen={showSeedModal}\n          onClose={() => {\n            setShowSeedModal(false);\n            setSelectedField(null);\n          }}\n          seeds={userSeeds || []}\n          onSelectSeed={plantSeed}\n          fieldIndex={selectedField || 0}\n        />\n\n        <BouquetSelectionModal\n          isOpen={showBouquetModal}\n          onClose={() => {\n            setShowBouquetModal(false);\n            setSelectedField(null);\n          }}\n          userBouquets={userBouquets || []}\n          onPlaceBouquet={placeBouquet}\n          fieldIndex={selectedField || 0}\n        />\n\n        {/* Butterfly Selection Modal - DISABLED für direkte Platzierung */}\n        <ButterflySelectionModal\n          isOpen={showButterflyModal}\n          onClose={() => {\n            setShowButterflyModal(false);\n            setSelectedField(null);\n          }}\n          userButterflies={userButterflies}\n          onSelectButterfly={placeButterflyOnField}\n          fieldIndex={selectedField || 0}\n        />\n\n        <FlowerSelectionModal\n          isOpen={showFlowerModal}\n          onClose={() => {\n            setShowFlowerModal(false);\n            setSelectedField(null);\n          }}\n          userFlowers={userFlowers}\n          onSelectFlower={placeFlowerOnField}\n          fieldIndex={selectedField || 0}\n        />\n\n        {/* Fish Selection Modal */}\n        <FishSelectionModal\n          isOpen={showFishModal}\n          onClose={() => {\n            setShowFishModal(false);\n            setSelectedField(null);\n          }}\n          onFishSelected={handleFishSelection}\n        />\n\n        {/* Feeding Dialog */}\n        <FeedingDialog\n          isOpen={showFeedingDialog}\n          onClose={() => {\n            setShowFeedingDialog(false);\n            setSelectedField(null);\n          }}\n          caterpillars={userCaterpillars}\n          onFeedCaterpillar={onFeedCaterpillar}\n          fieldIndex={(selectedField || 1) - 1}\n        />\n\n        {/* Caterpillar Selection Modal removed - they spawn automatically */}\n\n        {/* Fish Reward Dialog */}\n        <FishRewardDialog\n          isOpen={isFishRewardDialogOpen}\n          onClose={() => setIsFishRewardDialogOpen(false)}\n          fishName={fishRewardData?.fishName || \"\"}\n          fishImageUrl={fishRewardData?.fishImageUrl || \"\"}\n          rarity={fishRewardData?.rarity || \"common\"}\n        />\n      </TooltipProvider>\n    </div>\n  );\n};","size_bytes":80442},"client/src/components/ButterflySelectionModal.tsx":{"content":"import React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';\nimport { Button } from './ui/button';\nimport { ScrollArea } from './ui/scroll-area';\nimport { getRarityColor, getRarityDisplayName } from \"@shared/rarity\";\nimport { RarityImage } from './RarityImage';\nimport { Sparkles } from 'lucide-react';\n\ninterface ButterflySelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  userButterflies: any[];\n  onSelectButterfly: (butterflyId: number) => void;\n  fieldIndex: number;\n}\n\nexport const ButterflySelectionModal: React.FC<ButterflySelectionModalProps> = ({\n  isOpen,\n  onClose,\n  userButterflies,\n  onSelectButterfly,\n  fieldIndex\n}) => {\n  // Filter out butterflies with quantity 0\n  const availableButterflies = userButterflies.filter(butterfly => butterfly.quantity > 0);\n\n  const handleSelectButterfly = (butterflyId: number) => {\n    onSelectButterfly(butterflyId);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px] max-h-[80vh] bg-slate-900 border-slate-700\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white flex items-center gap-2\">\n            <Sparkles className=\"h-5 w-5 text-yellow-500\" />\n            Schmetterling platzieren - Feld {fieldIndex}\n          </DialogTitle>\n        </DialogHeader>\n\n        <ScrollArea className=\"max-h-[60vh]\">\n          <div className=\"space-y-3 p-1\">\n            {availableButterflies.length === 0 ? (\n              <div className=\"text-center text-slate-400 py-8\">\n                <Sparkles className=\"h-12 w-12 mx-auto mb-4 text-slate-500\" />\n                <p>Keine Schmetterlinge im Inventar</p>\n                <p className=\"text-sm mt-2\">Besuche die Blumen-Ansicht um Schmetterlinge zu sammeln!</p>\n              </div>\n            ) : (\n              availableButterflies.map((butterfly) => (\n                <Button\n                  key={butterfly.id}\n                  onClick={() => handleSelectButterfly(butterfly.id)}\n                  className=\"w-full h-auto p-4 bg-slate-800 hover:bg-slate-700 border border-slate-600 text-left\"\n                  variant=\"ghost\"\n                >\n                  <div className=\"flex items-center space-x-4 w-full\">\n                    <div className=\"relative\">\n                      <RarityImage\n                        src={butterfly.butterflyImageUrl}\n                        alt={butterfly.butterflyName}\n                        rarity={butterfly.butterflyRarity}\n                        size=\"medium\"\n                        className=\"w-14 h-14 rounded-lg\"\n                      />\n                    </div>\n                    \n                    <div className=\"flex-1 text-left\">\n                      <h4 className=\"font-semibold text-white text-base mb-1\">\n                        {butterfly.butterflyName}\n                      </h4>\n                      <p className={`text-sm font-medium ${getRarityColor(butterfly.butterflyRarity)}`}>\n                        {getRarityDisplayName(butterfly.butterflyRarity)}\n                      </p>\n                      <div className=\"flex items-center gap-2 mt-2\">\n                        <span className=\"bg-green-600 text-white text-xs px-2 py-1 rounded font-bold\">\n                          x{butterfly.quantity}\n                        </span>\n                        <span className=\"text-xs text-slate-400\">verfügbar</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <div className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm font-medium\">\n                        Platzieren\n                      </div>\n                    </div>\n                  </div>\n                </Button>\n              ))\n            )}\n          </div>\n        </ScrollArea>\n        \n        <div className=\"flex justify-end pt-4\">\n          <Button\n            onClick={onClose}\n            variant=\"outline\"\n            className=\"border-slate-600 text-slate-300 hover:text-white hover:border-slate-500\"\n          >\n            Abbrechen\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":4252},"server/creatures.ts":{"content":"import { RarityTier } from \"@shared/rarity\";\n\n// Fish Data Interface\nexport interface FishData {\n  id: number;\n  name: string;\n  imageUrl: string;\n}\n\n// Caterpillar Data Interface  \nexport interface CaterpillarData {\n  id: number;\n  name: string;\n  imageUrl: string;\n}\n\n// ==================== FISH SYSTEM ====================\n\n// Generate all available fish IDs dynamically from Fische folder\nasync function generateAvailableFishIds(): Promise<number[]> {\n  try {\n    const fs = await import('fs/promises');\n    const path = await import('path');\n    \n    const fishDir = path.join(process.cwd(), 'client/public/Fische');\n    const files = await fs.readdir(fishDir);\n    \n    // Extract fish numbers from xxx.jpg files\n    const ids: number[] = [];\n    files.forEach(file => {\n      const match = file.match(/^(\\d+)\\.jpg$/i);\n      if (match) {\n        const id = parseInt(match[1]);\n        if (!isNaN(id)) {\n          ids.push(id);\n        }\n      }\n    });\n    \n    // Sort IDs numerically\n    const sortedIds = ids.sort((a, b) => a - b);\n    console.log(`🐟 Found ${sortedIds.length} fish images: ${Math.min(...sortedIds)}-${Math.max(...sortedIds)}`);\n    \n    return sortedIds.length > 0 ? sortedIds : [1]; // Fallback to just 1 if none found\n  } catch (error) {\n    console.error('🐟 Error reading Fische directory:', error);\n    // Fallback to original range if scanning fails\n    const ids: number[] = [];\n    for (let i = 1; i <= 15; i++) {\n      ids.push(i);\n    }\n    return ids;\n  }\n}\n\n// Initialize available fish IDs\nlet AVAILABLE_FISH_IDS: number[] = [];\nlet TOTAL_FISH = 15; // Default, will be updated\n\n// Get proper filename for fish ID\nfunction getFishImageFilename(id: number): string {\n  return `${id}.jpg`;\n}\n\n// Base rarity distribution for fish (same percentages as butterflies)\nconst FISH_RARITY_DISTRIBUTION_PERCENT = {\n  common: 0.443,      // 44.3%\n  uncommon: 0.30,     // 30.0%\n  rare: 0.122,        // 12.2%\n  'super-rare': 0.078, // 7.8%\n  epic: 0.047,        // 4.7%\n  legendary: 0.026,   // 2.6%\n  mythical: 0.013     // 1.3%\n};\n\n// Dynamic fish rarity distribution\nlet FISH_RARITY_DISTRIBUTION = {};\n\n// Create randomized rarity assignments for each fish ID\nexport const FISH_RARITY_MAP = new Map<number, RarityTier>();\n\n// Fisher-Yates shuffle algorithm\nfunction shuffleArray<T>(array: T[]): T[] {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}\n\n// Initialize fish rarity assignments\nasync function initializeFishRarities(): Promise<void> {\n  // Get available fish IDs\n  AVAILABLE_FISH_IDS = await generateAvailableFishIds();\n  TOTAL_FISH = AVAILABLE_FISH_IDS.length;\n  \n  // Calculate rarity distribution based on total fish\n  FISH_RARITY_DISTRIBUTION = {\n    common: Math.floor(TOTAL_FISH * FISH_RARITY_DISTRIBUTION_PERCENT.common),\n    uncommon: Math.floor(TOTAL_FISH * FISH_RARITY_DISTRIBUTION_PERCENT.uncommon),\n    rare: Math.floor(TOTAL_FISH * FISH_RARITY_DISTRIBUTION_PERCENT.rare),\n    'super-rare': Math.floor(TOTAL_FISH * FISH_RARITY_DISTRIBUTION_PERCENT['super-rare']),\n    epic: Math.floor(TOTAL_FISH * FISH_RARITY_DISTRIBUTION_PERCENT.epic),\n    legendary: Math.floor(TOTAL_FISH * FISH_RARITY_DISTRIBUTION_PERCENT.legendary),\n    mythical: Math.floor(TOTAL_FISH * FISH_RARITY_DISTRIBUTION_PERCENT.mythical)\n  };\n  \n  // Ensure we use all fish by adjusting the common tier\n  const totalAssigned = Object.values(FISH_RARITY_DISTRIBUTION).reduce((sum: number, count) => sum + (count as number), 0);\n  (FISH_RARITY_DISTRIBUTION as any).common += (TOTAL_FISH - totalAssigned);\n  \n  // Create rarity assignments\n  const rarities: RarityTier[] = [];\n  (Object.entries(FISH_RARITY_DISTRIBUTION) as [RarityTier, number][]).forEach(([rarity, count]) => {\n    for (let i = 0; i < count; i++) {\n      rarities.push(rarity);\n    }\n  });\n  \n  // Shuffle rarities for randomness\n  const shuffledRarities = shuffleArray(rarities);\n  \n  // Assign rarities to fish IDs\n  AVAILABLE_FISH_IDS.forEach((fishId, index) => {\n    FISH_RARITY_MAP.set(fishId, shuffledRarities[index] || 'common');\n  });\n  \n  // Debug logging für Fish Rarity-Verteilung\n  const fishRarityCounts: Record<string, number> = {};\n  FISH_RARITY_MAP.forEach(rarity => {\n    fishRarityCounts[rarity] = (fishRarityCounts[rarity] || 0) + 1;\n  });\n  \n  console.log(`🐟 Initialized fish system with ${TOTAL_FISH} fish`);\n  console.log(`🐟 Fish rarity distribution:`, fishRarityCounts);\n}\n\n// Generate random fish of specific rarity\nexport async function generateRandomFish(rarity: RarityTier): Promise<FishData> {\n  console.log(`🐟 DEBUG: Generating fish with rarity: ${rarity}`);\n  console.log(`🐟 DEBUG: Available fish IDs:`, AVAILABLE_FISH_IDS.slice(0, 10), `(total: ${AVAILABLE_FISH_IDS.length})`);\n  console.log(`🐟 DEBUG: Fish rarity map size:`, FISH_RARITY_MAP.size);\n  \n  // Get all fish IDs that match the requested rarity\n  const matchingIds = Array.from(FISH_RARITY_MAP.entries())\n    .filter(([id, assignedRarity]) => assignedRarity === rarity)\n    .map(([id]) => id);\n  \n  console.log(`🐟 DEBUG: Matching IDs for ${rarity}:`, matchingIds.slice(0, 5), `(total: ${matchingIds.length})`);\n  \n  // If no fish of this rarity, fall back to any available ID\n  const availableIds = matchingIds.length > 0 ? matchingIds : AVAILABLE_FISH_IDS;\n  console.log(`🐟 DEBUG: Using ${availableIds.length} available IDs`);\n  \n  if (availableIds.length === 0) {\n    console.error('🐟 ERROR: No available fish IDs found!');\n    // Emergency fallback - create a default fish\n    return {\n      id: 0,\n      name: 'Notfall-Fisch',\n      imageUrl: '/Fische/0.jpg'\n    };\n  }\n  \n  const fishId = availableIds[Math.floor(Math.random() * availableIds.length)];\n  console.log(`🐟 DEBUG: Selected fishId: ${fishId}`);\n  \n  // Generate consistent Latin name using fishId as seed\n  const { generateLatinFishName } = await import('../shared/rarity');\n  const name = generateLatinFishName(fishId);\n  console.log(`🐟 DEBUG: Generated name: ${name}`);\n\n  const fishData = {\n    id: fishId,\n    name,\n    imageUrl: `/Fische/${getFishImageFilename(fishId)}`\n  };\n  \n  console.log(`🐟 DEBUG: Final fish data:`, fishData);\n  return fishData;\n}\n\n// Generate random fish using proper distribution\nexport async function generateRandomFishByDistribution(rarity: RarityTier): Promise<FishData> {\n  return generateRandomFish(rarity);\n}\n\n// Get random rarity based on distribution\nexport function getRandomRarity(): RarityTier {\n  const random = Math.random();\n  let cumulativeWeight = 0;\n  \n  for (const [rarity, percentage] of Object.entries(FISH_RARITY_DISTRIBUTION_PERCENT) as [RarityTier, number][]) {\n    cumulativeWeight += percentage;\n    if (random <= cumulativeWeight) {\n      return rarity;\n    }\n  }\n  \n  return 'common'; // Fallback\n}\n\n// ==================== CATERPILLAR SYSTEM ====================\n\n// Generate all available caterpillar IDs dynamically from Raupen folder\nasync function generateAvailableCaterpillarIds(): Promise<number[]> {\n  try {\n    const fs = await import('fs/promises');\n    const path = await import('path');\n    \n    const caterpillarDir = path.join(process.cwd(), 'client/public/Raupen');\n    const files = await fs.readdir(caterpillarDir);\n    \n    // Extract caterpillar numbers from xxx.jpg files (not png!)\n    const ids: number[] = [];\n    files.forEach(file => {\n      const match = file.match(/^(\\d+)\\.jpg$/i);\n      if (match) {\n        const id = parseInt(match[1]);\n        if (!isNaN(id)) {\n          ids.push(id);\n        }\n      }\n    });\n    \n    // Sort IDs numerically\n    const sortedIds = ids.sort((a, b) => a - b);\n    console.log(`🐛 Found ${sortedIds.length} caterpillar images: ${Math.min(...sortedIds)}-${Math.max(...sortedIds)}`);\n    \n    return sortedIds.length > 0 ? sortedIds : [1]; // Fallback to just 1 if none found\n  } catch (error) {\n    console.error('🐛 Error reading Raupen directory:', error);\n    // Fallback to original range if scanning fails\n    const ids: number[] = [];\n    for (let i = 1; i <= 20; i++) {\n      ids.push(i);\n    }\n    return ids;\n  }\n}\n\n// Initialize available caterpillar IDs\nlet AVAILABLE_CATERPILLAR_IDS: number[] = [];\nlet TOTAL_CATERPILLARS = 20; // Default, will be updated\n\n// Get proper filename for caterpillar ID\nfunction getCaterpillarImageFilename(id: number): string {\n  return `${id}.jpg`;\n}\n\n// Dynamic caterpillar rarity distribution (same percentages)\nlet CATERPILLAR_RARITY_DISTRIBUTION = {};\n\n// Create randomized rarity assignments for each caterpillar ID\nexport const CATERPILLAR_RARITY_MAP = new Map<number, RarityTier>();\n\n// Initialize caterpillar rarity assignments\nasync function initializeCaterpillarRarities(): Promise<void> {\n  // Get available caterpillar IDs\n  AVAILABLE_CATERPILLAR_IDS = await generateAvailableCaterpillarIds();\n  TOTAL_CATERPILLARS = AVAILABLE_CATERPILLAR_IDS.length;\n  \n  // Calculate rarity distribution based on total caterpillars\n  CATERPILLAR_RARITY_DISTRIBUTION = {\n    common: Math.floor(TOTAL_CATERPILLARS * FISH_RARITY_DISTRIBUTION_PERCENT.common),\n    uncommon: Math.floor(TOTAL_CATERPILLARS * FISH_RARITY_DISTRIBUTION_PERCENT.uncommon),\n    rare: Math.floor(TOTAL_CATERPILLARS * FISH_RARITY_DISTRIBUTION_PERCENT.rare),\n    'super-rare': Math.floor(TOTAL_CATERPILLARS * FISH_RARITY_DISTRIBUTION_PERCENT['super-rare']),\n    epic: Math.floor(TOTAL_CATERPILLARS * FISH_RARITY_DISTRIBUTION_PERCENT.epic),\n    legendary: Math.floor(TOTAL_CATERPILLARS * FISH_RARITY_DISTRIBUTION_PERCENT.legendary),\n    mythical: Math.floor(TOTAL_CATERPILLARS * FISH_RARITY_DISTRIBUTION_PERCENT.mythical)\n  };\n  \n  // Ensure we use all caterpillars by adjusting the common tier\n  const totalAssigned = Object.values(CATERPILLAR_RARITY_DISTRIBUTION).reduce((sum: number, count) => sum + (count as number), 0);\n  (CATERPILLAR_RARITY_DISTRIBUTION as any).common += (TOTAL_CATERPILLARS - totalAssigned);\n  \n  // Create rarity assignments\n  const rarities: RarityTier[] = [];\n  (Object.entries(CATERPILLAR_RARITY_DISTRIBUTION) as [RarityTier, number][]).forEach(([rarity, count]) => {\n    for (let i = 0; i < count; i++) {\n      rarities.push(rarity);\n    }\n  });\n  \n  // Shuffle rarities for randomness\n  const shuffledRarities = shuffleArray(rarities);\n  \n  // Assign rarities to caterpillar IDs\n  AVAILABLE_CATERPILLAR_IDS.forEach((caterpillarId, index) => {\n    CATERPILLAR_RARITY_MAP.set(caterpillarId, shuffledRarities[index] || 'common');\n  });\n  \n  // Debug logging für Rarity-Verteilung\n  const rarityCounts: Record<string, number> = {};\n  CATERPILLAR_RARITY_MAP.forEach(rarity => {\n    rarityCounts[rarity] = (rarityCounts[rarity] || 0) + 1;\n  });\n  \n  console.log(`🐛 Initialized caterpillar system with ${TOTAL_CATERPILLARS} caterpillars`);\n  console.log(`🐛 Caterpillar rarity distribution:`, rarityCounts);\n}\n\n// Generate random caterpillar of specific rarity\nexport async function generateRandomCaterpillar(rarity: RarityTier): Promise<CaterpillarData> {\n  // Get all caterpillar IDs that match the requested rarity\n  const matchingIds = Array.from(CATERPILLAR_RARITY_MAP.entries())\n    .filter(([id, assignedRarity]) => assignedRarity === rarity)\n    .map(([id]) => id);\n  \n  // If no caterpillars of this rarity, fall back to any available ID\n  const availableIds = matchingIds.length > 0 ? matchingIds : AVAILABLE_CATERPILLAR_IDS;\n  const caterpillarId = availableIds[Math.floor(Math.random() * availableIds.length)];\n  \n  // Generate consistent Latin name using caterpillarId as seed\n  const { generateLatinCaterpillarName } = await import('../shared/rarity');\n  const name = generateLatinCaterpillarName(caterpillarId);\n\n  return {\n    id: caterpillarId,\n    name,\n    imageUrl: `/Raupen/${getCaterpillarImageFilename(caterpillarId)}`\n  };\n}\n\n// ==================== INITIALIZATION ====================\n\n// Initialize both systems\n// ==================== FLOWER SYSTEM ====================\n\n// Initialize available flower IDs\nlet AVAILABLE_FLOWER_IDS: number[] = [];\nlet TOTAL_FLOWERS = 200; // Default, will be updated\n\n// Get proper filename for flower ID\nfunction getFlowerImageFilename(id: number): string {\n  return `${id}.jpg`;\n}\n\n// Base rarity distribution for flowers (same percentages as fish/caterpillars)\nconst FLOWER_RARITY_DISTRIBUTION_PERCENT = {\n  common: 0.275,       // 27.5% (55/200)\n  uncommon: 0.225,     // 22.5% (45/200)\n  rare: 0.175,         // 17.5% (35/200)\n  'super-rare': 0.125, // 12.5% (25/200)\n  epic: 0.10,          // 10.0% (20/200)\n  legendary: 0.075,    // 7.5%  (15/200)\n  mythical: 0.025      // 2.5%  (5/200)\n};\n\n// Dynamic flower rarity distribution\nlet FLOWER_RARITY_DISTRIBUTION = {};\n\n// Create randomized rarity assignments for each flower ID\nexport const FLOWER_RARITY_MAP = new Map<number, RarityTier>();\n\n// Store original flower rarities (1-200) to preserve existing assignments\nlet ORIGINAL_FLOWER_RARITIES: Map<number, RarityTier> | null = null;\n\n// Generate all available flower IDs dynamically from Blumen folder\nasync function generateAvailableFlowerIds(): Promise<number[]> {\n  try {\n    const fs = await import('fs/promises');\n    const path = await import('path');\n    \n    const flowerDir = path.join(process.cwd(), 'client/public/Blumen');\n    const files = await fs.readdir(flowerDir);\n    \n    // Extract flower numbers from xxx.jpg files\n    const ids: number[] = [];\n    files.forEach(file => {\n      const match = file.match(/^(\\d+)\\.jpg$/i);\n      if (match) {\n        const id = parseInt(match[1]);\n        if (!isNaN(id)) {\n          ids.push(id);\n        }\n      }\n    });\n    \n    // Sort IDs numerically\n    const sortedIds = ids.sort((a, b) => a - b);\n    console.log(`🌸 Found ${sortedIds.length} flower images: ${Math.min(...sortedIds)}-${Math.max(...sortedIds)}`);\n    \n    return sortedIds.length > 0 ? sortedIds : [1]; // Fallback to just 1 if none found\n  } catch (error) {\n    console.error('🌸 Error reading Blumen directory:', error);\n    // Fallback to original range from RARITY_CONFIG if scanning fails\n    const ids: number[] = [];\n    for (let i = 1; i <= 200; i++) {\n      ids.push(i);\n    }\n    return ids;\n  }\n}\n\n// Initialize flower rarity assignments\nasync function initializeFlowerRarities(): Promise<void> {\n  try {\n    // Get available flower IDs\n    AVAILABLE_FLOWER_IDS = await generateAvailableFlowerIds();\n    TOTAL_FLOWERS = AVAILABLE_FLOWER_IDS.length;\n    \n    // Preserve original rarities for existing flowers (1-200) from RARITY_CONFIG\n    if (!ORIGINAL_FLOWER_RARITIES) {\n      ORIGINAL_FLOWER_RARITIES = new Map();\n      \n      // Import RARITY_CONFIG to get original flower rarities\n      const { RARITY_CONFIG } = await import('../shared/rarity');\n      \n      // Create original rarity assignments for flowers 1-200 based on RARITY_CONFIG\n      for (let flowerId = 1; flowerId <= 200; flowerId++) {\n        if (AVAILABLE_FLOWER_IDS.includes(flowerId)) {\n          let rarity: RarityTier = 'common'; // Default fallback\n          \n          // Determine rarity based on RARITY_CONFIG ranges\n          if (flowerId >= 1 && flowerId <= 55) {\n            rarity = 'common';\n          } else if (flowerId >= 56 && flowerId <= 100) {\n            rarity = 'uncommon';\n          } else if (flowerId >= 101 && flowerId <= 135) {\n            rarity = 'rare';\n          } else if (flowerId >= 136 && flowerId <= 160) {\n            rarity = 'super-rare';\n          } else if (flowerId >= 161 && flowerId <= 180) {\n            rarity = 'epic';\n          } else if (flowerId >= 181 && flowerId <= 195) {\n            rarity = 'legendary';\n          } else if (flowerId >= 196 && flowerId <= 200) {\n            rarity = 'mythical';\n          }\n          \n          ORIGINAL_FLOWER_RARITIES.set(flowerId, rarity);\n        }\n      }\n    }\n    \n    // Clear and rebuild flower rarity map\n    FLOWER_RARITY_MAP.clear();\n    \n    // First, add all preserved original rarities\n    for (const [id, rarity] of ORIGINAL_FLOWER_RARITIES) {\n      if (AVAILABLE_FLOWER_IDS.includes(id)) {\n        FLOWER_RARITY_MAP.set(id, rarity);\n      }\n    }\n    \n    // Find new flowers (201+) that need rarity assignment\n    const newFlowerIds = AVAILABLE_FLOWER_IDS.filter(id => id > 200);\n    \n    if (newFlowerIds.length > 0) {\n      // Assign rarities to new flowers using distribution percentages\n      const newRarityAssignments: RarityTier[] = [];\n      \n      for (const [rarity, percentage] of Object.entries(FLOWER_RARITY_DISTRIBUTION_PERCENT) as [RarityTier, number][]) {\n        const count = Math.floor(newFlowerIds.length * percentage);\n        for (let i = 0; i < count; i++) {\n          newRarityAssignments.push(rarity);\n        }\n      }\n      \n      // Fill remaining slots with common rarity\n      while (newRarityAssignments.length < newFlowerIds.length) {\n        newRarityAssignments.push('common');\n      }\n      \n      // Shuffle assignments for randomness\n      const shuffledNewRarities = shuffleArray(newRarityAssignments);\n      \n      // Assign rarities to new flower IDs\n      newFlowerIds.forEach((flowerId, index) => {\n        FLOWER_RARITY_MAP.set(flowerId, shuffledNewRarities[index] || 'common');\n      });\n      \n      console.log(`🌸 Assigned rarities to ${newFlowerIds.length} new flowers (201+)`);\n    }\n    \n    // Debug logging für Flower Rarity-Verteilung\n  const flowerRarityCounts: Record<string, number> = {};\n  FLOWER_RARITY_MAP.forEach(rarity => {\n    flowerRarityCounts[rarity] = (flowerRarityCounts[rarity] || 0) + 1;\n  });\n  \n  console.log(`🌸 Initialized flower system with ${TOTAL_FLOWERS} flowers`);\n  console.log(`🌸 Flower rarity distribution:`, flowerRarityCounts);\n  } catch (error) {\n    console.error('🌸 Error initializing flower rarities:', error);\n    \n    // Fallback: assign common rarity to all available flowers\n    for (const flowerId of AVAILABLE_FLOWER_IDS) {\n      FLOWER_RARITY_MAP.set(flowerId, 'common');\n    }\n  }\n}\n\nexport async function initializeCreatureSystems(): Promise<void> {\n  await Promise.all([\n    initializeFishRarities(),\n    initializeCaterpillarRarities(),\n    initializeFlowerRarities()\n  ]);\n  console.log(`🌊 Creature systems initialized: ${TOTAL_FISH} fish, ${TOTAL_CATERPILLARS} caterpillars, ${TOTAL_FLOWERS} flowers`);\n}\n\n// Get fish rarity for specific fish ID\nexport function getFishRarity(fishId: number): RarityTier {\n  return FISH_RARITY_MAP.get(fishId) || 'common';\n}\n\n// Get caterpillar rarity for specific caterpillar ID  \nexport function getCaterpillarRarity(caterpillarId: number): RarityTier {\n  return CATERPILLAR_RARITY_MAP.get(caterpillarId) || 'common';\n}\n\n// Export available IDs for external use\nexport function getAvailableFishIds(): number[] {\n  return [...AVAILABLE_FISH_IDS];\n}\n\nexport function getAvailableCaterpillarIds(): number[] {\n  return [...AVAILABLE_CATERPILLAR_IDS];\n}\n\n// Generate random flower of specific rarity\nexport async function generateRandomFlower(rarity: RarityTier): Promise<FlowerData> {\n  // Get all flower IDs that match the requested rarity\n  const matchingIds = Array.from(FLOWER_RARITY_MAP.entries())\n    .filter(([id, assignedRarity]) => assignedRarity === rarity)\n    .map(([id]) => id);\n  \n  // If no flowers of this rarity, fall back to any available ID\n  const availableIds = matchingIds.length > 0 ? matchingIds : AVAILABLE_FLOWER_IDS;\n  const flowerId = availableIds[Math.floor(Math.random() * availableIds.length)];\n  \n  // Generate consistent Latin name using flowerId as seed\n  const { generateLatinFlowerName } = await import('../shared/rarity');\n  const name = generateLatinFlowerName(flowerId);\n\n  return {\n    id: flowerId,\n    name,\n    imageUrl: `/Blumen/${getFlowerImageFilename(flowerId)}`\n  };\n}\n\n// Get flower rarity for specific flower ID\nexport function getFlowerRarity(flowerId: number): RarityTier {\n  return FLOWER_RARITY_MAP.get(flowerId) || 'common';\n}\n\n// Export available flower IDs for external use\nexport function getAvailableFlowerIds(): number[] {\n  return [...AVAILABLE_FLOWER_IDS];\n}\n\n// FlowerData interface to match other creature interfaces\ninterface FlowerData {\n  id: number;\n  name: string;\n  imageUrl: string;\n}","size_bytes":20205},"client/src/components/CaterpillarHoverPreview.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\nimport { Bug } from \"lucide-react\";\n\ninterface CaterpillarHoverPreviewProps {\n  caterpillarImageUrl: string;\n  caterpillarName: string;\n  rarity: RarityTier;\n  children: React.ReactNode;\n}\n\nexport const CaterpillarHoverPreview: React.FC<CaterpillarHoverPreviewProps> = ({\n  caterpillarImageUrl,\n  caterpillarName,\n  rarity,\n  children\n}) => {\n  const [isHovering, setIsHovering] = useState(false);\n  const [imageError, setImageError] = useState(false);\n  const [currentSrc, setCurrentSrc] = useState(caterpillarImageUrl);\n  const [dialogPosition, setDialogPosition] = useState({ x: 0, y: 0 });\n\n  // Reset state when caterpillarImageUrl prop changes\n  useEffect(() => {\n    setCurrentSrc(caterpillarImageUrl);\n    setImageError(false);\n  }, [caterpillarImageUrl]);\n\n  const handleMouseEnter = (e: React.MouseEvent) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const dialogWidth = 280; // Dialog width + padding\n    const dialogHeight = 320; // Dialog height + padding\n    const margin = 8; // Margin from element\n    \n    // Get viewport dimensions\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n    \n    // Calculate horizontal position\n    let x = rect.right + margin; // Default: right of element\n    if (x + dialogWidth > viewportWidth) {\n      // Not enough space on right, position on left\n      x = rect.left - dialogWidth - margin;\n      if (x < 0) {\n        // Not enough space on left either, center it\n        x = Math.max(margin, (viewportWidth - dialogWidth) / 2);\n      }\n    }\n    \n    // Calculate vertical position\n    let y = rect.top; // Default: aligned with top of element\n    if (y + dialogHeight > viewportHeight) {\n      // Not enough space below, position above\n      y = rect.bottom - dialogHeight;\n      if (y < 0) {\n        // Not enough space above either, center vertically\n        y = Math.max(margin, (viewportHeight - dialogHeight) / 2);\n      }\n    }\n    \n    setDialogPosition({ x, y });\n    setIsHovering(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovering(false);\n  };\n\n  return (\n    <div\n      className=\"relative\"\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      {children}\n      \n      {isHovering && (\n        <div \n          className=\"fixed z-[999999] pointer-events-none\" \n          style={{ \n            left: `${dialogPosition.x}px`,\n            top: `${dialogPosition.y}px`,\n            isolation: 'isolate' \n          }}\n        >\n          <div className=\"bg-slate-900 border-2 border-slate-600 rounded-lg p-3 shadow-2xl\">\n            <div className=\"w-64 h-64 rounded-lg overflow-hidden mb-2 bg-slate-800 flex items-center justify-center\">\n              {!imageError ? (\n                <img\n                  src={currentSrc}\n                  alt={caterpillarName}\n                  className=\"w-full h-full object-cover\"\n                  onError={() => {\n                    // For caterpillars, try fallback to 0.jpg before showing icon\n                    if (currentSrc.includes('Raupen') && !currentSrc.includes('0.jpg')) {\n                      setCurrentSrc('/Raupen/0.jpg');\n                    } else {\n                      setImageError(true);\n                    }\n                  }}\n                />\n              ) : (\n                <Bug className=\"w-24 h-24 text-green-400\" />\n              )}\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-bold text-white text-lg mb-1\">{caterpillarName}</div>\n              <div className={`text-sm ${getRarityColor(rarity as RarityTier)}`}>\n                🐛 {getRarityDisplayName(rarity as RarityTier)} Raupe\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","size_bytes":3932},"client/src/components/CaterpillarSelectionModal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { CaterpillarHoverPreview } from \"./CaterpillarHoverPreview\";\nimport { RarityImage } from \"./RarityImage\";\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\nimport type { UserCaterpillar } from \"@shared/schema\";\n\ninterface CaterpillarSelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCaterpillarSelected: (caterpillarId: number, caterpillarImageUrl: string, caterpillarName: string, rarity: RarityTier) => void;\n}\n\nexport const CaterpillarSelectionModal: React.FC<CaterpillarSelectionModalProps> = ({\n  isOpen,\n  onClose,\n  onCaterpillarSelected\n}) => {\n  const { user } = useAuth();\n  const [myCaterpillars, setMyCaterpillars] = useState<UserCaterpillar[]>([]);\n\n  useEffect(() => {\n    if (isOpen && user) {\n      fetchMyCaterpillars();\n    }\n  }, [isOpen, user]);\n\n  const fetchMyCaterpillars = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/caterpillars`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyCaterpillars(data.caterpillars || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch caterpillars:', error);\n    }\n  };\n\n  const handleCaterpillarSelection = (caterpillar: UserCaterpillar) => {\n    onCaterpillarSelected(\n      caterpillar.id,\n      caterpillar.caterpillarImageUrl, \n      caterpillar.caterpillarName,\n      caterpillar.caterpillarRarity as RarityTier\n    );\n    onClose();\n  };\n\n  const getBorderColor = (rarity: RarityTier): string => {\n    switch (rarity) {\n      case 'common': return '#fbbf24';      // yellow-400\n      case 'uncommon': return '#4ade80';    // green-400  \n      case 'rare': return '#3b82f6';        // blue-400\n      case 'super-rare': return '#06b6d4';  // cyan-400\n      case 'epic': return '#a855f7';        // purple-400\n      case 'legendary': return '#f97316';   // orange-400\n      case 'mythical': return '#ef4444';    // red-400\n      default: return '#9ca3af';            // gray-400\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto bg-slate-900 border border-green-500/50\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white text-xl font-bold\">\n            🐛 Wähle eine Raupe für den Teich\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"mt-4\">\n          {myCaterpillars.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"text-slate-300 text-lg mb-2\">🐛 Keine Raupen verfügbar</div>\n              <div className=\"text-slate-500\">Sammle Raupen um sie im Teich zu platzieren</div>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 max-h-96 overflow-y-auto\">\n              {myCaterpillars\n                .filter(caterpillar => caterpillar.quantity > 0)\n                .map((caterpillar) => (\n                  <Card\n                    key={caterpillar.id}\n                    className=\"bg-slate-800 border-2 hover:bg-slate-700 transition-all duration-200 cursor-pointer p-4\"\n                    style={{ borderColor: getBorderColor(caterpillar.caterpillarRarity as RarityTier) }}\n                    onClick={() => handleCaterpillarSelection(caterpillar)}\n                  >\n                    <div className=\"flex flex-col items-center space-y-3\">\n                      <CaterpillarHoverPreview\n                        caterpillarImageUrl={caterpillar.caterpillarImageUrl}\n                        caterpillarName={caterpillar.caterpillarName}\n                        rarity={caterpillar.caterpillarRarity as RarityTier}\n                      >\n                        <RarityImage \n                          src={caterpillar.caterpillarImageUrl}\n                          alt={caterpillar.caterpillarName}\n                          rarity={caterpillar.caterpillarRarity as RarityTier}\n                          size=\"large\"\n                          className=\"w-20 h-20\"\n                        />\n                      </CaterpillarHoverPreview>\n                      \n                      <div className=\"text-center\">\n                        <h3 className=\"text-white font-semibold text-sm mb-1\">\n                          {caterpillar.caterpillarName}\n                        </h3>\n                        <div className=\"flex items-center justify-center gap-2 mb-2\">\n                          <span \n                            className=\"text-xs font-medium\"\n                            style={{ color: getBorderColor(caterpillar.caterpillarRarity as RarityTier) }}\n                          >\n                            {getRarityDisplayName(caterpillar.caterpillarRarity as RarityTier)}\n                          </span>\n                        </div>\n                        <div className=\"bg-green-600 text-white px-2 py-1 rounded text-xs font-bold\">\n                          Verfügbar: {caterpillar.quantity}\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex justify-end mt-6\">\n          <Button\n            onClick={onClose}\n            variant=\"outline\"\n            className=\"bg-slate-700 hover:bg-slate-600 text-white border-slate-600\"\n          >\n            Abbrechen\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":5834},"client/src/components/FishHoverPreview.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\nimport { Fish } from \"lucide-react\";\n\ninterface FishHoverPreviewProps {\n  fishImageUrl: string;\n  fishName: string;\n  rarity: RarityTier;\n  children: React.ReactNode;\n}\n\nexport const FishHoverPreview: React.FC<FishHoverPreviewProps> = ({\n  fishImageUrl,\n  fishName,\n  rarity,\n  children\n}) => {\n  const [isHovering, setIsHovering] = useState(false);\n  const [imageError, setImageError] = useState(false);\n  const [currentSrc, setCurrentSrc] = useState(fishImageUrl);\n  const [dialogPosition, setDialogPosition] = useState({ x: 0, y: 0 });\n\n  // Reset state when fishImageUrl prop changes\n  useEffect(() => {\n    setCurrentSrc(fishImageUrl);\n    setImageError(false);\n  }, [fishImageUrl]);\n\n  const handleMouseEnter = (e: React.MouseEvent) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const dialogWidth = 280; // Dialog width + padding\n    const dialogHeight = 320; // Dialog height + padding\n    const margin = 8; // Margin from element\n    \n    // Check if we're inside a modal dialog\n    const modalDialog = e.currentTarget.closest('[role=\"dialog\"]');\n    let viewportWidth = window.innerWidth;\n    let viewportHeight = window.innerHeight;\n    let viewportLeft = 0;\n    let viewportTop = 0;\n    \n    if (modalDialog) {\n      // Use modal dialog boundaries instead of full viewport\n      const modalRect = modalDialog.getBoundingClientRect();\n      viewportWidth = modalRect.width;\n      viewportHeight = modalRect.height;\n      viewportLeft = modalRect.left;\n      viewportTop = modalRect.top;\n    }\n    \n    // Calculate horizontal position\n    let x = rect.right + margin; // Default: right of element\n    if (x + dialogWidth > viewportLeft + viewportWidth) {\n      // Not enough space on right, position on left\n      x = rect.left - dialogWidth - margin;\n      if (x < viewportLeft) {\n        // Not enough space on left either, center it within available space\n        x = Math.max(viewportLeft + margin, viewportLeft + (viewportWidth - dialogWidth) / 2);\n      }\n    }\n    \n    // Calculate vertical position\n    let y = rect.top; // Default: aligned with top of element\n    if (y + dialogHeight > viewportTop + viewportHeight) {\n      // Not enough space below, position above\n      y = rect.bottom - dialogHeight;\n      if (y < viewportTop) {\n        // Not enough space above either, center vertically within available space\n        y = Math.max(viewportTop + margin, viewportTop + (viewportHeight - dialogHeight) / 2);\n      }\n    }\n    \n    setDialogPosition({ x, y });\n    setIsHovering(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovering(false);\n  };\n\n  return (\n    <div\n      className=\"relative\"\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      {children}\n      \n      {isHovering && (\n        <div \n          className=\"fixed z-[999999] pointer-events-none\" \n          style={{ \n            left: `${dialogPosition.x}px`,\n            top: `${dialogPosition.y}px`,\n            isolation: 'isolate' \n          }}\n        >\n          <div className=\"bg-slate-900 border-2 border-slate-600 rounded-lg p-3 shadow-2xl\">\n            <div className=\"w-64 h-64 rounded-lg overflow-hidden mb-2 bg-slate-800 flex items-center justify-center\">\n              {!imageError ? (\n                <img\n                  src={currentSrc}\n                  alt={fishName}\n                  className=\"w-full h-full object-cover\"\n                  onError={() => {\n                    // For fish, try fallback to 0.jpg before showing icon\n                    if (currentSrc.includes('Fische') && !currentSrc.includes('0.jpg')) {\n                      setCurrentSrc('/Fische/0.jpg');\n                    } else {\n                      setImageError(true);\n                    }\n                  }}\n                />\n              ) : (\n                <Fish className=\"w-24 h-24 text-blue-400\" />\n              )}\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-bold text-white text-lg mb-1\">{fishName}</div>\n              <div className={`text-sm ${getRarityColor(rarity as RarityTier)}`}>\n                🐟 {getRarityDisplayName(rarity as RarityTier)} Fisch\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","size_bytes":4425},"client/src/components/FishSelectionModal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { FishHoverPreview } from \"./FishHoverPreview\";\nimport { RarityImage } from \"./RarityImage\";\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\nimport type { UserFish } from \"@shared/schema\";\n\ninterface FishSelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onFishSelected: (fishId: number, fishImageUrl: string, fishName: string, rarity: RarityTier) => void;\n}\n\nexport const FishSelectionModal: React.FC<FishSelectionModalProps> = ({\n  isOpen,\n  onClose,\n  onFishSelected\n}) => {\n  const { user } = useAuth();\n  const [myFish, setMyFish] = useState<UserFish[]>([]);\n\n  useEffect(() => {\n    if (isOpen && user) {\n      fetchMyFish();\n    }\n  }, [isOpen, user]);\n\n  const fetchMyFish = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/fish`);\n      if (response.ok) {\n        const data = await response.json();\n        setMyFish(data.fish || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch fish:', error);\n    }\n  };\n\n  const handleFishSelection = (fish: UserFish) => {\n    onFishSelected(\n      fish.id,\n      fish.fishImageUrl, \n      fish.fishName,\n      fish.fishRarity as RarityTier\n    );\n    onClose();\n  };\n\n  const getBorderColor = (rarity: RarityTier): string => {\n    switch (rarity) {\n      case 'common': return '#fbbf24';      // yellow-400\n      case 'uncommon': return '#4ade80';    // green-400  \n      case 'rare': return '#3b82f6';        // blue-400\n      case 'super-rare': return '#06b6d4';  // cyan-400\n      case 'epic': return '#a855f7';        // purple-400\n      case 'legendary': return '#f97316';   // orange-400\n      case 'mythical': return '#ef4444';    // red-400\n      default: return '#9ca3af';            // gray-400\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto bg-slate-900 border border-blue-500/50\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white text-xl font-bold\">\n            🐟 Wähle einen Fisch für den Teich\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"mt-4\">\n          {myFish.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"text-slate-300 text-lg mb-2\">🐟 Keine Fische verfügbar</div>\n              <div className=\"text-slate-500\">Sammle Fische um sie im Teich zu platzieren</div>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 max-h-96 overflow-y-auto\">\n              {myFish\n                .filter(fish => fish.quantity > 0)\n                .map((fish) => (\n                  <Card\n                    key={fish.id}\n                    className=\"bg-slate-800 border-2 hover:bg-slate-700 transition-all duration-200 cursor-pointer p-4\"\n                    style={{ borderColor: getBorderColor(fish.fishRarity as RarityTier) }}\n                    onClick={() => handleFishSelection(fish)}\n                  >\n                    <div className=\"flex flex-col items-center space-y-3\">\n                      <FishHoverPreview\n                        fishImageUrl={fish.fishImageUrl}\n                        fishName={fish.fishName}\n                        rarity={fish.fishRarity as RarityTier}\n                      >\n                        <RarityImage \n                          src={fish.fishImageUrl}\n                          alt={fish.fishName}\n                          rarity={fish.fishRarity as RarityTier}\n                          size=\"large\"\n                          className=\"w-20 h-20\"\n                        />\n                      </FishHoverPreview>\n                      \n                      <div className=\"text-center\">\n                        <h3 className=\"text-white font-semibold text-sm mb-1\">\n                          {fish.fishName}\n                        </h3>\n                        <div className=\"flex items-center justify-center gap-2 mb-2\">\n                          <span \n                            className=\"text-xs font-medium\"\n                            style={{ color: getBorderColor(fish.fishRarity as RarityTier) }}\n                          >\n                            {getRarityDisplayName(fish.fishRarity as RarityTier)}\n                          </span>\n                        </div>\n                        <div className=\"bg-blue-500 text-white px-2 py-1 rounded text-xs font-bold\">\n                          Verfügbar: {fish.quantity}\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex justify-end mt-6\">\n          <Button\n            onClick={onClose}\n            variant=\"outline\"\n            className=\"bg-slate-700 hover:bg-slate-600 text-white border-slate-600\"\n          >\n            Abbrechen\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":5375},"client/src/components/FeedingDialog.tsx":{"content":"import React, { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { getRarityColor, getRarityDisplayName } from \"@shared/rarity\";\n\ninterface UserCaterpillar {\n  id: number;\n  userId: number;\n  caterpillarId: number;\n  caterpillarName: string;\n  caterpillarRarity: string;\n  caterpillarImageUrl: string;\n  quantity: number;\n  createdAt: string;\n}\n\n\n// Feeding item for caterpillars only\ninterface FeedingItem {\n  id: number;\n  name: string;\n  rarity: string;\n  imageUrl: string;\n  quantity: number;\n  type: 'caterpillar';\n  originalId: number; // caterpillarId\n}\n\ninterface FeedingDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  caterpillars: UserCaterpillar[];\n  onFeedCaterpillar: (caterpillarId: number, fieldIndex: number) => void;\n  fieldIndex: number;\n}\n\nexport const FeedingDialog: React.FC<FeedingDialogProps> = ({\n  isOpen,\n  onClose,\n  caterpillars,\n  onFeedCaterpillar,\n  fieldIndex\n}) => {\n  const [selectedItem, setSelectedItem] = useState<FeedingItem | null>(null);\n\n  // Convert caterpillars to feeding items (filter out items with 0 quantity)\n  const feedingItems: FeedingItem[] = caterpillars.filter(cat => cat.quantity > 0).map(cat => ({\n    id: cat.id,\n    name: cat.caterpillarName,\n    rarity: cat.caterpillarRarity,\n    imageUrl: cat.caterpillarImageUrl,\n    quantity: cat.quantity,\n    type: 'caterpillar' as const,\n    originalId: cat.caterpillarId\n  }));\n\n  const handleFeed = () => {\n    if (selectedItem && selectedItem.type === 'caterpillar') {\n      onFeedCaterpillar(selectedItem.originalId, fieldIndex);\n      onClose();\n      setSelectedItem(null);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl bg-gradient-to-br from-blue-950 to-teal-950 border border-blue-500/30\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-xl font-bold text-blue-300\">\n            🐟 Fische füttern\n          </DialogTitle>\n          <DialogDescription className=\"text-center text-blue-200\">\n            Wähle eine Raupe aus deinem Inventar zum Füttern\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 max-h-96 overflow-y-auto p-2\">\n          {feedingItems.length === 0 ? (\n            <div className=\"col-span-full text-center py-8\">\n              <p className=\"text-blue-300 mb-2\">🐛 Keine Raupen verfügbar</p>\n              <p className=\"text-blue-400 text-sm\">Sammle Schmetterlinge im Garten um Raupen zu erhalten!</p>\n            </div>\n          ) : (\n            feedingItems.map((item) => (\n              <Card \n                key={item.id}\n                className={`cursor-pointer transition-all border-2 hover:scale-105 ${\n                  selectedItem?.id === item.id \n                    ? 'border-blue-400 bg-blue-900/40' \n                    : 'border-slate-600 hover:border-blue-400/60 bg-slate-800/40'\n                }`}\n                onClick={() => setSelectedItem(item)}\n              >\n                <CardContent className=\"p-3 text-center\">\n                  <div className=\"w-16 h-16 mx-auto mb-2 rounded-lg overflow-hidden border-2\"\n                       style={{ borderColor: getRarityColor(item.rarity) }}>\n                    <img\n                      src={item.imageUrl}\n                      alt={item.name}\n                      className=\"w-full h-full object-cover\"\n                      onError={(e) => {\n                        e.currentTarget.style.display = 'none';\n                        e.currentTarget.nextElementSibling!.style.display = 'flex';\n                      }}\n                    />\n                    <div\n                      className=\"w-full h-full bg-gradient-to-br from-blue-500 to-green-500 rounded flex items-center justify-center text-2xl\"\n                      style={{ display: 'none' }}\n                    >\n                      🐛\n                    </div>\n                  </div>\n                  <h3 className=\"font-semibold text-white text-xs truncate mb-1\">\n                    {item.name}\n                  </h3>\n                  <Badge \n                    className=\"mb-2 text-xs\"\n                    style={{ backgroundColor: getRarityColor(item.rarity) }}\n                  >\n                    {getRarityDisplayName(item.rarity)}\n                  </Badge>\n                  <p className=\"text-blue-300 text-xs\">\n                    🐛 Verfügbar: {item.quantity}\n                  </p>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n\n        <div className=\"flex justify-end gap-3 pt-4 border-t border-blue-500/20\">\n          <Button \n            variant=\"outline\" \n            onClick={onClose}\n            className=\"border-slate-500 text-slate-300 hover:bg-slate-700\"\n          >\n            Abbrechen\n          </Button>\n          <Button \n            onClick={handleFeed}\n            disabled={!selectedItem}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            Füttern\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":5442},"client/src/components/AquariumView.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { toast } from \"sonner\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useNotification } from \"../hooks/useNotification\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { Fish, Plus, Clock, Star, Waves, Eye } from \"lucide-react\";\nimport { HelpButton } from './HelpButton';\nimport { getRarityColor, getRarityDisplayName, getRarityBadgeStyle, getRarityCssColor, toRgba, type RarityTier } from \"@shared/rarity\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { FishDetailModal } from \"./FishDetailModal\";\nimport { FishSelectionModal } from \"./FishSelectionModal\";\n\n// Types for aquarium system\ninterface AquariumFish {\n  id: number;\n  userId: number;\n  tankId: number;\n  slotIndex: number;\n  fishId: number;\n  fishName: string;\n  fishRarity: string;\n  fishImageUrl: string;\n  placedAt: string;\n  createdAt: string;\n}\n\ninterface AquariumTank {\n  id: number;\n  userId: number;\n  tankNumber: number;\n  purchasedAt: string;\n  createdAt: string;\n}\n\ninterface UserFish {\n  id: number;\n  userId: number;\n  fishId: number;\n  fishName: string;\n  fishRarity: string;\n  fishImageUrl: string;\n  quantity: number;\n  createdAt: string;\n}\n\ninterface FishDetailProps {\n  id: number;\n  fishName: string;\n  fishRarity: string;\n  fishImageUrl: string;\n  placedAt: string;\n  userId: number;\n  tankId?: number;\n}\n\nexport const AquariumView: React.FC = () => {\n  const { user } = useAuth();\n  const { credits, setCredits } = useCredits();\n  const { showNotification } = useNotification();\n  \n  const [userFish, setUserFish] = useState<UserFish[]>([]);\n  const [aquariumFish, setAquariumFish] = useState<AquariumFish[]>([]);\n  const [tanks, setTanks] = useState<Map<number, AquariumTank>>(new Map());\n  const [loading, setLoading] = useState(true);\n  const [selectedFish, setSelectedFish] = useState<FishDetailProps | null>(null);\n  const [currentFishIndex, setCurrentFishIndex] = useState<number>(0);\n  const [showFishModal, setShowFishModal] = useState(false);\n  const [currentTankIndex, setCurrentTankIndex] = useState(0);\n  \n  // Fish selection modal states\n  const [selectedTankForFish, setSelectedTankForFish] = useState<number | null>(null);\n  const [selectedSlotForFish, setSelectedSlotForFish] = useState<number | null>(null);\n\n  // Tank purchasing states\n  const [purchasingTank, setPurchasingTank] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (user) {\n      loadData();\n    }\n  }, [user]);\n\n  const loadData = async () => {\n    if (!user) return;\n\n    try {\n      await Promise.all([\n        loadUserFish(),\n        loadAquariumFish(),\n        loadTanks(),\n      ]);\n    } catch (error) {\n      console.error('Failed to load aquarium data:', error);\n      showNotification('Fehler beim Laden der Aquarium-Daten', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadUserFish = async () => {\n    if (!user) return;\n\n    const response = await fetch(`/api/user/${user.id}/fish`);\n    const data = await response.json();\n    setUserFish(data.fish || []);\n  };\n\n  const loadAquariumFish = async () => {\n    if (!user) return;\n\n    const response = await fetch(`/api/user/${user.id}/aquarium-fish`);\n    const data = await response.json();\n    setAquariumFish(data.fish || []);\n  };\n\n  const loadTanks = async () => {\n    if (!user) return;\n\n    const response = await fetch(`/api/user/${user.id}/aquarium-tanks`);\n    const data = await response.json();\n    \n    const tanksMap = new Map<number, AquariumTank>();\n    (data.tanks || []).forEach((tank: AquariumTank) => {\n      tanksMap.set(tank.tankNumber, tank);\n    });\n    setTanks(tanksMap);\n  };\n\n  // Fish selection callback - adapts to existing handlePlaceFish API\n  const handleFishSelectionCallback = async (fishId: number, fishImageUrl: string, fishName: string, rarity: string) => {\n    if (selectedTankForFish !== null && selectedSlotForFish !== null) {\n      await handlePlaceFish(selectedTankForFish, selectedSlotForFish, fishId);\n      setSelectedTankForFish(null);\n      setSelectedSlotForFish(null);\n    }\n  };\n\n  const handlePurchaseTank = async (tankNumber: number) => {\n    if (!user) return;\n\n    setPurchasingTank(tankNumber);\n    \n    try {\n      const response = await fetch('/api/aquarium/purchase-tank', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': user.id.toString()\n        },\n        body: JSON.stringify({ tankNumber })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        showNotification(`Aquarium ${tankNumber} gekauft!`, 'success');\n        await loadTanks();\n        const creditsResponse = await fetch(`/api/user/${user.id}/credits`);\n        if (creditsResponse.ok) {\n          const creditsData = await creditsResponse.json();\n          setCredits(creditsData.credits);\n        }\n      } else {\n        showNotification(data.message || 'Fehler beim Kauf', 'error');\n      }\n    } catch (error) {\n      showNotification('Netzwerkfehler beim Kauf', 'error');\n    } finally {\n      setPurchasingTank(null);\n    }\n  };\n\n  const handlePlaceFish = async (tankNumber: number, slotIndex: number, fishId: number) => {\n    if (!user) return;\n\n    try {\n      const response = await fetch('/api/aquarium/place-fish', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': user.id.toString()\n        },\n        body: JSON.stringify({ tankNumber, slotIndex, fishId })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        showNotification('Fisch im Aquarium platziert!', 'success');\n        await loadData();\n      } else {\n        showNotification(data.message || 'Fehler beim Platzieren', 'error');\n      }\n    } catch (error) {\n      showNotification('Netzwerkfehler beim Platzieren', 'error');\n    }\n  };\n\n  const handleRemoveFish = async (aquariumFishId: number) => {\n    if (!user) return;\n\n    try {\n      const response = await fetch('/api/aquarium/remove-fish', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': user.id.toString()\n        },\n        body: JSON.stringify({ aquariumFishId })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        showNotification('Fisch aus Aquarium entfernt!', 'success');\n        await loadData();\n      } else {\n        showNotification(data.message || 'Fehler beim Entfernen', 'error');\n      }\n    } catch (error) {\n      showNotification('Netzwerkfehler beim Entfernen', 'error');\n    }\n  };\n\n  const getFishInTank = (tankNumber: number): AquariumFish[] => {\n    const tank = tanks.get(tankNumber);\n    if (!tank) return [];\n    \n    return aquariumFish.filter(fish => fish.tankId === tank.id);\n  };\n\n  const getSlotFish = (tankNumber: number, slotIndex: number): AquariumFish | null => {\n    const tankFish = getFishInTank(tankNumber);\n    return tankFish.find(fish => fish.slotIndex === slotIndex) || null;\n  };\n\n  // Get all placed fish in order (for navigation)\n  const getAllPlacedFish = (): AquariumFish[] => {\n    const allFish: AquariumFish[] = [];\n    for (let tankNumber = 1; tankNumber <= 3; tankNumber++) {\n      const tankFish = getFishInTank(tankNumber).sort((a, b) => a.slotIndex - b.slotIndex);\n      allFish.push(...tankFish);\n    }\n    return allFish;\n  };\n\n  // Navigation functions\n  const handleFishSelect = (fish: AquariumFish) => {\n    console.log(\"🐟 Fish clicked:\", fish.fishName, fish.id);\n    const allFish = getAllPlacedFish();\n    const index = allFish.findIndex(f => f.id === fish.id);\n    \n    setSelectedFish({\n      id: fish.id,\n      fishName: fish.fishName,\n      fishRarity: fish.fishRarity,\n      fishImageUrl: fish.fishImageUrl,\n      placedAt: fish.placedAt,\n      userId: fish.userId,\n      tankId: fish.tankId\n    });\n    setCurrentFishIndex(index);\n    setShowFishModal(true);\n    console.log(\"🐟 Modal should open:\", showFishModal, selectedFish);\n  };\n\n  const handleNextFish = () => {\n    const allFish = getAllPlacedFish();\n    if (currentFishIndex < allFish.length - 1) {\n      const nextFish = allFish[currentFishIndex + 1];\n      setSelectedFish({\n        id: nextFish.id,\n        fishName: nextFish.fishName,\n        fishRarity: nextFish.fishRarity,\n        fishImageUrl: nextFish.fishImageUrl,\n        placedAt: nextFish.placedAt,\n        userId: nextFish.userId,\n        tankId: nextFish.tankId\n      });\n      setCurrentFishIndex(currentFishIndex + 1);\n    }\n  };\n\n  const handlePreviousFish = () => {\n    const allFish = getAllPlacedFish();\n    if (currentFishIndex > 0) {\n      const prevFish = allFish[currentFishIndex - 1];\n      setSelectedFish({\n        id: prevFish.id,\n        fishName: prevFish.fishName,\n        fishRarity: prevFish.fishRarity,\n        fishImageUrl: prevFish.fishImageUrl,\n        placedAt: prevFish.placedAt,\n        userId: prevFish.userId,\n        tankId: prevFish.tankId\n      });\n      setCurrentFishIndex(currentFishIndex - 1);\n    }\n  };\n\n  const renderTankSlot = (tankNumber: number, slotIndex: number) => {\n    const fish = getSlotFish(tankNumber, slotIndex);\n    const tank = tanks.get(tankNumber);\n    \n    if (fish) {\n      return (\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <div\n              className=\"w-full h-full bg-gradient-to-br from-blue-900/20 to-blue-700/30 border-2 rounded-lg flex items-center justify-center cursor-pointer hover:from-blue-800/30 hover:to-blue-600/40 transition-all relative\"\n              style={{ borderColor: getRarityCssColor(fish.fishRarity as RarityTier) }}\n              onClick={() => handleFishSelect(fish)}\n            >\n              <img\n                src={fish.fishImageUrl}\n                alt={fish.fishName}\n                className=\"w-full h-full object-contain p-1\"\n                onError={(e) => {\n                  e.currentTarget.style.display = 'none';\n                  e.currentTarget.nextElementSibling!.style.display = 'flex';\n                }}\n              />\n              <div\n                className=\"w-full h-full bg-gradient-to-br from-blue-500 to-teal-500 rounded flex items-center justify-center text-2xl\"\n                style={{ display: 'none' }}\n              >\n                🐟\n              </div>\n              \n              {/* Enhanced Rarity glow effect */}\n              <div \n                className=\"absolute inset-0 rounded-lg opacity-50 animate-pulse\"\n                style={{ \n                  backgroundColor: toRgba(getRarityCssColor(fish.fishRarity as RarityTier), 0.2),\n                  boxShadow: `\n                    inset 0 0 25px ${getRarityCssColor(fish.fishRarity as RarityTier)},\n                    0 0 15px ${getRarityCssColor(fish.fishRarity as RarityTier)},\n                    0 0 30px ${toRgba(getRarityCssColor(fish.fishRarity as RarityTier), 0.4)}\n                  `,\n                  pointerEvents: 'none'\n                }}\n              />\n            </div>\n          </TooltipTrigger>\n          <TooltipContent>\n            <div className=\"text-center\">\n              <p className=\"font-semibold\">{fish.fishName}</p>\n              <Badge className={`${getRarityBadgeStyle(fish.fishRarity as RarityTier)} text-xs px-2 py-1`}>\n                {getRarityDisplayName(fish.fishRarity as RarityTier)}\n              </Badge>\n              <p className=\"text-xs text-blue-300 mt-1\">Klicken für Details</p>\n            </div>\n          </TooltipContent>\n        </Tooltip>\n      );\n    }\n\n    // Empty slot\n    return (\n      <div \n        className=\"w-full h-full bg-blue-950/30 border-2 border-blue-700/50 border-dashed rounded-lg flex items-center justify-center cursor-pointer hover:bg-blue-900/40 hover:border-blue-600/70 transition-all\"\n        onClick={() => {\n          if (tank && userFish.length > 0) {\n            setSelectedTankForFish(tank.tankNumber);\n            setSelectedSlotForFish(slotIndex);\n            setShowFishModal(true);\n          } else if (!tank) {\n            showNotification('Kaufe zuerst dieses Aquarium!', 'warning');\n          } else {\n            showNotification('Du hast keine Fische im Inventar!', 'warning');\n          }\n        }}\n      >\n        <Plus className=\"h-4 w-4 text-blue-400/60\" />\n      </div>\n    );\n  };\n\n  const renderTank = (tankNumber: number) => {\n    const tank = tanks.get(tankNumber);\n    const tankFish = getFishInTank(tankNumber);\n    // Calculate cost: Tank 1 = free, Tank 2 = 2500, each further x1.5\n    const tankCost = tankNumber === 1 ? 0 : Math.round(2500 * Math.pow(1.5, tankNumber - 2));\n\n    if (!tank) {\n      // Tank not purchased\n      return (\n        <Card key={tankNumber} className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-600\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex justify-between items-center\">\n              <CardTitle className=\"text-lg text-blue-300 flex items-center space-x-2\">\n                <Waves className=\"h-5 w-5\" />\n                <span>Aquarium {tankNumber}</span>\n              </CardTitle>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handlePurchaseTank(tankNumber)}\n                disabled={purchasingTank === tankNumber || credits < tankCost}\n                className=\"bg-blue-900/20 border-blue-500/50 text-blue-300 hover:bg-blue-800/30\"\n              >\n                {purchasingTank === tankNumber ? 'Kaufe...' : tankCost === 0 ? 'Kostenlos' : `${tankCost} Cr`}\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-8 text-slate-400\">\n              <Waves className=\"h-12 w-12 mx-auto mb-4 text-blue-500/50\" />\n              <p className=\"text-sm\">Aquarium nicht gekauft</p>\n              <p className=\"text-xs mt-2\">24 Fisch-Plätze verfügbar</p>\n            </div>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    // Tank purchased - show 6x4 grid (24 slots)\n    return (\n      <Card key={tankNumber} className=\"bg-gradient-to-br from-blue-950/50 to-teal-950/30 border-blue-500/30\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex justify-between items-center\">\n            <CardTitle className=\"text-lg text-blue-300 flex items-center space-x-2\">\n              <Waves className=\"h-5 w-5\" />\n              <span>Aquarium {tankNumber}</span>\n            </CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"outline\" className=\"bg-blue-900/20 text-blue-300 border-blue-500/50\">\n                {tankFish.length}/24 Fische\n              </Badge>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <TooltipProvider>\n            <div className=\"grid grid-cols-6 gap-1 p-3 bg-gradient-to-br from-blue-900/20 to-teal-900/10 rounded-lg border border-blue-500/20\">\n              {Array.from({ length: 24 }, (_, slotIndex) => (\n                <div key={slotIndex} className=\"aspect-square\">\n                  {renderTankSlot(tankNumber, slotIndex)}\n                </div>\n              ))}\n            </div>\n          </TooltipProvider>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-blue-950 to-teal-950 p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <Fish className=\"h-12 w-12 mx-auto mb-4 text-blue-400 animate-pulse\" />\n            <p className=\"text-blue-300\">Lade Aquarium...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-blue-950 to-teal-950 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"relative mb-8\">\n          {/* HelpButton in absoluter Position rechts oben */}\n          <div className=\"absolute top-0 right-0\">\n            <HelpButton helpText=\"Im Aquarium präsentierst du deine schönsten Fische! Kaufe Aquarium-Tanks für Credits und stelle deine seltenen Fische zur Schau. Jedes Aquarium hat 24 Plätze für deine Sammlung!\" viewType=\"aquarium\" />\n          </div>\n          \n          {/* Zentrierter Content */}\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl font-bold text-blue-300 mb-2 flex items-center justify-center space-x-3\">\n              <Waves className=\"h-10 w-10\" />\n              <span>Aquarium</span>\n              <Waves className=\"h-10 w-10\" />\n            </h1>\n            <p className=\"text-blue-200 max-w-2xl mx-auto\">\n              Zeige deine wertvollsten Fische in wunderschönen Aquarien! Jedes Aquarium bietet 24 Plätze für deine Fisch-Sammlung.\n            </p>\n          </div>\n        </div>\n\n        {/* Tank Navigation */}\n        <div className=\"flex justify-center mb-6\">\n          <div className=\"flex space-x-2 bg-slate-800/50 rounded-lg p-2\">\n            {[1, 2, 3, 4].map((tankNum) => {\n              const tank = tanks.get(tankNum);\n              const tankFish = getFishInTank(tankNum);\n              \n              return (\n                <Button\n                  key={tankNum}\n                  variant={currentTankIndex === tankNum - 1 ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setCurrentTankIndex(tankNum - 1)}\n                  className={`flex items-center space-x-2 ${\n                    currentTankIndex === tankNum - 1\n                      ? \"bg-blue-600 text-white\"\n                      : \"text-blue-300 hover:text-white hover:bg-blue-800/30\"\n                  }`}\n                >\n                  <Waves className=\"h-4 w-4\" />\n                  <span>#{tankNum}</span>\n                  {tank && (\n                    <Badge \n                      variant=\"secondary\" \n                      className=\"ml-1 text-xs bg-blue-900/50 text-blue-200\"\n                    >\n                      {tankFish.length}\n                    </Badge>\n                  )}\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Current Tank Display */}\n        <div className=\"mb-8\">\n          {renderTank(currentTankIndex + 1)}\n        </div>\n\n        {/* Fish Inventory */}\n        <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-600\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-blue-300 flex items-center space-x-2\">\n              <Fish className=\"h-5 w-5\" />\n              <span>Fisch Inventar ({userFish.length})</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {userFish.length === 0 ? (\n              <div className=\"text-center py-8 text-slate-400\">\n                <Fish className=\"h-12 w-12 mx-auto mb-4 text-blue-500/50\" />\n                <p>Keine Fische im Inventar</p>\n                <p className=\"text-xs mt-2\">Sammle Fische im Teich!</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-3\">\n                {userFish.map((fish) => (\n                  <div\n                    key={fish.id}\n                    className=\"bg-gradient-to-br from-blue-900/20 to-blue-700/10 border-2 rounded-lg p-3 text-center hover:from-blue-800/30 hover:to-blue-600/20 transition-all cursor-pointer\"\n                    style={{ borderColor: getRarityCssColor(fish.fishRarity as RarityTier) }}\n                    onDoubleClick={() => {\n                      const tank = tanks.get(currentTankIndex + 1);\n                      if (tank) {\n                        const tankFish = getFishInTank(currentTankIndex + 1);\n                        if (tankFish.length >= 24) {\n                          showNotification('Aquarium ist voll!', 'warning');\n                        } else {\n                          // Find first empty slot\n                          let emptySlot = -1;\n                          for (let i = 0; i < 24; i++) {\n                            if (!tankFish.find(f => f.slotIndex === i)) {\n                              emptySlot = i;\n                              break;\n                            }\n                          }\n                          if (emptySlot !== -1) {\n                            handlePlaceFish(currentTankIndex + 1, emptySlot, fish.id);\n                          }\n                        }\n                      } else {\n                        showNotification('Kaufe zuerst ein Aquarium!', 'warning');\n                      }\n                    }}\n                    onClick={() => {\n                      console.log(\"🐟 Inventory Fish clicked:\", fish.fishName, fish.id);\n                      // Create a compatible fish object for the modal\n                      setSelectedFish({\n                        id: fish.id,\n                        fishName: fish.fishName,\n                        fishRarity: fish.fishRarity,\n                        fishImageUrl: fish.fishImageUrl,\n                        placedAt: new Date().toISOString(), // Use current time for inventory fish\n                        userId: fish.userId,\n                        tankId: 0 // Inventory fish don't have tankId\n                      });\n                      setCurrentFishIndex(0);\n                      setShowFishModal(true);\n                      console.log(\"🐟 Inventory Modal should open:\", fish.fishName);\n                    }}\n                  >\n                    <img\n                      src={fish.fishImageUrl}\n                      alt={fish.fishName}\n                      className=\"w-12 h-12 mx-auto mb-2 object-contain\"\n                      onError={(e) => {\n                        e.currentTarget.style.display = 'none';\n                        e.currentTarget.nextElementSibling!.style.display = 'flex';\n                      }}\n                    />\n                    <div\n                      className=\"w-12 h-12 mx-auto mb-2 bg-gradient-to-br from-blue-500 to-teal-500 rounded flex items-center justify-center text-lg\"\n                      style={{ display: 'none' }}\n                    >\n                      🐟\n                    </div>\n                    <h3 className=\"font-semibold text-white text-xs truncate\">\n                      {fish.fishName}\n                    </h3>\n                    <Badge \n                      className=\"mb-1 text-xs\"\n                      style={{ backgroundColor: getRarityColor(fish.fishRarity) }}\n                    >\n                      {getRarityDisplayName(fish.fishRarity as RarityTier)}\n                    </Badge>\n                    <p className=\"text-blue-300 text-xs\">\n                      Anzahl: {fish.quantity}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Fish Detail Modal */}\n      <FishDetailModal\n        isOpen={showFishModal && selectedFish !== null}\n        onClose={() => {\n          setShowFishModal(false);\n          setSelectedFish(null);\n        }}\n        fish={selectedFish}\n        onSold={() => {\n          setShowFishModal(false);\n          setSelectedFish(null);\n          loadData();\n        }}\n        currentIndex={currentFishIndex}\n        totalCount={getAllPlacedFish().length}\n        onNext={currentFishIndex < getAllPlacedFish().length - 1 ? handleNextFish : undefined}\n        onPrevious={currentFishIndex > 0 ? handlePreviousFish : undefined}\n      />\n\n      {/* Fish Selection Modal */}\n      <FishSelectionModal\n        isOpen={showFishModal && selectedTankForFish !== null && selectedSlotForFish !== null}\n        onClose={() => {\n          setShowFishModal(false);\n          setSelectedTankForFish(null);\n          setSelectedSlotForFish(null);\n        }}\n        onFishSelected={handleFishSelectionCallback}\n      />\n    </div>\n  );\n};","size_bytes":24226},"client/src/components/FishDetailModal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { useSuns } from \"@/lib/stores/useSuns\";\nimport { useNotification } from \"../hooks/useNotification\";\nimport { getRarityColor, getRarityDisplayName, getRarityBadgeStyle, type RarityTier } from \"@shared/rarity\";\nimport { Clock, DollarSign, Zap, ChevronLeft, ChevronRight, Fish, X, Coins } from \"lucide-react\";\n\ninterface FishDetailProps {\n  id: number;\n  fishName: string;\n  fishRarity: string;\n  fishImageUrl: string;\n  placedAt: string;\n  userId: number;\n  tankId?: number;\n}\n\ninterface FishDetailModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  fish: FishDetailProps | null;\n  onSold: () => void;\n  readOnly?: boolean;\n  currentIndex?: number;\n  totalCount?: number;\n  onNext?: () => void;\n  onPrevious?: () => void;\n}\n\nexport const FishDetailModal: React.FC<FishDetailModalProps> = ({\n  isOpen,\n  onClose,\n  fish,\n  onSold,\n  readOnly = false,\n  currentIndex,\n  totalCount,\n  onNext,\n  onPrevious\n}) => {\n  const [timeRemaining, setTimeRemaining] = useState<number>(0);\n  const [canSell, setCanSell] = useState<boolean>(false);\n  const [isSelling, setIsSelling] = useState<boolean>(false);\n  \n  // Sonnen-Boost state\n  const [boostMinutes, setBoostMinutes] = useState<string>('1');\n  const [isBoosting, setIsBoosting] = useState<boolean>(false);\n  const { suns, setSuns } = useSuns();\n  const { setCredits } = useCredits();\n  const { showNotification } = useNotification();\n  const { user } = useAuth();\n\n  // Mouse wheel navigation\n  useEffect(() => {\n    if (!isOpen || !onNext || !onPrevious) return;\n\n    const handleWheel = (e: Event) => {\n      e.preventDefault();\n      const wheelEvent = e as WheelEvent;\n      if (wheelEvent.deltaY > 0) {\n        // Scroll down = Next\n        if (currentIndex !== undefined && totalCount !== undefined && currentIndex < totalCount - 1) {\n          onNext();\n        }\n      } else if (wheelEvent.deltaY < 0) {\n        // Scroll up = Previous  \n        if (currentIndex !== undefined && currentIndex > 0) {\n          onPrevious();\n        }\n      }\n    };\n\n    // Add wheel event listener to dialog\n    const dialogElement = document.querySelector('[role=\"dialog\"]');\n    if (dialogElement) {\n      dialogElement.addEventListener('wheel', handleWheel, { passive: false });\n      return () => dialogElement.removeEventListener('wheel', handleWheel);\n    }\n  }, [isOpen, onNext, onPrevious, currentIndex, totalCount]);\n\n  // Calculate countdown every second (24 hours for fish vs 72 hours for butterflies)\n  useEffect(() => {\n    if (!fish || readOnly) return;\n\n    let currentFishId = fish.id; // Capture current fish ID\n    let isCancelled = false; // Flag to prevent race conditions\n\n    const fetchSellStatus = async () => {\n      if (isCancelled || fish.id !== currentFishId) return; // Prevent outdated calls\n      \n      try {\n        const response = await fetch(`/api/aquarium/fish/${fish.id}/sell-status`, {\n          headers: { \n            'X-User-Id': fish.userId.toString()\n          }\n        });\n        \n        // Check again after async operation\n        if (isCancelled || fish.id !== currentFishId) return;\n        \n        if (response.ok) {\n          const data = await response.json();\n          setCanSell(data.canSell);\n          setTimeRemaining(data.timeRemainingMs);\n        } else {\n          // Fallback to local calculation (24 hours for fish)\n          const placedTime = new Date(fish.placedAt).getTime();\n          const now = new Date().getTime();\n          const timeSincePlacement = now - placedTime;\n          const TWENTY_FOUR_HOURS = 24 * 60 * 60 * 1000; // 24h vs 72h for butterflies\n          const remaining = TWENTY_FOUR_HOURS - timeSincePlacement;\n          \n          if (remaining <= 0) {\n            setCanSell(true);\n            setTimeRemaining(0);\n          } else {\n            setCanSell(false);\n            setTimeRemaining(remaining);\n          }\n        }\n      } catch (error) {\n        if (isCancelled || fish.id !== currentFishId) return;\n        console.error('Failed to fetch fish sell status:', error);\n      }\n    };\n\n    // Update local countdown every second\n    const updateLocalCountdown = () => {\n      if (isCancelled || fish.id !== currentFishId) return;\n      \n      setTimeRemaining(prevTime => {\n        const newTime = Math.max(0, prevTime - 1000); // Subtract 1 second\n        if (newTime <= 0) {\n          setCanSell(true);\n        }\n        return newTime;\n      });\n    };\n\n    // Fetch immediately\n    fetchSellStatus();\n\n    // Update countdown every second for smooth display\n    const countdownInterval = setInterval(updateLocalCountdown, 1000);\n    \n    // Sync with server every 30 seconds to prevent drift\n    const serverSyncInterval = setInterval(fetchSellStatus, 30000);\n\n    return () => {\n      isCancelled = true; // Cancel any pending operations\n      clearInterval(countdownInterval);\n      clearInterval(serverSyncInterval);\n    };\n  }, [fish, readOnly]);\n\n  const formatTime = (ms: number): string => {\n    if (ms <= 0) return \"Verkauf möglich!\";\n    \n    const totalSeconds = Math.floor(ms / 1000);\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = totalSeconds % 60;\n    \n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const getFishPrice = (rarity: string): number => {\n    // Fish market values (100% prices shown in aquarium)\n    const marketPrice = (() => {\n      switch (rarity) {\n        case 'common': return 40;\n        case 'uncommon': return 100;\n        case 'rare': return 225;\n        case 'super-rare': return 470;\n        case 'epic': return 750;\n        case 'legendary': return 1100;\n        case 'mythical': return 2000;\n        default: return 40;\n      }\n    })();\n    \n    return marketPrice; // Show full market value in aquarium\n  };\n\n  const handleSell = async () => {\n    if (!fish || !canSell || isSelling) return;\n\n    setIsSelling(true);\n\n    try {\n      const response = await fetch('/api/aquarium/sell-fish', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({ aquariumFishId: fish.id })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        showNotification(`Fisch für ${data.creditsEarned} Credits verkauft!`, 'success');\n        const creditsResponse = await fetch(`/api/user/${user?.id}/credits`);\n        if (creditsResponse.ok) {\n          const creditsData = await creditsResponse.json();\n          setCredits(creditsData.credits);\n        }\n        onSold();\n      } else {\n        showNotification(data.message || 'Fehler beim Verkauf', 'error');\n      }\n    } catch (error) {\n      showNotification('Netzwerkfehler beim Verkauf', 'error');\n    } finally {\n      setIsSelling(false);\n    }\n  };\n\n  const handleSunBoost = async () => {\n    if (!fish || isBoosting) return;\n\n    const minutes = parseInt(boostMinutes);\n    if (isNaN(minutes) || minutes < 1 || minutes > 1440) {\n      showNotification('Ungültige Minuten (1-1440)', 'error');\n      return;\n    }\n\n    const sunCost = minutes; // 1 Sonne = 1 Minute\n    if (suns < sunCost) {\n      showNotification(`Nicht genügend Sonnen! Benötigt: ${sunCost}`, 'error');\n      return;\n    }\n\n    setIsBoosting(true);\n\n    try {\n      const response = await fetch('/api/aquarium/sun-boost', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({ \n          aquariumFishId: fish.id, \n          minutes: minutes \n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        showNotification(`${minutes} Minuten abgezogen für ${sunCost} Sonnen!`, 'success');\n        const sunsResponse = await fetch(`/api/user/${user?.id}/suns`);\n        if (sunsResponse.ok) {\n          const sunsData = await sunsResponse.json();\n          setSuns(sunsData.suns);\n        }\n        // Refresh sell status\n        setTimeRemaining(prev => Math.max(0, prev - (minutes * 60 * 1000)));\n      } else {\n        showNotification(data.message || 'Fehler beim Boost', 'error');\n      }\n    } catch (error) {\n      showNotification('Netzwerkfehler beim Boost', 'error');\n    } finally {\n      setIsBoosting(false);\n    }\n  };\n\n  if (!fish) return null;\n\n  const price = getFishPrice(fish.fishRarity);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 border-2 border-blue-500/30 text-white w-[95vw] max-w-sm md:max-w-7xl shadow-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"sr-only\">{fish.fishName} - Fisch Details</DialogTitle>\n          <DialogDescription className=\"sr-only\">\n            Detailansicht und Verwaltungsoptionen für den ausgewählten Fisch.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Name and Rarity Header */}\n        <Card className=\"bg-gradient-to-br from-blue-950/50 to-teal-950/30 border-blue-500/30 shadow-lg mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              {/* Name and Rarity */}\n              <div className=\"flex items-center gap-4\">\n                <h3 className=\"text-2xl font-bold text-white\">{fish.fishName}</h3>\n                <Badge className={`${getRarityBadgeStyle(fish.fishRarity as RarityTier)} text-base font-bold px-3 py-1`}>\n                  <Fish className=\"h-4 w-4 mr-2\" />\n                  {getRarityDisplayName(fish.fishRarity as any)}\n                </Badge>\n              </div>\n\n              {/* Navigation Controls */}\n              {(totalCount !== undefined && currentIndex !== undefined) && (\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-sm text-slate-400\">\n                    Fisch {currentIndex + 1} von {totalCount}\n                  </div>\n                  \n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={onPrevious}\n                      disabled={currentIndex === 0 || totalCount <= 1}\n                      size=\"sm\"\n                      className=\"bg-gradient-to-r from-blue-600 to-teal-600 hover:from-blue-700 hover:to-teal-700 disabled:from-slate-600 disabled:to-slate-700 disabled:cursor-not-allowed\"\n                    >\n                      <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                      Zurück\n                    </Button>\n                    \n                    <Button\n                      onClick={onNext}\n                      disabled={currentIndex === totalCount - 1 || totalCount <= 1}\n                      size=\"sm\"\n                      className=\"bg-gradient-to-r from-blue-600 to-teal-600 hover:from-blue-700 hover:to-teal-700 disabled:from-slate-600 disabled:to-slate-700 disabled:cursor-not-allowed\"\n                    >\n                      Weiter\n                      <ChevronRight className=\"h-4 w-4 ml-1\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Content: Large Image left, Details right */}\n        <div className=\"flex gap-6 min-h-[650px]\">\n          {/* Left Side - Large Fish Image (600x600) */}\n          <div className=\"flex-shrink-0\">\n            <Card className=\"bg-gradient-to-br from-blue-950/50 to-teal-950/30 border-blue-500/30 shadow-lg relative overflow-hidden\">\n              <div \n                className=\"absolute inset-0 rounded-lg opacity-20\"\n                style={{ backgroundColor: getRarityColor(fish.fishRarity as any) }}\n              />\n              \n              <CardContent className=\"p-4 relative z-10 text-center\">\n                <div className=\"relative\">\n                  <img \n                    src={fish.fishImageUrl}\n                    alt={fish.fishName}\n                    className=\"w-[600px] h-[600px] object-contain mx-auto border-4 rounded-lg shadow-lg\"\n                    style={{\n                      borderColor: getRarityColor(fish.fishRarity as any),\n                      filter: 'drop-shadow(0 0 20px rgba(59, 130, 246, 0.5))'\n                    }}\n                    onError={(e) => {\n                      e.currentTarget.style.display = 'none';\n                      (e.currentTarget.nextElementSibling as HTMLElement)!.style.display = 'flex';\n                    }}\n                  />\n                  <div\n                    className=\"w-[600px] h-[600px] bg-gradient-to-br from-blue-500 to-teal-500 rounded-lg flex items-center justify-center text-8xl border-4 shadow-lg mx-auto\"\n                    style={{ \n                      display: 'none',\n                      borderColor: getRarityColor(fish.fishRarity as any),\n                      filter: 'drop-shadow(0 0 20px rgba(59, 130, 246, 0.5))'\n                    }}\n                  >\n                    🐟\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Side - Details */}\n          <div className=\"flex-1 space-y-3\">\n            \n            {/* Fish Info Card */}\n            <Card className=\"bg-gradient-to-br from-blue-950/50 to-teal-950/30 border-blue-500/30 shadow-lg\">\n              <CardContent className=\"p-3\">\n                <div className=\"text-center space-y-2\">\n                  <div className=\"text-xs text-blue-200\">\n                    <p>Platziert: {new Date(fish.placedAt).toLocaleString('de-DE')}</p>\n                  </div>\n                  <div className=\"flex items-center justify-center space-x-2 text-blue-200\">\n                    <DollarSign className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-semibold\">Verkaufspreis: {price.toLocaleString()} Credits</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Sell Status - Only for own fish */}\n            {!readOnly && (\n              <Card className=\"bg-gradient-to-br from-blue-950/50 to-teal-950/30 border-blue-500/30 shadow-lg\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"flex items-center justify-center mb-2\">\n                    <div className=\"relative\">\n                      <Clock className={`h-5 w-5 mr-2 ${canSell ? 'text-green-400' : 'text-orange-400'}`} />\n                      {!canSell && <div className=\"absolute inset-0 h-5 w-5 mr-2 text-orange-400 animate-ping opacity-30\"></div>}\n                    </div>\n                    <span className=\"text-sm font-semibold\">\n                      {canSell ? \"Verkaufsbereit!\" : \"Verkaufs-Countdown\"}\n                    </span>\n                  </div>\n                  \n                  <div className={`text-xl font-bold mb-2 ${canSell ? 'text-green-400' : 'text-orange-400'}`}>\n                    {formatTime(timeRemaining)}\n                  </div>\n                  \n                  <div className=\"text-xs text-slate-400 mb-3\">\n                    {canSell \n                      ? \"Dieser Fisch kann jetzt verkauft werden!\"\n                      : \"Fische können nach 24 Stunden verkauft werden\"\n                    }\n                  </div>\n                  \n                  <Button\n                    onClick={handleSell}\n                    disabled={!canSell || isSelling}\n                    className={`w-full py-2 text-sm font-semibold ${\n                      canSell \n                        ? 'bg-green-600 hover:bg-green-700 text-white' \n                        : 'bg-slate-600 text-slate-400 cursor-not-allowed'\n                    }`}\n                  >\n                    {isSelling ? 'Verkaufe...' : canSell ? `Verkaufen für ${price.toLocaleString()} Credits` : 'Noch nicht verkaufbar'}\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Sonnen Boost - Only for own fish and when not sellable yet */}\n            {!readOnly && !canSell && timeRemaining > 0 && (\n              <Card className=\"bg-gradient-to-br from-blue-950/50 to-teal-950/30 border-blue-500/30 shadow-lg\">\n                <CardContent className=\"p-3 text-center\">\n                  <div className=\"flex items-center justify-center mb-2\">\n                    <Zap className=\"h-4 w-4 mr-2 text-yellow-400\" />\n                    <span className=\"text-sm font-semibold text-yellow-300\">☀️ Sonnen-Boost</span>\n                  </div>\n                  \n                  <div className=\"text-xs text-slate-400 mb-3\">\n                    Verkürze den Countdown: 1 ☀️ = 1 Minute weniger\n                  </div>\n                  \n                  <div className=\"flex gap-2 items-end mb-3\">\n                    <div className=\"flex-1\">\n                      <Input\n                        type=\"number\"\n                        value={boostMinutes}\n                        onChange={(e) => setBoostMinutes(e.target.value)}\n                        min=\"1\"\n                        max=\"1440\"\n                        placeholder=\"Min\"\n                        className=\"bg-slate-800 border-slate-600 text-white text-sm h-8\"\n                      />\n                    </div>\n                    <div className=\"text-xs text-slate-400\">\n                      Kosten: {parseInt(boostMinutes) || 0} ☀️<br/>\n                      Hast: {suns} ☀️\n                    </div>\n                  </div>\n                  \n                  <Button\n                    onClick={handleSunBoost}\n                    disabled={isBoosting || suns < (parseInt(boostMinutes) || 0) || !boostMinutes}\n                    className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-2 text-sm font-semibold\"\n                  >\n                    {isBoosting ? 'Booste...' : `${parseInt(boostMinutes) || 0} Min für ${parseInt(boostMinutes) || 0} ☀️`}\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Sell Price & Button - Only show for own fish */}\n            {!readOnly && (\n              <Card className=\"bg-gradient-to-br from-blue-950/50 to-teal-950/30 border-blue-500/30 shadow-lg\">\n                <CardContent className=\"p-3\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center\">\n                      <Coins className=\"h-4 w-4 mr-2 text-blue-400\" />\n                      <span className=\"text-sm font-semibold\">Verkaufspreis:</span>\n                    </div>\n                    <Badge className=\"bg-gradient-to-r from-blue-600 to-teal-600 text-white text-sm px-2 py-1 font-bold\">\n                      {price} Credits\n                    </Badge>\n                  </div>\n\n                  <Button\n                    onClick={handleSell}\n                    disabled={!canSell || isSelling}\n                    className={`w-full text-sm font-bold py-3 rounded-lg transition-all duration-300 ${\n                      canSell \n                        ? 'bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 shadow-lg' \n                        : 'bg-gradient-to-r from-slate-600 to-slate-700 cursor-not-allowed'\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-center\">\n                      <Coins className={`h-4 w-4 mr-2 ${canSell ? 'animate-bounce' : ''}`} />\n                      {isSelling \n                        ? \"Verkaufe...\" \n                        : canSell \n                          ? `💰 Für ${price} Credits verkaufen`\n                          : \"🕐 Noch nicht verkaufbar\"\n                      }\n                    </div>\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Exit Button */}\n            <Card className=\"bg-gradient-to-br from-blue-950/50 to-teal-950/30 border-blue-500/30 shadow-lg\">\n              <CardContent className=\"p-3\">\n                <Button\n                  onClick={onClose}\n                  className=\"w-full text-sm font-bold py-2 rounded-lg bg-gradient-to-r from-slate-600 to-slate-700 hover:from-slate-700 hover:to-slate-800 transition-all duration-300\"\n                >\n                  Verlassen\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":21189},"client/src/components/SeedRewardDialog.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\nimport { Sparkles, Package, Gift } from \"lucide-react\";\n\ninterface SeedRewardDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  quantity: number;\n  rarity: string;\n}\n\nexport const SeedRewardDialog: React.FC<SeedRewardDialogProps> = ({\n  isOpen,\n  onClose,\n  quantity,\n  rarity\n}) => {\n  const [isAnimating, setIsAnimating] = useState(false);\n  \n  useEffect(() => {\n    if (isOpen) {\n      setIsAnimating(true);\n      const timer = setTimeout(() => setIsAnimating(false), 800);\n      return () => clearTimeout(timer);\n    }\n  }, [isOpen]);\n\n  const rarityName = getRarityDisplayName(rarity as RarityTier);\n  const rarityColor = getRarityColor(rarity as RarityTier);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-emerald-950 via-green-950 to-emerald-950 border-2 border-green-500/30 text-white max-w-sm shadow-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"sr-only\">Samen erhalten - {rarityName}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex flex-col items-center text-center p-4 space-y-3\">\n          {/* Animated Icon */}\n          <div className={`relative ${isAnimating ? 'animate-bounce' : ''}`}>\n            <div className=\"bg-gradient-to-br from-green-600 to-emerald-600 rounded-full p-3 shadow-lg\">\n              <Package className=\"h-8 w-8 text-white\" />\n            </div>\n            {isAnimating && (\n              <div className=\"absolute -top-2 -right-2\">\n                <Sparkles className=\"h-6 w-6 text-yellow-400 animate-ping\" />\n              </div>\n            )}\n          </div>\n\n          {/* Title */}\n          <div className=\"space-y-1\">\n            <h2 className=\"text-xl font-bold text-green-300\">\n              Verwelktes Bouquet gesammelt!\n            </h2>\n            <p className=\"text-green-200 text-sm\">Du hast Samen erhalten:</p>\n          </div>\n\n          {/* Reward Display */}\n          <div className=\"bg-black/30 rounded-lg p-4 border border-green-500/30 w-full\">\n            <div className=\"flex items-center justify-center gap-4\">\n              <div className=\"text-4xl font-bold text-white\">\n                {quantity}x\n              </div>\n              <Badge \n                className=\"text-base font-bold px-3 py-1 border-2\"\n                style={{ \n                  backgroundColor: rarityColor.replace('text-', 'bg-').replace('-400', '-600'),\n                  borderColor: rarityColor.replace('text-', 'border-').replace('-400', '-400'),\n                  color: 'white'\n                }}\n              >\n                🌱 {rarityName} Samen\n              </Badge>\n            </div>\n            \n            {/* Sparkle Animation */}\n            {isAnimating && (\n              <div className=\"flex justify-center mt-3 space-x-2\">\n                <Sparkles className=\"h-4 w-4 text-yellow-400 animate-ping\" style={{animationDelay: '0ms'}} />\n                <Sparkles className=\"h-4 w-4 text-yellow-400 animate-ping\" style={{animationDelay: '200ms'}} />\n                <Sparkles className=\"h-4 w-4 text-yellow-400 animate-ping\" style={{animationDelay: '400ms'}} />\n              </div>\n            )}\n          </div>\n\n          {/* Description */}\n          <p className=\"text-green-300/80 text-xs\">\n            Automatisch zu deinem Inventar hinzugefügt!\n          </p>\n\n          {/* Close Button */}\n          <Button\n            onClick={onClose}\n            className=\"bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-bold px-6 py-2 rounded-lg shadow-lg transition-all duration-200 hover:shadow-xl\"\n          >\n            Perfekt! 🌟\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":4080},"client/src/components/FishRewardDialog.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { getRarityColor, getRarityDisplayName, getRarityBadgeStyle, type RarityTier } from \"@shared/rarity\";\nimport { Sparkles, Fish, Trophy } from \"lucide-react\";\n\ninterface FishRewardDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  fishName: string;\n  fishImageUrl: string;\n  rarity: string;\n}\n\nexport const FishRewardDialog: React.FC<FishRewardDialogProps> = ({\n  isOpen,\n  onClose,\n  fishName,\n  fishImageUrl,\n  rarity\n}) => {\n  const [isAnimating, setIsAnimating] = useState(false);\n  \n  useEffect(() => {\n    if (isOpen) {\n      setIsAnimating(true);\n      const timer = setTimeout(() => setIsAnimating(false), 800);\n      return () => clearTimeout(timer);\n    }\n  }, [isOpen]);\n\n  const rarityName = getRarityDisplayName(rarity as RarityTier);\n  const rarityColor = getRarityColor(rarity as RarityTier);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-blue-950 via-cyan-950 to-blue-950 border-2 border-blue-500/30 text-white max-w-md shadow-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"sr-only\">Fisch gefangen - {fishName}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex flex-col items-center text-center p-6 space-y-6\">\n          {/* Animated Icon */}\n          <div className={`relative ${isAnimating ? 'animate-bounce' : ''}`}>\n            <div className=\"bg-gradient-to-br from-blue-600 to-cyan-600 rounded-full p-4 shadow-lg\">\n              <Fish className=\"h-12 w-12 text-white\" />\n            </div>\n            {isAnimating && (\n              <div className=\"absolute -top-2 -right-2\">\n                <Sparkles className=\"h-6 w-6 text-yellow-400 animate-ping\" />\n              </div>\n            )}\n          </div>\n\n          {/* Title */}\n          <div className=\"space-y-2\">\n            <h2 className=\"text-2xl font-bold text-cyan-300 flex items-center justify-center gap-2\">\n              <Trophy className=\"h-6 w-6\" />\n              Fisch gefangen!\n            </h2>\n            <p className=\"text-cyan-200\">Du hast einen wunderschönen Fisch aus dem Teich gefangen:</p>\n          </div>\n\n          {/* Fish Display */}\n          <div className=\"bg-black/30 rounded-lg p-6 border border-blue-500/30 w-full\">\n            {/* Fish Image */}\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"relative\">\n                <img \n                  src={fishImageUrl}\n                  alt={fishName}\n                  className=\"w-64 h-64 object-contain rounded-lg shadow-lg\"\n                  style={{ width: '250px', height: '250px' }}\n                />\n                {isAnimating && (\n                  <div className=\"absolute -top-2 -right-2\">\n                    <Sparkles className=\"h-8 w-8 text-yellow-400 animate-ping\" />\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            {/* Fish Info */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-center\">\n                <Badge className={`${getRarityBadgeStyle(rarity as RarityTier)} text-lg font-bold px-4 py-2 border-2`}>\n                  🐟 {fishName}\n                </Badge>\n              </div>\n              \n              <div className=\"flex items-center justify-center\">\n                <Badge className={`${getRarityBadgeStyle(rarity as RarityTier)} text-sm font-bold px-3 py-1`}>\n                  {rarityName}\n                </Badge>\n              </div>\n            </div>\n            \n            {/* Sparkle Animation */}\n            {isAnimating && (\n              <div className=\"flex justify-center mt-3 space-x-2\">\n                <Sparkles className=\"h-4 w-4 text-cyan-400 animate-ping\" style={{animationDelay: '0ms'}} />\n                <Sparkles className=\"h-4 w-4 text-blue-400 animate-ping\" style={{animationDelay: '200ms'}} />\n                <Sparkles className=\"h-4 w-4 text-cyan-400 animate-ping\" style={{animationDelay: '400ms'}} />\n              </div>\n            )}\n          </div>\n\n          {/* Description */}\n          <p className=\"text-blue-300/80 text-sm\">\n            Der Fisch wurde automatisch zu deinem Inventar hinzugefügt!\n          </p>\n\n          {/* Close Button */}\n          <Button\n            onClick={onClose}\n            className=\"bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white font-bold px-8 py-2 rounded-lg shadow-lg transition-all duration-200 hover:shadow-xl\"\n          >\n            Fantastisch! 🌊\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":4858},"client/src/components/MariePosaButton.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Crown } from 'lucide-react';\nimport MariePosaDialog from './MariePosaDialog';\nimport MariePosaReturnDialog from './MariePosaReturnDialog';\nimport { useAuth } from '@/lib/stores/useAuth';\n\ninterface MariePosaButtonProps {\n  userId: number;\n}\n\nexport default function MariePosaButton({ userId }: MariePosaButtonProps) {\n  const { user } = useAuth();\n  const [isAvailable, setIsAvailable] = useState(false);\n  const [showDialog, setShowDialog] = useState(false);\n  const [showReturnDialog, setShowReturnDialog] = useState(false);\n  const [nextAvailableAt, setNextAvailableAt] = useState<Date | null>(null);\n\n  const checkMariePosaStatus = async () => {\n    if (!userId) return;\n\n    try {\n      const response = await fetch(`/api/user/${userId}/marie-posa-status`);\n      if (response.ok) {\n        const data = await response.json();\n        setIsAvailable(data.isAvailable);\n        setNextAvailableAt(data.nextAvailableAt ? new Date(data.nextAvailableAt) : null);\n      }\n    } catch (error) {\n      console.error('Error checking Marie Posa status:', error);\n    }\n  };\n\n  // Check status on mount and every minute\n  useEffect(() => {\n    checkMariePosaStatus();\n    const interval = setInterval(checkMariePosaStatus, 60000); // Check every minute\n    return () => clearInterval(interval);\n  }, [userId]);\n\n  const handleClick = () => {\n    if (isAvailable) {\n      setShowDialog(true);\n    } else {\n      // Show nice dialog when Marie Posa will be available next\n      if (nextAvailableAt && nextAvailableAt.getTime() > Date.now()) {\n        setShowReturnDialog(true);\n      }\n    }\n  };\n\n  const handlePurchaseComplete = () => {\n    // Refresh status after successful purchase\n    checkMariePosaStatus();\n  };\n\n  const buttonClassName = isAvailable \n    ? \"border-yellow-500 text-yellow-300 hover:bg-yellow-800 hover:text-white shadow-lg shadow-yellow-400/20 animate-pulse px-2 sm:px-3\" \n    : \"border-slate-600 text-slate-400 hover:bg-slate-700 hover:text-slate-300 px-2 sm:px-3\";\n\n  const titleText = isAvailable \n    ? \"Marie Posa - Handeln verfügbar!\" \n    : nextAvailableAt \n      ? `Marie Posa - Verfügbar um ${nextAvailableAt.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}`\n      : \"Marie Posa - Exklusive Händlerin\";\n\n  return (\n    <>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={handleClick}\n        className={buttonClassName}\n        title={titleText}\n      >\n        <Crown className={`h-4 w-4 sm:mr-2 ${isAvailable ? 'text-yellow-400' : 'text-slate-400'}`} />\n        <span className=\"hidden sm:inline\">\n          {isAvailable ? \"Marie\" : \"Marie\"}\n        </span>\n      </Button>\n\n      <MariePosaDialog\n        isOpen={showDialog}\n        onClose={() => setShowDialog(false)}\n        user={user}\n        onPurchaseComplete={handlePurchaseComplete}\n      />\n\n      {nextAvailableAt && (\n        <MariePosaReturnDialog\n          isOpen={showReturnDialog}\n          onClose={() => setShowReturnDialog(false)}\n          nextAvailableAt={nextAvailableAt}\n        />\n      )}\n    </>\n  );\n}","size_bytes":3167},"client/src/components/MariePosaDialog.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\nimport { useNotification } from '../hooks/useNotification';\nimport { getRarityColor, getRarityDisplayName, getRarityFromAssetId, type RarityTier } from '@shared/rarity';\n\n// Helper function to map rarity number to RarityTier\nconst mapRarityNumberToTier = (rarity: number): RarityTier => {\n  const rarityMap: Record<number, RarityTier> = {\n    0: 'common',\n    1: 'uncommon', \n    2: 'rare',\n    3: 'super-rare',\n    4: 'epic',\n    5: 'legendary',\n    6: 'mythical'\n  };\n  return rarityMap[rarity] || 'common';\n};\n\n// Helper function to map RarityTier to number\nconst mapRarityTierToNumber = (tier: RarityTier): number => {\n  const tierMap: Record<RarityTier, number> = {\n    'common': 0,\n    'uncommon': 1,\n    'rare': 2,\n    'super-rare': 3,\n    'epic': 4,\n    'legendary': 5,\n    'mythical': 6,\n    'vip': 7  // VIP hinzugefügt\n  };\n  return tierMap[tier] || 0;\n};\n\ninterface MariePosaDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  user: any;\n  onPurchaseComplete: () => void;\n}\n\ninterface SellableItem {\n  id: string;\n  type: 'flower' | 'butterfly' | 'caterpillar' | 'fish';\n  name: string;\n  rarity: number;\n  normalPrice: number;\n  sellPrice: number; // 50% of normal price\n  imageUrl?: string;\n  originalId: number;\n}\n\ninterface SelectedItem extends SellableItem {\n  quantity: number;\n}\n\n// Preise basierend auf echten Detaildialog-Preisen\nconst getItemPrice = (type: string, rarity: number): number => {\n  const rarityTier = mapRarityNumberToTier(rarity);\n  \n  switch (type) {\n    case 'butterfly': {\n      // FIXED: Must match Exhibition system prices exactly!\n      const butterflyPrices = {\n        'common': 10,\n        'uncommon': 25,\n        'rare': 50,\n        'super-rare': 100,\n        'epic': 200,\n        'legendary': 500,\n        'mythical': 1000\n      };\n      return butterflyPrices[rarityTier as keyof typeof butterflyPrices] || 10;\n    }\n    case 'fish': {\n      const fishPrices = {\n        'common': 80,\n        'uncommon': 200,\n        'rare': 450,\n        'super-rare': 940,\n        'epic': 1500,\n        'legendary': 2200,\n        'mythical': 4000\n      };\n      return fishPrices[rarityTier as keyof typeof fishPrices] || 80;\n    }\n    case 'flower': {\n      // FIXED: Use correct Exhibition-based butterfly prices!\n      const butterflyPrices = {\n        'common': 10,\n        'uncommon': 25,\n        'rare': 50,\n        'super-rare': 100,\n        'epic': 200,\n        'legendary': 500,\n        'mythical': 1000\n      };\n      // Blumenpreise = 30% der Schmetterlingspreise\n      return Math.floor((butterflyPrices[rarityTier as keyof typeof butterflyPrices] || 10) * 0.3);\n    }\n    case 'caterpillar': {\n      // Raupenpreise = 40% der Fischpreise\n      const fishPrices = {\n        'common': 80,\n        'uncommon': 200,\n        'rare': 450,\n        'super-rare': 940,\n        'epic': 1500,\n        'legendary': 2200,\n        'mythical': 4000\n      };\n      return Math.floor((fishPrices[rarityTier as keyof typeof fishPrices] || 80) * 0.4);\n    }\n    default:\n      return 50;\n  }\n};\n\nexport default function MariePosaDialog({ isOpen, onClose, user, onPurchaseComplete }: MariePosaDialogProps) {\n  const { showNotification } = useNotification();\n  const [availableItems, setAvailableItems] = useState<SellableItem[]>([]);\n  const [selectedItems, setSelectedItems] = useState<SelectedItem[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSelling, setIsSelling] = useState(false);\n  \n  // Collapsible state für Kategorien - alle eingeklappt starten\n  const [expandedCategories, setExpandedCategories] = useState({\n    flower: false,\n    butterfly: false, \n    caterpillar: false,\n    fish: false\n  });\n\n  const fetchAvailableItems = async () => {\n    if (!user) return;\n\n    setIsLoading(true);\n    try {\n      const [flowersRes, butterfliesRes, fishRes, caterpillarsRes] = await Promise.all([\n        fetch(`/api/user/${user.id}/flowers`),\n        fetch(`/api/user/${user.id}/butterflies`),\n        fetch(`/api/user/${user.id}/fish`),\n        fetch(`/api/user/${user.id}/caterpillars`)\n      ]);\n\n      const flowers = await flowersRes.json();\n      const butterflies = await butterfliesRes.json();\n      const fish = await fishRes.json();\n      const caterpillars = await caterpillarsRes.json();\n\n      const items: SellableItem[] = [];\n\n      // Add flowers with robust rarity handling\n      flowers.flowers?.forEach((flower: any) => {\n        // Calculate rarity dynamically from flowerId\n        const rarityTier = getRarityFromAssetId('flower', flower.flowerId || 0);\n        const rarity = mapRarityTierToNumber(rarityTier);\n        const normalPrice = getItemPrice('flower', rarity);\n        items.push({\n          id: `flower-${flower.id}`,\n          type: 'flower',\n          name: flower.flowerName || `Blume ${flower.flowerId || flower.id}`,\n          rarity: rarity,\n          normalPrice: normalPrice,\n          sellPrice: Math.floor(normalPrice * 0.5),\n          imageUrl: flower.flowerImageUrl,\n          originalId: flower.id\n        });\n      });\n\n      // Add butterflies with robust rarity handling\n      butterflies.butterflies?.forEach((butterfly: any) => {\n        // Use stored rarity first, fall back to calculation if missing\n        let rarity = 0;\n        if (butterfly.butterflyRarity && butterfly.butterflyRarity !== null) {\n          // Use stored rarity tier from database\n          const rarityTier = butterfly.butterflyRarity as RarityTier;\n          rarity = mapRarityTierToNumber(rarityTier);\n        } else {\n          // Fallback: Calculate rarity dynamically from butterflyId\n          const butterflyId = butterfly.butterflyId || 0;\n          const rarityTier = getRarityFromAssetId('butterfly', butterflyId);\n          rarity = mapRarityTierToNumber(rarityTier);\n        }\n        const normalPrice = getItemPrice('butterfly', rarity);\n        items.push({\n          id: `butterfly-${butterfly.id}`,\n          type: 'butterfly',\n          name: butterfly.butterflyName || `Schmetterling ${butterfly.butterflyId || butterfly.id}`,\n          rarity: rarity,\n          normalPrice: normalPrice,\n          sellPrice: Math.floor(normalPrice * 0.5),\n          imageUrl: butterfly.butterflyImageUrl,\n          originalId: butterfly.id\n        });\n      });\n\n      // Add fish with robust rarity handling\n      fish.fish?.forEach((fishItem: any) => {\n        // Calculate rarity dynamically from fishId\n        const rarityTier = getRarityFromAssetId('butterfly', fishItem.fishId || 0); // Fish use butterfly ranges\n        const rarity = mapRarityTierToNumber(rarityTier);\n        const normalPrice = getItemPrice('fish', rarity);\n        items.push({\n          id: `fish-${fishItem.id}`,\n          type: 'fish',\n          name: fishItem.fishName || `Fisch ${fishItem.fishId || fishItem.id}`,\n          rarity: rarity,\n          normalPrice: normalPrice,\n          sellPrice: Math.floor(normalPrice * 0.5),\n          imageUrl: fishItem.fishImageUrl,\n          originalId: fishItem.id\n        });\n      });\n\n      // Add caterpillars with robust rarity handling  \n      caterpillars.caterpillars?.forEach((caterpillar: any) => {\n        // Calculate rarity dynamically from caterpillarId\n        const rarityTier = getRarityFromAssetId('butterfly', caterpillar.caterpillarId || 0); // Caterpillars use butterfly ranges\n        const rarity = mapRarityTierToNumber(rarityTier);\n        const normalPrice = getItemPrice('caterpillar', rarity);\n        items.push({\n          id: `caterpillar-${caterpillar.id}`,\n          type: 'caterpillar', \n          name: caterpillar.caterpillarName || `Raupe ${caterpillar.caterpillarId || caterpillar.id}`,\n          rarity: rarity,\n          normalPrice: normalPrice,\n          sellPrice: Math.floor(normalPrice * 0.5),\n          imageUrl: caterpillar.caterpillarImageUrl,\n          originalId: caterpillar.id\n        });\n      });\n\n      setAvailableItems(items);\n    } catch (error) {\n      console.error('Error fetching items:', error);\n      showNotification('Fehler beim Laden der verfügbaren Items', 'error');\n    }\n    setIsLoading(false);\n  };\n\n  const handleItemSelect = (item: SellableItem) => {\n    const existingItem = selectedItems.find(selected => selected.id === item.id);\n    \n    if (existingItem) {\n      // Item abwählen\n      setSelectedItems(prev => prev.filter(selected => selected.id !== item.id));\n    } else {\n      // Item auswählen\n      if (selectedItems.length >= 4) {\n        showNotification('Marie Posa kauft maximal 4 Items pro Besuch!', 'warning');\n        return;\n      }\n      setSelectedItems(prev => [...prev, { ...item, quantity: 1 }]);\n    }\n  };\n\n\n  const handleSell = async () => {\n    if (!user || selectedItems.length === 0) return;\n\n    setIsSelling(true);\n    try {\n      const sellData = {\n        items: selectedItems.map(item => ({\n          type: item.type,\n          originalId: item.originalId,\n          sellPrice: item.sellPrice\n        }))\n      };\n\n      const response = await fetch(`/api/user/${user.id}/marie-posa-sell`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': user.id.toString()\n        },\n        body: JSON.stringify(sellData)\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        const totalEarned = selectedItems.reduce((sum, item) => sum + item.sellPrice, 0);\n        \n        showNotification(\n          `Marie Posa hat deine Items für ${totalEarned} Credits gekauft! 💰✨`, \n          'success'\n        );\n        \n        setSelectedItems([]);\n        onPurchaseComplete();\n        onClose();\n      } else {\n        const error = await response.json();\n        showNotification(error.message || 'Verkauf fehlgeschlagen', 'error');\n      }\n    } catch (error) {\n      console.error('Error selling items:', error);\n      showNotification('Fehler beim Verkauf', 'error');\n    }\n    setIsSelling(false);\n  };\n\n  const totalValue = selectedItems.reduce((sum, item) => sum + item.sellPrice, 0);\n\n  const getItemIcon = (type: string) => {\n    switch (type) {\n      case 'flower': return <span className=\"text-lg\">🌸</span>;\n      case 'butterfly': return <span className=\"text-lg\">🦋</span>;\n      case 'caterpillar': return <span className=\"text-lg\">🐛</span>;\n      case 'fish': return <span className=\"text-lg\">🐟</span>;\n      default: return <span className=\"text-lg\">✨</span>;\n    }\n  };\n\n  const getCategoryTitle = (type: string) => {\n    switch (type) {\n      case 'flower': return 'Blumen';\n      case 'butterfly': return 'Schmetterlinge';\n      case 'caterpillar': return 'Raupen';\n      case 'fish': return 'Fische';\n      default: return type;\n    }\n  };\n  \n  // Prüfe ob eine Kategorie ausgewählte Items hat\n  const categoryHasSelectedItems = (categoryType: string): boolean => {\n    return selectedItems.some(item => item.type === categoryType);\n  };\n  \n  const toggleCategory = (type: string) => {\n    setExpandedCategories(prev => ({\n      ...prev,\n      [type]: !prev[type as keyof typeof prev]\n    }));\n  };\n  \n  // Gruppiere Items nach Typ\n  const groupedItems = availableItems.reduce((acc, item) => {\n    if (!acc[item.type]) acc[item.type] = [];\n    acc[item.type].push(item);\n    return acc;\n  }, {} as Record<string, SellableItem[]>);\n\n  useEffect(() => {\n    if (isOpen && user) {\n      fetchAvailableItems();\n      setSelectedItems([]);\n    }\n  }, [isOpen, user]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent \n        className=\"bg-gradient-to-br from-amber-900/20 to-yellow-900/20 border-2 border-yellow-500/30 text-white max-w-5xl max-h-[90vh] overflow-hidden\"\n        aria-describedby=\"marie-posa-description\"\n      >\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center text-2xl font-bold text-yellow-200\">\n            <span className=\"text-3xl mr-3 animate-pulse\">👑</span>\n            Marie Posa - Exklusive Händlerin\n          </DialogTitle>\n          <div id=\"marie-posa-description\" className=\"sr-only\">\n            Marie Posa Handelsdialog zum Verkauf von Items für Credits\n          </div>\n          <p className=\"text-yellow-300/80 text-sm\">\n            Ich kaufe deine wertvollen Items zum halben Marktpreis - sofortige Bezahlung garantiert!\n          </p>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 overflow-y-auto max-h-[70vh]\">\n          {/* Info Panel */}\n          <Card className=\"bg-yellow-900/30 border-yellow-500/30\">\n            <CardContent className=\"p-4\">\n              <h3 className=\"font-bold text-yellow-200 mb-2 flex items-center\">\n                <span className=\"text-lg mr-2\">🛒</span>\n                Handelsbedingungen\n              </h3>\n              <ul className=\"text-yellow-100/80 text-sm space-y-1\">\n                <li>• Maximal 4 Items pro Besuch</li>\n                <li>• 50% des Marktwertes - sofort ausgezahlt</li>\n                <li>• Alle 3 Stunden verfügbar</li>\n                <li>• Keine Rückgabe möglich</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          {/* Items List mit Kategorien */}\n          <div className=\"space-y-3\">\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin w-8 h-8 border-4 border-yellow-500 border-t-transparent rounded-full mx-auto mb-2\"></div>\n                <p className=\"text-yellow-200\">Marie Posa durchsucht ihre Ware...</p>\n              </div>\n            ) : availableItems.length === 0 ? (\n              <div className=\"text-center py-8 text-yellow-200\">\n                Du hast keine Items zum Verkauf.\n              </div>\n            ) : (\n              Object.keys(groupedItems).map(categoryType => {\n                const items = groupedItems[categoryType];\n                const isExpanded = expandedCategories[categoryType as keyof typeof expandedCategories];\n                \n                return (\n                  <div key={categoryType} className=\"border border-yellow-500/30 rounded-lg bg-yellow-900/20\">\n                    <Collapsible open={isExpanded} onOpenChange={() => toggleCategory(categoryType)}>\n                      <CollapsibleTrigger className=\"w-full\">\n                        <div className={`flex items-center justify-between p-3 transition-colors ${\n                          categoryHasSelectedItems(categoryType) \n                            ? 'bg-gradient-to-r from-yellow-600/20 to-yellow-800/20 hover:from-yellow-600/30 hover:to-yellow-800/30' \n                            : 'hover:bg-yellow-800/20'\n                        }`}>\n                          <div className=\"flex items-center gap-3\">\n                            {getItemIcon(categoryType)}\n                            <span className={`font-medium ${\n                              categoryHasSelectedItems(categoryType) ? 'text-yellow-300' : 'text-yellow-200'\n                            }`}>{getCategoryTitle(categoryType)}</span>\n                            <Badge variant=\"secondary\" className={`${\n                              categoryHasSelectedItems(categoryType) \n                                ? 'bg-yellow-600/40 text-yellow-100 border-yellow-400/50' \n                                : 'bg-yellow-700/30 text-yellow-200'\n                            }`}>\n                              {items.length}\n                            </Badge>\n                          </div>\n                          {isExpanded ? (\n                            <span className={`text-lg ${\n                              categoryHasSelectedItems(categoryType) ? 'text-yellow-300' : 'text-yellow-200'\n                            }`}>⬇️</span>\n                          ) : (\n                            <span className={`text-lg ${\n                              categoryHasSelectedItems(categoryType) ? 'text-yellow-300' : 'text-yellow-200'\n                            }`}>▶️</span>\n                          )}\n                        </div>\n                      </CollapsibleTrigger>\n                      \n                      <CollapsibleContent>\n                        <div className=\"px-3 pb-3\">\n                          <div className=\"grid grid-cols-2 gap-2\">\n                            {items.map(item => (\n                            <Card \n                              key={item.id} \n                              className={`cursor-pointer transition-all duration-300 ${\n                                selectedItems.some(selected => selected.id === item.id)\n                                  ? 'bg-gradient-to-br from-yellow-600/30 to-yellow-800/30 border-yellow-400 shadow-lg shadow-yellow-400/20 scale-[1.01]'\n                                  : 'bg-slate-800/50 border-slate-600 hover:bg-yellow-800/10 hover:border-yellow-500/50'\n                              }`}\n                              onClick={() => handleItemSelect(item)}\n                            >\n                              <CardContent className=\"p-3 flex items-center justify-between\">\n                                <div className=\"flex items-center gap-3\">\n                                  {/* 80x80px Bild */}\n                                  <div className=\"w-20 h-20 bg-slate-700 rounded-lg flex items-center justify-center overflow-hidden\">\n                                    {item.imageUrl ? (\n                                      <img \n                                        src={item.imageUrl} \n                                        alt={item.name}\n                                        className=\"w-full h-full object-cover\"\n                                      />\n                                    ) : (\n                                      <div className=\"text-slate-400\">\n                                        {getItemIcon(item.type)}\n                                      </div>\n                                    )}\n                                  </div>\n                                  <div className=\"flex flex-col\">\n                                    <span className=\"font-medium text-sm text-white\">{item.name}</span>\n                                    <Badge \n                                      className={`text-xs w-fit ${getRarityColor(mapRarityNumberToTier(item.rarity))} border`}\n                                      variant=\"outline\"\n                                    >\n                                      {getRarityDisplayName(mapRarityNumberToTier(item.rarity))}\n                                    </Badge>\n                                  </div>\n                                </div>\n                                <div className=\"text-right relative\">\n                                  {selectedItems.some(selected => selected.id === item.id) && (\n                                    <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-yellow-400 rounded-full flex items-center justify-center animate-pulse\">\n                                      <span className=\"text-xs font-bold text-black\">✓</span>\n                                    </div>\n                                  )}\n                                  <div className={`text-sm font-medium ${\n                                    selectedItems.some(selected => selected.id === item.id) \n                                      ? 'text-yellow-300' \n                                      : 'text-green-400'\n                                  }`}>\n                                    {item.sellPrice} Cr\n                                  </div>\n                                  <div className=\"text-xs text-slate-400 line-through\">\n                                    Normal: {item.normalPrice} Cr\n                                  </div>\n                                  <div className=\"text-xs text-amber-400 font-medium\">\n                                    50% Rabatt\n                                  </div>\n                                </div>\n                              </CardContent>\n                            </Card>\n                            ))}\n                          </div>\n                        </div>\n                      </CollapsibleContent>\n                    </Collapsible>\n                  </div>\n                );\n              })\n            )}\n          </div>\n\n          {/* Kurze Zusammenfassung nur wenn Items ausgewählt */}\n          {selectedItems.length > 0 && (\n            <div className=\"border-t border-yellow-500/30 pt-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-yellow-200 font-medium flex items-center gap-2\">\n                  <span className=\"text-lg\">🛒</span>\n                  {selectedItems.length} Item{selectedItems.length > 1 ? 's' : ''} ausgewählt (max. 4)\n                </span>\n                <span className=\"text-lg text-yellow-300 font-bold\">\n                  Gesamt: {totalValue} Cr\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-between gap-3 pt-4 border-t border-yellow-500/30\">\n          <Button \n            onClick={onClose}\n            variant=\"outline\"\n            className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n          >\n            Abbrechen\n          </Button>\n          \n          <Button\n            onClick={handleSell}\n            disabled={selectedItems.length === 0 || isSelling}\n            className={`font-medium flex items-center gap-2 transition-all ${\n              selectedItems.length > 0 \n                ? 'bg-yellow-600 hover:bg-yellow-700 text-black shadow-lg shadow-yellow-400/30' \n                : 'bg-slate-600 text-slate-400 cursor-not-allowed'\n            }`}\n          >\n            {isSelling ? (\n              <>\n                <div className=\"w-4 h-4 border-2 border-black border-t-transparent rounded-full animate-spin\" />\n                Verkaufe...\n              </>\n            ) : selectedItems.length > 0 ? (\n              <>\n                <span className=\"text-lg\">👑</span>\n                An Marie Posa verkaufen ({totalValue} Cr)\n              </>\n            ) : (\n              <>\n                <span className=\"text-lg\">👑</span>\n                Items auswählen zum Verkaufen\n              </>\n            )}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":22832},"client/src/components/MariePosaReturnDialog.tsx":{"content":"import React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Crown, Clock, Calendar, Sparkles } from 'lucide-react';\n\ninterface MariePosaReturnDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  nextAvailableAt: Date;\n}\n\nexport default function MariePosaReturnDialog({ isOpen, onClose, nextAvailableAt }: MariePosaReturnDialogProps) {\n  const timeLeft = nextAvailableAt.getTime() - Date.now();\n  const hours = Math.floor(timeLeft / (1000 * 60 * 60));\n  const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n  \n  const formattedTime = nextAvailableAt.toLocaleTimeString('de-DE', { \n    hour: '2-digit', \n    minute: '2-digit' \n  });\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-amber-900/20 to-yellow-900/20 border-2 border-yellow-500/30 text-white max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center text-xl font-bold text-yellow-200\">\n            <Crown className=\"h-6 w-6 mr-3 text-yellow-400\" />\n            👑 Marie Posa\n          </DialogTitle>\n          <DialogDescription className=\"text-yellow-300/80\">\n            Die exklusive Händlerin ist momentan nicht verfügbar\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-6 py-4\">\n          {/* Status */}\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-yellow-900/40 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Clock className=\"h-8 w-8 text-yellow-400\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-yellow-200 mb-2\">\n              Marie ist auf Handelsreise\n            </h3>\n            <p className=\"text-yellow-300/80 text-sm\">\n              Sie durchsucht die Welt nach wertvollen Schätzen und kehrt bald zurück!\n            </p>\n          </div>\n\n          {/* Countdown */}\n          <div className=\"bg-yellow-900/30 border border-yellow-500/30 rounded-lg p-4\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"flex items-center justify-center gap-2 text-yellow-200\">\n                <Sparkles className=\"h-4 w-4\" />\n                <span className=\"font-medium\">Rückkehr in:</span>\n              </div>\n              \n              <div className=\"text-2xl font-bold text-yellow-300\">\n                {hours > 0 && (\n                  <span>{hours}h </span>\n                )}\n                {minutes}min\n              </div>\n              \n              <div className=\"flex items-center justify-center gap-2 text-yellow-400/80 text-sm\">\n                <Calendar className=\"h-3 w-3\" />\n                <span>Verfügbar um {formattedTime}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Info */}\n          <div className=\"text-center text-yellow-300/70 text-sm\">\n            Marie Posa ist alle 3 Stunden verfügbar und bietet dir 50% des Marktwertes für deine wertvollen Items.\n          </div>\n        </div>\n\n        {/* Action Button */}\n        <div className=\"flex justify-center pt-2\">\n          <Button \n            onClick={onClose}\n            className=\"bg-yellow-600 hover:bg-yellow-700 text-black font-medium px-6\"\n          >\n            Verstanden\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3483},"client/src/components/MarieSlotView.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowLeft, Zap, Sun, Coins, Star, Trophy, Crown, Flower, Volume2, VolumeX } from 'lucide-react';\nimport { HelpButton } from './HelpButton';\nimport { useAuth } from '@/lib/stores/useAuth';\nimport { useSuns } from '@/lib/stores/useSuns';\nimport { useCredits } from '@/lib/stores/useCredits';\nimport { useNotification } from '../hooks/useNotification';\nimport { useAudio } from '@/lib/stores/useAudio';\n\n// Slot machine symbols with real game images\ninterface SlotSymbol {\n  id: string;\n  type: 'caterpillar' | 'flower' | 'butterfly' | 'fish' | 'sun';\n  imageUrl: string;\n  name: string;\n}\n\n// Create symbol pools - SIMPLE & SAFE - use only guaranteed existing images\nconst createSymbolPools = (): SlotSymbol[] => {\n  // Use only guaranteed safe image IDs that definitely exist\n  const safeIds = {\n    caterpillar: [0, 1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 20, 21, 22],\n    flower: [0, 1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 20, 21, 22],\n    butterfly: [0, 1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 20, 21, 22],\n    fish: [0, 1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 20, 21, 22]\n  };\n  \n  // Pick random from safe lists\n  const randomCaterpillarId = safeIds.caterpillar[Math.floor(Math.random() * safeIds.caterpillar.length)];\n  const randomFlowerId = safeIds.flower[Math.floor(Math.random() * safeIds.flower.length)];\n  const randomButterflyId = safeIds.butterfly[Math.floor(Math.random() * safeIds.butterfly.length)];\n  const randomFishId = safeIds.fish[Math.floor(Math.random() * safeIds.fish.length)];\n  \n  const symbols: SlotSymbol[] = [\n    // Sun symbol - using real sun image from Landschaft folder\n    {\n      id: 'sun',\n      type: 'sun',\n      imageUrl: '/Landschaft/Sonne.png',\n      name: 'Sonne'\n    },\n    // Safe caterpillar\n    {\n      id: `caterpillar-${randomCaterpillarId}`,\n      type: 'caterpillar', \n      imageUrl: `/Raupen/${randomCaterpillarId}.jpg`,\n      name: 'Raupe'\n    },\n    // Safe flower\n    {\n      id: `flower-${randomFlowerId}`,\n      type: 'flower',\n      imageUrl: `/Blumen/${randomFlowerId}.jpg`, \n      name: 'Blume'\n    },\n    // Safe butterfly\n    {\n      id: `butterfly-${randomButterflyId}`,\n      type: 'butterfly',\n      imageUrl: `/Schmetterlinge/${randomButterflyId}.jpg`,\n      name: 'Schmetterling'\n    },\n    // Safe fish\n    {\n      id: `fish-${randomFishId}`,\n      type: 'fish',\n      imageUrl: `/Fische/${randomFishId}.jpg`,\n      name: 'Fisch'\n    }\n  ];\n  \n  console.log('🎰 Mari-Slot: Using SAFE symbols:', {\n    caterpillar: randomCaterpillarId,\n    flower: randomFlowerId, \n    butterfly: randomButterflyId,\n    fish: randomFishId\n  });\n  \n  return symbols;\n};\nconst REEL_HEIGHT = 480; // Height of visible reel area für quadratische Bilder\nconst SYMBOL_HEIGHT = 160; // Height of each symbol (480px / 3 = 160px)\nconst SYMBOLS_PER_REEL = 3; // Only show 3 symbols per reel\nconst SYMBOLS_PER_DRUM = 15; // Total symbols per drum (5 symbols × 3 each)\n\ninterface Reel {\n  symbols: SlotSymbol[];\n  position: number; // Current scroll position\n  isSpinning: boolean;\n  targetPosition: number;\n  finalSymbol: SlotSymbol;\n}\n\nexport const MarieSlotView: React.FC<{ onBack: () => void }> = ({ onBack }) => {\n  const { user } = useAuth();\n  const { suns, setSuns } = useSuns();\n  const { credits, setCredits } = useCredits();\n  const { showNotification } = useNotification();\n  const { playSlotSpin, playSlotStop, playSuccess, isMuted, toggleMute } = useAudio();\n  \n  const [reels, setReels] = useState<Reel[]>([]);\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [lastWinMessage, setLastWinMessage] = useState('');\n  const [isWinning, setIsWinning] = useState(false);\n  const [blinkCount, setBlinkCount] = useState(0);\n  const [recoilStates, setRecoilStates] = useState<boolean[]>([]);\n  const animationRefs = useRef<{ [key: number]: NodeJS.Timeout | null }>({});\n\n  const spinCost = 5;\n  const spinCostCredits = 10;\n\n  // Create a drum with 15 symbols (each of the 5 symbols appears 3 times, shuffled)\n  const createDrum = (symbolsToUse: SlotSymbol[]): SlotSymbol[] => {\n    const drum: SlotSymbol[] = [];\n    // Add each symbol 3 times\n    symbolsToUse.forEach(symbol => {\n      for (let i = 0; i < 3; i++) {\n        drum.push(symbol);\n      }\n    });\n    \n    // Shuffle the drum using Fisher-Yates algorithm\n    for (let i = drum.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [drum[i], drum[j]] = [drum[j], drum[i]];\n    }\n    \n    return drum;\n  };\n\n  // Generate new random symbols each time the component mounts\n  const [symbols, setSymbols] = useState<SlotSymbol[]>([]);\n\n  // Initialize reels\n  useEffect(() => {\n    // Create new random symbols each time\n    const newSymbols = createSymbolPools();\n    setSymbols(newSymbols);\n    \n    const initReels = Array(5).fill(null).map(() => {\n      return {\n        symbols: createDrum(newSymbols),\n        position: 0,\n        isSpinning: false,\n        targetPosition: 0,\n        finalSymbol: newSymbols[0]\n      };\n    });\n    \n    setReels(initReels);\n    setRecoilStates(new Array(5).fill(false));\n  }, []);\n\n  // Get random symbol of specific type\n  const getRandomSymbolOfType = (type: string): SlotSymbol => {\n    if (symbols.length === 0) return symbols[0]; // Safety fallback\n    const typeSymbols = symbols.filter(s => s.type === type);\n    return typeSymbols[Math.floor(Math.random() * typeSymbols.length)];\n  };\n\n  // Create spinning reel with final symbol in middle - FIXED\n  const createSpinningReel = (finalSymbol: SlotSymbol): SlotSymbol[] => {\n    // Create a new shuffled drum for spinning\n    const drum = createDrum(symbols);\n    \n    // CRITICAL FIX: Ensure the final symbol is at the EXACT middle position for payline\n    const middlePosition = Math.floor(drum.length / 2);\n    drum[middlePosition] = finalSymbol;\n    \n    console.log(`🎰 Reel created with middle symbol: ${finalSymbol.type} at position ${middlePosition}`);\n    return drum;\n  };\n\n  // Handle spin (Suns version)\n  const handleSpin = async () => {\n    if (!user || isSpinning) return;\n    \n    if (suns < spinCost) {\n      showNotification('Nicht genügend Sonnen! Du brauchst 5 Sonnen zum Spielen.', 'error');\n      return;\n    }\n\n    setIsSpinning(true);\n    // Sound für startende Trommeln\n    playSlotSpin();\n    // Gewinnzeile bleibt während dem Drehen stehen\n    setBlinkCount(0); // Stoppe aktuelles Blinken\n\n    try {\n      // Call server API\n      const response = await fetch(`/api/user/${user.id}/marie-slot-play`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        setLastWinMessage(data.message || 'Ein Fehler ist aufgetreten');\n        setIsWinning(false);\n        setBlinkCount(3); // Blink 3x for error\n        setIsSpinning(false);\n        return;\n      }\n\n      // Update global sun count immediately for consistent UI\n      const newSunCount = suns - spinCost;\n      setSuns(newSunCount);\n\n      // Convert server response to final symbols - FIXED: Use exact symbols from server\n      console.log('🎰 Server response:', data);\n      console.log('🎰 Server payline:', data.payline);\n      \n      // Use the exact payline symbols from server (no random generation)\n      const paylineFromServer = data.payline || data.reels.slice(0, 5); // Fallback for old format\n      const finalSymbols = paylineFromServer.map((symbolType: string, index: number) => {\n        // Use first available symbol of this type (consistent display)\n        const typeSymbols = symbols.filter(s => s.type === symbolType);\n        return typeSymbols.length > 0 ? typeSymbols[0] : symbols[0]; // Safety fallback\n      });\n      \n      console.log('🎰 Final symbols for display:', finalSymbols.map((s: SlotSymbol) => s.type));\n      console.log('🎰 Exact payline should be:', paylineFromServer);\n\n      // Create new spinning reels with final symbols\n      const newReels = reels.map((reel, index) => ({\n        ...reel,\n        symbols: createSpinningReel(finalSymbols[index]),\n        isSpinning: true,\n        position: 0,\n        targetPosition: SYMBOL_HEIGHT * (Math.floor(SYMBOLS_PER_DRUM / 2) - 1), // Position to show final symbol in middle row (PAYLINE)\n        finalSymbol: finalSymbols[index]\n      }));\n\n      setReels(newReels);\n\n      // Start spinning animations - each reel stops after a delay (longer spinning)\n      const spinDurations = [3000, 3500, 4000, 4500, 5000]; // Longer staggered stopping times\n      \n      spinDurations.forEach((duration, reelIndex) => {\n        // Clear any existing timeout\n        if (animationRefs.current[reelIndex]) {\n          clearTimeout(animationRefs.current[reelIndex]!);\n        }\n        \n        // Set new timeout to stop this reel\n        animationRefs.current[reelIndex] = setTimeout(() => {\n          // Rückstoss-Effekt kurz vor dem Stoppen (Trommel rutscht nach oben und fällt zurück)\n          setRecoilStates(prev => {\n            const newStates = [...prev];\n            newStates[reelIndex] = true;\n            return newStates;\n          });\n\n          // Nach 400ms Rückstoss die Trommel stoppen\n          setTimeout(() => {\n            // Sound für stoppende Trommel\n            playSlotStop();\n            \n            setReels(prevReels => {\n              const updatedReels = [...prevReels];\n              updatedReels[reelIndex] = {\n                ...updatedReels[reelIndex],\n                isSpinning: false,\n                position: updatedReels[reelIndex].targetPosition\n              };\n              return updatedReels;\n            });\n\n            // Rückstoss ausschalten\n            setRecoilStates(prev => {\n              const newStates = [...prev];\n              newStates[reelIndex] = false;\n              return newStates;\n            });\n          }, 400);\n\n          // Check if all reels have stopped\n          if (reelIndex === spinDurations.length - 1) {\n            setTimeout(() => {\n              setIsSpinning(false);\n              \n              // Handle win results\n              if (data.matchCount >= 2) {\n                // Sound für Gewinn\n                playSuccess();\n                \n                setIsWinning(true);\n                setLastWinMessage(data.message);\n                \n                // Update global state immediately based on reward  \n                if (data.reward?.type === 'suns') {\n                  const currentSuns = suns - spinCost; // Recalculate current sun count\n                  const newSunTotal = currentSuns + data.reward.amount;\n                  setSuns(newSunTotal);\n                } else if (data.reward?.type === 'credits') {\n                  setCredits(credits + data.reward.amount);\n                }\n                \n                setBlinkCount(3); // Blink 3x gold for win\n              } else {\n                setLastWinMessage(data.message);\n                setIsWinning(false);\n                setBlinkCount(0); // Keine Blinks für Verlust\n              }\n            }, 500);\n          }\n        }, duration);\n      });\n\n    } catch (error) {\n      console.error('Error spinning slot machine:', error);\n      setLastWinMessage('Verbindungsfehler beim Slot-Spiel');\n      setIsWinning(false);\n      setBlinkCount(3); // Blink 3x for error\n      setIsSpinning(false);\n    }\n  };\n\n  // Handle spin (Credits version)\n  const handleSpinCredits = async () => {\n    if (!user || isSpinning) return;\n    \n    if (credits < spinCostCredits) {\n      showNotification('Nicht genügend Credits! Du brauchst 10 Credits zum Spielen.', 'error');\n      return;\n    }\n\n    setIsSpinning(true);\n    // Sound für startende Trommeln\n    playSlotSpin();\n    // Gewinnzeile bleibt während dem Drehen stehen\n    setBlinkCount(0); // Stoppe aktuelles Blinken\n\n    try {\n      // Call server API for credits version\n      const response = await fetch(`/api/user/${user.id}/marie-slot-play-credits`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        setLastWinMessage(data.message || 'Ein Fehler ist aufgetreten');\n        setIsWinning(false);\n        setBlinkCount(3); // Blink 3x for error\n        setIsSpinning(false);\n        return;\n      }\n\n      // Update global credit count immediately for consistent UI\n      const newCreditCount = credits - spinCostCredits;\n      setCredits(newCreditCount);\n\n      // Convert server response to final symbols - FIXED: Use exact symbols from server\n      console.log('🎰 Credit-Server response:', data);\n      console.log('🎰 Credit-Server payline:', data.payline);\n      \n      // Use the exact payline symbols from server (no random generation)\n      const paylineFromServer = data.payline || data.reels.slice(0, 5); // Fallback for old format\n      const finalSymbols = paylineFromServer.map((symbolType: string, index: number) => {\n        // Use first available symbol of this type (consistent display)\n        const typeSymbols = symbols.filter(s => s.type === symbolType);\n        return typeSymbols.length > 0 ? typeSymbols[0] : symbols[0]; // Safety fallback\n      });\n      \n      console.log('🎰 Credit-Final symbols for display:', finalSymbols.map((s: SlotSymbol) => s.type));\n      console.log('🎰 Credit-Exact payline should be:', paylineFromServer);\n\n      // Create new spinning reels with final symbols\n      const newReels = reels.map((reel, index) => ({\n        ...reel,\n        symbols: createSpinningReel(finalSymbols[index]),\n        isSpinning: true,\n        position: 0,\n        targetPosition: SYMBOL_HEIGHT * (Math.floor(SYMBOLS_PER_DRUM / 2) - 1), // Position to show final symbol in middle row (PAYLINE)\n        finalSymbol: finalSymbols[index]\n      }));\n\n      setReels(newReels);\n\n      // Start spinning animations - each reel stops after a delay (longer spinning)\n      const spinDurations = [3000, 3500, 4000, 4500, 5000]; // Longer staggered stopping times\n      \n      spinDurations.forEach((duration, reelIndex) => {\n        // Clear any existing timeout\n        if (animationRefs.current[reelIndex]) {\n          clearTimeout(animationRefs.current[reelIndex]!);\n        }\n        \n        // Set new timeout to stop this reel\n        animationRefs.current[reelIndex] = setTimeout(() => {\n          // Rückstoss-Effekt kurz vor dem Stoppen (Trommel rutscht nach oben und fällt zurück)\n          setRecoilStates(prev => {\n            const newStates = [...prev];\n            newStates[reelIndex] = true;\n            return newStates;\n          });\n\n          // Nach 400ms Rückstoss die Trommel stoppen\n          setTimeout(() => {\n            // Sound für stoppende Trommel\n            playSlotStop();\n            \n            setReels(prevReels => {\n              const updatedReels = [...prevReels];\n              updatedReels[reelIndex] = {\n                ...updatedReels[reelIndex],\n                isSpinning: false,\n                position: updatedReels[reelIndex].targetPosition\n              };\n              return updatedReels;\n            });\n\n            // Rückstoss ausschalten\n            setRecoilStates(prev => {\n              const newStates = [...prev];\n              newStates[reelIndex] = false;\n              return newStates;\n            });\n          }, 400);\n\n          // Check if all reels have stopped\n          if (reelIndex === spinDurations.length - 1) {\n            setTimeout(() => {\n              setIsSpinning(false);\n              \n              // Handle win results\n              if (data.matchCount >= 2) {\n                // Sound für Gewinn\n                playSuccess();\n                \n                setIsWinning(true);\n                setLastWinMessage(data.message);\n                \n                // Update global state immediately based on reward  \n                if (data.reward?.type === 'suns') {\n                  setSuns(suns + data.reward.amount);\n                } else if (data.reward?.type === 'credits') {\n                  const currentCredits = credits - spinCostCredits; // Recalculate current credit count\n                  const newCreditTotal = currentCredits + data.reward.amount;\n                  setCredits(newCreditTotal);\n                }\n                \n                setBlinkCount(3); // Blink 3x gold for win\n              } else {\n                setLastWinMessage(data.message);\n                setIsWinning(false);\n                setBlinkCount(0); // Keine Blinks für Verlust\n              }\n            }, 500);\n          }\n        }, duration);\n      });\n\n    } catch (error) {\n      console.error('Error spinning credit slot machine:', error);\n      setLastWinMessage('Verbindungsfehler beim Credit-Slot-Spiel');\n      setIsWinning(false);\n      setBlinkCount(3); // Blink 3x for error\n      setIsSpinning(false);\n    }\n  };\n\n  // Handle blinking animation\n  useEffect(() => {\n    if (blinkCount > 0) {\n      const timer = setTimeout(() => {\n        setBlinkCount(prev => prev - 1);\n      }, 500); // Blink every 500ms\n      \n      return () => clearTimeout(timer);\n    }\n  }, [blinkCount]);\n\n  // Cleanup timeouts\n  useEffect(() => {\n    return () => {\n      Object.values(animationRefs.current).forEach(timeout => {\n        if (timeout) clearTimeout(timeout);\n      });\n    };\n  }, []);\n\n  // Render individual reel\n  const renderReel = (reel: Reel, index: number) => {\n    const spinSpeed = reel.isSpinning ? 'animate-spin-fast' : '';\n    \n    return (\n      <div key={index} className={`relative overflow-hidden bg-slate-800 rounded-lg border-2 border-yellow-500 ${recoilStates[index] ? 'animate-[recoil_0.3s_ease-out]' : ''}`}>\n        <div \n          className={`transition-transform ${reel.isSpinning ? 'duration-100 ease-linear' : 'duration-500 ease-out'}`}\n          style={{\n            transform: `translateY(-${reel.position}px)`,\n            height: REEL_HEIGHT\n          }}\n        >\n          <div className={reel.isSpinning ? 'animate-spin-slow' : ''}>\n            {reel.symbols.map((symbol, symbolIndex) => (\n              <div\n                key={`${index}-${symbolIndex}`}\n                className=\"flex items-center justify-center border-b border-slate-600\"\n                style={{ height: SYMBOL_HEIGHT }}\n              >\n                <div className=\"relative w-40 h-40\">\n                  <img\n                    src={symbol.imageUrl}\n                    alt={symbol.name}\n                    className=\"w-full h-full object-contain rounded border border-gray-600\"\n                    onError={(e) => {\n                      console.error('🎰 Image failed to load:', symbol.imageUrl);\n                      // This shouldn't happen with safe IDs, but just in case\n                      const target = e.target as HTMLImageElement;\n                      target.style.display = 'none';\n                    }}\n                  />\n                  {/* Glow effect for spinning */}\n                  {reel.isSpinning && (\n                    <div className=\"absolute inset-0 bg-yellow-400 opacity-30 animate-pulse rounded\" />\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Center line indicator */}\n        <div className=\"absolute top-1/2 left-0 right-0 h-0.5 bg-yellow-400 opacity-50 pointer-events-none transform -translate-y-1/2\" />\n      </div>\n    );\n  };\n\n  if (reels.length === 0 || symbols.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center\">\n        <div className=\"text-white text-xl\">🎰 Lade Marie-Slot mit zufälligen Bildern...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button\n            variant=\"outline\"\n            onClick={onBack}\n            className=\"border-blue-700 text-blue-200 bg-blue-800 hover:bg-blue-700\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Zurück\n          </Button>\n          \n          <div className=\"text-center\">\n            <h1 className=\"text-4xl font-bold text-white mb-2 flex items-center justify-center gap-3\">\n              <Coins className=\"h-10 w-10 text-yellow-400\" />\n              Marie-Slot\n              <Coins className=\"h-10 w-10 text-yellow-400\" />\n              <HelpButton helpText=\"Marie-Slot ist dein Glücksspielautomat! Setze 5 Sonnen oder 10 Credits und drehe die Rollen. Nur die mittleren Symbole (Payline) zählen für Gewinne: 2 gleiche = 3 Sonnen, 3 Sonnen = 50 Credits, 3 andere = seltener Samen!\" viewType=\"marie-slot\" />\n            </h1>\n            <p className=\"text-purple-200 text-lg\">Achtung! - Glücksspiel kann süchtig machen!</p>\n          </div>\n          \n          <div className=\"text-right text-white\">\n            {/* Sound Toggle Button */}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={toggleMute}\n              className=\"mb-4 border-yellow-500 text-yellow-400 hover:bg-yellow-500/20 hover:text-yellow-300\"\n              title={isMuted ? \"Sound aktivieren\" : \"Sound deaktivieren\"}\n            >\n              {isMuted ? <VolumeX className=\"h-4 w-4\" /> : <Volume2 className=\"h-4 w-4\" />}\n            </Button>\n            \n            <div className=\"flex items-center gap-2 mb-1\">\n              <Sun className=\"h-6 w-6 text-yellow-400\" />\n              <span className=\"font-bold text-2xl\">{suns}</span>\n            </div>\n            <div className=\"text-sm text-purple-200\">Sonnen</div>\n            \n            <div className=\"flex items-center gap-2 mb-1 mt-3\">\n              <Coins className=\"h-6 w-6 text-yellow-400\" />\n              <span className=\"font-bold text-2xl\">{credits}</span>\n            </div>\n            <div className=\"text-sm text-purple-200\">Credits</div>\n          </div>\n        </div>\n\n        {/* Main Slot Machine */}\n        <Card className=\"bg-gradient-to-b from-slate-900 to-slate-800 border-yellow-500 border-4 shadow-2xl\">\n          <CardHeader className=\"text-center pb-4\">\n            {/* Gewinnzeile über den Trommeln - immer sichtbar */}\n            <div className={`p-4 rounded-lg ${\n              lastWinMessage ? (\n                isWinning \n                  ? `bg-yellow-800/50 border border-yellow-400 text-yellow-200 ${blinkCount > 0 ? 'animate-pulse bg-gradient-to-r from-yellow-600/70 to-orange-600/70 shadow-lg shadow-yellow-500/25' : ''}` \n                  : 'bg-blue-800/50 border border-blue-400 text-blue-200'\n              ) : 'bg-slate-800/30 border border-slate-600 text-slate-400'\n            }`}>\n              <div className={`text-lg font-bold ${isWinning && blinkCount > 0 ? 'text-yellow-100' : ''}`}>\n                {lastWinMessage ? (isWinning ? `🎉 ${lastWinMessage}` : lastWinMessage) : 'Viel Glück! 🍀'}\n              </div>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"px-8 pb-8\">\n            {/* Slot Machine Reels */}\n            <div className=\"bg-slate-900 rounded-xl p-6 mb-8 border-4 border-yellow-600 shadow-inner\">\n              <div className=\"grid grid-cols-5 gap-4\" style={{ height: REEL_HEIGHT }}>\n                {reels.map((reel, index) => renderReel(reel, index))}\n              </div>\n            </div>\n\n            {/* Spin Buttons */}\n            <div className=\"text-center\">\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n                {/* Sonnen-Spin Button */}\n                <Button\n                  onClick={handleSpin}\n                  disabled={isSpinning || suns < spinCost}\n                  className={`px-8 py-4 text-xl font-bold rounded-xl transition-all transform hover:scale-105 ${\n                    isSpinning \n                      ? 'bg-gray-600 cursor-not-allowed' \n                      : suns >= spinCost\n                        ? 'bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-black shadow-lg animate-pulse'\n                        : 'bg-gray-600 cursor-not-allowed text-gray-400'\n                  }`}\n                >\n                  {isSpinning ? (\n                    <>\n                      <Zap className=\"h-5 w-5 mr-2 animate-spin\" />\n                      Dreht sich...\n                    </>\n                  ) : suns >= spinCost ? (\n                    <>\n                      <Zap className=\"h-5 w-5 mr-2\" />\n                      DREHEN! (5 <Sun className=\"h-4 w-4 inline\" />)\n                    </>\n                  ) : (\n                    'Nicht genug Sonnen'\n                  )}\n                </Button>\n                \n                {/* Credits-Spin Button */}\n                <Button\n                  onClick={handleSpinCredits}\n                  disabled={isSpinning || credits < spinCostCredits}\n                  className={`px-8 py-4 text-xl font-bold rounded-xl transition-all transform hover:scale-105 ${\n                    isSpinning \n                      ? 'bg-gray-600 cursor-not-allowed' \n                      : credits >= spinCostCredits\n                        ? 'bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white shadow-lg animate-pulse'\n                        : 'bg-gray-600 cursor-not-allowed text-gray-400'\n                  }`}\n                >\n                  {isSpinning ? (\n                    <>\n                      <Zap className=\"h-5 w-5 mr-2 animate-spin\" />\n                      Dreht sich...\n                    </>\n                  ) : credits >= spinCostCredits ? (\n                    <>\n                      <Zap className=\"h-5 w-5 mr-2\" />\n                      DREHEN! (10 <Coins className=\"h-4 w-4 inline\" />)\n                    </>\n                  ) : (\n                    'Nicht genug Credits'\n                  )}\n                </Button>\n              </div>\n              \n              {/* Schöne Gewinnübersicht */}\n              <div className=\"mt-8 bg-gradient-to-r from-slate-800/80 to-slate-700/80 rounded-xl p-6 border-2 border-yellow-600/50\">\n                <h3 className=\"text-xl font-bold text-center text-yellow-400 mb-6 flex items-center justify-center gap-2\">\n                  <Trophy className=\"h-6 w-6\" />\n                  Gewinnmöglichkeiten\n                  <Trophy className=\"h-6 w-6\" />\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-5 gap-3\">\n                  {/* 2 Gleiche */}\n                  <div className=\"bg-green-800/30 border border-green-400/50 rounded-lg p-4 text-center hover:scale-105 transition-transform\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <span className=\"text-2xl font-bold text-green-300\">2×</span>\n                    </div>\n                    <div className=\"flex items-center justify-center gap-1 mb-2\">\n                      <Sun className=\"h-5 w-5 text-yellow-400\" />\n                      <span className=\"text-green-200 font-semibold\">3 Sonnen</span>\n                    </div>\n                    <div className=\"text-xs text-green-300\">~74%</div>\n                  </div>\n\n                  {/* 3 Gleiche (Nicht Sonne) */}\n                  <div className=\"bg-blue-800/30 border border-blue-400/50 rounded-lg p-3 text-center hover:scale-105 transition-transform\">\n                    <div className=\"flex items-center justify-center mb-1\">\n                      <span className=\"text-xl font-bold text-blue-300\">3×</span>\n                    </div>\n                    <div className=\"flex items-center justify-center gap-1 mb-1\">\n                      <Flower className=\"h-4 w-4 text-blue-400\" />\n                      <span className=\"text-blue-200 font-semibold text-sm\">Rare Samen</span>\n                    </div>\n                    <div className=\"text-xs text-blue-300\">~20%</div>\n                  </div>\n\n                  {/* 3 Sonnen Bonus */}\n                  <div className=\"bg-yellow-800/30 border border-yellow-400/50 rounded-lg p-3 text-center hover:scale-105 transition-transform\">\n                    <div className=\"flex items-center justify-center mb-1\">\n                      <span className=\"text-xl font-bold text-yellow-300\">3☀️</span>\n                    </div>\n                    <div className=\"flex items-center justify-center gap-1 mb-1\">\n                      <Coins className=\"h-4 w-4 text-yellow-400\" />\n                      <span className=\"text-yellow-200 font-semibold text-sm\">50 Credits</span>\n                    </div>\n                    <div className=\"text-xs text-yellow-300\">~5%</div>\n                  </div>\n\n                  {/* 4 Gleiche */}\n                  <div className=\"bg-purple-800/30 border border-purple-400/50 rounded-lg p-4 text-center hover:scale-105 transition-transform\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <span className=\"text-2xl font-bold text-purple-300\">4×</span>\n                    </div>\n                    <div className=\"flex items-center justify-center gap-1 mb-2\">\n                      <Crown className=\"h-5 w-5 text-purple-400\" />\n                      <span className=\"text-purple-200 font-semibold text-sm\">Epischer 🦋</span>\n                    </div>\n                    <div className=\"text-xs text-purple-300\">~1.5%</div>\n                  </div>\n\n                  {/* 5 Gleiche - JACKPOT */}\n                  <div className=\"bg-gradient-to-r from-yellow-800/50 to-orange-800/50 border-2 border-yellow-400/80 rounded-lg p-4 text-center animate-pulse hover:scale-105 transition-transform\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <span className=\"text-2xl font-bold text-yellow-300\">5×</span>\n                    </div>\n                    <div className=\"flex items-center justify-center gap-1 mb-2\">\n                      <Coins className=\"h-5 w-5 text-yellow-400\" />\n                      <span className=\"text-yellow-200 font-bold\">1000 Credits</span>\n                    </div>\n                    <div className=\"text-xs text-yellow-300 font-bold\">JACKPOT!</div>\n                    <div className=\"text-xs text-yellow-400\">~0.03%</div>\n                  </div>\n                </div>\n                \n                <div className=\"text-center mt-4 text-sm text-slate-400\">\n                  💡 Nur die mittleren Symbole zählen für Gewinne\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};","size_bytes":31117},"client/src/components/HelpButton.tsx":{"content":"import React from 'react';\nimport { HelpCircle, Info } from 'lucide-react';\nimport { HelpDialog } from './HelpDialog';\n\ninterface HelpButtonProps {\n  helpText: string;\n  viewType: 'garden' | 'pond' | 'market' | 'inventory' | 'bouquets' | 'aquarium' | 'flowerpower' | 'exhibition' | 'marie-slot' | 'dna';\n}\n\nexport const HelpButton: React.FC<HelpButtonProps> = ({ helpText, viewType }) => {\n  const [showDialog, setShowDialog] = React.useState(false);\n\n  return (\n    <>\n      <button\n        onClick={() => setShowDialog(true)}\n        className=\"px-3 py-1.5 bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white text-sm font-medium rounded-full shadow-lg border border-orange-400/50 transition-all duration-300 hover:scale-105 flex items-center gap-1.5 relative\"\n        title=\"Ausführliche Hilfe für diesen Bereich öffnen\"\n      >\n        <Info className=\"h-4 w-4\" />\n        <span className=\"hidden sm:inline\">Das machst du hier...</span>\n        \n        {/* Sanfter Leucht-Effekt - wie Marie-Posa Button */}\n        <div className=\"absolute inset-0 bg-gradient-to-r from-orange-500/30 to-orange-600/30 rounded-full blur-sm -z-10 animate-pulse\" style={{animationDuration: '2s'}}></div>\n      </button>\n      \n      <HelpDialog\n        isOpen={showDialog}\n        onClose={() => setShowDialog(false)}\n        viewType={viewType}\n      />\n    </>\n  );\n};","size_bytes":1405},"client/src/components/CaterpillarDetailModal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { RarityImage } from \"./RarityImage\";\nimport { X, Clock, Coins, Timer, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\nimport { toast } from \"sonner\";\n\ninterface CaterpillarDetailProps {\n  id: number;\n  caterpillarName: string;\n  caterpillarRarity: string;\n  caterpillarImageUrl: string;\n  placedAt?: string;\n  userId: number;\n}\n\ninterface CaterpillarDetailModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  caterpillar: CaterpillarDetailProps | null;\n  onSold: () => void;\n  readOnly?: boolean;\n  // Navigation props\n  currentIndex?: number;\n  totalCount?: number;\n  onNext?: () => void;\n  onPrevious?: () => void;\n}\n\nexport const CaterpillarDetailModal: React.FC<CaterpillarDetailModalProps> = ({\n  isOpen,\n  onClose,\n  caterpillar,\n  onSold,\n  readOnly = false,\n  currentIndex,\n  totalCount,\n  onNext,\n  onPrevious\n}) => {\n  const [timeRemaining, setTimeRemaining] = useState<number>(0);\n  const [canSell, setCanSell] = useState<boolean>(false);\n  const [isSelling, setIsSelling] = useState<boolean>(false);\n\n  // Mouse wheel navigation\n  useEffect(() => {\n    if (!isOpen || !onNext || !onPrevious) return;\n\n    const handleWheel = (e: Event) => {\n      e.preventDefault();\n      const wheelEvent = e as WheelEvent;\n      if (wheelEvent.deltaY > 0) {\n        // Scroll down = Next\n        if (currentIndex !== undefined && totalCount !== undefined && currentIndex < totalCount - 1) {\n          onNext();\n        }\n      } else if (wheelEvent.deltaY < 0) {\n        // Scroll up = Previous  \n        if (currentIndex !== undefined && currentIndex > 0) {\n          onPrevious();\n        }\n      }\n    };\n\n    const dialogElement = document.querySelector('[role=\"dialog\"]');\n    if (dialogElement) {\n      dialogElement.addEventListener('wheel', handleWheel, { passive: false });\n      return () => dialogElement.removeEventListener('wheel', handleWheel);\n    }\n  }, [isOpen, onNext, onPrevious, currentIndex, totalCount]);\n\n  // Calculate countdown every second (12 hours for caterpillars)\n  useEffect(() => {\n    if (!caterpillar || readOnly) return;\n\n    const fetchSellStatus = async () => {\n      try {\n        const response = await fetch(`/api/caterpillars/${caterpillar.id}/sell-status`, {\n          headers: { \n            'X-User-Id': caterpillar.userId.toString()\n          }\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          setCanSell(data.canSell);\n          setTimeRemaining(data.timeRemainingMs);\n        } else {\n          // Fallback to local calculation (12 hours for caterpillars)\n          if (caterpillar.placedAt) {\n            const placedTime = new Date(caterpillar.placedAt).getTime();\n            const now = new Date().getTime();\n            const timeSincePlacement = now - placedTime;\n            const TWELVE_HOURS = 12 * 60 * 60 * 1000; // 12h vs 72h for butterflies, 24h for fish\n            const remaining = TWELVE_HOURS - timeSincePlacement;\n            \n            if (remaining <= 0) {\n              setCanSell(true);\n              setTimeRemaining(0);\n            } else {\n              setCanSell(false);\n              setTimeRemaining(remaining);\n            }\n          } else {\n            // No placement time means it's a regular caterpillar from garden, immediately sellable\n            setCanSell(true);\n            setTimeRemaining(0);\n          }\n        }\n      } catch (error) {\n        console.error('Failed to fetch caterpillar sell status:', error);\n        // For regular caterpillars (not from pond), they're immediately sellable\n        if (!caterpillar.placedAt) {\n          setCanSell(true);\n          setTimeRemaining(0);\n        }\n      }\n    };\n\n    fetchSellStatus();\n    const interval = setInterval(fetchSellStatus, 1000);\n\n    return () => clearInterval(interval);\n  }, [caterpillar, readOnly]);\n\n  const formatTime = (ms: number): string => {\n    if (ms <= 0) return \"Verkauf möglich!\";\n    \n    const totalSeconds = Math.floor(ms / 1000);\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = totalSeconds % 60;\n    \n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const getCaterpillarPrice = (rarity: string): number => {\n    // Raupenpreise = 40% der Fischpreise\n    const fishPrice = (() => {\n      switch (rarity.toLowerCase()) {\n        case 'common': return 80;\n        case 'uncommon': return 200;\n        case 'rare': return 450;\n        case 'super-rare': return 940;\n        case 'epic': return 1500;\n        case 'legendary': return 2200;\n        case 'mythical': return 4000;\n        default: return 80;\n      }\n    })();\n    return Math.floor(fishPrice * 0.4); // 40% of fish price\n  };\n\n  const handleSell = async () => {\n    if (!caterpillar || !canSell || isSelling) return;\n\n    setIsSelling(true);\n    try {\n      const response = await fetch('/api/caterpillars/sell', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-User-Id': caterpillar.userId.toString()\n        },\n        body: JSON.stringify({\n          caterpillarId: caterpillar.id\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast.success(`Raupe verkauft!`, {\n          description: `Du hast ${result.creditsEarned} Credits erhalten.`\n        });\n        onSold();\n        onClose();\n      } else {\n        const errorData = await response.json();\n        toast.error('Verkauf fehlgeschlagen', {\n          description: errorData.message || 'Die Raupe konnte nicht verkauft werden.'\n        });\n      }\n    } catch (error) {\n      console.error('Failed to sell caterpillar:', error);\n      toast.error('Verkauf fehlgeschlagen', {\n        description: 'Ein Netzwerkfehler ist aufgetreten.'\n      });\n    } finally {\n      setIsSelling(false);\n    }\n  };\n\n  if (!caterpillar) return null;\n\n  const price = getCaterpillarPrice(caterpillar.caterpillarRarity);\n  const rarityColor = getRarityColor(caterpillar.caterpillarRarity as RarityTier);\n  const rarityDisplayName = getRarityDisplayName(caterpillar.caterpillarRarity as RarityTier);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md w-full max-w-[95vw] max-h-[90vh] overflow-y-auto bg-slate-900 text-slate-50 border-slate-700\">\n        <div className=\"flex justify-between items-center\">\n          <DialogHeader className=\"flex-1\">\n            <DialogTitle className=\"text-xl font-bold text-slate-50 pr-8\">\n              Raupe Details\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"flex items-center space-x-2\">\n            {/* Navigation arrows */}\n            {onPrevious && currentIndex !== undefined && currentIndex > 0 && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onPrevious}\n                className=\"h-8 w-8 text-slate-400 hover:text-slate-200 hover:bg-slate-800\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n            )}\n            \n            {/* Counter */}\n            {currentIndex !== undefined && totalCount !== undefined && (\n              <div className=\"text-sm text-slate-400 px-2 min-w-[4rem] text-center\">\n                {currentIndex + 1}/{totalCount}\n              </div>\n            )}\n            \n            {onNext && currentIndex !== undefined && totalCount !== undefined && currentIndex < totalCount - 1 && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onNext}\n                className=\"h-8 w-8 text-slate-400 hover:text-slate-200 hover:bg-slate-800\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            )}\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className=\"h-8 w-8 text-slate-400 hover:text-slate-200 hover:bg-slate-800\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Caterpillar Image and Basic Info */}\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <RarityImage\n                  src={caterpillar.caterpillarImageUrl}\n                  alt={caterpillar.caterpillarName}\n                  rarity={caterpillar.caterpillarRarity as RarityTier}\n                  size=\"xl\"\n                  className=\"w-32 h-32\"\n                />\n                \n                <div className=\"text-center space-y-2\">\n                  <h3 className=\"text-2xl font-bold text-slate-50\">\n                    {caterpillar.caterpillarName}\n                  </h3>\n                  <Badge \n                    variant=\"outline\" \n                    className=\"text-sm font-medium border-2\"\n                    style={{ \n                      borderColor: rarityColor,\n                      color: rarityColor,\n                      backgroundColor: `${rarityColor}20`\n                    }}\n                  >\n                    {rarityDisplayName}\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Price Information */}\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Coins className=\"h-5 w-5 text-yellow-400\" />\n                  <span className=\"text-slate-300\">Verkaufspreis:</span>\n                </div>\n                <div className=\"text-2xl font-bold text-yellow-400\">\n                  {price.toLocaleString()} Credits\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Selling Controls */}\n          {!readOnly && (\n            <div className=\"space-y-4\">\n              {!canSell && (\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Clock className=\"h-5 w-5 text-orange-400\" />\n                      <div className=\"flex-1\">\n                        <p className=\"text-slate-300 font-medium\">Verkauf verfügbar in:</p>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Timer className=\"h-4 w-4 text-orange-400\" />\n                          <span className=\"text-lg font-mono text-orange-400\">\n                            {formatTime(timeRemaining)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              <Button\n                onClick={handleSell}\n                disabled={!canSell || isSelling}\n                className={`w-full h-12 text-lg font-semibold transition-all ${\n                  canSell \n                    ? 'bg-green-600 hover:bg-green-500 text-white' \n                    : 'bg-slate-700 text-slate-400 cursor-not-allowed'\n                }`}\n              >\n                {isSelling ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\n                    <span>Verkaufe...</span>\n                  </div>\n                ) : canSell ? (\n                  `Für ${price.toLocaleString()} Credits verkaufen`\n                ) : (\n                  'Noch nicht verkaufbar'\n                )}\n              </Button>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":12475},"client/src/components/Top100Modal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Trophy, \n  Coins, \n  TrendingUp, \n  Sun, \n  Heart, \n  Flower, \n  Gift, \n  Bug, \n  Fish, \n  Sparkles,\n  Star,\n  Crown,\n  Users,\n  Dna,\n  Zap,\n  ThumbsUp\n} from \"lucide-react\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\n\ntype Top100Category = \n  | 'credits' \n  | 'passive-income' \n  | 'suns' \n  | 'likes' \n  | 'dna' \n  | 'seeds' \n  | 'flowers' \n  | 'hearts' \n  | 'butterflies' \n  | 'caterpillars' \n  | 'fish'\n  | 'exhibition-butterflies'\n  | 'exhibition-fish'\n  | 'bouquet-recipes';\n\ninterface Top100Player {\n  id: number;\n  username: string;\n  value: number;\n  rank: number;\n  isCurrentUser?: boolean;\n}\n\ninterface Top100ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const Top100Modal: React.FC<Top100ModalProps> = ({ isOpen, onClose }) => {\n  const [selectedCategory, setSelectedCategory] = useState<Top100Category>('credits');\n  const [players, setPlayers] = useState<Top100Player[]>([]);\n  const [loading, setLoading] = useState(false);\n  const { user: currentUser } = useAuth();\n\n  const categories = [\n    { id: 'credits', name: '💰 Credits', icon: Coins, color: 'from-yellow-400 to-yellow-600' },\n    { id: 'passive-income', name: '📈 Passives Einkommen', icon: TrendingUp, color: 'from-green-400 to-green-600' },\n    { id: 'suns', name: '☀️ Sonnen', icon: Sun, color: 'from-orange-400 to-orange-600' },\n    { id: 'likes', name: '👍 Likes', icon: ThumbsUp, color: 'from-pink-400 to-pink-600' },\n    { id: 'dna', name: '🧬 DNA', icon: Dna, color: 'from-violet-400 to-purple-600' },\n    { id: 'seeds', name: '🌱 Samen', icon: Sparkles, color: 'from-emerald-400 to-emerald-600' },\n    { id: 'flowers', name: '🌸 Blumen', icon: Flower, color: 'from-rose-400 to-rose-600' },\n    { id: 'hearts', name: '💖 Schlosspark-Herzen', icon: Heart, color: 'from-yellow-400 to-amber-600' },\n    { id: 'butterflies', name: '🦋 Schmetterlinge', icon: Bug, color: 'from-blue-400 to-blue-600' },\n    { id: 'caterpillars', name: '🐛 Raupen', icon: Bug, color: 'from-lime-400 to-lime-600' },\n    { id: 'fish', name: '🐟 Fische', icon: Fish, color: 'from-cyan-400 to-cyan-600' },\n    { id: 'exhibition-butterflies', name: '🏛️ Ausgestellte Schmetterlinge', icon: Star, color: 'from-indigo-400 to-indigo-600' },\n    { id: 'exhibition-fish', name: '🏛️ Ausgestellte Fische', icon: Crown, color: 'from-teal-400 to-teal-600' },\n    { id: 'bouquet-recipes', name: '📜 Bouquet Rezepte', icon: Users, color: 'from-slate-400 to-slate-600' }\n  ] as const;\n\n  useEffect(() => {\n    if (isOpen) {\n      fetchTop100Data();\n    }\n  }, [isOpen, selectedCategory]);\n\n  const fetchTop100Data = async () => {\n    if (!currentUser) return;\n    \n    setLoading(true);\n    console.log(`🏆 Fetching Top 100 data for category: ${selectedCategory}`);\n    try {\n      // Add cache-busting timestamp to ensure fresh data\n      const timestamp = Date.now();\n      const response = await fetch(`/api/rankings/top100/${selectedCategory}?t=${timestamp}`, {\n        headers: {\n          'X-User-Id': currentUser.id.toString()\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(`🏆 Received Top 100 data:`, data);\n        setPlayers(data.players || []);\n      } else {\n        console.error(`🏆 Failed to fetch rankings: ${response.status} ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('🏆 Failed to fetch top 100 data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getCurrentCategory = () => {\n    return categories.find(cat => cat.id === selectedCategory);\n  };\n\n  const formatValue = (value: number, category: Top100Category) => {\n    if (category === 'credits' || category === 'passive-income') {\n      return `${value.toLocaleString()} Cr`;\n    }\n    return value.toLocaleString();\n  };\n\n  const getRankIcon = (rank: number) => {\n    if (rank === 1) return \"🥇\";\n    if (rank === 2) return \"🥈\";\n    if (rank === 3) return \"🥉\";\n    return `#${rank}`;\n  };\n\n  const getRankStyle = (rank: number, isCurrentUser?: boolean) => {\n    let baseStyle = \"transition-all duration-300 hover:scale-105 border-2 \";\n    \n    if (isCurrentUser) {\n      baseStyle += \"border-cyan-400 bg-gradient-to-r from-cyan-800/50 to-blue-800/50 shadow-cyan-400/30\";\n    } else if (rank === 1) {\n      baseStyle += \"border-yellow-400 bg-gradient-to-r from-yellow-800/30 to-yellow-700/30\";\n    } else if (rank === 2) {\n      baseStyle += \"border-slate-300 bg-gradient-to-r from-slate-800/30 to-slate-700/30\";\n    } else if (rank === 3) {\n      baseStyle += \"border-orange-400 bg-gradient-to-r from-orange-800/30 to-orange-700/30\";\n    } else {\n      baseStyle += \"border-slate-600 bg-gradient-to-r from-slate-800 to-slate-900\";\n    }\n    \n    return baseStyle;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-cyan-500/30 text-white w-[95vw] max-w-sm md:max-w-6xl max-h-[95vh] overflow-hidden shadow-2xl\">\n        <DialogHeader className=\"relative pb-6\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-500/10 to-orange-500/10 rounded-t-lg -mx-6 -my-2\"></div>\n          <DialogTitle className=\"flex items-center text-white relative z-10\">\n            <div className=\"relative\">\n              <Trophy className=\"h-10 w-10 mr-4 text-yellow-400 animate-pulse\" />\n              <div className=\"absolute inset-0 h-10 w-10 mr-4 text-yellow-400 animate-ping opacity-30\"></div>\n            </div>\n            <span className=\"text-4xl font-bold bg-gradient-to-r from-yellow-300 to-orange-300 bg-clip-text text-transparent\">\n              TOP 100 RANGLISTE\n            </span>\n          </DialogTitle>\n          <DialogDescription className=\"sr-only\">\n            Rangliste der besten Spieler mit verschiedenen Kategorien und Statistiken.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 overflow-y-auto max-h-[calc(95vh-200px)]\">\n          {/* Category Selection */}\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 lg:grid-cols-6 xl:grid-cols-7 gap-2 md:gap-3\">\n            {categories.map((category) => {\n              const Icon = category.icon;\n              const isSelected = selectedCategory === category.id;\n              \n              return (\n                <button\n                  key={category.id}\n                  onClick={() => setSelectedCategory(category.id as Top100Category)}\n                  className={`relative group p-4 rounded-xl border-2 transition-all duration-300 hover:scale-105 ${\n                    isSelected \n                      ? `border-cyan-400 bg-gradient-to-br ${category.color} shadow-lg` \n                      : 'border-slate-600 bg-gradient-to-br from-slate-700 to-slate-800 hover:border-slate-400'\n                  }`}\n                >\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Icon \n                      className={`h-6 w-6 ${isSelected ? 'text-white' : 'text-slate-300'} transition-colors`} \n                    />\n                    <span className={`text-xs font-medium text-center leading-tight ${\n                      isSelected ? 'text-white' : 'text-slate-300'\n                    }`}>\n                      {category.name.replace(/^[^\\s]+\\s/, '')} {/* Remove emoji for better fit */}\n                    </span>\n                  </div>\n                  {isSelected && (\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-white/20 to-white/5 rounded-xl animate-pulse\"></div>\n                  )}\n                </button>\n              );\n            })}\n          </div>\n\n          {/* Current Category Display */}\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-bold bg-gradient-to-r from-cyan-300 to-blue-300 bg-clip-text text-transparent\">\n              {getCurrentCategory()?.name}\n            </h2>\n          </div>\n\n          {/* Players List */}\n          {loading ? (\n            <div className=\"text-center py-12 relative\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-500/5 to-orange-500/5 rounded-lg\"></div>\n              <div className=\"relative z-10\">\n                <div className=\"relative mb-6\">\n                  <Trophy className=\"h-16 w-16 text-yellow-400 mx-auto animate-spin\" />\n                  <div className=\"absolute inset-0 h-16 w-16 mx-auto text-yellow-400 animate-ping opacity-20\"></div>\n                </div>\n                <p className=\"text-slate-300 text-xl\">🏆 Lade Rangliste...</p>\n              </div>\n            </div>\n          ) : players.length === 0 ? (\n            <div className=\"text-center py-12 relative\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-500/5 to-orange-500/5 rounded-lg\"></div>\n              <div className=\"relative z-10\">\n                <div className=\"relative mb-6\">\n                  <Trophy className=\"h-16 w-16 text-yellow-400 mx-auto animate-bounce\" />\n                  <div className=\"absolute inset-0 h-16 w-16 mx-auto text-yellow-400 animate-ping opacity-20\"></div>\n                </div>\n                <p className=\"text-slate-300 text-xl mb-3\">🏆 Keine Daten verfügbar</p>\n                <p className=\"text-slate-400 text-lg\">Die Rangliste konnte nicht geladen werden</p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              {players.map((player) => (\n                <Card \n                  key={player.id} \n                  className={getRankStyle(player.rank, player.isCurrentUser)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        {/* Rank */}\n                        <div className=\"flex items-center justify-center w-12 h-12 rounded-full bg-slate-700/50 border-2 border-slate-600\">\n                          <span className=\"text-lg font-bold text-white\">\n                            {getRankIcon(player.rank)}\n                          </span>\n                        </div>\n                        \n                        {/* Player Info */}\n                        <div>\n                          <h3 className=\"font-bold text-white text-lg flex items-center\">\n                            {player.username}\n                            {player.isCurrentUser && (\n                              <Badge className=\"ml-2 bg-cyan-500/20 text-cyan-400 border-cyan-400\">\n                                Das bist du!\n                              </Badge>\n                            )}\n                          </h3>\n                        </div>\n                      </div>\n                      \n                      {/* Value */}\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-yellow-400\">\n                          {formatValue(player.value, selectedCategory)}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-center pt-6\">\n            <Button\n              onClick={onClose}\n              className=\"bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white text-lg px-8 py-3 font-bold transition-all duration-300 hover:scale-110 shadow-lg\"\n            >\n              ✅ Schließen\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":12110},"client/src/components/ForeignExhibitionView.old.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/lib/stores/useAuth';\nimport { useNotification } from '../hooks/useNotification';\nimport { RarityImage } from './RarityImage';\nimport { ButterflyDetailModal } from './ButterflyDetailModal';\nimport { ArrowLeft, Heart, Bug, ChevronLeft, ChevronRight, Fish } from 'lucide-react';\nimport { type RarityTier, getRarityColor, getRarityDisplayName } from '@shared/rarity';\n\ninterface ExhibitionButterfly {\n  id: number;\n  userId: number;\n  frameId: number;\n  slotIndex: number;\n  butterflyId: number;\n  butterflyName: string;\n  butterflyRarity: string;\n  butterflyImageUrl: string;\n  placedAt: string;\n  createdAt: string;\n}\n\ninterface ExhibitionFrame {\n  id: number;\n  userId: number;\n  frameNumber: number;\n  purchasedAt: string;\n  createdAt: string;\n}\n\ninterface FrameLike {\n  frameId: number;\n  isLiked: boolean;\n  totalLikes: number;\n}\n\ninterface AquariumFish {\n  id: number;\n  userId: number;\n  tankId: number;\n  slotIndex: number;\n  fishId: number;\n  fishName: string;\n  fishRarity: string;\n  fishImageUrl: string;\n  placedAt: string;\n  createdAt: string;\n}\n\ninterface AquariumTank {\n  id: number;\n  userId: number;\n  tankNumber: number;\n  purchasedAt: string;\n  createdAt: string;\n}\n\ntype ViewMode = 'exhibition' | 'aquarium';\n\ninterface ForeignExhibitionViewProps {\n  ownerId: number;\n  ownerName: string;\n  onBack: () => void;\n}\n\nexport const ForeignExhibitionView: React.FC<ForeignExhibitionViewProps> = ({\n  ownerId,\n  ownerName,\n  onBack\n}) => {\n  const { user } = useAuth();\n  const { showNotification } = useNotification();\n  const [butterflies, setButterflies] = useState<ExhibitionButterfly[]>([]);\n  const [vipButterflies, setVipButterflies] = useState<any[]>([]);\n  const [frames, setFrames] = useState<ExhibitionFrame[]>([]);\n  const [frameLikes, setFrameLikes] = useState<FrameLike[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedButterfly, setSelectedButterfly] = useState<ExhibitionButterfly | null>(null);\n  const [showButterflyModal, setShowButterflyModal] = useState(false);\n  const [currentFrameIndex, setCurrentFrameIndex] = useState(0);\n  \n  // Aquarium data\n  const [aquariumFish, setAquariumFish] = useState<AquariumFish[]>([]);\n  const [aquariumTanks, setAquariumTanks] = useState<AquariumTank[]>([]);\n  const [currentTankIndex, setCurrentTankIndex] = useState(0);\n  const [viewMode, setViewMode] = useState<ViewMode>('exhibition');\n\n  useEffect(() => {\n    loadForeignExhibition();\n    loadFrameLikes();\n    loadForeignAquarium();\n  }, [ownerId]);\n\n\n  const loadForeignExhibition = async () => {\n    try {\n      const response = await fetch(`/api/user/${ownerId}/foreign-exhibition`);\n      const data = await response.json();\n      setButterflies(data.butterflies || []);\n      setVipButterflies(data.vipButterflies || []);\n      setFrames(data.frames || []);\n    } catch (error) {\n      console.error('Failed to load foreign exhibition:', error);\n    }\n  };\n\n  const loadFrameLikes = async () => {\n    if (!user) return;\n    \n    try {\n      const response = await fetch(`/api/user/${user.id}/exhibition/${ownerId}/likes`);\n      const data = await response.json();\n      setFrameLikes(data.likes || []);\n    } catch (error) {\n      console.error('Failed to load frame likes:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadForeignAquarium = async () => {\n    try {\n      const response = await fetch(`/api/user/${ownerId}/foreign-aquarium`);\n      const data = await response.json();\n      setAquariumFish(data.fish || []);\n      setAquariumTanks(data.tanks || []);\n    } catch (error) {\n      console.error('Failed to load foreign aquarium:', error);\n    }\n  };\n\n  const handleLike = async (frameId: number) => {\n    if (!user) return;\n\n    const frameButterflies = frames.get(frameId) || [];\n    const frameLike = frameLikes.find(fl => fl.frameId === frameId);\n    const isCurrentlyLiked = frameLike?.isLiked || false;\n\n    // Check if frame has 6 butterflies before allowing like\n    if (!isCurrentlyLiked && frameButterflies.length < 6) {\n      showNotification('Du kannst nur volle Rahmen mit 6 Schmetterlingen liken!', 'warning');\n      return;\n    }\n\n    try {\n      const method = isCurrentlyLiked ? 'DELETE' : 'POST';\n      const response = await fetch('/api/exhibition/like', {\n        method,\n        headers: { \n          'Content-Type': 'application/json',\n          'X-User-Id': user?.id.toString() || '1'\n        },\n        body: JSON.stringify({\n          likerId: user.id,\n          frameOwnerId: ownerId,\n          frameId\n        })\n      });\n\n      if (response.ok) {\n        // Reload frame likes data from server to ensure consistency\n        await loadFrameLikes();\n      } else {\n        // Handle server error\n        const errorData = await response.json();\n        showNotification(errorData.message || 'Fehler beim Liken des Rahmens', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to toggle like:', error);\n      showNotification('Fehler beim Liken des Rahmens', 'error');\n    }\n  };\n\n  // Group butterflies by frame\n  const butterflyFrames = new Map<number, ExhibitionButterfly[]>();\n  const vipButterflyFrames = new Map<number, any[]>();\n  \n  butterflies.forEach(butterfly => {\n    const frameButterflies = butterflyFrames.get(butterfly.frameId) || [];\n    frameButterflies.push(butterfly);\n    butterflyFrames.set(butterfly.frameId, frameButterflies);\n  });\n  \n  vipButterflies.forEach(vipButterfly => {\n    const frameVipButterflies = vipButterflyFrames.get(vipButterfly.frameId) || [];\n    frameVipButterflies.push(vipButterfly);\n    vipButterflyFrames.set(vipButterfly.frameId, frameVipButterflies);\n  });\n\n  // Get all frame IDs with butterflies (both normal and VIP)\n  const allFrameIds = new Set([\n    ...Array.from(butterflyFrames.keys()),\n    ...Array.from(vipButterflyFrames.keys())\n  ]);\n  \n  const sortedFrameIds = Array.from(allFrameIds).sort((a, b) => {\n    const frameA = frames.find(f => f.id === a);\n    const frameB = frames.find(f => f.id === b);\n    return (frameA?.frameNumber || 0) - (frameB?.frameNumber || 0);\n  });\n\n  // Reset frame index when frames change\n  useEffect(() => {\n    if (currentFrameIndex >= sortedFrameIds.length && sortedFrameIds.length > 0) {\n      setCurrentFrameIndex(sortedFrameIds.length - 1);\n    }\n  }, [sortedFrameIds.length, currentFrameIndex]);\n\n  if (loading) {\n    return (\n      <div className=\"p-8 space-y-6\">\n        <div className=\"text-center text-slate-300\">\n          Lade Ausstellung von {ownerName}...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-800 p-4\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between bg-gradient-to-r from-slate-800 to-slate-700 rounded-xl p-6 border-2 border-slate-600\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              onClick={onBack}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"bg-slate-700 border-slate-500 hover:bg-slate-600 text-slate-200\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Zurück\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-white\">\n                {viewMode === 'exhibition' ? '🦋' : '🐠'} {viewMode === 'exhibition' ? 'Ausstellung' : 'Aquarium'} von {ownerName}\n              </h1>\n              <p className=\"text-slate-300 mt-2\">\n                {viewMode === 'exhibition' \n                  ? 'Entdecke die Schmetterlingssammlung und vergib Likes!' \n                  : 'Betrachte die Fischsammlung im Aquarium!'}\n              </p>\n              \n              {/* View Mode Toggle */}\n              <div className=\"flex space-x-2 mt-4\">\n                <Button\n                  onClick={() => setViewMode('exhibition')}\n                  variant={viewMode === 'exhibition' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  className={viewMode === 'exhibition' \n                    ? 'bg-blue-600 hover:bg-blue-700 text-white' \n                    : 'bg-slate-700 border-slate-500 hover:bg-slate-600 text-slate-200'}\n                >\n                  <Bug className=\"h-4 w-4 mr-2\" />\n                  Ausstellung\n                </Button>\n                <Button\n                  onClick={() => setViewMode('aquarium')}\n                  variant={viewMode === 'aquarium' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  className={viewMode === 'aquarium' \n                    ? 'bg-cyan-600 hover:bg-cyan-700 text-white' \n                    : 'bg-slate-700 border-slate-500 hover:bg-slate-600 text-slate-200'}\n                >\n                  <Fish className=\"h-4 w-4 mr-2\" />\n                  Aquarium\n                </Button>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-slate-300\">\n            {viewMode === 'exhibition' ? (\n              <>\n                <Bug className=\"h-8 w-8 inline mr-2 text-blue-400 animate-pulse\" />\n                {butterflies.length} Schmetterlinge ausgestellt\n              </>\n            ) : (\n              <>\n                <Fish className=\"h-8 w-8 inline mr-2 text-cyan-400 animate-pulse\" />\n                {aquariumFish.length} Fische im Aquarium\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Exhibition Mode */}\n        {viewMode === 'exhibition' && sortedFrameIds.length > 0 && (\n          <div className=\"space-y-6\">\n            {/* Navigation Controls */}\n            <div className=\"flex items-center justify-center space-x-3 bg-slate-800/60 rounded-lg p-2 border border-slate-700\">\n              <Button\n                onClick={() => setCurrentFrameIndex(Math.max(0, currentFrameIndex - 1))}\n                disabled={currentFrameIndex === 0}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"bg-slate-700 border-slate-500 hover:bg-slate-600 text-slate-200 disabled:opacity-50\"\n              >\n                <ChevronLeft className=\"h-5 w-5\" />\n              </Button>\n              \n              <div className=\"text-lg font-semibold text-slate-300\">\n                #{(frames.find(f => f.id === sortedFrameIds[currentFrameIndex])?.frameNumber || 1)} / {sortedFrameIds.length}\n              </div>\n              \n              <Button\n                onClick={() => setCurrentFrameIndex(Math.min(sortedFrameIds.length - 1, currentFrameIndex + 1))}\n                disabled={currentFrameIndex >= sortedFrameIds.length - 1}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"bg-slate-700 border-slate-500 hover:bg-slate-600 text-slate-200 disabled:opacity-50\"\n              >\n                <ChevronRight className=\"h-5 w-5\" />\n              </Button>\n            </div>\n\n            {/* Current Frame */}\n            {sortedFrameIds[currentFrameIndex] && (() => {\n              const frameId = sortedFrameIds[currentFrameIndex];\n              const frameData = frames.find(f => f.id === frameId);\n              const frameNumber = frameData?.frameNumber || 1;\n              const frameButterflies = butterflyFrames.get(frameId) || [];\n              const frameVipButterflies = vipButterflyFrames.get(frameId) || [];\n              const frameLike = frameLikes.find(fl => fl.frameId === frameId);\n              \n              const totalButterflies = frameButterflies.length + frameVipButterflies.length;\n              const isFullFrame = totalButterflies === 6;\n              const canBeLiked = isFullFrame || frameLike?.isLiked;\n              \n              return (\n                <Card \n                  key={frameId}\n                  className={`bg-gradient-to-br from-slate-800 via-slate-900 to-slate-950 border-2 ${\n                    isFullFrame \n                      ? 'border-green-500/50 hover:border-green-400/70' \n                      : 'border-slate-600 hover:border-orange-400/50'\n                  } transition-all duration-300 shadow-xl max-w-2xl mx-auto`}\n                >\n                  <CardHeader className=\"text-center\">\n                    <CardTitle className=\"text-xl font-bold text-white flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <span>🖼️ Rahmen #{frameNumber}</span>\n                        {isFullFrame && (\n                          <span className=\"ml-2 text-xs bg-green-600 text-white px-2 py-1 rounded-full animate-pulse\">\n                            Vollständig\n                          </span>\n                        )}\n                        {!isFullFrame && (\n                          <span className=\"ml-2 text-xs bg-slate-600 text-slate-300 px-2 py-1 rounded-full\">\n                            {totalButterflies}/6\n                          </span>\n                        )}\n                      </div>\n                      <Button\n                        onClick={() => handleLike(frameId)}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        disabled={!canBeLiked}\n                        className={`${\n                          frameLike?.isLiked \n                            ? 'bg-pink-600 border-pink-500 text-white hover:bg-pink-700' \n                            : canBeLiked\n                              ? 'bg-slate-700 border-slate-500 text-slate-200 hover:bg-slate-600'\n                              : 'bg-slate-800 border-slate-700 text-slate-500 cursor-not-allowed'\n                        } transition-all duration-300`}\n                        title={!canBeLiked ? 'Nur vollständige Rahmen (6 Schmetterlinge) können geliked werden' : ''}\n                      >\n                        <Heart \n                          className={`h-4 w-4 mr-2 ${\n                            frameLike?.isLiked ? 'fill-white animate-pulse' : ''\n                          }`} \n                        />\n                        {frameLike?.totalLikes || 0}\n                        {(frameLike?.totalLikes || 0) > 0 && isFullFrame && (\n                          <span className=\"ml-1 text-xs text-green-300\">(+{(frameLike?.totalLikes || 0) * 2}% Einkommen)</span>\n                        )}\n                      </Button>\n                    </CardTitle>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"grid grid-cols-3 grid-rows-2 gap-3 h-[400px] bg-gradient-to-br from-slate-900 to-slate-950 rounded-lg p-4 border border-slate-700\">\n                      {[0, 1, 2, 3, 4, 5].map(slotIndex => {\n                        const butterfly = frameButterflies.find(b => b.slotIndex === slotIndex);\n                        const vipButterfly = frameVipButterflies.find(b => b.slotIndex === slotIndex);\n                        const hasContent = butterfly || vipButterfly;\n                        \n                        return (\n                          <div\n                            key={slotIndex}\n                            className=\"aspect-square border border-dashed border-slate-600 rounded flex items-center justify-center bg-slate-800/50 hover:border-orange-400/50 transition-all duration-300 min-h-0\"\n                          >\n                            {hasContent ? (\n                              vipButterfly ? (\n                                // VIP Butterfly Display\n                                <div \n                                  className=\"relative w-full h-full group cursor-pointer bg-gradient-to-br from-pink-800/50 to-purple-800/50 rounded border-2 border-pink-500\"\n                                  onClick={() => {\n                                    // Convert VIP butterfly to normal butterfly format for the modal\n                                    const butterflyForModal = {\n                                      id: vipButterfly.id,\n                                      userId: vipButterfly.userId,\n                                      frameId: vipButterfly.frameId,\n                                      slotIndex: vipButterfly.slotIndex,\n                                      butterflyId: vipButterfly.vipButterflyId,\n                                      butterflyName: vipButterfly.vipButterflyName,\n                                      butterflyRarity: 'vip',\n                                      butterflyImageUrl: vipButterfly.vipButterflyImageUrl,\n                                      placedAt: vipButterfly.placedAt,\n                                      createdAt: vipButterfly.createdAt\n                                    };\n                                    setSelectedButterfly(butterflyForModal);\n                                    setShowButterflyModal(true);\n                                  }}\n                                >\n                                  {/* Animated sparkle overlay */}\n                                  <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/10 to-purple-500/10 rounded animate-pulse\"></div>\n                                  \n                                  <img\n                                    src={vipButterfly.vipButterflyImageUrl}\n                                    alt={vipButterfly.vipButterflyName}\n                                    className=\"w-full h-full object-cover rounded transition-transform group-hover:scale-105 relative z-10\"\n                                    onError={(e) => {\n                                      e.currentTarget.style.display = 'none';\n                                    }}\n                                  />\n                                  \n                                  {/* VIP Crown Icon */}\n                                  <div className=\"absolute top-1 right-1 bg-yellow-400 rounded-full p-1 z-20\">\n                                    <Bug className=\"w-3 h-3 text-yellow-900\" />\n                                  </div>\n                                  \n                                  <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded flex items-center justify-center z-20\">\n                                    <div className=\"text-center text-white text-xs\">\n                                      <div className=\"font-bold text-pink-200\">{vipButterfly.vipButterflyName}</div>\n                                      <div className=\"text-yellow-300 font-semibold\">✨ VIP Premium 👑</div>\n                                      <div className=\"mt-2 text-green-300 font-semibold\">\n                                        Klicken für Details\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              ) : (\n                                // Normal Butterfly Display\n                                <div \n                                  className=\"relative w-full h-full group cursor-pointer\"\n                                  onClick={() => {\n                                    setSelectedButterfly(butterfly);\n                                    setShowButterflyModal(true);\n                                  }}\n                                >\n                                  <RarityImage\n                                    src={butterfly.butterflyImageUrl}\n                                    alt={butterfly.butterflyName}\n                                    rarity={butterfly.butterflyRarity as RarityTier}\n                                    size=\"medium\"\n                                    className=\"w-full h-full object-cover\"\n                                  />\n                                  <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded flex items-center justify-center\">\n                                    <div className=\"text-center text-white text-xs\">\n                                      <div className=\"font-bold\">{butterfly.butterflyName}</div>\n                                      <div className={getRarityColor(butterfly.butterflyRarity as RarityTier)}>\n                                        {getRarityDisplayName(butterfly.butterflyRarity as RarityTier)}\n                                      </div>\n                                      <div className=\"mt-2 text-green-300 font-semibold\">\n                                        Klicken für Details\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              )\n                            ) : (\n                              <div className=\"text-slate-500 text-xs text-center\">\n                                Leer\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                    </div>\n                    \n                    {frameButterflies.length > 0 && (\n                      <div className=\"mt-4 text-center\">\n                        <p className=\"text-slate-400 text-sm\">\n                          {frameButterflies.length} von 6 Plätzen belegt\n                        </p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              );\n            })()}\n          </div>\n        ) : (\n          <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-slate-600\">\n            <CardContent className=\"text-center py-12\">\n              <Bug className=\"h-16 w-16 text-slate-600 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-slate-300 mb-2\">\n                Keine Ausstellung vorhanden\n              </h3>\n              <p className=\"text-slate-400\">\n                {ownerName} hat noch keine Schmetterlinge ausgestellt.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n          </>\n        )}\n      </div>\n\n      {/* Butterfly Detail Modal for viewing other users' butterflies */}\n      <ButterflyDetailModal\n        isOpen={showButterflyModal}\n        onClose={() => {\n          setShowButterflyModal(false);\n          setSelectedButterfly(null);\n        }}\n        butterfly={selectedButterfly ? {\n          id: selectedButterfly.id,\n          butterflyName: selectedButterfly.butterflyName,\n          butterflyRarity: selectedButterfly.butterflyRarity,\n          butterflyImageUrl: selectedButterfly.butterflyImageUrl,\n          placedAt: selectedButterfly.placedAt,\n          userId: selectedButterfly.userId\n        } : null}\n        onSold={() => {}} // Not used in read-only mode\n        readOnly={true} // This will hide selling options\n      />\n    </div>\n  );\n};","size_bytes":23128},"client/src/components/FlowerSelectionModal.tsx":{"content":"import React from 'react';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RarityImage } from '@/components/RarityImage';\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from '@shared/rarity';\n\ninterface UserFlower {\n  id: number;\n  flowerId: number;\n  flowerName: string;\n  flowerImageUrl: string;\n  flowerRarity: string;\n  quantity: number;\n}\n\ninterface FlowerSelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  userFlowers: UserFlower[];\n  onSelectFlower: (flowerId: number) => void;\n  fieldIndex: number;\n}\n\nexport const FlowerSelectionModal: React.FC<FlowerSelectionModalProps> = ({\n  isOpen,\n  onClose,\n  userFlowers,\n  onSelectFlower,\n  fieldIndex\n}) => {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gradient-to-br from-slate-900 to-slate-800 border-2 border-blue-400/30 max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-xl font-bold text-blue-300\">\n            🌸 Blume für Feld {fieldIndex + 1} auswählen\n          </DialogTitle>\n          <DialogDescription className=\"text-center text-blue-200\">\n            Wähle eine Blume aus deinem Inventar zum Platzieren (spawnt später Raupen)\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 max-h-96 overflow-y-auto p-2\">\n          {userFlowers.length === 0 ? (\n            <div className=\"col-span-full text-center py-8\">\n              <p className=\"text-blue-300 mb-2\">🌸 Keine Blumen verfügbar</p>\n              <p className=\"text-blue-400 text-sm\">Sammle Blumen im Garten um sie hier zu platzieren!</p>\n            </div>\n          ) : (\n            userFlowers\n              .filter(flower => flower.quantity > 0)\n              .map((flower) => (\n                <Card \n                  key={flower.id}\n                  className=\"cursor-pointer transition-all border-2 hover:scale-105 border-slate-600 hover:border-blue-400/60 bg-slate-800/40\"\n                  onClick={() => onSelectFlower(flower.id)}\n                >\n                  <CardContent className=\"p-3 text-center\">\n                    <div className=\"w-16 h-16 mx-auto mb-2 rounded-lg overflow-hidden border-2\"\n                         style={{ borderColor: getRarityColor(flower.flowerRarity as RarityTier) }}>\n                      <RarityImage\n                        src={flower.flowerImageUrl}\n                        alt={flower.flowerName}\n                        rarity={flower.flowerRarity as RarityTier}\n                        size=\"large\"\n                        className=\"w-full h-full\"\n                      />\n                    </div>\n                    <h3 className=\"font-semibold text-white text-xs truncate mb-1\">\n                      {flower.flowerName}\n                    </h3>\n                    <Badge \n                      className=\"mb-2 text-xs\"\n                      style={{ backgroundColor: getRarityColor(flower.flowerRarity as RarityTier) }}\n                    >\n                      {getRarityDisplayName(flower.flowerRarity as RarityTier)}\n                    </Badge>\n                    <p className=\"text-blue-300 text-xs\">\n                      🌸 Verfügbar: {flower.quantity}\n                    </p>\n                  </CardContent>\n                </Card>\n              ))\n          )}\n        </div>\n\n        <div className=\"flex justify-end gap-3 pt-4 border-t border-blue-500/20\">\n          <Button \n            variant=\"outline\" \n            onClick={onClose}\n            className=\"border-slate-500 text-slate-300 hover:bg-slate-700\"\n          >\n            Abbrechen\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":4006},"client/src/lib/stores/useDna.tsx":{"content":"import { create } from \"zustand\";\n\ninterface DnaState {\n  dna: number;\n  setDna: (dna: number) => void;\n}\n\nexport const useDna = create<DnaState>((set) => ({\n  dna: 0,\n  setDna: (dna) => set({ dna }),\n}));","size_bytes":205},"client/src/components/DNAView.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useDna } from \"@/lib/stores/useDna\";\nimport { useNotification } from \"../hooks/useNotification\";\nimport { HelpButton } from './HelpButton';\nimport { \n  Dna, \n  Zap, \n  ArrowUp, \n  Clock, \n  Sparkles, \n  TestTube, \n  TrendingUp,\n  Plus,\n  Minus,\n  RotateCcw,\n  X,\n  Package\n} from \"lucide-react\";\nimport { getRarityColor, getRarityDisplayName, type RarityTier } from \"@shared/rarity\";\n\n// Types for DNA system\ninterface InventoryItem {\n  id: number;\n  type: 'seed' | 'flower' | 'butterfly' | 'caterpillar' | 'fish';\n  name: string;\n  rarity: RarityTier;\n  imageUrl: string;\n  quantity: number;\n}\n\ninterface GridSlot {\n  item: InventoryItem | null;\n  position: { row: number; col: number };\n}\n\n// DNA calculation constants based on the requirements\nconst RARITY_MULTIPLIERS = {\n  'common': 1,\n  'uncommon': 2,\n  'rare': 3,\n  'super-rare': 4,\n  'epic': 5,\n  'legendary': 6,\n  'mythical': 7\n} as const;\n\ntype DnaRarityTier = keyof typeof RARITY_MULTIPLIERS;\n\n// Item base values for DNA calculation based on ranking position (1-35)\nconst ITEM_BASE_VALUES = {\n  'seed': {\n    'common': 1, 'uncommon': 4, 'rare': 8, 'super-rare': 13, 'epic': 18, 'legendary': 24, 'mythical': 28\n  },\n  'flower': {\n    'common': 2, 'uncommon': 7, 'rare': 12, 'super-rare': 16, 'epic': 21, 'legendary': 27, 'mythical': 31\n  },\n  'butterfly': {\n    'common': 3, 'uncommon': 9, 'rare': 14, 'super-rare': 19, 'epic': 23, 'legendary': 29, 'mythical': 33\n  },\n  'caterpillar': {\n    'common': 5, 'uncommon': 10, 'rare': 15, 'super-rare': 20, 'epic': 25, 'legendary': 30, 'mythical': 34\n  },\n  'fish': {\n    'common': 6, 'uncommon': 11, 'rare': 17, 'super-rare': 22, 'epic': 26, 'legendary': 32, 'mythical': 35\n  }\n};\n\n// 3x3 Grid neighbor mapping (orthogonal only)\nconst GRID_NEIGHBORS = {\n  0: [1, 3],        // Top-left: 2 neighbors\n  1: [0, 2, 4],     // Top-center: 3 neighbors\n  2: [1, 5],        // Top-right: 2 neighbors\n  3: [0, 4, 6],     // Middle-left: 3 neighbors\n  4: [1, 3, 5, 7],  // Center: 4 neighbors\n  5: [2, 4, 8],     // Middle-right: 3 neighbors\n  6: [3, 7],        // Bottom-left: 2 neighbors\n  7: [4, 6, 8],     // Bottom-center: 3 neighbors\n  8: [5, 7]         // Bottom-right: 2 neighbors\n};\n\nconst BASE_DNA_COSTS = {\n  'uncommon': 20,\n  'rare': 50,\n  'super-rare': 150,\n  'epic': 350,\n  'legendary': 750,\n  'mythical': 2000\n};\n\nexport const DNAView: React.FC = () => {\n  const { user } = useAuth();\n  const { dna, setDna } = useDna();\n  const { showNotification } = useNotification();\n  \n  // DNA Sequencer state (left side)\n  const [sequencerGrid, setSequencerGrid] = useState<GridSlot[][]>(() => \n    Array(3).fill(null).map((_, row) => \n      Array(3).fill(null).map((_, col) => ({\n        item: null,\n        position: { row, col }\n      }))\n    )\n  );\n  const [isSequencing, setIsSequencing] = useState(false);\n  const [sequenceProgress, setSequenceProgress] = useState(0);\n  const [dnaToGenerate, setDnaToGenerate] = useState(0);\n  \n  // Item selection modal state\n  const [showItemSelection, setShowItemSelection] = useState(false);\n  const [selectedGridPosition, setSelectedGridPosition] = useState<{row: number, col: number} | null>(null);\n  \n  // D-Nator state (right side)\n  const [selectedUpgradeItem, setSelectedUpgradeItem] = useState<InventoryItem | null>(null);\n  const [targetRarity, setTargetRarity] = useState<RarityTier>('uncommon');\n  const [isUpgrading, setIsUpgrading] = useState(false);\n  const [upgradeProgress, setUpgradeProgress] = useState(0);\n  const [upgradeCost, setUpgradeCost] = useState(0);\n  \n  // Inventory state\n  const [inventory, setInventory] = useState<InventoryItem[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<'all' | 'seed' | 'flower' | 'butterfly' | 'caterpillar' | 'fish'>('all');\n\n  useEffect(() => {\n    if (user) {\n      loadInventory();\n    }\n  }, [user]);\n\n  // Update DNA calculation when grid changes\n  useEffect(() => {\n    calculateDnaGeneration();\n  }, [sequencerGrid]);\n\n  // Update upgrade cost when selection changes\n  useEffect(() => {\n    if (selectedUpgradeItem) {\n      calculateUpgradeCost();\n    }\n  }, [selectedUpgradeItem, targetRarity]);\n\n  const loadInventory = async () => {\n    if (!user) return;\n    \n    try {\n      // Load all inventory items from different endpoints\n      const [seeds, flowers, butterflies, caterpillars, fish] = await Promise.all([\n        fetch(`/api/user/${user.id}/seeds`).then(r => r.json()),\n        fetch(`/api/user/${user.id}/flowers`).then(r => r.json()),\n        fetch(`/api/user/${user.id}/butterflies`).then(r => r.json()),\n        fetch(`/api/user/${user.id}/caterpillars`).then(r => r.json()),\n        fetch(`/api/user/${user.id}/fish`).then(r => r.json())\n      ]);\n\n      const allItems: InventoryItem[] = [];\n      \n      // Convert seeds\n      seeds.seeds?.forEach((seed: any) => {\n        allItems.push({\n          id: seed.id,\n          type: 'seed',\n          name: seed.seedName,\n          rarity: seed.seedRarity as RarityTier,\n          imageUrl: '/Blumen/0.jpg', // Universal seed image wie im Inventar\n          quantity: seed.quantity\n        });\n      });\n\n      // Convert flowers\n      flowers.flowers?.forEach((flower: any) => {\n        allItems.push({\n          id: flower.id,\n          type: 'flower',\n          name: flower.flowerName,\n          rarity: flower.flowerRarity as RarityTier,\n          imageUrl: flower.flowerImageUrl,\n          quantity: flower.quantity || 1\n        });\n      });\n\n      // Convert butterflies\n      butterflies.butterflies?.forEach((butterfly: any) => {\n        allItems.push({\n          id: butterfly.id,\n          type: 'butterfly',\n          name: butterfly.butterflyName,\n          rarity: butterfly.butterflyRarity as RarityTier,\n          imageUrl: butterfly.butterflyImageUrl,\n          quantity: butterfly.quantity || 1\n        });\n      });\n\n      // Convert caterpillars\n      caterpillars.caterpillars?.forEach((caterpillar: any) => {\n        allItems.push({\n          id: caterpillar.id,\n          type: 'caterpillar',\n          name: caterpillar.caterpillarName,\n          rarity: caterpillar.caterpillarRarity as RarityTier,\n          imageUrl: caterpillar.caterpillarImageUrl,\n          quantity: caterpillar.quantity || 1\n        });\n      });\n\n      // Convert fish\n      fish.fish?.forEach((fishItem: any) => {\n        allItems.push({\n          id: fishItem.id,\n          type: 'fish',\n          name: fishItem.fishName,\n          rarity: fishItem.fishRarity as RarityTier,\n          imageUrl: fishItem.fishImageUrl,\n          quantity: fishItem.quantity || 1\n        });\n      });\n\n      setInventory(allItems);\n    } catch (error) {\n      console.error('Failed to load inventory:', error);\n      showNotification('Fehler beim Laden des Inventars', 'error');\n    }\n  };\n\n  const calculateDnaGeneration = () => {\n    let totalDna = 0;\n    const flatGrid = sequencerGrid.flat();\n    \n    // Calculate DNA for each occupied slot based on neighbors\n    flatGrid.forEach((slot, index) => {\n      if (slot.item) {\n        // Get base value for this item type and rarity\n        const baseValue = ITEM_BASE_VALUES[slot.item.type]?.[slot.item.rarity as DnaRarityTier] || 10;\n        \n        // Count neighbors that have items\n        const neighborIndices = GRID_NEIGHBORS[index] || [];\n        const occupiedNeighbors = neighborIndices.filter(neighborIndex => \n          flatGrid[neighborIndex]?.item !== null\n        ).length;\n        \n        // Calculate DNA: BaseValue × (1 + OccupiedNeighbors)\n        // +1 ensures single items still give their base value\n        const itemDna = baseValue * (1 + occupiedNeighbors);\n        totalDna += itemDna;\n        \n        console.log(`🧬 Slot ${index}: ${slot.item.name} (${slot.item.type}/${slot.item.rarity}) = ${baseValue} × ${1 + occupiedNeighbors} = ${itemDna} DNA`);\n      }\n    });\n    \n    console.log(`🧬 Total DNA Generation: ${totalDna}`);\n    setDnaToGenerate(Math.floor(totalDna));\n  };\n\n  const calculateUpgradeCost = () => {\n    if (!selectedUpgradeItem) return;\n    \n    const currentRarityIndex = Object.keys(RARITY_MULTIPLIERS).indexOf(selectedUpgradeItem.rarity);\n    const targetRarityIndex = Object.keys(RARITY_MULTIPLIERS).indexOf(targetRarity);\n    \n    if (targetRarityIndex <= currentRarityIndex) {\n      setUpgradeCost(0);\n      return;\n    }\n    \n    // Calculate cost using the formula: DNA-Kosten = (Platz-Differenz)² × Rarität-Faktor + Grundwert\n    const placeDifference = targetRarityIndex - currentRarityIndex;\n    const rarityFactor = RARITY_MULTIPLIERS[targetRarity as DnaRarityTier] || 1;\n    const baseCost = BASE_DNA_COSTS[targetRarity as keyof typeof BASE_DNA_COSTS] || 0;\n    \n    const cost = Math.pow(placeDifference, 2) * rarityFactor + baseCost;\n    setUpgradeCost(cost);\n  };\n\n  // Helper function to get all items currently in the grid\n  const getItemsInGrid = () => {\n    const items: InventoryItem[] = [];\n    for (const row of sequencerGrid) {\n      for (const slot of row) {\n        if (slot.item) {\n          items.push(slot.item);\n        }\n      }\n    }\n    return items;\n  };\n\n  const handleGridSlotClick = (row: number, col: number) => {\n    if (isSequencing) return;\n    \n    const newGrid = [...sequencerGrid];\n    \n    // If slot is occupied, remove item\n    if (newGrid[row][col].item) {\n      newGrid[row][col].item = null;\n      setSequencerGrid(newGrid);\n      return;\n    }\n    \n    // Open item selection modal for empty slots\n    setSelectedGridPosition({ row, col });\n    setShowItemSelection(true);\n  };\n  \n  const handleItemSelection = (selectedItem: InventoryItem) => {\n    if (!selectedGridPosition || selectedItem.quantity <= 0) return;\n    \n    // Check if user has enough items available (not already used in grid)\n    const itemsInGrid = getItemsInGrid().filter(item => \n      item.id === selectedItem.id && item.type === selectedItem.type\n    ).length;\n    \n    // Get original item quantity from inventory to check against\n    const originalItem = inventory.find(item => \n      item.id === selectedItem.id && item.type === selectedItem.type\n    );\n    \n    if (!originalItem || itemsInGrid >= originalItem.quantity) {\n      showNotification(`Du hast bereits alle deine ${selectedItem.name} im Grid verwendet!`, 'warning');\n      return;\n    }\n    \n    const newGrid = [...sequencerGrid];\n    newGrid[selectedGridPosition.row][selectedGridPosition.col].item = { ...selectedItem };\n    setSequencerGrid(newGrid);\n    \n    // Close modal\n    setShowItemSelection(false);\n    setSelectedGridPosition(null);\n  };\n\n  const handleStartSequencing = async () => {\n    if (isSequencing || dnaToGenerate === 0) return;\n    \n    setIsSequencing(true);\n    setSequenceProgress(0);\n    \n    // Simulate sequencing process\n    const interval = setInterval(() => {\n      setSequenceProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          completeSequencing();\n          return 100;\n        }\n        return prev + 2; // 5 second process (100/2 * 100ms)\n      });\n    }, 100);\n  };\n\n  const completeSequencing = async () => {\n    try {\n      // Collect all items from the sequencer grid\n      const placedItems = [];\n      for (const row of sequencerGrid) {\n        for (const slot of row) {\n          if (slot.item) {\n            placedItems.push({\n              id: slot.item.id,\n              type: slot.item.type,\n              name: slot.item.name,\n              rarity: slot.item.rarity\n            });\n          }\n        }\n      }\n      \n      // Call new sequencing API that consumes items\n      const response = await fetch(`/api/user/${user!.id}/dna/sequence`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          items: placedItems,\n          dnaAmount: dnaToGenerate \n        })\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setDna(data.dna);\n        showNotification(`🧬 ${dnaToGenerate} DNA generiert! ${data.itemsConsumed} Items verbraucht.`, 'success');\n        \n        // Clear grid and reload inventory\n        setSequencerGrid(Array(3).fill(null).map((_, row) => \n          Array(3).fill(null).map((_, col) => ({\n            item: null,\n            position: { row, col }\n          }))\n        ));\n        loadInventory();\n      } else {\n        const error = await response.json();\n        showNotification(error.message || 'Fehler beim Generieren von DNA', 'error');\n      }\n    } catch (error) {\n      showNotification('Fehler beim Generieren von DNA', 'error');\n    } finally {\n      setIsSequencing(false);\n      setSequenceProgress(0);\n    }\n  };\n\n  const handleStartUpgrade = async () => {\n    if (!selectedUpgradeItem || isUpgrading || dna < upgradeCost) return;\n    \n    setIsUpgrading(true);\n    setUpgradeProgress(0);\n    \n    // Simulate upgrade process\n    const interval = setInterval(() => {\n      setUpgradeProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          completeUpgrade();\n          return 100;\n        }\n        return prev + 1.5; // ~7 second process\n      });\n    }, 100);\n  };\n\n  const completeUpgrade = async () => {\n    try {\n      if (!selectedUpgradeItem) return;\n      \n      // Call upgrade API\n      const response = await fetch(`/api/user/${user!.id}/items/upgrade`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          itemId: selectedUpgradeItem.id,\n          itemType: selectedUpgradeItem.type,\n          targetRarity: targetRarity,\n          dnaCost: upgradeCost\n        })\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setDna(data.remainingDna);\n        showNotification(`✨ Item zu ${getRarityDisplayName(targetRarity)} aufgewertet!`, 'success');\n        \n        // Clear selection and reload inventory\n        setSelectedUpgradeItem(null);\n        loadInventory();\n      } else {\n        const error = await response.json();\n        showNotification(error.message || 'Fehler beim Upgraden des Items', 'error');\n      }\n    } catch (error) {\n      showNotification('Fehler beim Upgraden des Items', 'error');\n    } finally {\n      setIsUpgrading(false);\n      setUpgradeProgress(0);\n    }\n  };\n\n  // Filter inventory and subtract items already used in grid\n  const getAvailableInventory = () => {\n    const itemsInGrid = getItemsInGrid();\n    \n    return inventory.map(item => {\n      const usedInGrid = itemsInGrid.filter(gridItem => \n        gridItem.id === item.id && gridItem.type === item.type\n      ).length;\n      \n      return {\n        ...item,\n        quantity: Math.max(0, item.quantity - usedInGrid),\n        originalQuantity: item.quantity // Zeige ursprüngliche Menge für bessere UX\n      };\n    }).filter(item => item.quantity > 0); // Only show items with available quantity\n  };\n\n  // Sort items by rarity (ascending: common -> mythical)\n  const sortByRarity = (items: InventoryItem[]) => {\n    const rarityOrder = ['common', 'uncommon', 'rare', 'super-rare', 'epic', 'legendary', 'mythical'];\n    return items.sort((a, b) => {\n      const aIndex = rarityOrder.indexOf(a.rarity);\n      const bIndex = rarityOrder.indexOf(b.rarity);\n      return aIndex - bIndex;\n    });\n  };\n\n  const filteredInventory = selectedCategory === 'all' \n    ? sortByRarity(getAvailableInventory())\n    : sortByRarity(getAvailableInventory().filter(item => item.type === selectedCategory));\n\n  return (\n    <div className=\"min-h-screen bg-slate-950 p-4 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Dna className=\"h-6 w-6 text-teal-400\" />\n            <h1 className=\"text-2xl font-bold text-white\">DNA-Labor</h1>\n          </div>\n          <Badge variant=\"secondary\" className=\"bg-teal-900 text-teal-100\">\n            🧬 {dna} DNA\n          </Badge>\n        </div>\n        <HelpButton \n          helpText=\"🧬 DNA-LABOR FUNKTIONEN:\n\n📋 DNA-SEQUENZER (Links):\n• Platziere Items im 3x3 Grid um DNA zu generieren\n• DNA Berechnung: BaseValue × (1 + Anzahl Nachbarn)\n• Items mit mehr Nachbarn geben mehr DNA\n• Klicke auf Felder um Items zu platzieren/entfernen\n• Verschiedene Item-Typen haben unterschiedliche BaseValues\n• Nach Platzierung: 'DNA Sequenzieren' klicken\n\n⚡ D-NATOR (Rechts):\n• Verwende DNA um Items zu upgraden\n• Wähle Kategorie-Filter (Alle, Samen, Blumen, etc.)\n• Klicke Item aus Liste → Wähle Ziel-Rarität\n• Upgrade-Kosten: (Platz-Differenz)² × Rarität-Faktor + Grundwert\n• Höhere Raritäten kosten exponentiell mehr DNA\n\n💡 STRATEGIEN:\n• Platziere Items strategisch - jeder Nachbar = +100% DNA\n• Ecken (2 Nachbarn) vs Mitte (4 Nachbarn)\n• Sammle DNA im Sequenzer, nutze sie im D-Nator\n• Upgrade-Ketten: Common → Uncommon → Rare → etc.\n• Rarere Items haben höhere BaseValues\"\n          viewType=\"dna\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* DNA Sequencer (Left Side) */}\n        <Card className=\"bg-slate-900 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-white\">\n              <TestTube className=\"h-5 w-5 text-teal-400\" />\n              <span>DNA-Sequenzer</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* 3x3 Grid */}\n            <div className=\"grid grid-cols-3 gap-3 p-4 bg-slate-800 rounded-lg max-w-[31rem] mx-auto\">\n              {sequencerGrid.map((row, rowIndex) =>\n                row.map((slot, colIndex) => (\n                  <div\n                    key={`${rowIndex}-${colIndex}`}\n                    onClick={() => handleGridSlotClick(rowIndex, colIndex)}\n                    className={`\n                      aspect-square border-2 border-dashed rounded-lg cursor-pointer\n                      flex items-center justify-center relative\n                      ${slot.item \n                        ? 'bg-slate-900/30' \n                        : 'border-slate-600 bg-slate-700/50 hover:border-slate-500'\n                      }\n                      ${isSequencing ? 'cursor-not-allowed opacity-50' : ''}\n                    `}\n                    style={slot.item ? {\n                      borderColor: slot.item.rarity === 'common' ? '#fbbf24' :\n                                 slot.item.rarity === 'uncommon' ? '#10b981' :\n                                 slot.item.rarity === 'rare' ? '#3b82f6' :\n                                 slot.item.rarity === 'super-rare' ? '#06b6d4' :\n                                 slot.item.rarity === 'epic' ? '#8b5cf6' :\n                                 slot.item.rarity === 'legendary' ? '#f97316' :\n                                 slot.item.rarity === 'mythical' ? '#ef4444' : '#6b7280'\n                    } : undefined}\n                  >\n                    {slot.item ? (\n                      <div className=\"w-full h-full p-1\">\n                        <img \n                          src={slot.item.imageUrl} \n                          alt={slot.item.name}\n                          className=\"w-full h-full object-cover rounded border-2\"\n                          style={{ borderColor: getRarityColor(slot.item.rarity) }}\n                        />\n                      </div>\n                    ) : (\n                      <Plus className=\"h-6 w-6 text-slate-400\" />\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n\n            {/* DNA Generation Display */}\n            <div className=\"bg-slate-800 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-slate-300\">DNA-Generation:</span>\n                <span className=\"text-teal-400 font-bold\">{dnaToGenerate} DNA</span>\n              </div>\n              \n              {isSequencing && (\n                <div className=\"space-y-2\">\n                  <Progress value={sequenceProgress} className=\"h-2\" />\n                  <div className=\"text-xs text-slate-400 text-center\">\n                    Sequenzierung läuft... {Math.round(sequenceProgress)}%\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Sequencing Button */}\n            <Button \n              onClick={handleStartSequencing}\n              disabled={isSequencing || dnaToGenerate === 0}\n              className=\"w-full bg-teal-600 hover:bg-teal-700 text-white\"\n            >\n              {isSequencing ? (\n                <>\n                  <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Sequenzierung...\n                </>\n              ) : (\n                <>\n                  <Zap className=\"h-4 w-4 mr-2\" />\n                  DNA Sequenzieren\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* D-Nator (Right Side) */}\n        <Card className=\"bg-slate-900 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-white\">\n              <TrendingUp className=\"h-5 w-5 text-purple-400\" />\n              <span>D-Nator</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Item Selection */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm text-slate-300\">Item auswählen:</label>\n              <div className=\"bg-slate-800/50 rounded-lg p-3 mb-4 border border-slate-700\">\n                <div className=\"flex justify-center gap-2 flex-wrap\">\n                  {(['all', 'seed', 'flower', 'butterfly', 'caterpillar', 'fish'] as const).map(category => (\n                    <Button\n                      key={category}\n                      variant={selectedCategory === category ? \"default\" : \"ghost\"}\n                      size=\"sm\"\n                      onClick={() => setSelectedCategory(category)}\n                      className={`text-xs px-3 py-2 transition-all ${\n                        selectedCategory === category \n                          ? 'bg-purple-600 hover:bg-purple-700 text-white border-purple-500' \n                          : 'hover:bg-slate-700 text-slate-300 border-slate-600'\n                      }`}\n                    >\n                      {category === 'all' ? 'Alle' : \n                       category === 'seed' ? 'Samen' :\n                       category === 'flower' ? 'Blumen' :\n                       category === 'butterfly' ? 'Schmetterlinge' :\n                       category === 'caterpillar' ? 'Raupen' : 'Fische'}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-3 max-h-[31rem] overflow-y-auto bg-slate-800 rounded p-3\">\n                {filteredInventory.slice(0, 24).map(item => (\n                  <div\n                    key={`${item.type}-${item.id}`}\n                    onClick={() => setSelectedUpgradeItem(item)}\n                    className={`\n                      cursor-pointer p-3 rounded border-3 flex flex-col items-center text-sm transition-all\n                      ${selectedUpgradeItem?.id === item.id && selectedUpgradeItem?.type === item.type\n                        ? 'border-purple-400 bg-purple-900/30 shadow-lg shadow-purple-400/30' \n                        : 'border-slate-600 hover:border-slate-500 hover:shadow-md'\n                      }\n                    `}\n                  >\n                    <img \n                      src={item.imageUrl} \n                      alt={item.name}\n                      className=\"w-16 h-16 object-cover rounded-lg mb-2 border-4\"\n                      style={{ \n                        borderColor: item.rarity === 'common' ? '#fbbf24' :\n                                   item.rarity === 'uncommon' ? '#10b981' :\n                                   item.rarity === 'rare' ? '#3b82f6' :\n                                   item.rarity === 'super-rare' ? '#06b6d4' :\n                                   item.rarity === 'epic' ? '#8b5cf6' :\n                                   item.rarity === 'legendary' ? '#f97316' :\n                                   item.rarity === 'mythical' ? '#ef4444' : '#6b7280'\n                      }}\n                    />\n                    <div className=\"text-center w-full\">\n                      <div \n                        className=\"font-medium truncate w-full mb-1\" \n                        style={{ color: getRarityColor(item.rarity) }}\n                      >\n                        {item.name}\n                      </div>\n                      <div className=\"text-slate-400 text-xs mb-2\">Anzahl: {item.quantity}</div>\n                      <div \n                        className=\"inline-block text-xs font-bold px-2 py-1 rounded-full text-white text-center min-w-[70px]\"\n                        style={{ \n                          backgroundColor: item.rarity === 'common' ? '#fbbf24' :\n                                         item.rarity === 'uncommon' ? '#10b981' :\n                                         item.rarity === 'rare' ? '#3b82f6' :\n                                         item.rarity === 'super-rare' ? '#06b6d4' :\n                                         item.rarity === 'epic' ? '#8b5cf6' :\n                                         item.rarity === 'legendary' ? '#f97316' :\n                                         item.rarity === 'mythical' ? '#ef4444' : '#6b7280',\n                          color: 'white'\n                        }}\n                      >\n                        {getRarityDisplayName(item.rarity)}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Target Rarity Selection */}\n            {selectedUpgradeItem && (\n              <div className=\"space-y-2\">\n                <label className=\"text-sm text-slate-300\">Ziel-Rarität:</label>\n                <div className=\"grid grid-cols-3 gap-1 text-xs\">\n                  {(['uncommon', 'rare', 'super-rare', 'epic', 'legendary', 'mythical'] as RarityTier[]).map(rarity => {\n                    const currentIndex = Object.keys(RARITY_MULTIPLIERS).indexOf(selectedUpgradeItem.rarity);\n                    const targetIndex = Object.keys(RARITY_MULTIPLIERS).indexOf(rarity);\n                    const isAvailable = targetIndex > currentIndex;\n                    \n                    return (\n                      <Button\n                        key={rarity}\n                        variant={targetRarity === rarity ? \"default\" : \"ghost\"}\n                        size=\"sm\"\n                        onClick={() => setTargetRarity(rarity)}\n                        disabled={!isAvailable}\n                        className=\"text-xs px-1 py-1\"\n                        style={{ \n                          color: isAvailable ? getRarityColor(rarity) : undefined,\n                          opacity: isAvailable ? 1 : 0.3\n                        }}\n                      >\n                        {getRarityDisplayName(rarity)}\n                      </Button>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n\n            {/* Upgrade Cost Display */}\n            {selectedUpgradeItem && upgradeCost > 0 && (\n              <div className=\"bg-slate-800 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-slate-300\">Upgrade-Kosten:</span>\n                  <span className={`font-bold ${dna >= upgradeCost ? 'text-purple-400' : 'text-red-400'}`}>\n                    {upgradeCost} DNA\n                  </span>\n                </div>\n                \n                {isUpgrading && (\n                  <div className=\"space-y-2\">\n                    <Progress value={upgradeProgress} className=\"h-2\" />\n                    <div className=\"text-xs text-slate-400 text-center\">\n                      Upgrade läuft... {Math.round(upgradeProgress)}%\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Upgrade Button */}\n            <Button \n              onClick={handleStartUpgrade}\n              disabled={!selectedUpgradeItem || isUpgrading || dna < upgradeCost || upgradeCost === 0}\n              className=\"w-full bg-purple-600 hover:bg-purple-700 text-white\"\n            >\n              {isUpgrading ? (\n                <>\n                  <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Upgrading...\n                </>\n              ) : (\n                <>\n                  <ArrowUp className=\"h-4 w-4 mr-2\" />\n                  Item Upgraden\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Item Selection Modal */}\n      <Dialog open={showItemSelection} onOpenChange={setShowItemSelection}>\n        <DialogContent className=\"bg-slate-900 border-slate-700 max-w-5xl\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white flex items-center space-x-2\">\n              <Package className=\"h-5 w-5 text-teal-400\" />\n              <span>Item für Sequenzer auswählen</span>\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {/* Category Filter */}\n            <div className=\"flex flex-wrap gap-1\">\n              {(['all', 'seed', 'flower', 'butterfly', 'caterpillar', 'fish'] as const).map(category => (\n                <Button\n                  key={category}\n                  variant={selectedCategory === category ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category)}\n                  className=\"text-xs px-3 py-1\"\n                >\n                  {category === 'all' ? 'Alle' : \n                   category === 'seed' ? 'Samen' :\n                   category === 'flower' ? 'Blumen' :\n                   category === 'butterfly' ? 'Schmetterlinge' :\n                   category === 'caterpillar' ? 'Raupen' : 'Fische'}\n                </Button>\n              ))}\n            </div>\n            \n            {/* Item Grid */}\n            <div className=\"grid grid-cols-6 gap-3 max-h-96 overflow-y-auto bg-slate-800 rounded p-4\">\n              {filteredInventory.filter(item => item.quantity > 0).map(item => {\n                const baseValue = ITEM_BASE_VALUES[item.type]?.[item.rarity as DnaRarityTier] || 10;\n                \n                return (\n                  <div\n                    key={`${item.type}-${item.id}`}\n                    onClick={() => handleItemSelection(item)}\n                    className=\"cursor-pointer p-3 rounded border-4 hover:border-teal-400 transition-all flex flex-col items-center text-xs space-y-2\"\n                    style={{\n                      backgroundColor: '#374151',\n                      borderColor: '#6b7280'\n                    }}\n                  >\n                    <img \n                      src={item.imageUrl} \n                      alt={item.name}\n                      className=\"w-12 h-12 object-cover rounded\"\n                      style={{ borderColor: getRarityColor(item.rarity), borderWidth: '2px' }}\n                    />\n                    <div className=\"text-center space-y-1\">\n                      <div \n                        className=\"font-medium text-center leading-tight break-words max-w-full\" \n                        style={{ color: getRarityColor(item.rarity) }}\n                        title={item.name}\n                      >\n                        {item.name}\n                      </div>\n                      <div className=\"text-slate-400\">Anzahl: {item.quantity}</div>\n                      <div \n                        className=\"inline-block text-xs font-bold px-2 py-1 rounded-full text-white text-center min-w-[60px]\"\n                        style={{ \n                          backgroundColor: item.rarity === 'common' ? '#fbbf24' :\n                                         item.rarity === 'uncommon' ? '#10b981' :\n                                         item.rarity === 'rare' ? '#3b82f6' :\n                                         item.rarity === 'super-rare' ? '#06b6d4' :\n                                         item.rarity === 'epic' ? '#8b5cf6' :\n                                         item.rarity === 'legendary' ? '#f97316' :\n                                         item.rarity === 'mythical' ? '#ef4444' : '#6b7280',\n                          color: 'white'\n                        }}\n                      >\n                        {getRarityDisplayName(item.rarity)}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n            \n            {filteredInventory.filter(item => item.quantity > 0).length === 0 && (\n              <div className=\"text-center py-8 text-slate-400\">\n                <Package className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                <p>Keine Items in dieser Kategorie verfügbar</p>\n              </div>\n            )}\n            \n            {/* Close Button */}\n            <div className=\"flex justify-end pt-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setShowItemSelection(false)}\n                className=\"flex items-center space-x-2\"\n              >\n                <X className=\"h-4 w-4\" />\n                <span>Abbrechen</span>\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};","size_bytes":34299},"client/src/components/TicketRedemptionDialog.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Ticket, Sprout, Sun, Zap, Coins, Flower, Sparkles } from 'lucide-react';\nimport { RarityImage } from './RarityImage';\nimport { FlowerHoverPreview } from './FlowerHoverPreview';\nimport { ButterflyHoverPreview } from './ButterflyHoverPreview';\nimport { CaterpillarHoverPreview } from './CaterpillarHoverPreview';\nimport { FishHoverPreview } from './FishHoverPreview';\nimport { getRarityColor, getRarityDisplayName, getRarityFromAssetId, generateLatinFlowerName, generateGermanButterflyName, generateLatinCaterpillarName, generateLatinFishName } from '@shared/rarity';\n\n// Helper function to convert integer rarity to RarityTier string\nconst convertIntegerRarityToTier = (rarityInt: number): any => {\n  switch (rarityInt) {\n    case 0: return 'common';\n    case 1: return 'uncommon';\n    case 2: return 'rare';\n    case 3: return 'super-rare';\n    case 4: return 'epic';\n    case 5: return 'legendary';\n    case 6: return 'mythical';\n    default: return 'common';\n  }\n};\n\n// Helper function for rarity borders (same as RarityImage component)\nconst getBorderColor = (rarity: any): string => {\n  switch (rarity) {\n    case 'common': return '#fbbf24';      // yellow-400\n    case 'uncommon': return '#4ade80';    // green-400  \n    case 'rare': return '#3b82f6';        // blue-400\n    case 'super-rare': return '#06b6d4';  // cyan-400\n    case 'epic': return '#a855f7';        // purple-400\n    case 'legendary': return '#f97316';   // orange-400\n    case 'mythical': return '#ef4444';    // red-400\n    default: return '#9ca3af';            // gray-400\n  }\n};\n\ninterface TicketRedemptionDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  userTickets: number;\n  onRedeem: (itemType: string, cost: number) => Promise<{ success: boolean; message: string }>;\n}\n\ninterface DailyItems {\n  id: number;\n  date: string;\n  flowerId: number;\n  flowerRarity: string;\n  butterflyId: number;\n  butterflyRarity: string;\n  caterpillarId: number;\n  caterpillarRarity: string;\n  fishId: number;\n  fishRarity: string;\n  redemptions?: {\n    'daily-flower'?: boolean;\n    'daily-butterfly'?: boolean;\n    'daily-caterpillar'?: boolean;\n    'daily-fish'?: boolean;\n    'daily-credits'?: boolean;\n  };\n}\n\nexport function TicketRedemptionDialog({ isOpen, onClose, userTickets, onRedeem }: TicketRedemptionDialogProps) {\n  const [isRedeeming, setIsRedeeming] = useState(false);\n  const [redeemMessage, setRedeemMessage] = useState('');\n  const [dailyItems, setDailyItems] = useState<DailyItems | null>(null);\n\n  // Fetch daily items with redemption status\n  useEffect(() => {\n    if (isOpen) {\n      // Assuming user ID 2 for now - in real app this would come from context/props\n      fetch('/api/user/2/daily-items')\n        .then(res => res.json())\n        .then(data => setDailyItems(data))\n        .catch(error => console.error('Failed to fetch daily items:', error));\n    }\n  }, [isOpen]);\n\n  // Listen for inventory refresh events to update redemption status\n  useEffect(() => {\n    const handleRefreshInventory = () => {\n      if (isOpen) {\n        console.log('🔄 Refreshing daily items dialog after redemption');\n        fetch('/api/user/2/daily-items')\n          .then(res => res.json())\n          .then(data => setDailyItems(data))\n          .catch(error => console.error('Failed to refresh daily items:', error));\n      }\n    };\n\n    window.addEventListener('refreshInventory', handleRefreshInventory);\n    return () => window.removeEventListener('refreshInventory', handleRefreshInventory);\n  }, [isOpen]);\n\n  // Prize definitions (all 9 prizes)\n  const prizes = [\n    {\n      id: 'seed',\n      cost: 10,\n      title: '1 Samen',\n      description: 'Erhalte 1 zufälligen Samen',\n      icon: <Sprout className=\"h-6 w-6 text-green-400\" />,\n      type: 'seed'\n    },\n    {\n      id: 'suns',\n      cost: 15,\n      title: '5 Sonnen',\n      description: 'Sammle sofort 5 Sonnen',\n      icon: <span className=\"text-4xl\">☀️</span>,\n      type: 'suns'\n    },\n    {\n      id: 'rare-seed',\n      cost: 25,\n      title: 'Seltener Samen',\n      description: 'Erhalte 1 seltenen Samen',\n      icon: <Sparkles className=\"h-6 w-6 text-blue-400\" />,\n      type: 'rare-seed'\n    },\n    {\n      id: 'dna',\n      cost: 30,\n      title: '15 DNA',\n      description: 'Sammle sofort 15 DNA',\n      icon: <span className=\"text-4xl\">🧬</span>,\n      type: 'dna'\n    },\n    {\n      id: 'flower',\n      cost: 50,\n      title: dailyItems ? `${generateLatinFlowerName(dailyItems.flowerId)}` : 'Seltene Blume',\n      description: dailyItems ? `${convertIntegerRarityToTier(dailyItems.flowerRarity)} Blume` : 'Erhalte eine seltene Blume',\n      icon: <Flower className=\"h-6 w-6 text-pink-400\" />,\n      type: 'daily-flower'\n    },\n    {\n      id: 'butterfly',\n      cost: 100,\n      title: dailyItems ? `${generateGermanButterflyName(dailyItems.butterflyId)}` : 'Seltener Schmetterling',\n      description: dailyItems ? `${convertIntegerRarityToTier(dailyItems.butterflyRarity)} Schmetterling` : 'Erhalte einen seltenen Schmetterling',\n      icon: <Sparkles className=\"h-6 w-6 text-purple-400\" />,\n      type: 'daily-butterfly'\n    },\n    {\n      id: 'caterpillar',\n      cost: 150,\n      title: dailyItems ? `${generateLatinCaterpillarName(dailyItems.caterpillarId)}` : 'Seltene Raupe',\n      description: dailyItems ? `${convertIntegerRarityToTier(dailyItems.caterpillarRarity)} Raupe` : 'Erhalte eine seltene Raupe',\n      icon: <Sparkles className=\"h-6 w-6 text-orange-400\" />,\n      type: 'daily-caterpillar'\n    },\n    {\n      id: 'fish',\n      cost: 200,\n      title: dailyItems ? `${generateLatinFishName(dailyItems.fishId)}` : 'Seltener Fisch',\n      description: dailyItems ? `${convertIntegerRarityToTier(dailyItems.fishRarity)} Fisch` : 'Erhalte einen seltenen Fisch',\n      icon: <Sparkles className=\"h-6 w-6 text-cyan-400\" />,\n      type: 'daily-fish'\n    },\n    {\n      id: 'credits',\n      cost: 500,\n      title: '800 Credits',\n      description: 'Sammle sofort 800 Credits',\n      icon: <Coins className=\"h-6 w-6 text-amber-400\" />,\n      type: 'daily-credits'\n    }\n  ];\n\n  const handleRedeem = async (itemType: string, cost: number) => {\n    if (userTickets < cost || isRedeeming) return;\n\n    setIsRedeeming(true);\n    setRedeemMessage('');\n\n    try {\n      const result = await onRedeem(itemType, cost);\n      setRedeemMessage(result.message);\n      setIsRedeeming(false); // Button sofort wieder aktivieren\n      \n      setTimeout(() => {\n        setRedeemMessage('');\n      }, 3000);\n    } catch (error) {\n      setRedeemMessage('Fehler beim Einlösen. Versuche es erneut.');\n      setIsRedeeming(false); // Button auch bei Fehler sofort aktivieren\n      \n      setTimeout(() => {\n        setRedeemMessage('');\n      }, 3000);\n    }\n  };\n\n  const renderPrizeCard = (prize: typeof prizes[0]) => {\n    const canAfford = userTickets >= prize.cost;\n    const isDailyPrize = ['daily-flower', 'daily-butterfly', 'daily-caterpillar', 'daily-fish', 'daily-credits'].includes(prize.type);\n    const isAlreadyRedeemed = isDailyPrize && dailyItems?.redemptions?.[prize.type] === true;\n    const isDisabled = !canAfford || isRedeeming || isAlreadyRedeemed;\n\n    const cardContent = (\n      <div\n        className={`\n          relative bg-gradient-to-b from-slate-100 to-slate-200 rounded-lg p-4 \n          shadow-lg border-2 transition-all duration-200 h-52\n          ${canAfford ? 'border-purple-400 hover:border-purple-300 hover:scale-105' : 'border-gray-400'}\n        `}\n      >\n        {/* Price Tag */}\n        <div className=\"absolute -top-2 -right-2 bg-purple-600 text-white rounded-full px-2 py-1 text-xs font-bold shadow-lg\">\n          {prize.cost} 🎫\n        </div>\n        \n        {/* Item Display */}\n        <div className=\"text-center space-y-2 h-full flex flex-col justify-between\">\n          {/* Icon/Image */}\n          <div className=\"flex justify-center items-center h-20 w-20 mx-auto bg-white rounded-lg shadow-inner border\">\n            {prize.type === 'daily-flower' && dailyItems ? (\n              <div className=\"w-18 h-18 relative\">\n                <img\n                  src={`/Blumen/${dailyItems.flowerId}.jpg`}\n                  alt={prize.title}\n                  className=\"w-full h-full object-cover rounded border-4\"\n                  style={{ borderColor: getBorderColor(convertIntegerRarityToTier(Number(dailyItems.flowerRarity))) }}\n                />\n              </div>\n            ) : prize.type === 'daily-butterfly' && dailyItems ? (\n              <div className=\"w-18 h-18 relative\">\n                <img\n                  src={`/Schmetterlinge/${dailyItems.butterflyId}.jpg`}\n                  alt={prize.title}\n                  className=\"w-full h-full object-cover rounded border-4\"\n                  style={{ borderColor: getBorderColor(convertIntegerRarityToTier(Number(dailyItems.butterflyRarity))) }}\n                />\n              </div>\n            ) : prize.type === 'daily-caterpillar' && dailyItems ? (\n              <div className=\"w-18 h-18 relative\">\n                <img\n                  src={`/Raupen/${dailyItems.caterpillarId}.jpg`}\n                  alt={prize.title}\n                  className=\"w-full h-full object-cover rounded border-4\"\n                  style={{ borderColor: getBorderColor(convertIntegerRarityToTier(Number(dailyItems.caterpillarRarity))) }}\n                />\n              </div>\n            ) : prize.type === 'daily-fish' && dailyItems ? (\n              <div className=\"w-18 h-18 relative\">\n                <img\n                  src={`/Fische/${dailyItems.fishId}.jpg`}\n                  alt={prize.title}\n                  className=\"w-full h-full object-cover rounded border-4\"\n                  style={{ borderColor: getBorderColor(convertIntegerRarityToTier(Number(dailyItems.fishRarity))) }}\n                />\n              </div>\n            ) : (prize.type === 'seed' || prize.type === 'rare-seed') ? (\n              <div className=\"w-18 h-18 relative\">\n                <img\n                  src=\"/Blumen/0.jpg\"\n                  alt={prize.title}\n                  className=\"w-full h-full object-cover rounded border-4\"\n                  style={{ borderColor: getBorderColor(prize.id === 'rare-seed' ? 'rare' : 'common') }}\n                />\n              </div>\n            ) : (\n              <div className=\"flex justify-center items-center\">\n                {prize.icon}\n              </div>\n            )}\n          </div>\n          \n          {/* Title & Description */}\n          <div>\n            <h3 className=\"font-bold text-sm text-gray-800\">{prize.title}</h3>\n            <p className=\"text-xs text-gray-600 mt-1\">{prize.description}</p>\n          </div>\n          \n          {/* Redeem Button */}\n          <Button\n            size=\"sm\"\n            disabled={isDisabled}\n            onClick={() => handleRedeem(prize.type, prize.cost)}\n            className={`\n              w-full text-xs\n              ${isAlreadyRedeemed \n                ? 'bg-red-400 text-red-100 cursor-not-allowed' \n                : canAfford \n                  ? 'bg-purple-600 hover:bg-purple-700 text-white' \n                  : 'bg-gray-400 text-gray-200 cursor-not-allowed'\n              }\n            `}\n          >\n            {isAlreadyRedeemed \n              ? 'Bereits eingelöst' \n              : isRedeeming \n                ? 'Einlösen...' \n                : 'Einlösen'\n            }\n          </Button>\n        </div>\n      </div>\n    );\n\n    // Wrap with hover preview for daily items\n    if (prize.type === 'daily-flower' && dailyItems?.flowerId) {\n      return (\n        <FlowerHoverPreview\n          key={prize.id}\n          flowerImageUrl={`/Blumen/${dailyItems.flowerId}.jpg`}\n          flowerName={dailyItems ? generateLatinFlowerName(dailyItems.flowerId) : \"Seltene Blume des Tages\"}\n          rarity={convertIntegerRarityToTier(Number(dailyItems.flowerRarity))}\n        >\n          {cardContent}\n        </FlowerHoverPreview>\n      );\n    } else if (prize.type === 'daily-butterfly' && dailyItems?.butterflyId) {\n      return (\n        <ButterflyHoverPreview\n          key={prize.id}\n          butterflyImageUrl={`/Schmetterlinge/${dailyItems.butterflyId}.jpg`}\n          butterflyName={dailyItems ? generateGermanButterflyName(dailyItems.butterflyId) : \"Seltener Schmetterling des Tages\"}\n          rarity={convertIntegerRarityToTier(Number(dailyItems.butterflyRarity))}\n        >\n          {cardContent}\n        </ButterflyHoverPreview>\n      );\n    } else if (prize.type === 'daily-caterpillar' && dailyItems?.caterpillarId) {\n      return (\n        <CaterpillarHoverPreview\n          key={prize.id}\n          caterpillarImageUrl={`/Raupen/${dailyItems.caterpillarId}.jpg`}\n          caterpillarName={dailyItems ? generateLatinCaterpillarName(dailyItems.caterpillarId) : \"Seltene Raupe des Tages\"}\n          rarity={convertIntegerRarityToTier(Number(dailyItems.caterpillarRarity))}\n        >\n          {cardContent}\n        </CaterpillarHoverPreview>\n      );\n    } else if (prize.type === 'daily-fish' && dailyItems?.fishId) {\n      return (\n        <FishHoverPreview\n          key={prize.id}\n          fishImageUrl={`/Fische/${dailyItems.fishId}.jpg`}\n          fishName={dailyItems ? generateLatinFishName(dailyItems.fishId) : \"Seltener Fisch des Tages\"}\n          rarity={convertIntegerRarityToTier(Number(dailyItems.fishRarity))}\n        >\n          {cardContent}\n        </FishHoverPreview>\n      );\n    } else {\n      return (\n        <div key={prize.id}>\n          {cardContent}\n        </div>\n      );\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent \n        className=\"w-[95vw] max-w-sm md:max-w-6xl max-h-[95vh] bg-gradient-to-b from-purple-900 via-purple-800 to-purple-900\"\n        style={{ zIndex: 9999, overflow: 'visible' }}\n        aria-describedby=\"ticket-redemption-description\"\n      >\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-2xl text-purple-100\">\n            <Ticket className=\"h-8 w-8 text-purple-400\" />\n            Lose-Einlösung\n            <Badge variant=\"outline\" className=\"ml-auto text-purple-200 border-purple-400\">\n              {userTickets} 🎫\n            </Badge>\n          </DialogTitle>\n          <div id=\"ticket-redemption-description\" className=\"sr-only\">\n            Dialog zum Einlösen von Losen gegen verschiedene Preise\n          </div>\n        </DialogHeader>\n\n        {/* Shelf/Regal Design */}\n        <div className=\"relative\">\n          {/* Shelf Background */}\n          <div className=\"bg-gradient-to-b from-amber-800 to-amber-900 rounded-lg p-6 shadow-2xl\">\n            {/* Shelf Edges */}\n            <div className=\"absolute top-0 left-0 right-0 h-2 bg-gradient-to-r from-amber-700 via-amber-600 to-amber-700 rounded-t-lg shadow-inner\" />\n            <div className=\"absolute bottom-0 left-0 right-0 h-2 bg-gradient-to-r from-amber-900 via-amber-800 to-amber-900 rounded-b-lg\" />\n            \n            {/* Prize Layout */}\n            <div className=\"pt-2 space-y-4\">\n              {/* First Row - First 4 Prizes (10-30 Tickets) */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 md:gap-4\">\n                {prizes.slice(0, 4).map(renderPrizeCard)}\n              </div>\n              \n              {/* Second Row - Next 4 Prizes (50-200 Tickets) */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 md:gap-4\">\n                {prizes.slice(4, 8).map(renderPrizeCard)}\n              </div>\n              \n              {/* Third Row - 500 Credits + Info Container */}\n              <div className=\"flex gap-4\">\n                {/* Left: 500 Credits Prize */}\n                <div className=\"w-64\">\n                  {renderPrizeCard(prizes[8])}\n                </div>\n                \n                {/* Right: Info Container */}\n                <div className=\"flex-1 space-y-4\">\n                  {/* Success/Error Message */}\n                  <div className={`text-center p-4 rounded-lg transition-all duration-200 ${\n                    redeemMessage \n                      ? (redeemMessage.includes('erfolgreich') || redeemMessage.includes('🎉') \n                          ? 'bg-green-100 text-green-800 border border-green-300' \n                          : 'bg-red-100 text-red-800 border border-red-300')\n                      : 'bg-gray-50 text-gray-400 border border-gray-200'\n                  }`}>\n                    {redeemMessage || 'Wähle einen Preis zum Einlösen'}\n                  </div>\n\n                  {/* Info Footer */}\n                  <div className=\"bg-purple-800/20 rounded-lg p-4 border border-purple-500/30\">\n                    <div className=\"text-center text-purple-200 text-sm mb-3\">\n                      Tausche deine Lose gegen wertvolle Belohnungen ein!\n                    </div>\n                    <Button\n                      onClick={onClose}\n                      variant=\"outline\"\n                      className=\"w-full bg-purple-700 hover:bg-purple-600 text-purple-100 border-purple-500\"\n                    >\n                      Ich komme wieder\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":17542},"client/src/components/CastleGardenView.tsx":{"content":"import React, { useState, useEffect, useRef, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { useCredits } from \"@/lib/stores/useCredits\";\nimport { toast } from \"sonner\";\nimport { Heart, Coins, RefreshCw } from \"lucide-react\";\n\ntype BuildingPart = {\n  id: string;\n  name: string;\n  type: string;\n  cost: number;\n  image: string;\n  rotation: number;\n};\n\ntype GridField = {\n  x: number;\n  y: number;\n  buildingPart: BuildingPart | null;\n};\n\n// Bienen-Typ mit Animation\ntype Bee = {\n  id: string;\n  startX: number;\n  startY: number;\n  targetX: number;\n  targetY: number;\n  currentX: number;\n  currentY: number;\n  startTime: number;\n  duration: number; // Flugdauer in ms\n};\n\n// Konfetti-Herz-Typ\ntype ConfettiHeart = {\n  id: string;\n  x: number;\n  y: number;\n  offsetX: number;\n  offsetY: number;\n  rotation: number;\n  scale: number;\n  opacity: number;\n  velocity: { x: number; y: number };\n  startTime: number;\n};\n\n// Feld-Herz-Typ (persistent bis Klick)\ntype FieldHeart = {\n  id: string;\n  gridX: number;\n  gridY: number;\n  amount: number;\n  timestamp: number;\n};\n\n// Herzen-Anzahl-Text-Typ\n\nexport const CastleGardenView: React.FC = () => {\n  const { user } = useAuth();\n  const { credits, setCredits, updateCredits } = useCredits();\n  \n  // Update hearts in database\n  const updateHearts = async (userId: number, amount: number) => {\n    try {\n      const response = await fetch(`/api/user/${userId}/hearts`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ amount }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update hearts\");\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to update hearts:', error);\n      throw error;\n    }\n  };\n\n  // Grid-Dimensionen\n  const gridWidth = 25;\n  const gridHeight = 15;\n\n  // Shop State\n  const [showShopDialog, setShowShopDialog] = useState(false);\n  const [selectedShopField, setSelectedShopField] = useState<GridField | null>(null);\n  const [unlockedParts, setUnlockedParts] = useState<string[]>(['grass', 'stone_path']);\n\n  // Grid State\n  const [grid, setGrid] = useState<GridField[]>(() => {\n    const newGrid: GridField[] = [];\n    for (let y = 0; y < gridHeight; y++) {\n      for (let x = 0; x < gridWidth; x++) {\n        newGrid.push({\n          x,\n          y,\n          buildingPart: null\n        });\n      }\n    }\n    return newGrid;\n  });\n\n  // Bienen State\n  const [bees, setBees] = useState<Bee[]>([]);\n  const [confettiHearts, setConfettiHearts] = useState<ConfettiHeart[]>([]);\n  \n  // Field Hearts mit localStorage-Persistierung\n  const [fieldHearts, setFieldHearts] = useState<FieldHeart[]>([]);\n  const loadedRef = useRef(false);\n  \n  const animationFrameRef = useRef<number>();\n\n  // Drag & Drop State mit Feld-zu-Feld Support\n  const [draggedPart, setDraggedPart] = useState<BuildingPart | null>(null);\n  const [draggedFromField, setDraggedFromField] = useState<GridField | null>(null);\n  \n  // Herzen State aus Datenbank (echte Werte wie in Rankings)\n  const [databaseHearts, setDatabaseHearts] = useState(0);\n  \n  // Herzen aus Datenbank laden\n  const fetchHearts = async () => {\n    if (!user?.id) return;\n    try {\n      const response = await fetch(`/api/user/${user.id}/hearts`);\n      if (response.ok) {\n        const data = await response.json();\n        setDatabaseHearts(data.hearts || 0);\n      }\n    } catch (error) {\n      console.error('Failed to fetch hearts:', error);\n    }\n  };\n  \n  // Herzen beim Component laden und periodisch aktualisieren\n  useEffect(() => {\n    fetchHearts();\n    const interval = setInterval(fetchHearts, 5000); // Alle 5 Sekunden\n    return () => clearInterval(interval);\n  }, [user?.id]);\n\n  // Field Hearts von localStorage laden bei User-Wechsel\n  useEffect(() => {\n    if (!user?.id) {\n      setFieldHearts([]);\n      loadedRef.current = false;\n      return;\n    }\n    \n    try {\n      const saved = localStorage.getItem(`castle-field-hearts-${user.id}`);\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        // Validiere und filtere veraltete Herzen (älter als 24 Stunden)\n        const now = Date.now();\n        const validHearts = parsed.filter((heart: any) => \n          heart.timestamp && (now - heart.timestamp) < 24 * 60 * 60 * 1000\n        );\n        setFieldHearts(validHearts);\n        console.log(`💾 Loaded ${validHearts.length} field hearts from localStorage for user ${user.id}`);\n        \n        // Bereinigte Liste zurückschreiben wenn sich etwas geändert hat\n        if (validHearts.length !== parsed.length) {\n          localStorage.setItem(`castle-field-hearts-${user.id}`, JSON.stringify(validHearts));\n        }\n      } else {\n        setFieldHearts([]);\n      }\n    } catch (error) {\n      console.error('Failed to load field hearts from localStorage:', error);\n      setFieldHearts([]);\n    }\n    \n    loadedRef.current = true;\n  }, [user?.id]);\n\n  // Field Hearts in localStorage persistieren bei Änderungen (nur wenn geladen)\n  useEffect(() => {\n    if (!user?.id || !loadedRef.current) return;\n    \n    try {\n      localStorage.setItem(`castle-field-hearts-${user.id}`, JSON.stringify(fieldHearts));\n      console.log(`💾 Saved ${fieldHearts.length} field hearts to localStorage for user ${user.id}`);\n    } catch (error) {\n      console.error('Failed to save field hearts to localStorage:', error);\n    }\n  }, [fieldHearts, user?.id]);\n\n  // Balloon-Toggle State\n  const [balloonsEnabled, setBalloonsEnabled] = useState(() => {\n    const saved = localStorage.getItem('castle-balloons-enabled');\n    return saved === null ? true : saved === 'true';\n  });\n\n  // Balloon-Toggle bei Änderung in localStorage speichern und globales Flag setzen\n  useEffect(() => {\n    localStorage.setItem('castle-balloons-enabled', balloonsEnabled.toString());\n    // Globales Flag für Layout setzen (nur wenn im Schlossgarten)\n    (window as any).balloonsDisabledInCastle = !balloonsEnabled;\n  }, [balloonsEnabled]);\n\n  // State für verfügbare Bauteile\n  const [availableCastleFiles, setAvailableCastleFiles] = useState<string[]>([]);\n  const [refreshKey, setRefreshKey] = useState(0);\n\n  // Dynamisches Laden der Bauteile aus Castle-Ordner via API\n  const loadBuildingPartsFromCastle = async (): Promise<BuildingPart[]> => {\n\n    // Keine Basis-Bauteile mehr - nur dynamische Castle-Dateien\n\n    // Castle-Bauteile aus API-Daten parsen\n    const castleParts: BuildingPart[] = availableCastleFiles.map(filename => {\n      const nameWithoutExt = filename.replace(/\\.(jpg|jpeg|png)$/i, '');\n      const parts = nameWithoutExt.split('_');\n      const name = parts[0];\n      const price = parseInt(parts[1], 10) || 0;\n      \n      return {\n        id: nameWithoutExt.toLowerCase(),\n        name: name,\n        type: 'castle',\n        cost: price,\n        image: `/Castle/${filename}`,\n        rotation: 0\n      };\n    });\n\n    // Nach Preis sortieren (aufsteigend)\n    castleParts.sort((a, b) => a.cost - b.cost);\n\n    // Nur Castle-Bauteile zurückgeben\n    return castleParts;\n  };\n\n  // Funktion zum Laden der Castle-Dateien von der API\n  const fetchCastleFiles = async () => {\n    try {\n      const response = await fetch('/api/castle/available-parts');\n      if (response.ok) {\n        const { files } = await response.json();\n        setAvailableCastleFiles(files);\n        console.log(`🏰 Loaded ${files.length} castle files from API:`, files);\n      }\n    } catch (error) {\n      console.error('Failed to fetch castle files:', error);\n    }\n  };\n\n  // Castle-Dateien beim Mount und bei Refresh laden\n  useEffect(() => {\n    fetchCastleFiles();\n  }, [refreshKey]);\n\n  // Verfügbare Bauteile (asynchron laden)\n  const [allParts, setAllParts] = useState<BuildingPart[]>([]);\n  \n  // Bauteile neu laden wenn Castle-Dateien verfügbar sind\n  useEffect(() => {\n    const loadParts = async () => {\n      const parts = await loadBuildingPartsFromCastle();\n      setAllParts(parts);\n    };\n    loadParts();\n  }, [availableCastleFiles]);\n  \n  \n  // Nur freigeschaltete Bauteile anzeigen\n  const availableParts = allParts.filter(part => unlockedParts.includes(part.id));\n  \n  // Gesamtinvestition berechnen (ohne Standard-Teile)\n  const totalInvestment = useMemo(() => {\n    return availableParts\n      .filter(part => part.cost > 0) // Nur kostenpflichtige Teile\n      .reduce((sum, part) => sum + part.cost, 0);\n  }, [availableParts]);\n  \n  // Herzen pro Stunde berechnen\n  const heartsPerHour = useMemo(() => {\n    const totalSpentCredits = unlockedParts.reduce((sum, partId) => {\n      const part = allParts.find(p => p.id === partId);\n      return sum + (part?.cost || 0);\n    }, 0);\n    \n    const creditBonus = Math.floor(totalSpentCredits / 5000);\n    const spawnInterval = Math.max(3000, 10000 - (creditBonus * 1000)); // Minimum 3 Sekunden\n    const spawnChance = Math.min(0.9, 0.3 + (creditBonus * 0.1)); // Maximum 90%\n    \n    // Berechnung: Spawns pro Sekunde × 3600 Sekunden × durchschnittliche Herzen pro Biene\n    const spawnsPerSecond = spawnChance / (spawnInterval / 1000);\n    const averageHeartsPerBee = 2.5; // Basierend auf Logs: meist 1-5 Herzen\n    const heartsPerHour = spawnsPerSecond * 3600 * averageHeartsPerBee;\n    \n    return Math.round(heartsPerHour);\n  }, [unlockedParts, allParts]);\n\n  // Drag Start Handler für Bauteile\n  const handleDragStart = (event: React.DragEvent, part: BuildingPart) => {\n    setDraggedPart(part);\n    setDraggedFromField(null); // Reset field drag\n    event.dataTransfer.setData('text/plain', part.id);\n    event.dataTransfer.effectAllowed = 'copy';\n  };\n\n  // Drag Start Handler für Felder (Drag zwischen Feldern)\n  const handleFieldDragStart = (event: React.DragEvent, field: GridField) => {\n    if (field.buildingPart) {\n      setDraggedPart(field.buildingPart);\n      setDraggedFromField(field);\n      event.dataTransfer.setData('text/plain', field.buildingPart.id);\n      event.dataTransfer.effectAllowed = 'move';\n    }\n  };\n\n  // Drop Handler für Grid-Felder mit Persistierung\n  const handleDrop = async (event: React.DragEvent, field: GridField) => {\n    event.preventDefault();\n    \n    if (draggedPart) {\n      const fieldIndex = field.y * gridWidth + field.x;\n      const newGrid = [...grid];\n      \n      // Wenn von einem Feld gedraggt wurde, das ursprüngliche Feld leeren\n      if (draggedFromField) {\n        const fromIndex = draggedFromField.y * gridWidth + draggedFromField.x;\n        newGrid[fromIndex] = {\n          ...draggedFromField,\n          buildingPart: null\n        };\n        \n        // Ursprüngliches Feld in DB löschen\n        if (user?.id) {\n          try {\n            await fetch(`/api/user/${user.id}/castle-remove-part`, {\n              method: 'DELETE',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                gridX: draggedFromField.x,\n                gridY: draggedFromField.y\n              })\n            });\n          } catch (error) {\n            console.error('Failed to remove part from database:', error);\n          }\n        }\n      }\n      \n      // Bauteil am Zielfeld platzieren\n      newGrid[fieldIndex] = {\n        ...field,\n        buildingPart: { ...draggedPart }\n      };\n      setGrid(newGrid);\n      \n      // Neues Feld in DB speichern\n      if (user?.id) {\n        try {\n          await fetch(`/api/user/${user.id}/castle-place-part`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              gridX: field.x,\n              gridY: field.y,\n              partName: draggedPart.id\n            })\n          });\n          console.log(`🏰 Placed ${draggedPart.name} at (${field.x}, ${field.y})`);\n        } catch (error) {\n          console.error('Failed to place part in database:', error);\n        }\n      }\n      \n      // Reset drag state\n      if (draggedFromField) {\n        setDraggedFromField(null);\n        setDraggedPart(null);\n      }\n    }\n  };\n\n  // Drag Over Handler\n  const handleDragOver = (event: React.DragEvent) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = draggedFromField ? 'move' : 'copy';\n  };\n\n  // Grid-Feld Klick Handler mit Persistierung\n  const handleFieldClick = async (field: GridField, event: React.MouseEvent) => {\n    if (field.buildingPart) {\n      // Belegtes Feld - Bauteil löschen (nur mit Shift + Linksklick)\n      if (!draggedFromField && event.shiftKey) {\n        const fieldIndex = field.y * gridWidth + field.x;\n        const newGrid = [...grid];\n        newGrid[fieldIndex] = {\n          ...field,\n          buildingPart: null\n        };\n        setGrid(newGrid);\n        \n        // Bauteil aus DB löschen\n        if (user?.id) {\n          try {\n            await fetch(`/api/user/${user.id}/castle-remove-part`, {\n              method: 'DELETE',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                gridX: field.x,\n                gridY: field.y\n              })\n            });\n            console.log(`🏰 Removed ${field.buildingPart.name} from (${field.x}, ${field.y})`);\n          } catch (error) {\n            console.error('Failed to remove part from database:', error);\n          }\n        }\n      }\n    } else {\n      // Leeres Feld - Shop öffnen oder Bauteil platzieren\n      if (draggedPart && !draggedFromField) {\n        // Bauteil aus Palette platzieren\n        const fieldIndex = field.y * gridWidth + field.x;\n        const newGrid = [...grid];\n        newGrid[fieldIndex] = {\n          ...field,\n          buildingPart: { ...draggedPart }\n        };\n        setGrid(newGrid);\n        \n        // Bauteil in DB speichern\n        if (user?.id) {\n          try {\n            await fetch(`/api/user/${user.id}/castle-place-part`, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                gridX: field.x,\n                gridY: field.y,\n                partName: draggedPart.id\n              })\n            });\n            console.log(`🏰 Placed ${draggedPart.name} at (${field.x}, ${field.y})`);\n          } catch (error) {\n            console.error('Failed to place part in database:', error);\n          }\n        }\n      } else if (!draggedPart) {\n        // Shop öffnen\n        setSelectedShopField(field);\n        setShowShopDialog(true);\n      }\n    }\n    \n    // Reset drag state\n    setDraggedFromField(null);\n  };\n\n  // Bauteil rotieren (Rechtsklick)\n  const handleFieldRightClick = (event: React.MouseEvent, field: GridField) => {\n    event.preventDefault();\n    \n    if (field.buildingPart) {\n      const fieldIndex = field.y * gridWidth + field.x;\n      const newGrid = [...grid];\n      newGrid[fieldIndex] = {\n        ...field,\n        buildingPart: {\n          ...field.buildingPart,\n          rotation: (field.buildingPart.rotation + 90) % 360\n        }\n      };\n      setGrid(newGrid);\n    }\n  };\n\n  // Intelligente Bienen spawnen mit Animation\n  const spawnRandomBee = () => {\n    // Finde alle Felder mit Bauteilen (außer Rasen)\n    const fieldsWithParts = grid.filter(field => field.buildingPart && field.buildingPart.type !== 'grass');\n    \n    if (fieldsWithParts.length < 2) {\n      console.log('🐝 Nicht genug Bauteile für Bienen-Flug (mindestens 2 benötigt)');\n      return;\n    }\n    \n    // Zufälliges Start- und Zielfeld aus gesetzten Bauteilen\n    const startField = fieldsWithParts[Math.floor(Math.random() * fieldsWithParts.length)];\n    const possibleTargets = fieldsWithParts.filter(f => f !== startField);\n    const targetField = possibleTargets[Math.floor(Math.random() * possibleTargets.length)];\n    \n    const distance = Math.sqrt(\n      Math.pow(targetField.x - startField.x, 2) + Math.pow(targetField.y - startField.y, 2)\n    );\n    \n    const flightDuration = Math.max(4000, distance * 1000); // Noch langsamerer Flug für flüssige Animation\n    \n    const newBee: Bee = {\n      id: `bee-${Date.now()}`,\n      startX: startField.x * 56 + 28, // Pixelkoordinaten mit Feldmitte\n      startY: startField.y * 56 + 28,\n      targetX: targetField.x * 56 + 28,\n      targetY: targetField.y * 56 + 28,\n      currentX: startField.x * 56 + 28,\n      currentY: startField.y * 56 + 28,\n      startTime: Date.now(),\n      duration: flightDuration\n    };\n    \n    setBees(prev => [...prev, newBee]);\n    \n    // Biene nach Flugdauer entfernen und Konfetti-Herzen spawnen\n    setTimeout(async () => {\n      setBees(prev => prev.filter(bee => bee.id !== newBee.id));\n      \n      // Herzen basierend auf Flugstrecke UND Bauteil-Wert\n      const targetPart = targetField.buildingPart!;\n      // Neue Herzen-Berechnung basierend auf Wahrscheinlichkeit\n      const partCost = targetPart.cost || 300; // Fallback auf billigstes\n      const minCost = 300;\n      const maxCost = 25000;\n      const maxDistance = Math.sqrt(24*24 + 14*14); // Maximale Diagonale des Grids\n      \n      // Normalisierung: 0 = billigst/kurz, 1 = teuerst/lang\n      const costFactor = Math.min(1, Math.max(0, (partCost - minCost) / (maxCost - minCost)));\n      const distanceFactor = Math.min(1, distance / maxDistance);\n      \n      // Kombinierte Chance: 5% bis 100% für >3 Herzen\n      const combinedFactor = (costFactor + distanceFactor) / 2;\n      const chanceFor4Plus = 0.05 + (combinedFactor * 0.95); // 5% bis 100%\n      \n      // Herzen-Anzahl bestimmen\n      let heartAmount;\n      if (Math.random() < chanceFor4Plus) {\n        // >3 Herzen: 4 oder 5\n        heartAmount = Math.random() < 0.6 ? 4 : 5;\n      } else {\n        // ≤3 Herzen: 1, 2 oder 3\n        const roll = Math.random();\n        if (roll < 0.5) heartAmount = 1;\n        else if (roll < 0.8) heartAmount = 2;\n        else heartAmount = 3;\n      }\n      \n      // Persistentes Herz auf dem Feld spawnen (mit Rückgabewert ob erfolgreich)\n      const spawned = spawnFieldHeart(targetField.x, targetField.y, heartAmount);\n      \n      // Log nur wenn tatsächlich ein Herz gespawnt wurde\n      if (spawned) {\n        console.log(`🐝 Biene geflogen: ${distance.toFixed(1)} Felder, Bauteil-Kosten: ${partCost}💰, Chance: ${(chanceFor4Plus*100).toFixed(1)}%, ${heartAmount} Herzen auf Feld gespawnt!`);\n      } else {\n        console.log(`🐝 Biene geflogen: ${distance.toFixed(1)} Felder, Bauteil-Kosten: ${partCost}💰, Chance: ${(chanceFor4Plus*100).toFixed(1)}%, aber KEIN Herz gespawnt (Feld bereits belegt)!`);\n      }\n    }, flightDuration);\n  };\n\n  // Neues persistentes Herz auf Feld spawnen (nur wenn noch kein Herz vorhanden)\n  const spawnFieldHeart = (gridX: number, gridY: number, amount: number): boolean => {\n    // Prüfen ob bereits ein Herz auf diesem Feld existiert\n    const existingHeart = fieldHearts.find(heart => heart.gridX === gridX && heart.gridY === gridY);\n    \n    if (existingHeart) {\n      console.log(`💖 Herz nicht gespawnt - Feld (${gridX}, ${gridY}) hat bereits ein Herz mit ${existingHeart.amount} Herzen!`);\n      return false; // Kein neues Herz spawnen\n    }\n    \n    const newHeart: FieldHeart = {\n      id: `field-heart-${Date.now()}-${Math.random()}`,\n      gridX,\n      gridY,\n      amount,\n      timestamp: Date.now()\n    };\n    \n    setFieldHearts(prev => {\n      const updated = [...prev, newHeart];\n      console.log(`💖 Field heart spawned at (${gridX}, ${gridY}) with ${amount} hearts. Total field hearts: ${updated.length}`);\n      return updated;\n    });\n    return true; // Herz erfolgreich gespawnt\n  };\n  \n  // Herz einsammeln beim Klick\n  const collectHeart = async (heart: FieldHeart, event: React.MouseEvent) => {\n    event.stopPropagation(); // Verhindert Feld-Klick\n    \n    console.log(`💖 Collecting heart at (${heart.gridX}, ${heart.gridY}) with ${heart.amount} hearts`);\n    \n    // Herz aus Liste entfernen\n    setFieldHearts(prev => {\n      const updated = prev.filter(h => h.id !== heart.id);\n      console.log(`💖 Heart collected. Remaining field hearts: ${updated.length}`);\n      return updated;\n    });\n    \n    // Herzen in Datenbank updaten und lokale Anzeige aktualisieren\n    if (user?.id) {\n      try {\n        await updateHearts(user.id, heart.amount);\n        setDatabaseHearts(prev => prev + heart.amount);\n        toast.success(`💖 ${heart.amount} Herzen eingesammelt!`);\n        console.log(`💖 ${heart.amount} Herzen eingesammelt! (Keine Credits vergeben)`);\n      } catch (error) {\n        console.error('Failed to save hearts to database:', error);\n        // Bei Fehler das Herz wieder hinzufügen\n        setFieldHearts(prev => {\n          const restored = [...prev, heart];\n          console.log(`💖 Heart restored due to error. Field hearts: ${restored.length}`);\n          return restored;\n        });\n      }\n    }\n  };\n\n  // Einfache Animation nur für Bienen\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setBees(prevBees => \n        prevBees.map(bee => {\n          const elapsed = Date.now() - bee.startTime;\n          const progress = Math.min(elapsed / bee.duration, 1);\n          \n          const newX = bee.startX + (bee.targetX - bee.startX) * progress;\n          const newY = bee.startY + (bee.targetY - bee.startY) * progress;\n          \n          return {\n            ...bee,\n            currentX: newX,\n            currentY: newY\n          };\n        })\n      );\n    }, 50); // 20 FPS\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  // Dynamischer Bienen-Spawn Timer basierend auf ausgegebenen Credits\n  useEffect(() => {\n    // Berechne Summe der ausgegebenen Credits für freigeschaltete Bauteile\n    const totalSpentCredits = unlockedParts.reduce((sum, partId) => {\n      const part = allParts.find(p => p.id === partId);\n      return sum + (part?.cost || 0);\n    }, 0);\n    \n    // Dynamische Spawn-Parameter basierend auf ausgegebenen Credits\n    // Ziel: Bei 100.000 Credits = ~1.000 Herzen/Stunde\n    // Base: 15 Sekunden, 20% Chance\n    // Pro 10.000 Credits: -1 Sekunde Intervall, +5% Chance\n    const creditBonus = Math.floor(totalSpentCredits / 10000);\n    const spawnInterval = Math.max(5000, 15000 - (creditBonus * 1000)); // Minimum 5 Sekunden\n    const spawnChance = Math.min(0.7, 0.2 + (creditBonus * 0.05)); // Maximum 70%\n    \n    console.log(`🐝 Spawn-Parameter: ${totalSpentCredits} Credits ausgegeben → Intervall: ${spawnInterval/1000}s, Chance: ${(spawnChance*100).toFixed(0)}%`);\n    \n    const interval = setInterval(() => {\n      if (Math.random() < spawnChance) {\n        spawnRandomBee();\n      }\n    }, spawnInterval);\n    \n    return () => clearInterval(interval);\n  }, [grid, credits, unlockedParts]); // Abhängig von Grid, Credits und freigeschalteten Bauteilen\n\n  // ==================== PERSISTIERUNG LOGIC ====================\n  \n  // Daten beim Mount laden (ERST wenn allParts geladen sind!)\n  useEffect(() => {\n    if (user?.id && allParts.length > 0) {\n      loadCastleData();\n    }\n  }, [user?.id, allParts]);\n\n  // Daten von der API laden\n  const loadCastleData = async () => {\n    if (!user?.id) return;\n\n    try {\n      // Freigeschaltete Bauteile laden\n      const unlockedResponse = await fetch(`/api/user/${user.id}/castle-unlocked-parts`);\n      if (unlockedResponse.ok) {\n        const { unlockedParts: loadedParts } = await unlockedResponse.json();\n        const partNames = loadedParts.map((part: any) => part.partName);\n        setUnlockedParts(partNames); // Nur persistierte Castle-Teile\n        console.log(`🏰 Loaded ${partNames.length} unlocked castle parts:`, partNames);\n      }\n\n      // Grid-Status laden\n      const gridResponse = await fetch(`/api/user/${user.id}/castle-grid-state`);\n      if (gridResponse.ok) {\n        const { gridState: loadedGrid } = await gridResponse.json();\n        \n        // Grid mit geladenen Daten rekonstruieren\n        const reconstructedGrid: GridField[] = [];\n        for (let y = 0; y < gridHeight; y++) {\n          for (let x = 0; x < gridWidth; x++) {\n            const savedField = loadedGrid.find((field: any) => field.gridX === x && field.gridY === y);\n            const buildingPart = savedField ? allParts.find(part => part.id === savedField.partName) || null : null;\n            \n            reconstructedGrid.push({\n              x,\n              y,\n              buildingPart\n            });\n          }\n        }\n        setGrid(reconstructedGrid);\n        console.log(`🏰 Loaded ${loadedGrid.length} grid placements`);\n      }\n    } catch (error) {\n      console.error('Failed to load castle data:', error);\n      toast.error('Fehler beim Laden des Schlossgartens');\n    }\n  };\n\n  // Grid-Änderungen in Datenbank speichern\n  const saveGridState = async (newGrid: GridField[]) => {\n    if (!user?.id) return;\n\n    try {\n      // Alle bestehenden Einträge löschen und neue speichern\n      const fieldsWithParts = newGrid.filter(field => field.buildingPart);\n      \n      for (const field of fieldsWithParts) {\n        await fetch(`/api/user/${user.id}/castle-place-part`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            gridX: field.x,\n            gridY: field.y,\n            partName: field.buildingPart!.id\n          })\n        });\n      }\n      \n      console.log(`🏰 Saved grid state with ${fieldsWithParts.length} placed parts`);\n    } catch (error) {\n      console.error('Failed to save grid state:', error);\n    }\n  };\n\n  // Bauteil freischalten mit Persistierung\n  const unlockPart = async (partId: string, cost: number) => {\n    if (credits >= cost && !unlockedParts.includes(partId)) {\n      try {\n        // Bauteil in Datenbank freischalten\n        const unlockResponse = await fetch(`/api/user/${user?.id}/castle-unlock-part`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ partName: partId, price: cost })\n        });\n\n        if (unlockResponse.ok) {\n          setCredits(credits - cost);\n          setUnlockedParts(prev => [...prev, partId]);\n          setShowShopDialog(false);\n          toast.success(`🔓 ${allParts.find(p => p.id === partId)?.name} freigeschaltet!`);\n          console.log(`🏰 Bauteil ${partId} für ${cost} Credits persistent freigeschaltet!`);\n        } else {\n          const error = await unlockResponse.json();\n          toast.error(error.message || 'Fehler beim Freischalten');\n        }\n      } catch (error) {\n        console.error('Fehler beim Freischalten:', error);\n        toast.error('Fehler beim Freischalten des Bauteils');\n      }\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Card className=\"bg-slate-800 border-slate-700 text-white\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-slate-400\">Bitte melde dich an, um den Schlossgarten zu betreten</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full bg-slate-900 overflow-auto\">\n      {/* Header im App-Stil mit Herzen-Zähler */}\n      <div className=\"bg-slate-800 border-b border-slate-700 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white mb-2\">🏰 Schlossgarten</h1>\n            <p className=\"text-slate-300\">Gestalte deinen eigenen königlichen Garten!</p>\n          </div>\n          <div className=\"flex items-center gap-6\">\n            {/* Balloon-Toggle */}\n            <button\n              onClick={() => setBalloonsEnabled(!balloonsEnabled)}\n              className={`flex items-center gap-1 px-2 py-1 rounded text-sm font-medium transition-colors ${\n                balloonsEnabled \n                  ? 'bg-green-600 hover:bg-green-500 text-white' \n                  : 'bg-gray-600 hover:bg-gray-500 text-gray-300'\n              }`}\n              title=\"Luftballons beim Bauen ein-/ausschalten\"\n            >\n              <span className=\"text-lg\">🎈</span>\n              <span className=\"hidden sm:inline\">{balloonsEnabled ? 'An' : 'Aus'}</span>\n            </button>\n            \n            {/* Investitionssumme */}\n            <div className=\"flex items-center gap-2 text-lg\">\n              <span className=\"text-2xl\">🏰</span>\n              <span className=\"text-yellow-400 font-bold\">{totalInvestment.toLocaleString()}</span>\n              <span className=\"text-slate-400 text-sm\">investiert</span>\n            </div>\n            \n            \n            {/* Herzen-Anzeige mit echten Datenbankwerten */}\n            <div className=\"flex items-center gap-2 text-lg\">\n              <span className=\"text-2xl\">💖</span>\n              <span className=\"text-white font-bold\">{databaseHearts.toLocaleString()}</span>\n              <span className=\"text-slate-400 text-sm\">Herzen</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        {/* Bauteile-Palette über dem Grid */}\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <CardTitle className=\"text-lg text-white\">🧱 Freigeschaltete Bauteile</CardTitle>\n                <p className=\"text-sm text-slate-400\">\n                  <span className=\"text-green-400 font-medium\">{availableParts.length}/{allParts.length}</span> freigeschaltet • Ziehe ins Grid unten\n                </p>\n              </div>\n              \n              {/* Refresh Button für neue Bauteile */}\n              <button\n                onClick={() => {\n                  setRefreshKey(prev => prev + 1);\n                  console.log('🔄 Refreshing castle parts...');\n                  toast.info('Bauteilliste wird aktualisiert...');\n                }}\n                className=\"flex items-center space-x-2 px-3 py-2 text-sm bg-slate-700 hover:bg-slate-600 text-slate-300 hover:text-white rounded border border-slate-600 hover:border-slate-500 transition-all duration-200\"\n                title=\"Neue Bauteile aus Castle-Ordner laden\"\n              >\n                <RefreshCw className=\"h-4 w-4\" />\n                <span>Neue Teile laden</span>\n              </button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex gap-3 overflow-x-auto pb-2 scrollbar-thin scrollbar-track-slate-700 scrollbar-thumb-green-600 hover:scrollbar-thumb-green-500\">\n              {availableParts.map((part) => (\n                <div\n                  key={part.id}\n                  className={`flex-shrink-0 w-20 h-20 border-2 rounded-lg cursor-grab active:cursor-grabbing transition-all ${\n                    draggedPart?.id === part.id \n                      ? 'border-green-400 bg-green-900/30 scale-105' \n                      : 'border-slate-600 hover:border-green-500 hover:shadow-lg'\n                  }`}\n                  draggable\n                  onDragStart={(e) => handleDragStart(e, part)}\n                  onClick={() => setDraggedPart(draggedPart?.id === part.id ? null : part)}\n                  style={{\n                    backgroundImage: `url(${part.image})`,\n                    backgroundSize: '120%',\n                    backgroundPosition: 'center'\n                  }}\n                >\n                  <div className=\"w-full h-full bg-gradient-to-t from-black/70 to-transparent rounded-lg flex flex-col justify-between p-1\">\n                    <div className=\"text-xs text-white font-bold bg-black/60 rounded px-1\">\n                      {part.cost > 0 ? `${part.cost}💰` : '🆓'}\n                    </div>\n                    <div className=\"text-xs text-white font-bold text-center bg-black/60 rounded px-1\">\n                      {part.name}\n                    </div>\n                  </div>\n                </div>\n              ))}\n              \n              {/* Mehr Bauteile freischalten */}\n              {allParts.length > availableParts.length && (\n                <div\n                  className=\"flex-shrink-0 w-20 h-20 border-2 border-dashed border-green-400 rounded-lg cursor-pointer hover:border-green-300 hover:bg-green-900/20 transition-all flex flex-col items-center justify-center gap-1\"\n                  onClick={() => setShowShopDialog(true)}\n                >\n                  <div className=\"text-lg\">🛒</div>\n                  <div className=\"text-xs text-green-400 font-bold text-center\">\n                    Mehr\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            {draggedPart && (\n              <div className=\"mt-3 p-2 bg-green-900/30 rounded border border-green-700\">\n                <p className=\"text-sm text-green-300 font-medium\">\n                  🎯 <strong>{draggedPart.name}</strong> ausgewählt - Ziehe ins Grid oder klicke ein Feld\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n        \n        {/* Garten-Grid */}\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-white\">🏰 Dein Schlossgarten (25x15)</CardTitle>\n            <p className=\"text-sm text-slate-400\">\n              🖱️ Drag & Drop zwischen Feldern • 🛒 Leeres Feld = Shop • 🔄 Rechtsklick = Drehen • 🗑️ Shift+Klick = Löschen\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"relative mx-auto w-fit border-2 border-slate-600 bg-slate-700 overflow-visible rounded-lg\">\n              <div \n                className=\"grid relative\"\n                style={{\n                  gridTemplateColumns: `repeat(${gridWidth}, 56px)`, // Große Felder\n                  gridTemplateRows: `repeat(${gridHeight}, 56px)`,\n                  gap: '0px'\n                }}\n              >\n                {grid.map((field, index) => (\n                  <div\n                    key={index}\n                    className=\"w-14 h-14 cursor-pointer hover:ring-2 hover:ring-green-400 transition-all relative select-none\"\n                    onClick={(e) => handleFieldClick(field, e)}\n                    onContextMenu={(e) => handleFieldRightClick(e, field)}\n                    onDrop={(e) => handleDrop(e, field)}\n                    onDragOver={handleDragOver}\n                    onDragStart={(e) => handleFieldDragStart(e, field)}\n                    draggable={!!field.buildingPart}\n                    style={{\n                      backgroundColor: field.buildingPart ? 'transparent' : '#475569',\n                      backgroundImage: field.buildingPart ? `url(${field.buildingPart.image})` : 'url(/Landschaft/gras.png)',\n                      backgroundSize: field.buildingPart ? '130%' : 'cover', // Bauteile größer\n                      backgroundPosition: 'center',\n                      transform: field.buildingPart ? `rotate(${field.buildingPart.rotation}deg)` : undefined\n                    }}\n                  >\n                    {/* Feld-Herzen - persistent bis Klick */}\n                    {fieldHearts\n                      .filter(heart => heart.gridX === field.x && heart.gridY === field.y)\n                      .map(heart => (\n                        <div\n                          key={heart.id}\n                          className=\"absolute inset-0 flex items-center justify-center cursor-pointer hover:scale-110 transition-transform\"\n                          onClick={(e) => collectHeart(heart, e)}\n                          style={{\n                            borderRadius: '50%',\n                            zIndex: 1000\n                          }}\n                        >\n                          <div className=\"relative\">\n                            <div className=\"text-4xl animate-pulse drop-shadow-lg\">\n                              💖\n                            </div>\n                            <div className=\"absolute inset-0 flex items-center justify-center text-white text-sm font-bold\" style={{ textShadow: '1px 1px 2px rgba(0,0,0,0.8)' }}>\n                              {heart.amount}\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    }\n                  </div>\n                ))}\n              </div>\n              \n              {/* Animationen über dem gesamten Grid */}\n              <div className=\"absolute inset-0 pointer-events-none\" style={{ zIndex: 100 }}>\n                {/* Bienen - absolut über dem gesamten Grid */}\n                {bees.map(bee => {\n                  // Flugrichtung bestimmen: nach rechts = spiegeln\n                  const isFlyingRight = bee.targetX > bee.startX;\n                  \n                  return (\n                    <div\n                      key={bee.id}\n                      className=\"absolute pointer-events-none text-xl\"\n                      style={{\n                        left: `${bee.currentX}px`,\n                        top: `${bee.currentY}px`,\n                        transform: `translate(-50%, -50%) ${isFlyingRight ? 'scaleX(-1)' : ''}`,\n                        textShadow: '1px 1px 2px rgba(0,0,0,0.5)',\n                        fontSize: '24px'\n                      }}\n                  >\n                    🐝\n                  </div>\n                  );\n                })}\n                \n                {/* Herzen - absolut über dem gesamten Grid */}\n                {confettiHearts.map(heart => (\n                  <div\n                    key={heart.id}\n                    className=\"absolute pointer-events-none text-4xl animate-pulse\"\n                    style={{\n                      left: `${heart.x * 56 + 28}px`,\n                      top: `${heart.y * 56 + 28}px`,\n                      zIndex: 100\n                    }}\n                  >\n                    💖\n                  </div>\n                ))}\n                \n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n      </div>\n      \n      {/* Shop Dialog */}\n      <Dialog open={showShopDialog} onOpenChange={setShowShopDialog}>\n        <DialogContent className=\"max-w-2xl bg-slate-800 border-slate-700\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">🛒 Bauteil-Shop</DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              Schalte neue Bauteile mit deinen Credits frei\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"max-h-96 overflow-y-auto\">\n            <div className=\"grid grid-cols-2 gap-3 pr-2\">\n              {allParts.filter(part => !unlockedParts.includes(part.id)).map(part => (\n                <div key={part.id} className=\"flex flex-col gap-2 p-3 bg-slate-700 rounded-lg\">\n                  <div className=\"flex items-center gap-2\">\n                    <div \n                      className=\"w-10 h-10 rounded border border-slate-600 flex-shrink-0\"\n                      style={{\n                        backgroundImage: `url(${part.image})`,\n                        backgroundSize: 'cover',\n                        backgroundPosition: 'center'\n                      }}\n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-semibold text-white text-sm truncate\">{part.name}</h3>\n                      <p className=\"text-xs text-slate-400 truncate\">Typ: {part.type}</p>\n                    </div>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => unlockPart(part.id, part.cost)}\n                    disabled={credits < part.cost}\n                    className=\"bg-green-600 hover:bg-green-700 disabled:bg-slate-600 text-sm py-1 w-full\"\n                  >\n                    {part.cost} 💰\n                  </Button>\n                </div>\n              ))}\n            </div>\n            {allParts.filter(part => !unlockedParts.includes(part.id)).length === 0 && (\n              <p className=\"text-center text-slate-400 py-4\">\n                🎉 Alle Bauteile bereits freigeschaltet!\n              </p>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};","size_bytes":40660},"server/stripe.ts":{"content":"import Stripe from 'stripe';\nimport { Request, Response } from 'express';\n\n// Stripe Setup mit API Keys aus Environment\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-08-27.basil',\n});\n\n/**\n * 💳 Stripe Checkout Session erstellen\n * Erstellt eine sichere Stripe Payment Session für Donations\n */\nexport async function createDonationCheckoutSession(req: Request, res: Response) {\n  try {\n    const { amount, donorName, recipientName } = req.body;\n\n    // Validation\n    if (!amount || amount < 1) {\n      return res.status(400).json({ \n        error: 'Ungültiger Betrag. Mindestens 1€ erforderlich.' \n      });\n    }\n\n    if (!donorName || !recipientName) {\n      return res.status(400).json({ \n        error: 'Spender und Empfänger Name sind erforderlich.' \n      });\n    }\n\n    // Stripe Checkout Session erstellen\n    const session = await stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      line_items: [{\n        price_data: {\n          currency: 'eur',\n          product_data: {\n            name: `💖 Spende für ${recipientName}`,\n            description: `Spende von ${donorName} für das Garten-Spiel`,\n          },\n          unit_amount: Math.round(amount * 100), // Cent Umwandlung\n        },\n        quantity: 1,\n      }],\n      mode: 'payment',\n      success_url: `${process.env.REPLIT_DOMAIN || 'http://localhost:5000'}/donation-success?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: `${process.env.REPLIT_DOMAIN || 'http://localhost:5000'}/donation-cancelled`,\n      metadata: {\n        donorName,\n        recipientName,\n        gameType: 'garden-donation'\n      }\n    });\n\n    res.json({ \n      checkoutUrl: session.url,\n      sessionId: session.id\n    });\n\n  } catch (error) {\n    console.error('❌ Stripe Checkout Error:', error);\n    res.status(500).json({ \n      error: 'Fehler beim Erstellen der Donation Session.' \n    });\n  }\n}\n\n/**\n * 🔍 Donation Status prüfen\n * Prüft den Status einer Stripe Payment Session\n */\nexport async function getDonationStatus(req: Request, res: Response) {\n  try {\n    const { sessionId } = req.params;\n\n    const session = await stripe.checkout.sessions.retrieve(sessionId);\n    \n    res.json({\n      status: session.payment_status,\n      amount: session.amount_total ? session.amount_total / 100 : 0,\n      currency: session.currency,\n      metadata: session.metadata\n    });\n\n  } catch (error) {\n    console.error('❌ Stripe Status Check Error:', error);\n    res.status(500).json({ \n      error: 'Fehler beim Prüfen des Donation Status.' \n    });\n  }\n}\n\n/**\n * 🎯 Webhook für Payment Events\n * Verarbeitet Stripe Webhook Events für erfolgreiche Payments\n */\nexport async function handleStripeWebhook(req: Request, res: Response) {\n  const sig = req.headers['stripe-signature'] as string;\n  const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n  if (!webhookSecret) {\n    console.warn('⚠️ STRIPE_WEBHOOK_SECRET nicht konfiguriert');\n    return res.status(400).send('Webhook Secret fehlt');\n  }\n\n  try {\n    const event = stripe.webhooks.constructEvent(req.body, sig, webhookSecret);\n\n    switch (event.type) {\n      case 'checkout.session.completed':\n        const session = event.data.object as Stripe.Checkout.Session;\n        console.log('✅ Donation erfolgreich:', {\n          sessionId: session.id,\n          amount: session.amount_total ? session.amount_total / 100 : 0,\n          currency: session.currency,\n          donor: session.metadata?.donorName,\n          recipient: session.metadata?.recipientName\n        });\n        \n        // Hier könntest du weitere Aktionen ausführen:\n        // - Credits an Empfänger vergeben\n        // - Notification senden\n        // - Donation in Database speichern\n        break;\n\n      case 'payment_intent.payment_failed':\n        console.log('❌ Donation fehlgeschlagen:', event.data.object);\n        break;\n\n      default:\n        console.log(`🔄 Unbekannter Event Type: ${event.type}`);\n    }\n\n    res.json({ received: true });\n\n  } catch (error) {\n    console.error('❌ Webhook Error:', error);\n    res.status(400).send('Webhook Error');\n  }\n}","size_bytes":4150},"client/src/components/DonateDialog.tsx":{"content":"import { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Heart, CreditCard, Gift, Loader2 } from \"lucide-react\";\n\ninterface DonateDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  recipientName?: string;\n}\n\nexport function DonateDialog({ open, onOpenChange, recipientName = \"dem Spieler\" }: DonateDialogProps) {\n  const [donorName, setDonorName] = useState('');\n  const [amount, setAmount] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleDonate = async () => {\n    if (!donorName.trim() || !amount || parseFloat(amount) < 1) {\n      alert('Bitte alle Felder ausfüllen und mindestens 1€ spenden.');\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/stripe/create-donation-session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          amount: parseFloat(amount),\n          donorName: donorName.trim(),\n          recipientName\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.error) {\n        alert(`Fehler: ${data.error}`);\n        return;\n      }\n\n      // Weiterleitung zu Stripe Checkout\n      window.location.href = data.checkoutUrl;\n\n    } catch (error) {\n      console.error('Donation error:', error);\n      alert('Fehler beim Erstellen der Spende. Bitte erneut versuchen.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const presetAmounts = [2, 5, 10, 20];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-2xl\">\n            <Heart className=\"text-red-500\" size={24} />\n            💖 Spende für Mariposa\n          </DialogTitle>\n          <DialogDescription className=\"text-base\">\n            Unterstütze Mich mit einer kleinen Spende! \n            Alle Zahlungen werden sicher über Stripe verarbeitet.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 py-4\">\n          {/* Spender Name */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"donorName\" className=\"text-sm font-medium\">\n              Dein Name (wird angezeigt)\n            </Label>\n            <Input\n              id=\"donorName\"\n              placeholder=\"Dein Spender-Name...\"\n              value={donorName}\n              onChange={(e) => setDonorName(e.target.value)}\n              className=\"text-base\"\n            />\n          </div>\n\n          {/* Betrag Auswahl */}\n          <div className=\"space-y-3\">\n            <Label className=\"text-sm font-medium\">Spendenbetrag wählen</Label>\n            \n            {/* Preset Beträge */}\n            <div className=\"grid grid-cols-4 gap-2\">\n              {presetAmounts.map((preset) => (\n                <Button\n                  key={preset}\n                  variant={amount === preset.toString() ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setAmount(preset.toString())}\n                  className=\"text-sm\"\n                >\n                  {preset}€\n                </Button>\n              ))}\n            </div>\n\n            {/* Individueller Betrag */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"customAmount\" className=\"text-xs text-muted-foreground\">\n                Oder eigener Betrag:\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"customAmount\"\n                  type=\"number\"\n                  min=\"1\"\n                  step=\"0.01\"\n                  placeholder=\"0.00\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value)}\n                  className=\"pr-8 text-base\"\n                />\n                <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground text-sm\">\n                  €\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Info Card */}\n          <Card className=\"bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <CreditCard size={16} />\n                Sichere Zahlung\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-0 text-xs text-muted-foreground\">\n              <ul className=\"space-y-1\">\n                <li>✅ Stripe - Vertrauenswürdiger Payment-Anbieter</li>\n                <li>✅ Alle Kreditkarten & PayPal akzeptiert</li>\n                <li>✅ SSL-verschlüsselt & 100% sicher</li>\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n\n        <DialogFooter className=\"gap-2 sm:gap-2\">\n          <Button \n            variant=\"outline\" \n            onClick={() => onOpenChange(false)}\n            disabled={isLoading}\n          >\n            Abbrechen\n          </Button>\n          <Button \n            onClick={handleDonate}\n            disabled={isLoading || !donorName.trim() || !amount || parseFloat(amount) < 1}\n            className=\"bg-gradient-to-r from-pink-500 to-red-500 hover:from-pink-600 hover:to-red-600\"\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Weiterleitung...\n              </>\n            ) : (\n              <>\n                <Gift className=\"mr-2 h-4 w-4\" />\n                {amount ? `${amount}€ spenden` : 'Spenden'}\n              </>\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6116},"client/src/components/DatenschutzDialog.tsx":{"content":"import React from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\ninterface DatenschutzDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport const DatenschutzDialog: React.FC<DatenschutzDialogProps> = ({\n  open,\n  onOpenChange,\n}) => {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold\">🔒 Datenschutzerklärung</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6 text-sm\">\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">1. Datenschutz auf einen Blick</h3>\n            <p className=\"text-slate-300 leading-relaxed mb-3\">\n              Diese Datenschutzerklärung klärt Sie über die Art, den Umfang und Zweck der Verarbeitung von personenbezogenen Daten innerhalb unseres Onlineangebotes und der mit ihm verbundenen Webseiten, Funktionen und Inhalte auf.\n            </p>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">2. Verantwortliche Stelle</h3>\n            <div className=\"space-y-1 text-slate-300\">\n              <p><strong>Verantwortlich:</strong> Mariposa Game Studio</p>\n              <p><strong>E-Mail:</strong> datenschutz@mariposa-game.de</p>\n              <p><strong>Anschrift:</strong> Beispielstraße 123, 12345 Musterstadt</p>\n            </div>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">3. Erfassung und Verarbeitung von Daten</h3>\n            \n            <h4 className=\"font-medium mb-2 mt-4\">3.1 Registrierung und Login</h4>\n            <div className=\"text-slate-300 space-y-2\">\n              <p><strong>Erfasste Daten:</strong></p>\n              <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                <li>Benutzername</li>\n                <li>Passwort (verschlüsselt gespeichert)</li>\n                <li>Spielfortschritt und Spielstatistiken</li>\n              </ul>\n              <p><strong>Zweck:</strong> Bereitstellung des Spieldienstes, Verwaltung Ihres Spielaccounts</p>\n              <p><strong>Rechtsgrundlage:</strong> Art. 6 Abs. 1 lit. b DSGVO (Vertragserfüllung)</p>\n            </div>\n\n            <h4 className=\"font-medium mb-2 mt-4\">3.2 Spielaktivitäten</h4>\n            <div className=\"text-slate-300 space-y-2\">\n              <p><strong>Erfasste Daten:</strong></p>\n              <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                <li>Spielaktionen und -entscheidungen</li>\n                <li>Spielfortschritt (Credits, Suns, DNA, Tickets)</li>\n                <li>Sammlungen (Blumen, Schmetterlinge, etc.)</li>\n                <li>Zeitstempel der Aktivitäten</li>\n              </ul>\n              <p><strong>Zweck:</strong> Spielfunktionalität, Fortschritt speichern, Ranglisten</p>\n              <p><strong>Rechtsgrundlage:</strong> Art. 6 Abs. 1 lit. b DSGVO (Vertragserfüllung)</p>\n            </div>\n\n            <h4 className=\"font-medium mb-2 mt-4\">3.3 Zahlungsverarbeitung (Spenden)</h4>\n            <div className=\"text-slate-300 space-y-2\">\n              <p><strong>Externe Verarbeitung:</strong> Stripe (Stripe, Inc., USA)</p>\n              <p><strong>Erfasste Daten:</strong> Zahlungsinformationen werden ausschließlich bei Stripe verarbeitet</p>\n              <p><strong>Zweck:</strong> Verarbeitung von freiwilligen Spenden</p>\n              <p><strong>Rechtsgrundlage:</strong> Art. 6 Abs. 1 lit. b DSGVO (Vertragserfüllung)</p>\n            </div>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">4. Cookies und lokale Speicherung</h3>\n            <p className=\"text-slate-300 leading-relaxed\">\n              Unser Spiel verwendet Session-Cookies für die Anmeldung und lokale Browser-Speicher für Spieleinstellungen. Diese Daten werden nur lokal gespeichert und nicht an Dritte weitergegeben.\n            </p>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">5. Datenweitergabe</h3>\n            <p className=\"text-slate-300 leading-relaxed\">\n              Ihre Daten werden nicht an Dritte verkauft oder weitergegeben, außer:\n            </p>\n            <ul className=\"list-disc list-inside ml-4 space-y-1 text-slate-300 mt-2\">\n              <li>Bei Zahlungsverarbeitung über Stripe</li>\n              <li>Wenn gesetzlich dazu verpflichtet</li>\n              <li>Mit Ihrer ausdrücklichen Einwilligung</li>\n            </ul>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">6. Speicherdauer</h3>\n            <p className=\"text-slate-300 leading-relaxed\">\n              Ihre Spielerdaten werden solange gespeichert, wie Sie aktiver Spieler sind. Bei Löschung Ihres Accounts werden alle personenbezogenen Daten innerhalb von 30 Tagen gelöscht.\n            </p>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">7. Ihre Rechte</h3>\n            <div className=\"text-slate-300 space-y-2\">\n              <p>Sie haben folgende Rechte bezüglich Ihrer personenbezogenen Daten:</p>\n              <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                <li>Recht auf Auskunft (Art. 15 DSGVO)</li>\n                <li>Recht auf Berichtigung (Art. 16 DSGVO)</li>\n                <li>Recht auf Löschung (Art. 17 DSGVO)</li>\n                <li>Recht auf Einschränkung der Verarbeitung (Art. 18 DSGVO)</li>\n                <li>Recht auf Datenübertragbarkeit (Art. 20 DSGVO)</li>\n                <li>Widerspruchsrecht (Art. 21 DSGVO)</li>\n              </ul>\n            </div>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">8. Datensicherheit</h3>\n            <p className=\"text-slate-300 leading-relaxed\">\n              Wir verwenden technische und organisatorische Sicherheitsmaßnahmen, um Ihre Daten vor Verlust, Manipulation und unberechtigtem Zugriff zu schützen. Passwörter werden verschlüsselt gespeichert.\n            </p>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">9. Kontakt</h3>\n            <p className=\"text-slate-300\">\n              Bei Fragen zum Datenschutz kontaktieren Sie uns unter: \n              <br />\n              <strong>E-Mail:</strong> datenschutz@mariposa-game.de\n            </p>\n          </section>\n\n          <section>\n            <p className=\"text-xs text-slate-400 pt-4 border-t border-slate-700\">\n              Stand dieser Datenschutzerklärung: September 2025\n            </p>\n          </section>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":6830},"client/src/components/ImpressumDialog.tsx":{"content":"import React from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\ninterface ImpressumDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport const ImpressumDialog: React.FC<ImpressumDialogProps> = ({\n  open,\n  onOpenChange,\n}) => {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold\">📄 Impressum</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6 text-sm\">\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">Angaben gemäß § 5 TMG</h3>\n            <div className=\"space-y-1 text-slate-300\">\n              <p><strong>Betreiber:</strong> Mariposa Game Studio</p>\n              <p><strong>Anschrift:</strong> Beispielstraße 123</p>\n              <p><strong>PLZ/Ort:</strong> 12345 Musterstadt</p>\n              <p><strong>Land:</strong> Deutschland</p>\n            </div>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">Kontakt</h3>\n            <div className=\"space-y-1 text-slate-300\">\n              <p><strong>Telefon:</strong> +49 (0) 123 456789</p>\n              <p><strong>E-Mail:</strong> kontakt@mariposa-game.de</p>\n            </div>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">Verantwortlich für den Inhalt nach § 55 Abs. 2 RStV</h3>\n            <div className=\"space-y-1 text-slate-300\">\n              <p>Mariposa Game Studio</p>\n              <p>Beispielstraße 123</p>\n              <p>12345 Musterstadt</p>\n            </div>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">Haftung für Inhalte</h3>\n            <p className=\"text-slate-300 leading-relaxed\">\n              Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht unter der Verpflichtung, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen.\n            </p>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">Haftung für Links</h3>\n            <p className=\"text-slate-300 leading-relaxed\">\n              Unser Angebot enthält Links zu externen Websites Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb können wir für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich.\n            </p>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">Urheberrecht</h3>\n            <p className=\"text-slate-300 leading-relaxed\">\n              Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers.\n            </p>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">Spielinhalte</h3>\n            <p className=\"text-slate-300 leading-relaxed\">\n              Mariposa ist ein Browser-basiertes Spiel. Alle Spielinhalte, Grafiken, Namen und Spielmechaniken sind urheberrechtlich geschützt. Das Spiel wird \"wie besehen\" zur Verfügung gestellt. Wir übernehmen keine Gewähr für Verfügbarkeit oder Spielfortschritt.\n            </p>\n          </section>\n\n          <section>\n            <h3 className=\"font-semibold text-base mb-2\">Zahlungen</h3>\n            <p className=\"text-slate-300 leading-relaxed\">\n              Spenden über Stripe werden sicher verarbeitet. Alle Transaktionen sind freiwillig und dienen der Unterstützung des Spiels. Es besteht kein Anspruch auf Rückzahlung von Spenden.\n            </p>\n          </section>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":4299},"client/src/components/VasesView.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '@/lib/stores/useAuth';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogTitle, DialogDescription, DialogTrigger } from '@/components/ui/dialog';\nimport { Crown, Heart, Lock } from 'lucide-react';\n\ninterface Vase {\n  id: number;\n  name: string;\n  heartsRequired: number;\n  collected: boolean;\n  image?: string;\n}\n\ninterface VaseWithImage extends Vase {\n  gifPath: string;\n  jpgPath: string;\n}\n\n// Component for handling vase images with fallback logic\nfunction VaseImage({ vase, onClick }: { vase: VaseWithImage; onClick?: () => void }) {\n  const [imageState, setImageState] = useState<{\n    src: string;\n    type: 'gif' | 'jpg' | 'placeholder';\n    loading: boolean;\n  }>({ \n    src: vase.gifPath, // Try GIF first\n    type: 'gif',\n    loading: true \n  });\n\n  const handleImageError = () => {\n    if (imageState.type === 'gif') {\n      // GIF failed, try JPG\n      setImageState({ src: vase.jpgPath, type: 'jpg', loading: true });\n    } else if (imageState.type === 'jpg') {\n      // JPG failed, use placeholder\n      setImageState({ src: '', type: 'placeholder', loading: false });\n    }\n  };\n\n  const handleImageLoad = () => {\n    setImageState(prev => ({ ...prev, loading: false }));\n  };\n\n  if (imageState.type === 'placeholder') {\n    return (\n      <div className=\"text-center\">\n        <div className=\"text-4xl mb-1\">🏺</div>\n        <div className=\"text-xs font-semibold text-orange-300\">\n          Verfügbar\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full h-full relative cursor-pointer\" onClick={onClick}>\n      <img \n        src={imageState.src}\n        alt={vase.name}\n        className=\"w-full h-full object-contain rounded-md\"\n        onError={handleImageError}\n        onLoad={handleImageLoad}\n      />\n      {/* Format badge for identification */}\n      {!imageState.loading && (\n        <div className=\"absolute top-1 left-1\">\n          <Badge \n            variant=\"secondary\" \n            className={`\n              text-xs px-1 py-0 \n              ${imageState.type === 'gif' ? 'bg-purple-600 text-purple-100 animate-pulse' : 'bg-blue-600 text-blue-100'}\n              opacity-70 hover:opacity-100 transition-opacity\n            `}\n          >\n            {imageState.type.toUpperCase()}\n          </Badge>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport const VasesView: React.FC = () => {\n  const { user } = useAuth();\n  const [userHearts, setUserHearts] = useState(0);\n  const [vases, setVases] = useState<VaseWithImage[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedVase, setSelectedVase] = useState<VaseWithImage | null>(null);\n  const [showVaseModal, setShowVaseModal] = useState(false);\n\n  useEffect(() => {\n    if (user?.id) {\n      fetchData();\n    }\n  }, [user?.id]);\n\n  const fetchData = async () => {\n    if (!user?.id) return;\n    \n    try {\n      // Get user hearts\n      const heartsResponse = await fetch(`/api/user/${user.id}/hearts`);\n      if (heartsResponse.ok) {\n        const { hearts } = await heartsResponse.json();\n        setUserHearts(hearts);\n      }\n      \n      // Initialize vases (24 total, 6 per shelf, 4 shelves)\n      // Exponentially weighted heart requirements: 1.000 to 100.000\n      const vaseList: VaseWithImage[] = [];\n      \n      for (let i = 1; i <= 24; i++) {\n        // Exponential scaling: starts at 1000, ends at 100000\n        const heartsRequired = Math.round(1000 + Math.pow((i - 1) / 23, 2.2) * 99000);\n        \n        vaseList.push({\n          id: i,\n          name: `Prächtige Vase ${i}`,\n          heartsRequired: heartsRequired,\n          collected: false, // TODO: Load from API later\n          image: `/Vasen/${i}.jpg`, // Default fallback\n          gifPath: `/Vasen/${i}.gif`,\n          jpgPath: `/Vasen/${i}.jpg`\n        });\n      }\n      \n      setVases(vaseList);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching vases data:', error);\n      setLoading(false);\n    }\n  };\n\n  const handleVaseClick = (vase: VaseWithImage) => {\n    const canCollect = userHearts >= vase.heartsRequired && !vase.collected;\n    \n    if (canCollect) {\n      console.log(`🏺 Collecting vase ${vase.name} for ${vase.heartsRequired} hearts`);\n      // TODO: Implement vase collection API call\n    } else if (vase.collected) {\n      // If vase is collected, open modal for large view\n      setSelectedVase(vase);\n      setShowVaseModal(true);\n    } else {\n      console.log(`🏺 Need ${vase.heartsRequired - userHearts} more hearts for ${vase.name}`);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-slate-950 via-slate-900 to-slate-950 p-4\">\n        <div className=\"container mx-auto py-8\">\n          <div className=\"text-center\">\n            <div className=\"text-4xl mb-4\">🏺</div>\n            <div className=\"text-slate-300\">Lade Vasen-Sammlung...</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-950 via-slate-900 to-slate-950 p-4\">\n      <div className=\"container mx-auto py-8\">\n        {/* Header with animated title */}\n        <div className=\"text-center mb-8\">\n          <div className=\"text-6xl mb-6 flex justify-center items-center space-x-2 leading-tight py-4\">\n            <span className=\"animate-pulse\">👑</span>\n            <span className=\"bg-gradient-to-r from-orange-400 via-yellow-500 to-orange-600 bg-clip-text text-transparent font-bold\">\n              Vasen-Sammlung\n            </span>\n            <span className=\"animate-pulse\">👑</span>\n          </div>\n          <p className=\"text-slate-400 text-lg max-w-2xl mx-auto\">\n            Sammle exquisite Vasen mit deinen Herzen! Jede Vase ist einzigartig und wartet darauf, in deine Sammlung aufgenommen zu werden.\n          </p>\n        </div>\n\n        {/* Gallery - 4 Shelves with 6 Vases each */}\n        <div className=\"space-y-12 mb-12\">\n          {[0, 1, 2, 3].map((shelfIndex) => (\n            <div key={shelfIndex} className=\"relative\">\n              {/* Shelf Background */}\n              <div className=\"absolute inset-0 -top-4 -bottom-8 bg-gradient-to-b from-slate-800/40 to-slate-900/60 rounded-xl backdrop-blur-sm border border-orange-500/10 shadow-2xl\" />\n              \n              {/* Shelf Label */}\n              <div className=\"relative text-center mb-6 z-10\">\n                <Badge \n                  variant=\"outline\" \n                  className=\"bg-slate-800/60 text-orange-300 border-orange-500/30 px-4 py-2 text-lg font-semibold shadow-lg\"\n                >\n                  Regal {shelfIndex + 1}\n                </Badge>\n              </div>\n\n              {/* Vases Grid */}\n              <div className=\"relative grid grid-cols-6 gap-4 p-6 z-10\">\n                {vases\n                  .slice(shelfIndex * 6, (shelfIndex + 1) * 6)\n                  .map((vase) => {\n                    const canCollect = userHearts >= vase.heartsRequired && !vase.collected;\n                    const isLocked = userHearts < vase.heartsRequired && !vase.collected;\n\n                    return (\n                      <div\n                        key={vase.id}\n                        className={`\n                          relative group cursor-pointer transition-all duration-300\n                          ${canCollect ? 'hover:scale-105' : ''}\n                          ${vase.collected ? 'opacity-100' : isLocked ? 'opacity-40' : 'opacity-70 hover:opacity-100'}\n                        `}\n                        onClick={() => handleVaseClick(vase)}\n                        style={{\n                          animationDelay: `${(vase.id * 0.3)}s`, // Random staggered delays\n                        }}\n                      >\n                        {/* Vase Container */}\n                        <div className={`\n                          aspect-[2/3] rounded-lg border-2 relative overflow-hidden transition-all duration-300\n                          ${vase.collected ? 'border-green-400 bg-green-900/50 shadow-green-400/20 shadow-lg' : \n                            canCollect ? 'border-orange-400 bg-orange-900/30 shadow-orange-400/30 shadow-lg' :\n                            'border-slate-500 bg-slate-800/50'\n                          }\n                          ${canCollect && !vase.collected ? 'animate-gold-glow-random' : ''}\n                        `}\n                        style={canCollect && !vase.collected ? {\n                          animationDelay: `${(vase.id * 0.2) % 5}s`, // Consistent timing based on vase ID\n                          animationDuration: `${3 + ((vase.id * 0.3) % 2)}s`, // Consistent duration based on vase ID\n                        } : {}}>\n                          {/* Vase Image or Placeholder */}\n                          <div className=\"w-full h-full flex items-center justify-center p-2\">\n                            {vase.collected ? (\n                              <div className=\"text-center\">\n                                <Crown className=\"h-8 w-8 text-green-400 mx-auto mb-1\" />\n                                <div className=\"text-xs font-bold text-green-300\">\n                                  Gesammelt!\n                                </div>\n                              </div>\n                            ) : isLocked ? (\n                              <div className=\"text-center\">\n                                <Lock className=\"h-6 w-6 text-slate-500 mx-auto mb-1\" />\n                                <div className=\"text-xs text-slate-400\">\n                                  Gesperrt\n                                </div>\n                              </div>\n                            ) : (\n                              <VaseImage \n                                vase={vase} \n                                onClick={() => {\n                                  setSelectedVase(vase);\n                                  setShowVaseModal(true);\n                                }}\n                              />\n                            )}\n                          </div>\n\n                          {/* Vase Info */}\n                          <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-slate-900/90 to-transparent p-2 rounded-b-lg\">\n                            <div className=\"text-xs font-medium text-slate-400\">\n                              Vase {vase.id}\n                            </div>\n                            {canCollect && (\n                              <div className=\"absolute inset-0 bg-orange-400 opacity-0 group-hover:opacity-25 transition-opacity duration-300 rounded-lg\" />\n                            )}\n                          </div>\n\n                          {/* Hearts Badge */}\n                          <div className=\"absolute top-2 right-2\">\n                            <Badge className={`\n                              text-xs px-1 py-0 \n                              ${canCollect ? 'bg-green-600 text-green-100 border border-green-400/50' : 'bg-slate-600 text-slate-200 border border-slate-400/50'}\n                            `}>\n                              <Heart className=\"h-3 w-3 mr-1\" />\n                              {vase.heartsRequired.toLocaleString()}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div>\n\n              {/* Shelf Support Beams */}\n              <div className=\"absolute -bottom-2 left-4 right-4 h-2 bg-gradient-to-r from-slate-600 to-slate-500 rounded-full shadow-lg border-t border-slate-400/20\" />\n            </div>\n          ))}\n        </div>\n\n        {/* Statistics Card */}\n        <div className=\"text-center\">\n          <Card className=\"inline-block bg-slate-800/60 backdrop-blur-sm border border-orange-500/20 p-4 shadow-lg\">\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"text-center\">\n                <div className=\"text-lg font-bold text-orange-300\">\n                  {vases.filter(v => v.collected).length} / {vases.length}\n                </div>\n                <div className=\"text-xs text-slate-400\">Gesammelt</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-lg font-bold text-green-300\">\n                  {vases.filter(v => userHearts >= v.heartsRequired && !v.collected).length}\n                </div>\n                <div className=\"text-xs text-slate-400\">Verfügbar</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-lg font-bold text-slate-400\">\n                  {vases.filter(v => userHearts < v.heartsRequired).length}\n                </div>\n                <div className=\"text-xs text-slate-400\">Gesperrt</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-lg font-bold text-orange-300\">\n                  <Heart className=\"h-4 w-4 inline mr-1\" />\n                  {userHearts.toLocaleString()}\n                </div>\n                <div className=\"text-xs text-slate-400\">Deine Herzen</div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      {/* Vase Detail Modal */}\n      {selectedVase && (\n        <Dialog open={showVaseModal} onOpenChange={setShowVaseModal}>\n          <DialogContent className=\"max-w-2xl bg-slate-900 border-orange-500/30 max-h-[95vh] overflow-y-auto\">\n            <DialogTitle className=\"text-xl font-bold text-orange-300 text-center\">\n              {selectedVase.name}\n            </DialogTitle>\n            <DialogDescription className=\"text-slate-400 text-center\">\n              Betrachte diese wunderschöne Vase aus deiner Sammlung\n            </DialogDescription>\n            <div className=\"text-center space-y-4\">\n              \n              {/* Large Vase Image - 250x750 pixels */}\n              <div className=\"flex justify-center\">\n                <div className=\"w-[500px] h-[750px] relative border-2 border-orange-400/50 rounded-lg overflow-hidden bg-gradient-to-b from-slate-800 to-slate-900\">\n                  <img \n                    src={selectedVase.image}\n                    alt={selectedVase.name}\n                    className=\"max-w-full max-h-full object-contain rounded-lg\"\n                    onError={(e) => {\n                      const target = e.currentTarget as HTMLImageElement;\n                      target.style.display = 'none';\n                      const nextElement = target.nextElementSibling as HTMLElement;\n                      if (nextElement) nextElement.style.display = 'block';\n                    }}\n                  />\n                  <div className=\"text-center text-6xl hidden\">🏺</div>\n                </div>\n              </div>\n\n              {/* Vase Details */}\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-center gap-2 text-orange-300\">\n                  <Heart className=\"h-5 w-5\" />\n                  <span>{selectedVase.heartsRequired.toLocaleString()} Herzen erforderlich</span>\n                </div>\n                \n                <div className=\"flex items-center justify-center gap-2\">\n                  <Crown className=\"h-5 w-5 text-green-400\" />\n                  <span className=\"text-green-300 font-semibold\">Gesammelt</span>\n                </div>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n};\n\nexport default VasesView;","size_bytes":15694},"client/src/components/BouquetRecipeDialog.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RarityImage } from './RarityImage';\nimport { FlowerHoverPreview } from './FlowerHoverPreview';\nimport { getRarityColor, getRarityDisplayName } from '@shared/rarity';\nimport type { BouquetRecipe, UserFlower } from '@shared/schema';\nimport type { RarityTier } from '@shared/rarity';\nimport { CheckCircle, XCircle, Package, Heart, X, Star, Palette } from 'lucide-react';\n\ninterface Flower {\n  id: number;\n  name: string;\n  rarity: string;\n  imageUrl: string;\n}\n\ninterface BouquetRecipeDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  bouquetId: number;\n  bouquetName?: string;\n  bouquetRarity?: RarityTier;\n  recipe?: BouquetRecipe;\n  onRecreate?: (flowerId1: number, flowerId2: number, flowerId3: number) => void;\n  userFlowers?: UserFlower[];\n}\n\nexport const BouquetRecipeDialog: React.FC<BouquetRecipeDialogProps> = ({\n  isOpen,\n  onClose,\n  bouquetId,\n  bouquetName,\n  bouquetRarity = \"common\",\n  recipe,\n  onRecreate,\n  userFlowers = []\n}) => {\n  const [ingredients, setIngredients] = useState<Flower[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  // Check if user has enough flowers to recreate bouquet\n  const canRecreate = () => {\n    if (!recipe || !userFlowers.length) return false;\n    \n    const requiredFlowerIds = [recipe.flowerId1, recipe.flowerId2, recipe.flowerId3];\n    \n    // Count required flowers\n    const flowerCounts: Record<number, number> = {};\n    requiredFlowerIds.forEach(id => {\n      flowerCounts[id] = (flowerCounts[id] || 0) + 1;\n    });\n    \n    // Check if user has enough of each required flower\n    for (const [flowerId, requiredCount] of Object.entries(flowerCounts)) {\n      const userFlower = userFlowers.find(f => f.flowerId === parseInt(flowerId));\n      const availableCount = userFlower?.quantity || 0;\n      \n      if (availableCount < requiredCount) {\n        return false;\n      }\n    }\n    \n    return true;\n  };\n\n  useEffect(() => {\n    if (recipe && isOpen) {\n      fetchIngredients();\n    }\n  }, [recipe, isOpen]);\n\n  const fetchIngredients = async () => {\n    if (!recipe) return;\n    \n    setLoading(true);\n    try {\n      const flowerIds = [recipe.flowerId1, recipe.flowerId2, recipe.flowerId3];\n      const ingredientsData = [];\n      \n      for (const flowerId of flowerIds) {\n        const response = await fetch(`/api/flower/${flowerId}`);\n        if (response.ok) {\n          const flower = await response.json();\n          ingredientsData.push(flower);\n        }\n      }\n      \n      setIngredients(ingredientsData);\n    } catch (error) {\n      console.error('Failed to fetch ingredients:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRecreate = () => {\n    if (recipe && onRecreate && canRecreate()) {\n      onRecreate(recipe.flowerId1, recipe.flowerId2, recipe.flowerId3);\n      onClose();\n    }\n  };\n\n  if (!recipe) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl bg-gradient-to-br from-slate-900 to-slate-950 border border-purple-500/30 text-white\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Palette className=\"h-6 w-6 text-purple-400\" />\n              <div>\n                <h3 className=\"text-xl font-bold text-purple-300\">Bouquet Rezept</h3>\n                <p className=\"text-slate-400 text-sm\">{bouquetName || `Bouquet #${bouquetId}`}</p>\n              </div>\n            </div>\n            <Badge \n              className={`px-3 py-1 ${getRarityColor(bouquetRarity)}`}\n            >\n              <Star className=\"h-3 w-3 mr-1\" />\n              {getRarityDisplayName(bouquetRarity)}\n            </Badge>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Bouquet Display */}\n          <div className=\"text-center\">\n            <RarityImage \n              src=\"/Blumen/Bouquet.jpg\"\n              alt=\"Bouquet\"\n              rarity={bouquetRarity}\n              size=\"large\"\n              className=\"w-32 h-32 mx-auto mb-4\"\n            />\n          </div>\n\n          {/* Recipe Ingredients */}\n          <div className=\"bg-slate-800/50 rounded-lg p-6 border border-purple-400/20\">\n            <h4 className=\"text-white font-semibold mb-4 flex items-center\">\n              <Package className=\"h-5 w-5 mr-2 text-purple-400\" />\n              Rezept Zutaten\n            </h4>\n            \n            {loading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin h-8 w-8 border-4 border-purple-400 border-t-transparent rounded-full mx-auto mb-4\"></div>\n                <p className=\"text-slate-400\">Lade Zutaten...</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-3 gap-4\">\n                {ingredients.map((flower, index) => {\n                  const userFlower = userFlowers.find(f => f.flowerId === flower.id);\n                  const hasEnough = userFlower && userFlower.quantity > 0;\n                  \n                  return (\n                    <div key={index} className=\"text-center\">\n                      <div className=\"relative\">\n                        <RarityImage \n                          src={flower.imageUrl}\n                          alt={flower.name}\n                          rarity={flower.rarity as RarityTier}\n                          size=\"medium\"\n                          className=\"w-20 h-20 mx-auto mb-2\"\n                        />\n                        \n                        {/* Availability indicator */}\n                        <div className=\"absolute -top-2 -right-2\">\n                          {hasEnough ? (\n                            <div className=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center\">\n                              <CheckCircle className=\"h-4 w-4 text-white\" />\n                            </div>\n                          ) : (\n                            <div className=\"w-6 h-6 bg-red-500 rounded-full flex items-center justify-center\">\n                              <XCircle className=\"h-4 w-4 text-white\" />\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <h5 className=\"text-white text-sm font-medium mb-1 truncate\">\n                        {flower.name}\n                      </h5>\n                      <Badge \n                        variant=\"secondary\"\n                        className={`text-xs px-2 py-1 ${getRarityColor(flower.rarity as RarityTier)}`}\n                      >\n                        {getRarityDisplayName(flower.rarity as RarityTier)}\n                      </Badge>\n                      \n                      {/* Quantity info */}\n                      <div className=\"mt-2\">\n                        {hasEnough ? (\n                          <div className=\"text-green-400 text-xs flex items-center justify-center\">\n                            <CheckCircle className=\"h-3 w-3 mr-1\" />\n                            {userFlower?.quantity} verfügbar\n                          </div>\n                        ) : (\n                          <div className=\"text-red-400 text-xs flex items-center justify-center\">\n                            <XCircle className=\"h-3 w-3 mr-1\" />\n                            Nicht verfügbar\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between space-x-4\">\n            <Button\n              onClick={onClose}\n              variant=\"outline\"\n              className=\"flex-1 border-slate-600 text-slate-300 hover:bg-slate-800 hover:text-white\"\n            >\n              <X className=\"h-4 w-4 mr-2\" />\n              Verlassen\n            </Button>\n            \n            <Button\n              onClick={handleRecreate}\n              disabled={!canRecreate()}\n              className={`flex-1 font-semibold ${\n                canRecreate() \n                  ? 'bg-gradient-to-r from-green-600 via-emerald-600 to-teal-600 hover:from-green-700 hover:via-emerald-700 hover:to-teal-700 text-white border-2 border-green-400/50 hover:border-green-300' \n                  : 'bg-slate-700 text-slate-400 cursor-not-allowed border border-slate-600'\n              }`}\n            >\n              <Heart className=\"h-4 w-4 mr-2\" />\n              {canRecreate() ? 'Nachstecken' : 'Zutaten fehlen'}\n            </Button>\n          </div>\n\n          {/* Info Section */}\n          <div className=\"bg-gradient-to-r from-purple-800/20 to-pink-800/20 rounded-lg p-4 border border-purple-400/30\">\n            <div className=\"flex items-center mb-2\">\n              <Star className=\"h-4 w-4 text-purple-400 mr-2\" />\n              <span className=\"text-purple-300 font-semibold text-sm\">Informationen</span>\n            </div>\n            <div className=\"text-slate-300 text-sm space-y-1\">\n              <div>• Nachstecken erstellt ein neues Bouquet mit demselben Rezept</div>\n              <div>• Kostenlos! Verbraucht nur die benötigten Blumen</div>\n              <div>• Originalname wird beibehalten</div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":9679},"client/src/components/EncyclopediaView.tsx":{"content":"import React, { useState, useEffect, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RarityImage } from \"./RarityImage\";\nimport { FlowerHoverPreview } from \"./FlowerHoverPreview\";\nimport { ButterflyHoverPreview } from \"./ButterflyHoverPreview\";\nimport { CaterpillarHoverPreview } from \"./CaterpillarHoverPreview\";\nimport { FishHoverPreview } from \"./FishHoverPreview\";\nimport { useAuth } from \"@/lib/stores/useAuth\";\nimport { getRarityColor, getRarityDisplayName, type RarityTier, generateLatinFlowerName, generateGermanButterflyName, generateLatinFishName, generateLatinCaterpillarName } from \"@shared/rarity\";\nimport { BookOpen, Flower, Bug, Sparkles, Fish, Lock, Star, Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\n\n// Item distribution based on actual system assets (from server logs)\nconst ITEM_RANGES = {\n  flowers: { start: 1, end: 241 },     // 🌸 Found 241 flower images: 0-240\n  caterpillars: { start: 1, end: 124 }, // 🐛 Found 124 caterpillar images: 0-123  \n  butterflies: { start: 1, end: 960 },  // 🦋 Found 961 butterfly images: 0-960\n  fish: { start: 1, end: 278 }          // 🐟 Found 278 fish images: 0-277\n};\n\n// Interface for rarity mappings from server\ninterface RarityMappings {\n  flowers: Record<number, string>;\n  butterflies: Record<number, string>;\n  caterpillars: Record<number, string>;\n  fish: Record<number, string>;\n}\n\n// Generate diverse names using proper generators for each type (consistent with server-side)\nconst generateCreatureName = (id: number, type: string): string => {\n  switch (type) {\n    case 'flowers':\n      return generateLatinFlowerName(id); // 20×20 = 400 combinations\n    case 'butterflies':\n      return generateGermanButterflyName(id); // 45×45 = 2025+ combinations (with 10% special suffix) - CONSISTENT WITH SERVER\n    case 'fish':\n      return generateLatinFishName(id); // 27×25 = 675 combinations\n    case 'caterpillars':\n      return generateLatinCaterpillarName(id); // 25×30 = 750 combinations\n    default:\n      return `Unknown ${type} #${id}`;\n  }\n};\n\ninterface EncyclopediaItem {\n  id: number;\n  name: string;\n  rarity: RarityTier;\n  imageUrl: string;\n  type: 'flowers' | 'caterpillars' | 'butterflies' | 'fish';\n  collected: boolean;\n  quantity?: number;\n}\n\nexport const EncyclopediaView: React.FC = () => {\n  const { user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"flowers\");\n  const [rarityFilter, setRarityFilter] = useState<RarityTier | null>(null);\n  const [rarityMappings, setRarityMappings] = useState<RarityMappings | null>(null);\n  // Collection stats for lifetime acquisition tracking\n  const [collectionStats, setCollectionStats] = useState<{\n    [key: string]: { // itemType\n      [key: number]: { // itemId\n        totalObtained: number;\n        firstObtainedAt: string;\n        lastObtainedAt: string;\n      }\n    }\n  }>({});\n\n  // Fetch user's lifetime collection statistics\n  useEffect(() => {\n    const fetchCollectionStats = async () => {\n      if (!user) return;\n      \n      try {\n        const response = await fetch(`/api/user/${user.id}/collection-stats`);\n        if (response.ok) {\n          const data = await response.json();\n          \n          // Transform collection stats into a lookup structure\n          const statsLookup: typeof collectionStats = {};\n          \n          data.collectionStats.forEach((stat: any) => {\n            if (!statsLookup[stat.itemType]) {\n              statsLookup[stat.itemType] = {};\n            }\n            statsLookup[stat.itemType][stat.itemId] = {\n              totalObtained: stat.totalObtained,\n              firstObtainedAt: stat.firstObtainedAt,\n              lastObtainedAt: stat.lastObtainedAt\n            };\n          });\n          \n          setCollectionStats(statsLookup);\n        }\n      } catch (error) {\n        console.error('Failed to fetch collection stats:', error);\n      }\n    };\n\n    fetchCollectionStats();\n  }, [user]);\n\n  // Fetch real rarity mappings from server\n  useEffect(() => {\n    const fetchRarities = async () => {\n      try {\n        const response = await fetch('/api/encyclopedia/rarities');\n        if (response.ok) {\n          const rarities = await response.json();\n          setRarityMappings(rarities);\n        }\n      } catch (error) {\n        console.error('Failed to fetch rarities:', error);\n      }\n    };\n    \n    fetchRarities();\n  }, []);\n\n  // Generate all possible items for encyclopedia\n  const allItems = useMemo(() => {\n    if (!rarityMappings) return []; // Wait for rarities to load\n    \n    const items: EncyclopediaItem[] = [];\n    \n    // Generate items for each type\n    Object.entries(ITEM_RANGES).forEach(([type, range]) => {\n      for (let id = range.start; id <= range.end; id++) {\n        const rarity = (rarityMappings[type as keyof RarityMappings][id] || 'common') as RarityTier;\n        \n        // Check lifetime acquisition from collection stats\n        const collectionStat = collectionStats[type]?.[id];\n        const totalObtained = collectionStat?.totalObtained || 0;\n        \n        const folderMap = {\n          flowers: 'Blumen',\n          caterpillars: 'Raupen', \n          butterflies: 'Schmetterlinge',\n          fish: 'Fische'\n        };\n        \n        // All asset types use simple numeric filenames without leading zeros\n        let fileName: string;\n        if (type === 'flowers' && id < 100) {\n          fileName = `${id}.jpg`;\n        } else {\n          // All types (caterpillars, butterflies, fish, flowers 100+) use no padding\n          fileName = `${id}.jpg`;\n        }\n        \n        items.push({\n          id,\n          name: generateCreatureName(id, type),\n          rarity,\n          imageUrl: `/${folderMap[type as keyof typeof folderMap]}/${fileName}`,\n          type: type as any,\n          collected: totalObtained > 0, // Based on lifetime acquisition, not current inventory\n          quantity: totalObtained // Show lifetime total, not current quantity\n        });\n      }\n    });\n    \n    return items;\n  }, [collectionStats, rarityMappings]);\n\n  // Filter items by search term, active tab, and rarity\n  const filteredItems = useMemo(() => {\n    let filtered = allItems.filter(item => item.type === activeTab);\n    \n    if (searchTerm) {\n      filtered = filtered.filter(item => \n        item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        getRarityDisplayName(item.rarity).toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n    \n    if (rarityFilter) {\n      filtered = filtered.filter(item => item.rarity === rarityFilter);\n    }\n    \n    // Group by rarity, then sort by ID within each group\n    const groupedByRarity: { [key: string]: EncyclopediaItem[] } = {};\n    filtered.forEach(item => {\n      if (!groupedByRarity[item.rarity]) {\n        groupedByRarity[item.rarity] = [];\n      }\n      groupedByRarity[item.rarity].push(item);\n    });\n    \n    // Sort within each rarity group\n    Object.values(groupedByRarity).forEach(group => {\n      group.sort((a, b) => a.id - b.id);\n    });\n    \n    // Combine back in rarity order\n    const rarityOrder: RarityTier[] = ['mythical', 'legendary', 'epic', 'super-rare', 'rare', 'uncommon', 'common'];\n    return rarityOrder.flatMap(rarity => groupedByRarity[rarity] || []);\n  }, [allItems, searchTerm, activeTab, rarityFilter]);\n\n  // Statistics\n  const stats = useMemo(() => {\n    const typeItems = allItems.filter(item => item.type === activeTab);\n    const collected = typeItems.filter(item => item.collected);\n    \n    return {\n      total: typeItems.length,\n      collected: collected.length,\n      percentage: Math.round((collected.length / typeItems.length) * 100)\n    };\n  }, [allItems, activeTab]);\n\n  const rarityOrder: RarityTier[] = ['mythical', 'legendary', 'epic', 'super-rare', 'rare', 'uncommon', 'common'];\n\n  const tabConfig = [\n    { id: 'flowers', label: 'Blumen', icon: Flower, color: 'text-green-400' },\n    { id: 'caterpillars', label: 'Raupen', icon: Bug, color: 'text-yellow-400' },\n    { id: 'butterflies', label: 'Schmetterlinge', icon: Sparkles, color: 'text-purple-400' },\n    { id: 'fish', label: 'Fische', icon: Fish, color: 'text-blue-400' }\n  ];\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Card className=\"bg-slate-800 border-slate-700 text-white\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-slate-400\">Bitte melde dich an, um die Enzyklopädie zu nutzen</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 space-y-4 bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 min-h-full\">\n      {/* Compact Header */}\n      <div className=\"bg-slate-800/60 p-3 rounded-lg border border-blue-500/30\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <BookOpen className=\"h-6 w-6 mr-2 text-blue-400\" />\n            <h1 className=\"text-xl font-bold text-blue-300\">Enzyklopädie</h1>\n            <span className=\"text-slate-400 text-sm ml-3\">Deine komplette Sammlung</span>\n          </div>\n          \n          {/* Search */}\n          <div className=\"relative max-w-sm\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400\" />\n            <Input\n              placeholder=\"Suchen...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 h-8 bg-slate-700 border-slate-600 text-white text-sm\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4 bg-slate-800 border border-slate-600\">\n          {tabConfig.map(tab => {\n            const Icon = tab.icon;\n            return (\n              <TabsTrigger \n                key={tab.id} \n                value={tab.id}\n                className=\"data-[state=active]:bg-slate-600 data-[state=active]:text-white text-slate-400\"\n              >\n                <Icon className={`h-4 w-4 mr-2 ${tab.color}`} />\n                <span className=\"hidden sm:inline\">{tab.label}</span>\n                <span className=\"sm:hidden\">{tab.label.slice(0, 4)}</span>\n              </TabsTrigger>\n            );\n          })}\n        </TabsList>\n\n        {tabConfig.map(tab => (\n          <TabsContent key={tab.id} value={tab.id} className=\"mt-4\">\n            {/* Stats */}\n            <div className=\"bg-slate-800/50 p-3 rounded-lg border border-slate-600 mb-4\">\n              <div className=\"flex flex-col space-y-3\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center space-x-4\">\n                    <span className=\"text-slate-400\">Gesammelt:</span>\n                    <Badge className=\"bg-green-600 text-white\">\n                      {stats.collected} / {stats.total} ({stats.percentage}%)\n                    </Badge>\n                  </div>\n                  <div className=\"text-slate-400\">\n                    {filteredItems.length} {searchTerm || rarityFilter ? 'gefilterte' : 'gesamt'} {tab.label.toLowerCase()}\n                  </div>\n                </div>\n                \n                {/* Rarity Filter Buttons */}\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-slate-400 text-xs\">Filter nach Rarität:</span>\n                  <button\n                    onClick={() => setRarityFilter(null)}\n                    className={`px-2 py-1 text-xs rounded transition-all ${\n                      rarityFilter === null \n                        ? 'bg-slate-600 text-white' \n                        : 'bg-slate-700 text-slate-400 hover:bg-slate-600 hover:text-white'\n                    }`}\n                  >\n                    Alle\n                  </button>\n                  {rarityOrder.map(rarity => (\n                    <button\n                      key={rarity}\n                      onClick={() => setRarityFilter(rarity)}\n                      className={`px-2 py-1 text-xs rounded transition-all ${\n                        rarityFilter === rarity \n                          ? getRarityColor(rarity).replace('text-', 'bg-') + ' text-white'\n                          : 'bg-slate-700 text-slate-400 hover:bg-slate-600 hover:text-white'\n                      }`}\n                    >\n                      {getRarityDisplayName(rarity)}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Items Grid */}\n            <div className=\"grid grid-cols-5 gap-3 max-h-[700px] overflow-y-auto pr-2 scrollbar-thin scrollbar-track-slate-800 scrollbar-thumb-slate-600\">\n              {filteredItems.map(item => {\n                const cardContent = (\n                  <Card \n                    key={`${item.type}-${item.id}`}\n                    className={`bg-gradient-to-br from-slate-900 to-slate-950 border transition-all duration-300 ${\n                      item.collected \n                        ? 'border-slate-600 hover:border-slate-500' \n                        : 'border-slate-800 opacity-40 hover:opacity-60'\n                    }`}\n                  >\n                    <CardContent className=\"p-3\">\n                      {/* Item Image */}\n                      <div className=\"relative mb-3\">\n                        <RarityImage\n                          src={item.imageUrl}\n                          alt={item.name}\n                          rarity={item.rarity}\n                          size=\"small\"\n                          className={`w-full h-24 mx-auto ${!item.collected ? 'grayscale brightness-50' : ''}`}\n                        />\n                        \n                        {/* Collection Status Badge */}\n                        <div className=\"absolute top-1 right-1\">\n                          {item.collected ? (\n                            <Badge className=\"bg-green-500 text-white text-xs px-1\">\n                              {item.quantity}x\n                            </Badge>\n                          ) : (\n                            <div className=\"w-6 h-6 bg-slate-700 rounded-full flex items-center justify-center\">\n                              <Lock className=\"h-3 w-3 text-slate-400\" />\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Item Info */}\n                      <div className=\"text-center space-y-2\">\n                        <h4 className={`font-medium text-xs truncate ${\n                          item.collected ? 'text-white' : 'text-slate-500'\n                        }`}>\n                          {item.name}\n                        </h4>\n                        \n                        <Badge \n                          variant=\"secondary\"\n                          className={`text-xs px-2 py-1 ${\n                            item.collected \n                              ? getRarityColor(item.rarity)\n                              : 'bg-slate-800 text-slate-500'\n                          }`}\n                        >\n                          <Star className=\"h-2 w-2 mr-1\" />\n                          {getRarityDisplayName(item.rarity)}\n                        </Badge>\n\n                        <div className={`text-xs ${item.collected ? 'text-slate-400' : 'text-slate-600'}`}>\n                          #{item.id}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n\n                // Wrap collected items with appropriate hover preview\n                if (item.collected) {\n                  if (item.type === 'flowers') {\n                    return (\n                      <FlowerHoverPreview\n                        key={`${item.type}-${item.id}`}\n                        flowerImageUrl={item.imageUrl}\n                        flowerName={item.name}\n                        rarity={item.rarity}\n                      >\n                        {cardContent}\n                      </FlowerHoverPreview>\n                    );\n                  } else if (item.type === 'butterflies') {\n                    return (\n                      <ButterflyHoverPreview\n                        key={`${item.type}-${item.id}`}\n                        butterflyImageUrl={item.imageUrl}\n                        butterflyName={item.name}\n                        rarity={item.rarity}\n                      >\n                        {cardContent}\n                      </ButterflyHoverPreview>\n                    );\n                  } else if (item.type === 'caterpillars') {\n                    return (\n                      <CaterpillarHoverPreview\n                        key={`${item.type}-${item.id}`}\n                        caterpillarImageUrl={item.imageUrl}\n                        caterpillarName={item.name}\n                        rarity={item.rarity}\n                      >\n                        {cardContent}\n                      </CaterpillarHoverPreview>\n                    );\n                  } else if (item.type === 'fish') {\n                    return (\n                      <FishHoverPreview\n                        key={`${item.type}-${item.id}`}\n                        fishImageUrl={item.imageUrl}\n                        fishName={item.name}\n                        rarity={item.rarity}\n                      >\n                        {cardContent}\n                      </FishHoverPreview>\n                    );\n                  }\n                }\n\n                // Return card without hover preview for uncollected items\n                return cardContent;\n              })}\n            </div>\n\n            {filteredItems.length === 0 && (\n              <div className=\"text-center py-12\">\n                <BookOpen className=\"h-16 w-16 text-slate-600 mx-auto mb-4\" />\n                <p className=\"text-slate-400 text-lg\">\n                  {searchTerm ? 'Keine Ergebnisse gefunden' : `Keine ${tab.label.toLowerCase()} verfügbar`}\n                </p>\n                {searchTerm && (\n                  <p className=\"text-slate-500 text-sm mt-2\">\n                    Versuche einen anderen Suchbegriff\n                  </p>\n                )}\n              </div>\n            )}\n          </TabsContent>\n        ))}\n      </Tabs>\n    </div>\n  );\n};","size_bytes":18772},"client/src/hooks/useActivityDetection.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { useActivity } from '@/lib/stores/useActivity';\nimport { useAuth } from '@/lib/stores/useAuth';\n\ninterface UseActivityDetectionOptions {\n  idleTimeoutMs?: number;\n  heartbeatIntervalMs?: number;\n}\n\nexport const useActivityDetection = ({\n  idleTimeoutMs = 30000, // 30 seconds\n  heartbeatIntervalMs = 30000, // 30 seconds\n}: UseActivityDetectionOptions = {}) => {\n  const { mode, setMode, recordActivity } = useActivity();\n  const { user } = useAuth();\n  const idleTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const heartbeatIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const lastHeartbeatRef = useRef<number>(0);\n\n  // Send heartbeat to server\n  const sendHeartbeat = async () => {\n    if (!user?.id) return;\n    \n    try {\n      await fetch(`/api/user/${user.id}/heartbeat`, {\n        method: 'POST',\n        credentials: 'include',\n      });\n      lastHeartbeatRef.current = Date.now();\n    } catch (error) {\n      console.warn('❤️ Heartbeat failed:', error);\n    }\n  };\n\n  // Clear idle timeout\n  const clearIdleTimeout = () => {\n    if (idleTimeoutRef.current) {\n      clearTimeout(idleTimeoutRef.current);\n      idleTimeoutRef.current = null;\n    }\n  };\n\n  // Set idle timeout\n  const setIdleTimeout = () => {\n    clearIdleTimeout();\n    idleTimeoutRef.current = setTimeout(() => {\n      setMode('idle');\n    }, idleTimeoutMs);\n  };\n\n  // Handle user activity\n  const handleActivity = () => {\n    recordActivity();\n    setIdleTimeout();\n    \n    // Send heartbeat immediately if we haven't sent one recently and user is active\n    const timeSinceLastHeartbeat = Date.now() - lastHeartbeatRef.current;\n    if (timeSinceLastHeartbeat > heartbeatIntervalMs && user?.id) {\n      sendHeartbeat();\n    }\n  };\n\n  // Handle visibility/focus changes\n  const handleVisibilityChange = () => {\n    if (document.hidden) {\n      setMode('background');\n      clearIdleTimeout();\n    } else {\n      handleActivity();\n    }\n  };\n\n  const handleFocus = () => {\n    handleActivity();\n  };\n\n  const handleBlur = () => {\n    setMode('background');\n    clearIdleTimeout();\n  };\n\n  useEffect(() => {\n    // Activity event listeners\n    const activityEvents = ['mousemove', 'keydown', 'click', 'touchstart', 'scroll'];\n    \n    activityEvents.forEach(event => {\n      document.addEventListener(event, handleActivity, { passive: true });\n    });\n\n    // Visibility and focus listeners\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    window.addEventListener('focus', handleFocus);\n    window.addEventListener('blur', handleBlur);\n\n    // Initial setup\n    handleActivity();\n\n    // Start heartbeat interval only for active mode\n    const setupHeartbeat = () => {\n      if (heartbeatIntervalRef.current) {\n        clearInterval(heartbeatIntervalRef.current);\n      }\n      \n      if (mode === 'active' && user?.id) {\n        heartbeatIntervalRef.current = setInterval(sendHeartbeat, heartbeatIntervalMs);\n        // Send initial heartbeat\n        sendHeartbeat();\n      }\n    };\n\n    setupHeartbeat();\n\n    // Subscribe to mode changes to adjust heartbeat\n    const unsubscribe = useActivity.subscribe(\n      (state) => state.mode,\n      (mode) => {\n        if (mode === 'active' && user?.id) {\n          setupHeartbeat();\n        } else if (heartbeatIntervalRef.current) {\n          clearInterval(heartbeatIntervalRef.current);\n          heartbeatIntervalRef.current = null;\n        }\n      }\n    );\n\n    // Cleanup\n    return () => {\n      activityEvents.forEach(event => {\n        document.removeEventListener(event, handleActivity);\n      });\n      \n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('focus', handleFocus);\n      window.removeEventListener('blur', handleBlur);\n      \n      clearIdleTimeout();\n      \n      if (heartbeatIntervalRef.current) {\n        clearInterval(heartbeatIntervalRef.current);\n      }\n      \n      unsubscribe();\n    };\n  }, [user?.id, mode, idleTimeoutMs, heartbeatIntervalMs]);\n\n  return { mode };\n};","size_bytes":4083},"client/src/hooks/useSmartPolling.tsx":{"content":"import { useEffect, useRef, useCallback } from 'react';\nimport { useActivity } from '@/lib/stores/useActivity';\n\ninterface UseSmartPollingOptions {\n  fn: () => void | Promise<void>;\n  activeMs?: number;\n  idleMs?: number;\n  backgroundMs?: number | null; // null = paused\n  immediate?: boolean;\n  enabled?: boolean;\n}\n\nexport const useSmartPolling = ({\n  fn,\n  activeMs = 10000,   // 10 seconds when active\n  idleMs = 60000,     // 60 seconds when idle\n  backgroundMs = null, // paused when in background\n  immediate = true,\n  enabled = true,\n}: UseSmartPollingOptions) => {\n  const { mode } = useActivity();\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const modeRef = useRef(mode);\n  const fnRef = useRef(fn);\n  \n  // Update refs when values change\n  modeRef.current = mode;\n  fnRef.current = fn;\n\n  const clearCurrentInterval = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, []);\n\n  const setupInterval = useCallback(() => {\n    clearCurrentInterval();\n    \n    if (!enabled) return;\n\n    let intervalMs: number | null = null;\n    \n    switch (modeRef.current) {\n      case 'active':\n        intervalMs = activeMs;\n        break;\n      case 'idle':\n        intervalMs = idleMs;\n        break;\n      case 'background':\n        intervalMs = backgroundMs;\n        break;\n    }\n\n    if (intervalMs === null) {\n      // Polling is paused for this mode\n      return;\n    }\n\n    intervalRef.current = setInterval(() => {\n      try {\n        fnRef.current();\n      } catch (error) {\n        console.error('Smart polling function error:', error);\n      }\n    }, intervalMs);\n  }, [activeMs, idleMs, backgroundMs, enabled, clearCurrentInterval]);\n\n  // Setup interval when mode changes\n  useEffect(() => {\n    setupInterval();\n    return clearCurrentInterval;\n  }, [mode, setupInterval, clearCurrentInterval]);\n\n  // Call immediately if requested (only on mount or enabled change)\n  useEffect(() => {\n    if (immediate && enabled) {\n      try {\n        fnRef.current();\n      } catch (error) {\n        console.error('Smart polling immediate call error:', error);\n      }\n    }\n  }, [immediate, enabled]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      clearCurrentInterval();\n    };\n  }, [clearCurrentInterval]);\n\n  return {\n    mode,\n    forceRefresh: fn,\n  };\n};","size_bytes":2386},"client/src/lib/stores/useActivity.tsx":{"content":"import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\n\nexport type ActivityMode = 'active' | 'idle' | 'background';\n\ninterface ActivityState {\n  mode: ActivityMode;\n  lastActivityAt: number;\n  activeUserCount?: number;\n  \n  // Actions\n  setMode: (mode: ActivityMode) => void;\n  recordActivity: () => void;\n  setActiveUserCount: (count: number) => void;\n}\n\nexport const useActivity = create<ActivityState>()(\n  subscribeWithSelector((set, get) => ({\n    mode: 'active',\n    lastActivityAt: Date.now(),\n    activeUserCount: undefined,\n    \n    setMode: (mode: ActivityMode) => {\n      set({ mode });\n    },\n    \n    recordActivity: () => {\n      set({ \n        mode: 'active',\n        lastActivityAt: Date.now() \n      });\n    },\n    \n    setActiveUserCount: (count: number) => {\n      set({ activeUserCount: count });\n    },\n  }))\n);","size_bytes":872},"scripts/ensure-collection-stats.ts":{"content":"#!/usr/bin/env tsx\nimport { sql } from 'drizzle-orm';\nimport { postgresStorage } from '../server/postgresStorage.js';\n\nasync function ensureCollectionStatsTable() {\n  try {\n    console.log('📊 Creating collection_stats table if not exists...');\n    \n    // Create the collection_stats table with exact schema from shared/schema.ts\n    await (postgresStorage as any).db.execute(sql`\n      CREATE TABLE IF NOT EXISTS collection_stats (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER NOT NULL REFERENCES users(id),\n        item_type VARCHAR(20) NOT NULL,\n        item_id INTEGER NOT NULL,\n        total_obtained INTEGER NOT NULL DEFAULT 1,\n        first_obtained_at TIMESTAMP NOT NULL DEFAULT NOW(),\n        last_obtained_at TIMESTAMP NOT NULL DEFAULT NOW(),\n        created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMP NOT NULL DEFAULT NOW(),\n        UNIQUE(user_id, item_type, item_id)\n      );\n    `);\n    \n    console.log('✅ collection_stats table ensured successfully');\n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Failed to create collection_stats table:', error);\n    process.exit(1);\n  }\n}\n\nensureCollectionStatsTable();","size_bytes":1178},"server/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport { Request, Response, NextFunction } from 'express';\n\n// JWT Secret key - In production, use environment variable\nconst JWT_SECRET = process.env.JWT_SECRET || 'mariposa-secret-key-2025';\nconst JWT_EXPIRES_IN = '7d';\n\nexport interface JWTPayload {\n  userId: number;\n  username: string;\n}\n\nexport interface AuthenticatedRequest extends Request {\n  user?: JWTPayload;\n}\n\n/**\n * Generate JWT token for user\n */\nexport function generateToken(user: { id: number; username: string }): string {\n  const payload: JWTPayload = {\n    userId: user.id,\n    username: user.username\n  };\n  \n  return jwt.sign(payload, JWT_SECRET, { \n    expiresIn: JWT_EXPIRES_IN,\n    issuer: 'mariposa-game'\n  });\n}\n\n/**\n * Verify JWT token and extract user data\n */\nexport function verifyToken(token: string): JWTPayload | null {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;\n    return decoded;\n  } catch (error) {\n    console.warn('JWT verification failed:', error instanceof Error ? error.message : 'Unknown error');\n    return null;\n  }\n}\n\n/**\n * Authentication middleware - validates JWT token from cookies\n */\nexport function requireAuth(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  try {\n    // Extract JWT token from cookies\n    const token = req.cookies?.authToken;\n    \n    if (!token) {\n      return res.status(401).json({ \n        message: 'Authentication required - no token provided',\n        code: 'NO_TOKEN'\n      });\n    }\n\n    // Verify token\n    const userData = verifyToken(token);\n    if (!userData) {\n      return res.status(401).json({ \n        message: 'Invalid or expired authentication token',\n        code: 'INVALID_TOKEN'\n      });\n    }\n\n    // Attach user data to request\n    req.user = userData;\n    next();\n  } catch (error) {\n    console.error('Authentication middleware error:', error);\n    return res.status(500).json({ \n      message: 'Authentication system error',\n      code: 'AUTH_ERROR'\n    });\n  }\n}\n\n/**\n * User authorization middleware - ensures user can only access their own resources\n * Must be used after requireAuth middleware\n */\nexport function requireUserAccess(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ \n        message: 'Authentication required',\n        code: 'NOT_AUTHENTICATED'\n      });\n    }\n\n    // Extract user ID from URL parameters or headers\n    let requestedUserId: number;\n    \n    // Check URL parameter first (e.g., /api/user/:id/credits or /api/user/:userId/pond-field)\n    if (req.params.id) {\n      requestedUserId = parseInt(req.params.id);\n    } else if (req.params.userId) {\n      requestedUserId = parseInt(req.params.userId);\n    } \n    // Fallback to x-user-id header for compatibility\n    else if (req.headers['x-user-id']) {\n      requestedUserId = parseInt(req.headers['x-user-id'] as string);\n    }\n    // For endpoints without explicit user ID, extract from request body\n    else if (req.body?.userId) {\n      requestedUserId = parseInt(req.body.userId);\n    }\n    else {\n      return res.status(400).json({ \n        message: 'User ID not found in request',\n        code: 'MISSING_USER_ID'\n      });\n    }\n\n    // Validate that authenticated user matches the requested user\n    if (req.user.userId !== requestedUserId) {\n      console.warn(`🚨 AUTHORIZATION VIOLATION: User ${req.user.userId} (${req.user.username}) attempted to access resources for user ${requestedUserId}`);\n      return res.status(403).json({ \n        message: 'Access denied - you can only access your own resources',\n        code: 'ACCESS_DENIED'\n      });\n    }\n\n    // Add the validated user ID to the request for easy access\n    req.validatedUserId = requestedUserId;\n    next();\n  } catch (error) {\n    console.error('User authorization middleware error:', error);\n    return res.status(500).json({ \n      message: 'Authorization system error',\n      code: 'AUTHZ_ERROR'\n    });\n  }\n}\n\n/**\n * Combined middleware for endpoints that need both authentication and user access control\n */\nexport function requireAuthenticatedUser(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  requireAuth(req, res, (err) => {\n    if (err) return next(err);\n    requireUserAccess(req, res, next);\n  });\n}\n\n/**\n * Optional authentication middleware - adds user data if token is valid, but doesn't require it\n */\nexport function optionalAuth(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  try {\n    const token = req.cookies?.authToken;\n    \n    if (token) {\n      const userData = verifyToken(token);\n      if (userData) {\n        req.user = userData;\n      }\n    }\n    \n    next();\n  } catch (error) {\n    console.error('Optional authentication error:', error);\n    next(); // Continue without authentication\n  }\n}\n\n// Extend Express Request interface\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: JWTPayload;\n      validatedUserId?: number;\n    }\n  }\n}","size_bytes":5002},"scripts/backfill-challenge-progress.ts":{"content":"#!/usr/bin/env tsx\n\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { neon } from '@neondatabase/serverless';\nimport { challengeDonations, weeklyChallenges, weeklyChallengeProgress, users } from '../shared/schema.js';\nimport { eq, and, sql } from 'drizzle-orm';\n\n// Create database connection\nconst connectionString = process.env.DATABASE_URL;\nif (!connectionString) {\n  throw new Error('DATABASE_URL environment variable is required');\n}\n\nconst db = drizzle(neon(connectionString));\n\n// Backfill challenge progress from existing donations\nasync function backfillChallengeProgress() {\n  console.log('🌸 Starting Challenge Progress Backfill...\\n');\n\n  try {\n    // Get active challenge\n    const activeChallenge = await db\n      .select()\n      .from(weeklyChallenges)\n      .where(eq(weeklyChallenges.isActive, true))\n      .limit(1);\n\n    if (activeChallenge.length === 0) {\n      console.log('❌ No active challenge found');\n      return;\n    }\n\n    const challenge = activeChallenge[0];\n    console.log(`🎯 Active Challenge: Week ${challenge.weekNumber} (ID: ${challenge.id})`);\n    console.log(`📝 Required Flowers: ${challenge.flowerId1}, ${challenge.flowerId2}, ${challenge.flowerId3}, ${challenge.flowerId4}, ${challenge.flowerId5}, ${challenge.flowerId6}\\n`);\n\n    // Get all donations for this challenge\n    const donations = await db\n      .select({\n        userId: challengeDonations.userId,\n        username: users.username,\n        flowerId: challengeDonations.flowerId,\n        quantity: challengeDonations.quantity,\n        donatedAt: challengeDonations.donatedAt\n      })\n      .from(challengeDonations)\n      .leftJoin(users, eq(challengeDonations.userId, users.id))\n      .where(eq(challengeDonations.challengeId, challenge.id))\n      .orderBy(challengeDonations.userId, challengeDonations.donatedAt);\n\n    console.log(`📊 Found ${donations.length} donations for challenge ${challenge.id}:\\n`);\n\n    // Required flower IDs set\n    const requiredFlowerIds = new Set([\n      challenge.flowerId1, challenge.flowerId2, challenge.flowerId3,\n      challenge.flowerId4, challenge.flowerId5, challenge.flowerId6\n    ]);\n\n    // Calculate progress for each user\n    const userProgress = new Map<number, {\n      userId: number;\n      username: string;\n      score: number;\n      totalDonations: number;\n      qualifyingFlowers: Set<number>;\n      firstCompletedAt: Date | null;\n    }>();\n\n    for (const donation of donations) {\n      if (!userProgress.has(donation.userId)) {\n        userProgress.set(donation.userId, {\n          userId: donation.userId,\n          username: donation.username || 'Unknown',\n          score: 0,\n          totalDonations: 0,\n          qualifyingFlowers: new Set(),\n          firstCompletedAt: null\n        });\n      }\n\n      const progress = userProgress.get(donation.userId)!;\n      progress.totalDonations += donation.quantity;\n\n      // Check if this flower qualifies\n      if (requiredFlowerIds.has(donation.flowerId)) {\n        const prevScore = progress.score;\n        progress.score += donation.quantity;\n        progress.qualifyingFlowers.add(donation.flowerId);\n\n        console.log(`✅ ${progress.username}: +${donation.quantity} qualifying donations (Flower ${donation.flowerId}) -> Score: ${progress.score}`);\n\n        // Check if completed first set (6 unique flowers)\n        if (progress.qualifyingFlowers.size === 6 && !progress.firstCompletedAt) {\n          progress.firstCompletedAt = donation.donatedAt;\n          console.log(`🎉 ${progress.username}: COMPLETED first set at ${donation.donatedAt}`);\n        }\n      } else {\n        console.log(`❌ ${progress.username}: Non-qualifying donation (Flower ${donation.flowerId})`);\n      }\n    }\n\n    console.log('\\n📈 Final Progress Summary:');\n    for (const [userId, progress] of userProgress) {\n      console.log(`${progress.username} (ID: ${userId}): Score ${progress.score}, Total Donations: ${progress.totalDonations}, Qualifying Flowers: ${Array.from(progress.qualifyingFlowers).join(', ')}, First Completed: ${progress.firstCompletedAt || 'Not completed'}`);\n    }\n\n    // Insert/Update progress in database\n    console.log('\\n💾 Updating database...');\n    for (const [userId, progress] of userProgress) {\n      await db\n        .insert(weeklyChallengeProgress)\n        .values({\n          userId: progress.userId,\n          challengeId: challenge.id,\n          score: progress.score,\n          setsCompleted: progress.qualifyingFlowers.size === 6 ? 1 : 0,\n          totalDonations: progress.totalDonations,\n          firstCompletedAt: progress.firstCompletedAt,\n          lastUpdatedAt: new Date(),\n          createdAt: new Date()\n        })\n        .onConflictDoUpdate({\n          target: [weeklyChallengeProgress.userId, weeklyChallengeProgress.challengeId],\n          set: {\n            score: progress.score,\n            setsCompleted: progress.qualifyingFlowers.size === 6 ? 1 : 0,\n            totalDonations: progress.totalDonations,\n            firstCompletedAt: progress.firstCompletedAt,\n            lastUpdatedAt: new Date()\n          }\n        });\n\n      console.log(`✅ Updated progress for ${progress.username}`);\n    }\n\n    // Check final leaderboard\n    console.log('\\n🏆 Final Leaderboard:');\n    const leaderboard = await db\n      .select({\n        userId: weeklyChallengeProgress.userId,\n        score: weeklyChallengeProgress.score,\n        firstCompletedAt: weeklyChallengeProgress.firstCompletedAt,\n        username: users.username\n      })\n      .from(weeklyChallengeProgress)\n      .leftJoin(users, eq(weeklyChallengeProgress.userId, users.id))\n      .where(eq(weeklyChallengeProgress.challengeId, challenge.id))\n      .orderBy(sql`score DESC, first_completed_at ASC`);\n\n    if (leaderboard.length === 0) {\n      console.log('❌ No qualifying entries found - leaderboard is empty');\n    } else {\n      leaderboard.forEach((entry, index) => {\n        console.log(`${index + 1}. ${entry.username}: ${entry.score} points ${entry.firstCompletedAt ? `(completed ${entry.firstCompletedAt})` : '(incomplete)'}`);\n      });\n    }\n\n    console.log('\\n🎉 Backfill completed successfully!');\n\n  } catch (error) {\n    console.error('❌ Error during backfill:', error);\n    throw error;\n  }\n}\n\n// Run the backfill\nbackfillChallengeProgress().catch(console.error);","size_bytes":6321},"client/src/components/LoginNotifications.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';\nimport { Button } from './ui/button';\nimport { Bell, X, Trophy, Gift, Star, Award } from 'lucide-react';\nimport { Badge } from './ui/badge';\nimport { ScrollArea } from './ui/scroll-area';\n\ninterface UserNotification {\n  id: number;\n  userId: number;\n  type: string;\n  title: string;\n  message: string;\n  isRead: boolean;\n  rewardType?: string;\n  rewardItemId?: number;\n  rewardItemName?: string;\n  rewardItemRarity?: string;\n  rewardAmount?: number;\n  challengeId?: number;\n  challengeRank?: number;\n  createdAt: string;\n  readAt?: string;\n}\n\ninterface LoginNotificationsProps {\n  userId: number;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst getNotificationIcon = (type: string, rewardType?: string) => {\n  if (type === 'challenge_reward') {\n    if (rewardType === 'vip_butterfly') return <Star className=\"w-6 h-6 text-yellow-500\" />;\n    if (rewardType === 'butterfly') return <Trophy className=\"w-6 h-6 text-purple-500\" />;\n    if (rewardType === 'credits') return <Gift className=\"w-6 h-6 text-green-500\" />;\n  }\n  return <Bell className=\"w-6 h-6 text-blue-500\" />;\n};\n\nconst getRarityColor = (rarity?: string) => {\n  switch (rarity?.toLowerCase()) {\n    case 'common': return 'bg-yellow-500';\n    case 'uncommon': return 'bg-green-500';\n    case 'rare': return 'bg-blue-500';\n    case 'super-rare': return 'bg-cyan-500';\n    case 'epic': return 'bg-purple-500';\n    case 'legendary': return 'bg-orange-500';\n    case 'mythical': return 'bg-red-500';\n    case 'vip': return 'bg-gradient-to-r from-yellow-400 to-orange-500';\n    default: return 'bg-gray-500';\n  }\n};\n\nexport function LoginNotifications({ userId, isOpen, onClose }: LoginNotificationsProps) {\n  const [notifications, setNotifications] = useState<UserNotification[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && userId) {\n      loadNotifications();\n    }\n  }, [isOpen, userId]);\n\n  const loadNotifications = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/user/${userId}/notifications`);\n      if (response.ok) {\n        const data = await response.json();\n        setNotifications(data.notifications || []);\n      }\n    } catch (error) {\n      console.error('Failed to load notifications:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const markAsRead = async (notificationId: number) => {\n    try {\n      const response = await fetch(`/api/user/${userId}/notifications/${notificationId}/read`, {\n        method: 'POST'\n      });\n      if (response.ok) {\n        setNotifications(prev => \n          prev.map(n => n.id === notificationId ? { ...n, isRead: true } : n)\n        );\n      }\n    } catch (error) {\n      console.error('Failed to mark notification as read:', error);\n    }\n  };\n\n  const markAllAsRead = async () => {\n    try {\n      const response = await fetch(`/api/user/${userId}/notifications/read-all`, {\n        method: 'POST'\n      });\n      if (response.ok) {\n        setNotifications(prev => prev.map(n => ({ ...n, isRead: true })));\n      }\n    } catch (error) {\n      console.error('Failed to mark all notifications as read:', error);\n    }\n  };\n\n  const handleClose = () => {\n    // Auto-mark all as read when closing\n    if (notifications.some(n => !n.isRead)) {\n      markAllAsRead();\n    }\n    onClose();\n  };\n\n  if (notifications.length === 0 && !isLoading) {\n    return null; // Don't show modal if no notifications\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md bg-gradient-to-br from-purple-50 to-pink-50 border-2 border-purple-200\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-purple-800\">\n            <Bell className=\"w-5 h-5\" />\n            Neue Nachrichten\n            {notifications.length > 0 && (\n              <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800\">\n                {notifications.length}\n              </Badge>\n            )}\n          </DialogTitle>\n        </DialogHeader>\n\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n          </div>\n        ) : (\n          <ScrollArea className=\"max-h-96 pr-4\">\n            <div className=\"space-y-4\">\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  className=\"p-4 bg-white rounded-lg border-l-4 border-purple-400 shadow-sm hover:shadow-md transition-shadow\"\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"flex-shrink-0 mt-1\">\n                      {getNotificationIcon(notification.type, notification.rewardType)}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h4 className=\"font-semibold text-gray-900 text-sm\">\n                          {notification.title}\n                        </h4>\n                        {notification.rewardItemRarity && (\n                          <Badge \n                            className={`text-xs text-white ${getRarityColor(notification.rewardItemRarity)}`}\n                          >\n                            {notification.rewardItemRarity}\n                          </Badge>\n                        )}\n                      </div>\n                      \n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        {notification.message}\n                      </p>\n                      \n                      {notification.challengeRank && (\n                        <div className=\"flex items-center gap-1 text-xs text-purple-600\">\n                          <Award className=\"w-3 h-3\" />\n                          Platz {notification.challengeRank} in der Weekly Challenge\n                        </div>\n                      )}\n                      \n                      <div className=\"text-xs text-gray-400 mt-2\">\n                        {new Date(notification.createdAt).toLocaleDateString('de-DE', {\n                          day: '2-digit',\n                          month: '2-digit', \n                          year: 'numeric',\n                          hour: '2-digit',\n                          minute: '2-digit'\n                        })}\n                      </div>\n                    </div>\n                    \n                    {!notification.isRead && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => markAsRead(notification.id)}\n                        className=\"text-xs text-purple-600 hover:text-purple-800\"\n                      >\n                        Als gelesen markieren\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </ScrollArea>\n        )}\n\n        <div className=\"flex justify-between items-center pt-4 border-t\">\n          {notifications.some(n => !n.isRead) && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={markAllAsRead}\n              className=\"text-purple-600 border-purple-300 hover:bg-purple-50\"\n            >\n              Alle als gelesen markieren\n            </Button>\n          )}\n          \n          <Button \n            onClick={handleClose}\n            className=\"bg-purple-600 hover:bg-purple-700 text-white ml-auto\"\n          >\n            Schließen\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7879},"scripts/start-prod.sh":{"content":"#!/bin/bash\nset -euo pipefail\n\n# Production startup script that uses environment variables from Replit Secrets\n# This bypasses the hardcoded credentials in package.json start script\n\necho \"🚀 Starting production server with environment variables...\"\necho \"NODE_ENV: ${NODE_ENV:-production}\"\n\n# Start the application using environment variables from Replit Secrets\nexec env NODE_ENV=production node dist/index.js","size_bytes":413}},"version":1}